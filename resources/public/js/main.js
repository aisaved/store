if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

/**
 * React v0.12.2
 */
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.React=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

"use strict";

var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var EventPluginUtils = _dereq_("./EventPluginUtils");
var ReactChildren = _dereq_("./ReactChildren");
var ReactComponent = _dereq_("./ReactComponent");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactDOM = _dereq_("./ReactDOM");
var ReactDOMComponent = _dereq_("./ReactDOMComponent");
var ReactDefaultInjection = _dereq_("./ReactDefaultInjection");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactMount = _dereq_("./ReactMount");
var ReactMultiChild = _dereq_("./ReactMultiChild");
var ReactPerf = _dereq_("./ReactPerf");
var ReactPropTypes = _dereq_("./ReactPropTypes");
var ReactServerRendering = _dereq_("./ReactServerRendering");
var ReactTextComponent = _dereq_("./ReactTextComponent");

var assign = _dereq_("./Object.assign");
var deprecated = _dereq_("./deprecated");
var onlyChild = _dereq_("./onlyChild");

ReactDefaultInjection.inject();

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;

if ("production" !== "development") {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
}

// TODO: Drop legacy elements once classes no longer export these factories
createElement = ReactLegacyElement.wrapCreateElement(
  createElement
);
createFactory = ReactLegacyElement.wrapCreateFactory(
  createFactory
);

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    only: onlyChild
  },
  DOM: ReactDOM,
  PropTypes: ReactPropTypes,
  initializeTouchEvents: function(shouldUseTouch) {
    EventPluginUtils.useTouchEvents = shouldUseTouch;
  },
  createClass: ReactCompositeComponent.createClass,
  createElement: createElement,
  createFactory: createFactory,
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
  render: render,
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  isValidClass: ReactLegacyElement.isValidClass,
  isValidElement: ReactElement.isValidElement,
  withContext: ReactContext.withContext,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign,

  // Deprecations (remove for 0.13)
  renderComponent: deprecated(
    'React',
    'renderComponent',
    'render',
    this,
    render
  ),
  renderComponentToString: deprecated(
    'React',
    'renderComponentToString',
    'renderToString',
    this,
    ReactServerRendering.renderToString
  ),
  renderComponentToStaticMarkup: deprecated(
    'React',
    'renderComponentToStaticMarkup',
    'renderToStaticMarkup',
    this,
    ReactServerRendering.renderToStaticMarkup
  ),
  isValidComponent: deprecated(
    'React',
    'isValidComponent',
    'isValidElement',
    this,
    ReactElement.isValidElement
  )
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    Component: ReactComponent,
    CurrentOwner: ReactCurrentOwner,
    DOMComponent: ReactDOMComponent,
    DOMPropertyOperations: DOMPropertyOperations,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    MultiChild: ReactMultiChild,
    TextComponent: ReactTextComponent
  });
}

if ("production" !== "development") {
  var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // If we're in Chrome, look for the devtools marker and provide a download
    // link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        console.debug(
          'Download the React DevTools for a better development experience: ' +
          'http://fb.me/react-devtools'
        );
      }
    }

    var expectedFeatures = [
      // shims
      Array.isArray,
      Array.prototype.every,
      Array.prototype.forEach,
      Array.prototype.indexOf,
      Array.prototype.map,
      Date.now,
      Function.prototype.bind,
      Object.keys,
      String.prototype.split,
      String.prototype.trim,

      // shams
      Object.create,
      Object.freeze
    ];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error(
          'One or more ES5 shim/shams expected by React are not available: ' +
          'http://fb.me/react-warning-polyfills'
        );
        break;
      }
    }
  }
}

// Version exists only in the open-source version of React, not in Facebook's
// internal version.
React.version = '0.12.2';

module.exports = React;

},{"./DOMPropertyOperations":12,"./EventPluginUtils":20,"./ExecutionEnvironment":22,"./Object.assign":27,"./ReactChildren":31,"./ReactComponent":32,"./ReactCompositeComponent":34,"./ReactContext":35,"./ReactCurrentOwner":36,"./ReactDOM":37,"./ReactDOMComponent":39,"./ReactDefaultInjection":49,"./ReactElement":52,"./ReactElementValidator":53,"./ReactInstanceHandles":60,"./ReactLegacyElement":61,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":68,"./ReactPropTypes":72,"./ReactServerRendering":76,"./ReactTextComponent":78,"./deprecated":106,"./onlyChild":137}],2:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusMixin
 * @typechecks static-only
 */

"use strict";

var focusNode = _dereq_("./focusNode");

var AutoFocusMixin = {
  componentDidMount: function() {
    if (this.props.autoFocus) {
      focusNode(this.getDOMNode());
    }
  }
};

module.exports = AutoFocusMixin;

},{"./focusNode":111}],3:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var SyntheticInputEvent = _dereq_("./SyntheticInputEvent");

var keyOf = _dereq_("./keyOf");

var canUseTextInputEvent = (
  ExecutionEnvironment.canUseDOM &&
  'TextEvent' in window &&
  !('documentMode' in document || isPresto())
);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return (
    typeof opera === 'object' &&
    typeof opera.version === 'function' &&
    parseInt(opera.version(), 10) <= 12
  );
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBeforeInput: null}),
      captured: keyOf({onBeforeInputCapture: null})
    },
    dependencies: [
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyPress,
      topLevelTypes.topTextInput,
      topLevelTypes.topPaste
    ]
  }
};

// Track characters inserted via keypress and composition events.
var fallbackChars = null;

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (
    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey)
  );
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var chars;

    if (canUseTextInputEvent) {
      switch (topLevelType) {
        case topLevelTypes.topKeyPress:
          /**
           * If native `textInput` events are available, our goal is to make
           * use of them. However, there is a special case: the spacebar key.
           * In Webkit, preventing default on a spacebar `textInput` event
           * cancels character insertion, but it *also* causes the browser
           * to fall back to its default spacebar behavior of scrolling the
           * page.
           *
           * Tracking at:
           * https://code.google.com/p/chromium/issues/detail?id=355103
           *
           * To avoid this issue, use the keypress event as if no `textInput`
           * event is available.
           */
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE) {
            return;
          }

          hasSpaceKeypress = true;
          chars = SPACEBAR_CHAR;
          break;

        case topLevelTypes.topTextInput:
          // Record the characters to be added to the DOM.
          chars = nativeEvent.data;

          // If it's a spacebar character, assume that we have already handled
          // it at the keypress level and bail immediately. Android Chrome
          // doesn't give us keycodes, so we need to blacklist it.
          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return;
          }

          // Otherwise, carry on.
          break;

        default:
          // For other native event types, do nothing.
          return;
      }
    } else {
      switch (topLevelType) {
        case topLevelTypes.topPaste:
          // If a paste event occurs after a keypress, throw out the input
          // chars. Paste events should not lead to BeforeInput events.
          fallbackChars = null;
          break;
        case topLevelTypes.topKeyPress:
          /**
           * As of v27, Firefox may fire keypress events even when no character
           * will be inserted. A few possibilities:
           *
           * - `which` is `0`. Arrow keys, Esc key, etc.
           *
           * - `which` is the pressed key code, but no char is available.
           *   Ex: 'AltGr + d` in Polish. There is no modified character for
           *   this key combination and no character is inserted into the
           *   document, but FF fires the keypress for char code `100` anyway.
           *   No `input` event will occur.
           *
           * - `which` is the pressed key code, but a command combination is
           *   being used. Ex: `Cmd+C`. No character is inserted, and no
           *   `input` event will occur.
           */
          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
            fallbackChars = String.fromCharCode(nativeEvent.which);
          }
          break;
        case topLevelTypes.topCompositionEnd:
          fallbackChars = nativeEvent.data;
          break;
      }

      // If no changes have occurred to the fallback string, no relevant
      // event has fired and we're done.
      if (fallbackChars === null) {
        return;
      }

      chars = fallbackChars;
    }

    // If no characters are being inserted, no BeforeInput event should
    // be fired.
    if (!chars) {
      return;
    }

    var event = SyntheticInputEvent.getPooled(
      eventTypes.beforeInput,
      topLevelTargetID,
      nativeEvent
    );

    event.data = chars;
    fallbackChars = null;
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }
};

module.exports = BeforeInputEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ExecutionEnvironment":22,"./SyntheticInputEvent":89,"./keyOf":133}],4:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

"use strict";

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexShrink: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  strokeOpacity: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop) {
  prefixes.forEach(function(prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundImage: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundColor: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

},{}],5:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

"use strict";

var CSSProperty = _dereq_("./CSSProperty");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var camelizeStyleName = _dereq_("./camelizeStyleName");
var dangerousStyleValue = _dereq_("./dangerousStyleValue");
var hyphenateStyleName = _dereq_("./hyphenateStyleName");
var memoizeStringOnly = _dereq_("./memoizeStringOnly");
var warning = _dereq_("./warning");

var processStyleName = memoizeStringOnly(function(styleName) {
  return hyphenateStyleName(styleName);
});

var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if ("production" !== "development") {
  var warnedStyleNames = {};

  var warnHyphenatedStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== "development" ? warning(
      false,
      'Unsupported style property ' + name + '. Did you mean ' +
      camelizeStyleName(name) + '?'
    ) : null);
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function(styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== "development") {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function(node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== "development") {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;

},{"./CSSProperty":4,"./ExecutionEnvironment":22,"./camelizeStyleName":100,"./dangerousStyleValue":105,"./hyphenateStyleName":124,"./memoizeStringOnly":135,"./warning":145}],6:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function(callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      ("production" !== "development" ? invariant(
        callbacks.length === contexts.length,
        "Mismatched list of contexts in callback queue"
      ) : invariant(callbacks.length === contexts.length));
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0, l = callbacks.length; i < l; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function() {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function() {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;

},{"./Object.assign":27,"./PooledClass":28,"./invariant":126}],7:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var ReactUpdates = _dereq_("./ReactUpdates");
var SyntheticEvent = _dereq_("./SyntheticEvent");

var isEventSupported = _dereq_("./isEventSupported");
var isTextInputElement = _dereq_("./isTextInputElement");
var keyOf = _dereq_("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({onChange: null}),
      captured: keyOf({onChangeCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topChange,
      topLevelTypes.topClick,
      topLevelTypes.topFocus,
      topLevelTypes.topInput,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  return (
    elem.nodeName === 'SELECT' ||
    (elem.nodeName === 'INPUT' && elem.type === 'file')
  );
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (
    !('documentMode' in document) || document.documentMode > 8
  );
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(
    eventTypes.change,
    activeElementID,
    nativeEvent
  );
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue();
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}


/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (
    !('documentMode' in document) || document.documentMode > 9
  );
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp =  {
  get: function() {
    return activeElementValueProp.get.call(this);
  },
  set: function(val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(
    target.constructor.prototype,
    'value'
  );

  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange ||
      topLevelType === topLevelTypes.topKeyUp ||
      topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}


/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return (
    elem.nodeName === 'INPUT' &&
    (elem.type === 'checkbox' || elem.type === 'radio')
  );
}

function getTargetIDForClickEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
      if (targetID) {
        var event = SyntheticEvent.getPooled(
          eventTypes.change,
          targetID,
          nativeEvent
        );
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
    }
  }

};

module.exports = ChangeEventPlugin;

},{"./EventConstants":16,"./EventPluginHub":18,"./EventPropagators":21,"./ExecutionEnvironment":22,"./ReactUpdates":79,"./SyntheticEvent":87,"./isEventSupported":127,"./isTextInputElement":129,"./keyOf":133}],8:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

"use strict";

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function() {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;

},{}],9:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CompositionEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var SyntheticCompositionEvent = _dereq_("./SyntheticCompositionEvent");

var getTextContentAccessor = _dereq_("./getTextContentAccessor");
var keyOf = _dereq_("./keyOf");

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var useCompositionEvent = (
  ExecutionEnvironment.canUseDOM &&
  'CompositionEvent' in window
);

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. In Korean, for example,
// the compositionend event contains only one character regardless of
// how many characters have been composed since compositionstart.
// We therefore use the fallback data while still using the native
// events as triggers.
var useFallbackData = (
  !useCompositionEvent ||
  (
    'documentMode' in document &&
    document.documentMode > 8 &&
    document.documentMode <= 11
  )
);

var topLevelTypes = EventConstants.topLevelTypes;
var currentComposition = null;

// Events and their corresponding property names.
var eventTypes = {
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionEnd: null}),
      captured: keyOf({onCompositionEndCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionStart: null}),
      captured: keyOf({onCompositionStartCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionStart,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionUpdate: null}),
      captured: keyOf({onCompositionUpdateCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionUpdate,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  }
};

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackStart(topLevelType, nativeEvent) {
  return (
    topLevelType === topLevelTypes.topKeyDown &&
    nativeEvent.keyCode === START_KEYCODE
  );
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return (nativeEvent.keyCode !== START_KEYCODE);
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Helper class stores information about selection and document state
 * so we can figure out what changed at a later date.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this.root = root;
  this.startSelection = ReactInputSelection.getSelection(root);
  this.startValue = this.getText();
}

/**
 * Get current text of input.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getText = function() {
  return this.root.value || this.root[getTextContentAccessor()];
};

/**
 * Text that has changed since the start of composition.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getData = function() {
  var endValue = this.getText();
  var prefixLength = this.startSelection.start;
  var suffixLength = this.startValue.length - this.startSelection.end;

  return endValue.substr(
    prefixLength,
    endValue.length - suffixLength - prefixLength
  );
};

/**
 * This plugin creates `onCompositionStart`, `onCompositionUpdate` and
 * `onCompositionEnd` events on inputs, textareas and contentEditable
 * nodes.
 */
var CompositionEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var eventType;
    var data;

    if (useCompositionEvent) {
      eventType = getCompositionEventType(topLevelType);
    } else if (!currentComposition) {
      if (isFallbackStart(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionStart;
      }
    } else if (isFallbackEnd(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionEnd;
    }

    if (useFallbackData) {
      // The current composition is stored statically and must not be
      // overwritten while composition continues.
      if (!currentComposition && eventType === eventTypes.compositionStart) {
        currentComposition = new FallbackCompositionState(topLevelTarget);
      } else if (eventType === eventTypes.compositionEnd) {
        if (currentComposition) {
          data = currentComposition.getData();
          currentComposition = null;
        }
      }
    }

    if (eventType) {
      var event = SyntheticCompositionEvent.getPooled(
        eventType,
        topLevelTargetID,
        nativeEvent
      );
      if (data) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = data;
      }
      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    }
  }
};

module.exports = CompositionEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ExecutionEnvironment":22,"./ReactInputSelection":59,"./SyntheticCompositionEvent":85,"./getTextContentAccessor":121,"./keyOf":133}],10:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

"use strict";

var Danger = _dereq_("./Danger");
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");

var getTextContentAccessor = _dereq_("./getTextContentAccessor");
var invariant = _dereq_("./invariant");

/**
 * The DOM property to use when setting text content.
 *
 * @type {string}
 * @private
 */
var textContentAccessor = getTextContentAccessor();

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.
  parentNode.insertBefore(
    childNode,
    parentNode.childNodes[index] || null
  );
}

var updateTextContent;
if (textContentAccessor === 'textContent') {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    node.textContent = text;
  };
} else {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    // In order to preserve newlines correctly, we can't use .innerText to set
    // the contents (see #1080), so we empty the element then append a text node
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
    if (text) {
      var doc = node.ownerDocument || document;
      node.appendChild(doc.createTextNode(text));
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: updateTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function(updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; update = updates[i]; i++) {
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        ("production" !== "development" ? invariant(
          updatedChild,
          'processUpdates(): Unable to find child %s of element. This ' +
          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
          'browser), usually due to forgetting a <tbody> when using tables, ' +
          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements '+
          'in an <svg> parent. Try inspecting the child nodes of the element ' +
          'with React ID `%s`.',
          updatedIndex,
          parentID
        ) : invariant(updatedChild));

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; update = updates[k]; k++) {
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(
            update.parentNode,
            renderedMarkup[update.markupIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(
            update.parentNode,
            initialChildren[update.parentID][update.fromIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          updateTextContent(
            update.parentNode,
            update.textContent
          );
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;

},{"./Danger":13,"./ReactMultiChildUpdateTypes":65,"./getTextContentAccessor":121,"./invariant":126}],11:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

/*jslint bitwise: true */

"use strict";

var invariant = _dereq_("./invariant");

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function(domPropertyConfig) {
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(
        domPropertyConfig.isCustomAttribute
      );
    }

    for (var propName in Properties) {
      ("production" !== "development" ? invariant(
        !DOMProperty.isStandardName.hasOwnProperty(propName),
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
        '\'%s\' which has already been injected. You may be accidentally ' +
        'injecting the same DOM property config twice, or you may be ' +
        'injecting two configs that have conflicting property names.',
        propName
      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

      DOMProperty.isStandardName[propName] = true;

      var lowerCased = propName.toLowerCase();
      DOMProperty.getPossibleStandardName[lowerCased] = propName;

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        DOMProperty.getPossibleStandardName[attributeName] = propName;
        DOMProperty.getAttributeName[propName] = attributeName;
      } else {
        DOMProperty.getAttributeName[propName] = lowerCased;
      }

      DOMProperty.getPropertyName[propName] =
        DOMPropertyNames.hasOwnProperty(propName) ?
          DOMPropertyNames[propName] :
          propName;

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
      } else {
        DOMProperty.getMutationMethod[propName] = null;
      }

      var propConfig = Properties[propName];
      DOMProperty.mustUseAttribute[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
      DOMProperty.mustUseProperty[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
      DOMProperty.hasSideEffects[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
      DOMProperty.hasBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
      DOMProperty.hasNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
      DOMProperty.hasPositiveNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
      DOMProperty.hasOverloadedBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

      ("production" !== "development" ? invariant(
        !DOMProperty.mustUseAttribute[propName] ||
          !DOMProperty.mustUseProperty[propName],
        'DOMProperty: Cannot require using both attribute and property: %s',
        propName
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
        !DOMProperty.mustUseProperty[propName]));
      ("production" !== "development" ? invariant(
        DOMProperty.mustUseProperty[propName] ||
          !DOMProperty.hasSideEffects[propName],
        'DOMProperty: Properties that have side effects must use property: %s',
        propName
      ) : invariant(DOMProperty.mustUseProperty[propName] ||
        !DOMProperty.hasSideEffects[propName]));
      ("production" !== "development" ? invariant(
        !!DOMProperty.hasBooleanValue[propName] +
          !!DOMProperty.hasNumericValue[propName] +
          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
        'numeric value, but not a combination: %s',
        propName
      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
        !!DOMProperty.hasNumericValue[propName] +
        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Checks whether a property name is a standard property.
   * @type {Object}
   */
  isStandardName: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties.
   * @type {Object}
   */
  getPossibleStandardName: {},

  /**
   * Mapping from normalized names to attribute names that differ. Attribute
   * names are used when rendering markup or with `*Attribute()`.
   * @type {Object}
   */
  getAttributeName: {},

  /**
   * Mapping from normalized names to properties on DOM node instances.
   * (This includes properties that mutate due to external factors.)
   * @type {Object}
   */
  getPropertyName: {},

  /**
   * Mapping from normalized names to mutation methods. This will only exist if
   * mutation cannot be set simply by the property or `setAttribute()`.
   * @type {Object}
   */
  getMutationMethod: {},

  /**
   * Whether the property must be accessed and mutated as an object property.
   * @type {Object}
   */
  mustUseAttribute: {},

  /**
   * Whether the property must be accessed and mutated using `*Attribute()`.
   * (This includes anything that fails `<propName> in <element>`.)
   * @type {Object}
   */
  mustUseProperty: {},

  /**
   * Whether or not setting a value causes side effects such as triggering
   * resources to be loaded or text selection changes. We must ensure that
   * the value is only set if it has changed.
   * @type {Object}
   */
  hasSideEffects: {},

  /**
   * Whether the property should be removed when set to a falsey value.
   * @type {Object}
   */
  hasBooleanValue: {},

  /**
   * Whether the property must be numeric or parse as a
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasNumericValue: {},

  /**
   * Whether the property must be positive numeric or parse as a positive
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasPositiveNumericValue: {},

  /**
   * Whether the property can be used as a flag as well as with a value. Removed
   * when strictly equal to false; present without a value when strictly equal
   * to true; present with a value otherwise.
   * @type {Object}
   */
  hasOverloadedBooleanValue: {},

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function(attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function(nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

},{"./invariant":126}],12:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");

var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
var memoizeStringOnly = _dereq_("./memoizeStringOnly");
var warning = _dereq_("./warning");

function shouldIgnoreValue(name, value) {
  return value == null ||
    (DOMProperty.hasBooleanValue[name] && !value) ||
    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
}

var processAttributeNameAndPrefix = memoizeStringOnly(function(name) {
  return escapeTextForBrowser(name) + '="';
});

if ("production" !== "development") {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function(name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = (
      DOMProperty.isCustomAttribute(lowerCasedName) ?
        lowerCasedName :
      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
        DOMProperty.getPossibleStandardName[lowerCasedName] :
        null
    );

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    ("production" !== "development" ? warning(
      standardName == null,
      'Unknown DOM property ' + name + '. Did you mean ' + standardName + '?'
    ) : null);

  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function(id) {
    return processAttributeNameAndPrefix(DOMProperty.ID_ATTRIBUTE_NAME) +
      escapeTextForBrowser(id) + '"';
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function(name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      if (shouldIgnoreValue(name, value)) {
        return '';
      }
      var attributeName = DOMProperty.getAttributeName[name];
      if (DOMProperty.hasBooleanValue[name] ||
          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
        return escapeTextForBrowser(attributeName);
      }
      return processAttributeNameAndPrefix(attributeName) +
        escapeTextForBrowser(value) + '"';
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return processAttributeNameAndPrefix(name) +
        escapeTextForBrowser(value) + '"';
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function(node, name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(name, value)) {
        this.deleteValueForProperty(node, name);
      } else if (DOMProperty.mustUseAttribute[name]) {
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== ('' + value)) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        node.removeAttribute(name);
      } else {
        node.setAttribute(name, '' + value);
      }
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function(node, name) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.removeAttribute(DOMProperty.getAttributeName[name]);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        var defaultValue = DOMProperty.getDefaultValueForProperty(
          node.nodeName,
          propName
        );
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  }

};

module.exports = DOMPropertyOperations;

},{"./DOMProperty":11,"./escapeTextForBrowser":109,"./memoizeStringOnly":135,"./warning":145}],13:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

/*jslint evil: true, sub: true */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var createNodesFromMarkup = _dereq_("./createNodesFromMarkup");
var emptyFunction = _dereq_("./emptyFunction");
var getMarkupWrap = _dereq_("./getMarkupWrap");
var invariant = _dereq_("./invariant");

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function(markupList) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
      'thread. Make sure `window` and `document` are available globally ' +
      'before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      ("production" !== "development" ? invariant(
        markupList[i],
        'dangerouslyRenderMarkup(...): Missing markup.'
      ) : invariant(markupList[i]));
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      for (var resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(
            OPEN_TAG_NAME_EXP,
            // This index will be parsed back out below.
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
          );
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(
        markupListByNodeName.join(''),
        emptyFunction // Do nothing special with <script> tags.
      );

      for (i = 0; i < renderNodes.length; ++i) {
        var renderNode = renderNodes[i];
        if (renderNode.hasAttribute &&
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          ("production" !== "development" ? invariant(
            !resultList.hasOwnProperty(resultIndex),
            'Danger: Assigning to an already-occupied result index.'
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;

        } else if ("production" !== "development") {
          console.error(
            "Danger: Discarding unexpected node:",
            renderNode
          );
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    ("production" !== "development" ? invariant(
      resultListAssignmentCount === resultList.length,
      'Danger: Did not assign to every index of resultList.'
    ) : invariant(resultListAssignmentCount === resultList.length));

    ("production" !== "development" ? invariant(
      resultList.length === markupList.length,
      'Danger: Expected markup to render %s nodes, but rendered %s.',
      markupList.length,
      resultList.length
    ) : invariant(resultList.length === markupList.length));

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
      'worker thread. Make sure `window` and `document` are available ' +
      'globally before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    ("production" !== "development" ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    ("production" !== "development" ? invariant(
      oldChild.tagName.toLowerCase() !== 'html',
      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
      '<html> node. This is because browser quirks make this unreliable ' +
      'and/or slow. If you want to render to the root you must use ' +
      'server rendering. See renderComponentToString().'
    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;

},{"./ExecutionEnvironment":22,"./createNodesFromMarkup":104,"./emptyFunction":107,"./getMarkupWrap":118,"./invariant":126}],14:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

"use strict";

 var keyOf = _dereq_("./keyOf");

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [
  keyOf({ResponderEventPlugin: null}),
  keyOf({SimpleEventPlugin: null}),
  keyOf({TapEventPlugin: null}),
  keyOf({EnterLeaveEventPlugin: null}),
  keyOf({ChangeEventPlugin: null}),
  keyOf({SelectEventPlugin: null}),
  keyOf({CompositionEventPlugin: null}),
  keyOf({BeforeInputEventPlugin: null}),
  keyOf({AnalyticsEventPlugin: null}),
  keyOf({MobileSafariClickEventPlugin: null})
];

module.exports = DefaultEventPluginOrder;

},{"./keyOf":133}],15:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

var ReactMount = _dereq_("./ReactMount");
var keyOf = _dereq_("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({onMouseEnter: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  },
  mouseLeave: {
    registrationName: keyOf({onMouseLeave: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topMouseOver &&
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut &&
        topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from, to;
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      to =
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
        win;
    } else {
      from = win;
      to = topLevelTarget;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromID = from ? ReactMount.getID(from) : '';
    var toID = to ? ReactMount.getID(to) : '';

    var leave = SyntheticMouseEvent.getPooled(
      eventTypes.mouseLeave,
      fromID,
      nativeEvent
    );
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(
      eventTypes.mouseEnter,
      toID,
      nativeEvent
    );
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ReactMount":63,"./SyntheticMouseEvent":91,"./keyOf":133}],16:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

var PropagationPhases = keyMirror({bubbled: null, captured: null});

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topBlur: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topReset: null,
  topScroll: null,
  topSelectionChange: null,
  topSubmit: null,
  topTextInput: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;

},{"./keyMirror":132}],17:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

var emptyFunction = _dereq_("./emptyFunction");

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function(target, eventType, callback) {
    if (!target.addEventListener) {
      if ("production" !== "development") {
        console.error(
          'Attempted to listen to events during the capture phase on a ' +
          'browser that does not support the capture phase. Your application ' +
          'will not receive some events.'
        );
      }
      return {
        remove: emptyFunction
      };
    } else {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    }
  },

  registerDefault: function() {}
};

module.exports = EventListener;

},{"./emptyFunction":107}],18:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

"use strict";

var EventPluginRegistry = _dereq_("./EventPluginRegistry");
var EventPluginUtils = _dereq_("./EventPluginUtils");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");
var invariant = _dereq_("./invariant");

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */
var executeDispatchesAndRelease = function(event) {
  if (event) {
    var executeDispatch = EventPluginUtils.executeDispatch;
    // Plugins can provide custom behavior when dispatching events.
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
    if (PluginModule && PluginModule.executeDispatch) {
      executeDispatch = PluginModule.executeDispatch;
    }
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var invalid = !InstanceHandle||
    !InstanceHandle.traverseTwoPhase ||
    !InstanceHandle.traverseEnterLeave;
  if (invalid) {
    throw new Error('InstanceHandle not injected before use!');
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function(InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if ("production" !== "development") {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function() {
      if ("production" !== "development") {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function(id, registrationName, listener) {
    ("production" !== "development" ? invariant(
      !listener || typeof listener === 'function',
      'Expected %s listener to be a function, instead got type %s',
      registrationName, typeof listener
    ) : invariant(!listener || typeof listener === 'function'));

    var bankForRegistrationName =
      listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function(id) {
    for (var registrationName in listenerBank) {
      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0, l = plugins.length; i < l; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        );
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function(events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function() {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
    ("production" !== "development" ? invariant(
      !eventQueue,
      'processEventQueue(): Additional events were enqueued while processing ' +
      'an event queue. Support for this has not yet been implemented.'
    ) : invariant(!eventQueue));
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function() {
    listenerBank = {};
  },

  __getListenerBank: function() {
    return listenerBank;
  }

};

module.exports = EventPluginHub;

},{"./EventPluginRegistry":19,"./EventPluginUtils":20,"./accumulateInto":97,"./forEachAccumulated":112,"./invariant":126}],19:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    ("production" !== "development" ? invariant(
      pluginIndex > -1,
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
      'the plugin ordering, `%s`.',
      pluginName
    ) : invariant(pluginIndex > -1));
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    ("production" !== "development" ? invariant(
      PluginModule.extractEvents,
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
      'method, but `%s` does not.',
      pluginName
    ) : invariant(PluginModule.extractEvents));
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      ("production" !== "development" ? invariant(
        publishEventForPlugin(
          publishedEvents[eventName],
          PluginModule,
          eventName
        ),
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
        eventName,
        pluginName
      ) : invariant(publishEventForPlugin(
        publishedEvents[eventName],
        PluginModule,
        eventName
      )));
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'event name, `%s`.',
    eventName
  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(
          phasedRegistrationName,
          PluginModule,
          eventName
        );
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(
      dispatchConfig.registrationName,
      PluginModule,
      eventName
    );
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.registrationNameModules[registrationName],
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'registration name, `%s`.',
    registrationName
  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] =
    PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function(InjectedEventPluginOrder) {
    ("production" !== "development" ? invariant(
      !EventPluginOrder,
      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
      'once. You are likely trying to load more than one copy of React.'
    ) : invariant(!EventPluginOrder));
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) ||
          namesToPlugins[pluginName] !== PluginModule) {
        ("production" !== "development" ? invariant(
          !namesToPlugins[pluginName],
          'EventPluginRegistry: Cannot inject two different event plugins ' +
          'using the same name, `%s`.',
          pluginName
        ) : invariant(!namesToPlugins[pluginName]));
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[
        dispatchConfig.registrationName
      ] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[
        dispatchConfig.phasedRegistrationNames[phase]
      ];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function() {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;

},{"./invariant":126}],20:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");

var invariant = _dereq_("./invariant");

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function(InjectedMount) {
    injection.Mount = InjectedMount;
    if ("production" !== "development") {
      ("production" !== "development" ? invariant(
        InjectedMount && InjectedMount.getNode,
        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
        'is missing getNode.'
      ) : invariant(InjectedMount && InjectedMount.getNode));
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp ||
         topLevelType === topLevelTypes.topTouchEnd ||
         topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove ||
         topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown ||
         topLevelType === topLevelTypes.topTouchStart;
}


var validateEventDispatches;
if ("production" !== "development") {
  validateEventDispatches = function(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ?
      dispatchListeners.length :
      dispatchListeners ? 1 : 0;

    ("production" !== "development" ? invariant(
      idsIsArr === listenersIsArr && IDsLen === listenersLen,
      'EventPluginUtils: Invalid `event`.'
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
  };
}

/**
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
 * kept separate to conserve memory.
 */
function forEachEventDispatch(event, cb) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      cb(event, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    cb(event, dispatchListeners, dispatchIDs);
  }
}

/**
 * Default implementation of PluginModule.executeDispatch().
 * @param {SyntheticEvent} SyntheticEvent to handle
 * @param {function} Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, listener, domID) {
  event.currentTarget = injection.Mount.getNode(domID);
  var returnValue = listener(event, domID);
  event.currentTarget = null;
  return returnValue;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, executeDispatch) {
  forEachEventDispatch(event, executeDispatch);
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return id of the first dispatch execution who's listener returns true, or
 * null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  ("production" !== "development" ? invariant(
    !Array.isArray(dispatchListener),
    'executeDirectDispatch(...): Invalid `event`.'
  ) : invariant(!Array.isArray(dispatchListener)));
  var res = dispatchListener ?
    dispatchListener(event, dispatchID) :
    null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {bool} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatch: executeDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,
  injection: injection,
  useTouchEvents: false
};

module.exports = EventPluginUtils;

},{"./EventConstants":16,"./invariant":126}],21:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName =
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if ("production" !== "development") {
    if (!domID) {
      throw new Error('Dispatching id must not be null');
    }
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners =
      accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We can not perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
      event.dispatchMarker,
      accumulateDirectionalDispatches,
      event
    );
  }
}


/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners =
        accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
    fromID,
    toID,
    accumulateDispatches,
    leave,
    enter
  );
}


function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}



/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

},{"./EventConstants":16,"./EventPluginHub":18,"./accumulateInto":97,"./forEachAccumulated":112}],22:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */

"use strict";

var canUseDOM = !!(
  typeof window !== 'undefined' &&
  window.document &&
  window.document.createElement
);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners:
    canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

},{}],23:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE =
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE =
  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = (
    implementation &&
    implementation.hasFeature &&
    implementation.hasFeature(
      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
      '1.1'
    )
  );
}


var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
  ),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusMixin
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    noValidate: HAS_BOOLEAN_VALUE,
    open: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    autoCapitalize: null, // Supported in Mobile Safari for keyboard hints
    autoCorrect: null, // Supported in Mobile Safari for keyboard hints
    itemProp: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE, // Microdata: http://schema.org/docs/gs.html
    itemType: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    property: null // Supports OG in meta tags
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    encType: 'enctype',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;

},{"./DOMProperty":11,"./ExecutionEnvironment":22}],24:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

"use strict";

var ReactPropTypes = _dereq_("./ReactPropTypes");

var invariant = _dereq_("./invariant");

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(input) {
  ("production" !== "development" ? invariant(
    input.props.checkedLink == null || input.props.valueLink == null,
    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
}
function _assertValueLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.value == null && input.props.onChange == null,
    'Cannot provide a valueLink and a value or onChange event. If you want ' +
    'to use value or onChange, you probably don\'t want to use valueLink.'
  ) : invariant(input.props.value == null && input.props.onChange == null));
}

function _assertCheckedLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.checked == null && input.props.onChange == null,
    'Cannot provide a checkedLink and a checked property or onChange event. ' +
    'If you want to use checked or onChange, you probably don\'t want to ' +
    'use checkedLink'
  ) : invariant(input.props.checked == null && input.props.onChange == null));
}

/**
 * @param {SyntheticEvent} e change event to handle
 */
function _handleLinkedValueChange(e) {
  /*jshint validthis:true */
  this.props.valueLink.requestChange(e.target.value);
}

/**
  * @param {SyntheticEvent} e change event to handle
  */
function _handleLinkedCheckChange(e) {
  /*jshint validthis:true */
  this.props.checkedLink.requestChange(e.target.checked);
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  Mixin: {
    propTypes: {
      value: function(props, propName, componentName) {
        if (!props[propName] ||
            hasReadOnlyValue[props.type] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `value` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultValue`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      checked: function(props, propName, componentName) {
        if (!props[propName] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `checked` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultChecked`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      onChange: ReactPropTypes.func
    }
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return input.props.valueLink.value;
    }
    return input.props.value;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function(input) {
    if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return input.props.checkedLink.value;
    }
    return input.props.checked;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {function} change callback either from onChange prop or link.
   */
  getOnChange: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return _handleLinkedValueChange;
    } else if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return _handleLinkedCheckChange;
    }
    return input.props.onChange;
  }
};

module.exports = LinkedValueUtils;

},{"./ReactPropTypes":72,"./invariant":126}],25:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LocalEventTrapMixin
 */

"use strict";

var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");
var invariant = _dereq_("./invariant");

function remove(event) {
  event.remove();
}

var LocalEventTrapMixin = {
  trapBubbledEvent:function(topLevelType, handlerBaseName) {
    ("production" !== "development" ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      this.getDOMNode()
    );
    this._localEventListeners =
      accumulateInto(this._localEventListeners, listener);
  },

  // trapCapturedEvent would look nearly identical. We don't implement that
  // method because it isn't currently needed.

  componentWillUnmount:function() {
    if (this._localEventListeners) {
      forEachAccumulated(this._localEventListeners, remove);
    }
  }
};

module.exports = LocalEventTrapMixin;

},{"./ReactBrowserEventEmitter":30,"./accumulateInto":97,"./forEachAccumulated":112,"./invariant":126}],26:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule MobileSafariClickEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");

var emptyFunction = _dereq_("./emptyFunction");

var topLevelTypes = EventConstants.topLevelTypes;

/**
 * Mobile Safari does not fire properly bubble click events on non-interactive
 * elements, which means delegated click listeners do not fire. The workaround
 * for this bug involves attaching an empty click listener on the target node.
 *
 * This particular plugin works around the bug by attaching an empty click
 * listener on `touchstart` (which does fire on every element).
 */
var MobileSafariClickEventPlugin = {

  eventTypes: null,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topTouchStart) {
      var target = nativeEvent.target;
      if (target && !target.onclick) {
        target.onclick = emptyFunction;
      }
    }
  }

};

module.exports = MobileSafariClickEventPlugin;

},{"./EventConstants":16,"./emptyFunction":107}],27:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
};

module.exports = assign;

},{}],28:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function(instance) {
  var Klass = this;
  ("production" !== "development" ? invariant(
    instance instanceof Klass,
    'Trying to release an instance into a pool of a different type.'
  ) : invariant(instance instanceof Klass));
  if (instance.destructor) {
    instance.destructor();
  }
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;

},{"./invariant":126}],29:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

"use strict";

var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactMount = _dereq_("./ReactMount");

var invariant = _dereq_("./invariant");

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function() {
    ("production" !== "development" ? invariant(
      this.isMounted(),
      'getDOMNode(): A component must be mounted to have a DOM node.'
    ) : invariant(this.isMounted()));
    if (ReactEmptyComponent.isNullComponentID(this._rootNodeID)) {
      return null;
    }
    return ReactMount.getNode(this._rootNodeID);
  }
};

module.exports = ReactBrowserComponentMixin;

},{"./ReactEmptyComponent":54,"./ReactMount":63,"./invariant":126}],30:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");
var EventPluginRegistry = _dereq_("./EventPluginRegistry");
var ReactEventEmitterMixin = _dereq_("./ReactEventEmitterMixin");
var ViewportMetrics = _dereq_("./ViewportMetrics");

var assign = _dereq_("./Object.assign");
var isEventSupported = _dereq_("./isEventSupported");

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topBlur: 'blur',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topScroll: 'scroll',
  topSelectionChange: 'selectionchange',
  topTextInput: 'textInput',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = "_reactListenersID" + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function(ReactEventListener) {
      ReactEventListener.setHandleTopLevel(
        ReactBrowserEventEmitter.handleTopLevel
      );
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function(enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function() {
    return !!(
      ReactBrowserEventEmitter.ReactEventListener &&
      ReactBrowserEventEmitter.ReactEventListener.isEnabled()
    );
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function(registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.
      registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0, l = dependencies.length; i < l; i++) {
      var dependency = dependencies[i];
      if (!(
            isListening.hasOwnProperty(dependency) &&
            isListening[dependency]
          )) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'wheel',
              mountAt
            );
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'mousewheel',
              mountAt
            );
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'DOMMouseScroll',
              mountAt
            );
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topScroll,
              'scroll',
              mountAt
            );
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topScroll,
              'scroll',
              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
            );
          }
        } else if (dependency === topLevelTypes.topFocus ||
            dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topFocus,
              'focus',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topBlur,
              'blur',
              mountAt
            );
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topFocus,
              'focusin',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topBlur,
              'focusout',
              mountAt
            );
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            dependency,
            topEventMapping[dependency],
            mountAt
          );
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function(){
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

module.exports = ReactBrowserEventEmitter;

},{"./EventConstants":16,"./EventPluginHub":18,"./EventPluginRegistry":19,"./Object.assign":27,"./ReactEventEmitterMixin":56,"./ViewportMetrics":96,"./isEventSupported":127}],31:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var traverseAllChildren = _dereq_("./traverseAllChildren");
var warning = _dereq_("./warning");

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var threeArgumentPooler = PooledClass.threeArgumentPooler;

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.forEachFunction = forEachFunction;
  this.forEachContext = forEachContext;
}
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(traverseContext, child, name, i) {
  var forEachBookKeeping = traverseContext;
  forEachBookKeeping.forEachFunction.call(
    forEachBookKeeping.forEachContext, child, i);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc.
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext =
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, mapFunction, mapContext) {
  this.mapResult = mapResult;
  this.mapFunction = mapFunction;
  this.mapContext = mapContext;
}
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

function mapSingleChildIntoContext(traverseContext, child, name, i) {
  var mapBookKeeping = traverseContext;
  var mapResult = mapBookKeeping.mapResult;

  var keyUnique = !mapResult.hasOwnProperty(name);
  ("production" !== "development" ? warning(
    keyUnique,
    'ReactChildren.map(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);

  if (keyUnique) {
    var mappedChild =
      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
    mapResult[name] = mappedChild;
  }
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * TODO: This may likely break any calls to `ReactChildren.map` that were
 * previously relying on the fact that we guarded against null children.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} mapFunction.
 * @param {*} mapContext Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var mapResult = {};
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
  return mapResult;
}

function forEachSingleChildDummy(traverseContext, child, name, i) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  count: countChildren
};

module.exports = ReactChildren;

},{"./PooledClass":28,"./traverseAllChildren":144,"./warning":145}],32:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactOwner = _dereq_("./ReactOwner");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");
var keyMirror = _dereq_("./keyMirror");

/**
 * Every React component is in one of these life cycles.
 */
var ComponentLifeCycle = keyMirror({
  /**
   * Mounted components have a DOM node representation and are capable of
   * receiving new props.
   */
  MOUNTED: null,
  /**
   * Unmounted components are inactive and cannot receive new props.
   */
  UNMOUNTED: null
});

var injected = false;

/**
 * Optionally injectable environment dependent cleanup hook. (server vs.
 * browser etc). Example: A browser system caches DOM nodes based on component
 * ID and must remove that cache entry when this instance is unmounted.
 *
 * @private
 */
var unmountIDFromEnvironment = null;

/**
 * The "image" of a component tree, is the platform specific (typically
 * serialized) data that represents a tree of lower level UI building blocks.
 * On the web, this "image" is HTML markup which describes a construction of
 * low level `div` and `span` nodes. Other platforms may have different
 * encoding of this "image". This must be injected.
 *
 * @private
 */
var mountImageIntoNode = null;

/**
 * Components are the basic units of composition in React.
 *
 * Every component accepts a set of keyed input parameters known as "props" that
 * are initialized by the constructor. Once a component is mounted, the props
 * can be mutated using `setProps` or `replaceProps`.
 *
 * Every component is capable of the following operations:
 *
 *   `mountComponent`
 *     Initializes the component, renders markup, and registers event listeners.
 *
 *   `receiveComponent`
 *     Updates the rendered DOM nodes to match the given component.
 *
 *   `unmountComponent`
 *     Releases any resources allocated by this component.
 *
 * Components can also be "owned" by other components. Being owned by another
 * component means being constructed by that component. This is different from
 * being the child of a component, which means having a DOM representation that
 * is a child of the DOM representation of that component.
 *
 * @class ReactComponent
 */
var ReactComponent = {

  injection: {
    injectEnvironment: function(ReactComponentEnvironment) {
      ("production" !== "development" ? invariant(
        !injected,
        'ReactComponent: injectEnvironment() can only be called once.'
      ) : invariant(!injected));
      mountImageIntoNode = ReactComponentEnvironment.mountImageIntoNode;
      unmountIDFromEnvironment =
        ReactComponentEnvironment.unmountIDFromEnvironment;
      ReactComponent.BackendIDOperations =
        ReactComponentEnvironment.BackendIDOperations;
      injected = true;
    }
  },

  /**
   * @internal
   */
  LifeCycle: ComponentLifeCycle,

  /**
   * Injected module that provides ability to mutate individual properties.
   * Injected into the base class because many different subclasses need access
   * to this.
   *
   * @internal
   */
  BackendIDOperations: null,

  /**
   * Base functionality for every ReactComponent constructor. Mixed into the
   * `ReactComponent` prototype, but exposed statically for easy access.
   *
   * @lends {ReactComponent.prototype}
   */
  Mixin: {

    /**
     * Checks whether or not this component is mounted.
     *
     * @return {boolean} True if mounted, false otherwise.
     * @final
     * @protected
     */
    isMounted: function() {
      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;
    },

    /**
     * Sets a subset of the props.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    setProps: function(partialProps, callback) {
      // Merge with the pending element if it exists, otherwise with existing
      // element props.
      var element = this._pendingElement || this._currentElement;
      this.replaceProps(
        assign({}, element.props, partialProps),
        callback
      );
    },

    /**
     * Replaces all of the props.
     *
     * @param {object} props New props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    replaceProps: function(props, callback) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'replaceProps(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      ("production" !== "development" ? invariant(
        this._mountDepth === 0,
        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +
        'component with a parent. This is an anti-pattern since props will ' +
        'get reactively updated when rendered. Instead, change the owner\'s ' +
        '`render` method to pass the correct value as props to the component ' +
        'where it is created.'
      ) : invariant(this._mountDepth === 0));
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        this._pendingElement || this._currentElement,
        props
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Schedule a partial update to the props. Only used for internal testing.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @internal
     */
    _setPropsInternal: function(partialProps, callback) {
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      var element = this._pendingElement || this._currentElement;
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        element,
        assign({}, element.props, partialProps)
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Base constructor for all React components.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.construct.call(this, ...)`.
     *
     * @param {ReactElement} element
     * @internal
     */
    construct: function(element) {
      // This is the public exposed props object after it has been processed
      // with default props. The element's props represents the true internal
      // state of the props.
      this.props = element.props;
      // Record the component responsible for creating this component.
      // This is accessible through the element but we maintain an extra
      // field for compatibility with devtools and as a way to make an
      // incremental update. TODO: Consider deprecating this field.
      this._owner = element._owner;

      // All components start unmounted.
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;

      // See ReactUpdates.
      this._pendingCallbacks = null;

      // We keep the old element and a reference to the pending element
      // to track updates.
      this._currentElement = element;
      this._pendingElement = null;
    },

    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * NOTE: This does not insert any nodes into the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {number} mountDepth number of components in the owner hierarchy.
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @internal
     */
    mountComponent: function(rootID, transaction, mountDepth) {
      ("production" !== "development" ? invariant(
        !this.isMounted(),
        'mountComponent(%s, ...): Can only mount an unmounted component. ' +
        'Make sure to avoid storing components between renders or reusing a ' +
        'single component instance in multiple places.',
        rootID
      ) : invariant(!this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        var owner = this._currentElement._owner;
        ReactOwner.addComponentAsRefTo(this, ref, owner);
      }
      this._rootNodeID = rootID;
      this._lifeCycleState = ComponentLifeCycle.MOUNTED;
      this._mountDepth = mountDepth;
      // Effectively: return '';
    },

    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * NOTE: This does not remove any nodes from the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.unmountComponent.call(this)`.
     *
     * @internal
     */
    unmountComponent: function() {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'unmountComponent(): Can only unmount a mounted component.'
      ) : invariant(this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        ReactOwner.removeComponentAsRefFrom(this, ref, this._owner);
      }
      unmountIDFromEnvironment(this._rootNodeID);
      this._rootNodeID = null;
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;
    },

    /**
     * Given a new instance of this component, updates the rendered DOM nodes
     * as if that instance was rendered instead.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.
     *
     * @param {object} nextComponent Next set of properties.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    receiveComponent: function(nextElement, transaction) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'receiveComponent(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      this._pendingElement = nextElement;
      this.performUpdateIfNecessary(transaction);
    },

    /**
     * If `_pendingElement` is set, update the component.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function(transaction) {
      if (this._pendingElement == null) {
        return;
      }
      var prevElement = this._currentElement;
      var nextElement = this._pendingElement;
      this._currentElement = nextElement;
      this.props = nextElement.props;
      this._owner = nextElement._owner;
      this._pendingElement = null;
      this.updateComponent(transaction, prevElement);
    },

    /**
     * Updates the component's currently mounted representation.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {object} prevElement
     * @internal
     */
    updateComponent: function(transaction, prevElement) {
      var nextElement = this._currentElement;

      // If either the owner or a `ref` has changed, make sure the newest owner
      // has stored a reference to `this`, and the previous owner (if different)
      // has forgotten the reference to `this`. We use the element instead
      // of the public this.props because the post processing cannot determine
      // a ref. The ref conceptually lives on the element.

      // TODO: Should this even be possible? The owner cannot change because
      // it's forbidden by shouldUpdateReactComponent. The ref can change
      // if you swap the keys of but not the refs. Reconsider where this check
      // is made. It probably belongs where the key checking and
      // instantiateReactComponent is done.

      if (nextElement._owner !== prevElement._owner ||
          nextElement.ref !== prevElement.ref) {
        if (prevElement.ref != null) {
          ReactOwner.removeComponentAsRefFrom(
            this, prevElement.ref, prevElement._owner
          );
        }
        // Correct, even if the owner is the same, and only the ref has changed.
        if (nextElement.ref != null) {
          ReactOwner.addComponentAsRefTo(
            this,
            nextElement.ref,
            nextElement._owner
          );
        }
      }
    },

    /**
     * Mounts this component and inserts it into the DOM.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @internal
     * @see {ReactMount.render}
     */
    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {
      var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
      transaction.perform(
        this._mountComponentIntoNode,
        this,
        rootID,
        container,
        transaction,
        shouldReuseMarkup
      );
      ReactUpdates.ReactReconcileTransaction.release(transaction);
    },

    /**
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {ReactReconcileTransaction} transaction
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @private
     */
    _mountComponentIntoNode: function(
        rootID,
        container,
        transaction,
        shouldReuseMarkup) {
      var markup = this.mountComponent(rootID, transaction, 0);
      mountImageIntoNode(markup, container, shouldReuseMarkup);
    },

    /**
     * Checks if this component is owned by the supplied `owner` component.
     *
     * @param {ReactComponent} owner Component to check.
     * @return {boolean} True if `owners` owns this component.
     * @final
     * @internal
     */
    isOwnedBy: function(owner) {
      return this._owner === owner;
    },

    /**
     * Gets another component, that shares the same owner as this one, by ref.
     *
     * @param {string} ref of a sibling Component.
     * @return {?ReactComponent} the actual sibling Component.
     * @final
     * @internal
     */
    getSiblingByRef: function(ref) {
      var owner = this._owner;
      if (!owner || !owner.refs) {
        return null;
      }
      return owner.refs[ref];
    }
  }
};

module.exports = ReactComponent;

},{"./Object.assign":27,"./ReactElement":52,"./ReactOwner":67,"./ReactUpdates":79,"./invariant":126,"./keyMirror":132}],33:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

/*jslint evil: true */

"use strict";

var ReactDOMIDOperations = _dereq_("./ReactDOMIDOperations");
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");
var ReactReconcileTransaction = _dereq_("./ReactReconcileTransaction");

var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
var invariant = _dereq_("./invariant");
var setInnerHTML = _dereq_("./setInnerHTML");


var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;


/**
 * Abstracts away all functionality of `ReactComponent` requires knowledge of
 * the browser context.
 */
var ReactComponentBrowserEnvironment = {
  ReactReconcileTransaction: ReactReconcileTransaction,

  BackendIDOperations: ReactDOMIDOperations,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function(rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  },

  /**
   * @param {string} markup Markup string to place into the DOM Element.
   * @param {DOMElement} container DOM Element to insert markup into.
   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the
   * container if possible.
   */
  mountImageIntoNode: ReactPerf.measure(
    'ReactComponentBrowserEnvironment',
    'mountImageIntoNode',
    function(markup, container, shouldReuseMarkup) {
      ("production" !== "development" ? invariant(
        container && (
          container.nodeType === ELEMENT_NODE_TYPE ||
            container.nodeType === DOC_NODE_TYPE
        ),
        'mountComponentIntoNode(...): Target container is not valid.'
      ) : invariant(container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
          container.nodeType === DOC_NODE_TYPE
      )));

      if (shouldReuseMarkup) {
        if (ReactMarkupChecksum.canReuseMarkup(
          markup,
          getReactRootElementInContainer(container))) {
          return;
        } else {
          ("production" !== "development" ? invariant(
            container.nodeType !== DOC_NODE_TYPE,
            'You\'re trying to render a component to the document using ' +
            'server rendering but the checksum was invalid. This usually ' +
            'means you rendered a different component type or props on ' +
            'the client from the one on the server, or your render() ' +
            'methods are impure. React cannot handle this case due to ' +
            'cross-browser quirks by rendering at the document root. You ' +
            'should look for environment dependent code in your components ' +
            'and ensure the props are the same client and server side.'
          ) : invariant(container.nodeType !== DOC_NODE_TYPE));

          if ("production" !== "development") {
            console.warn(
              'React attempted to use reuse markup in a container but the ' +
              'checksum was invalid. This generally means that you are ' +
              'using server rendering and the markup generated on the ' +
              'server was not what the client was expecting. React injected ' +
              'new markup to compensate which works but you have lost many ' +
              'of the benefits of server rendering. Instead, figure out ' +
              'why the markup being generated is different on the client ' +
              'or server.'
            );
          }
        }
      }

      ("production" !== "development" ? invariant(
        container.nodeType !== DOC_NODE_TYPE,
        'You\'re trying to render a component to the document but ' +
          'you didn\'t use server rendering. We can\'t do this ' +
          'without using server rendering due to cross-browser quirks. ' +
          'See renderComponentToString() for server rendering.'
      ) : invariant(container.nodeType !== DOC_NODE_TYPE));

      setInnerHTML(container, markup);
    }
  )
};

module.exports = ReactComponentBrowserEnvironment;

},{"./ReactDOMIDOperations":41,"./ReactMarkupChecksum":62,"./ReactMount":63,"./ReactPerf":68,"./ReactReconcileTransaction":74,"./getReactRootElementInContainer":120,"./invariant":126,"./setInnerHTML":140}],34:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

"use strict";

var ReactComponent = _dereq_("./ReactComponent");
var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactErrorUtils = _dereq_("./ReactErrorUtils");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactOwner = _dereq_("./ReactOwner");
var ReactPerf = _dereq_("./ReactPerf");
var ReactPropTransferer = _dereq_("./ReactPropTransferer");
var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");
var keyMirror = _dereq_("./keyMirror");
var keyOf = _dereq_("./keyOf");
var monitorCodeUse = _dereq_("./monitorCodeUse");
var mapObject = _dereq_("./mapObject");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
var warning = _dereq_("./warning");

var MIXINS_KEY = keyOf({mixins: null});

/**
 * Policies that describe methods in `ReactCompositeComponentInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base ReactCompositeComponent class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactCompositeComponent`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will available on the prototype.
 *
 * @interface ReactCompositeComponentInterface
 * @internal
 */
var ReactCompositeComponentInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,



  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,



  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function(Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function(Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function(Constructor, childContextTypes) {
    validateTypeDef(
      Constructor,
      childContextTypes,
      ReactPropTypeLocations.childContext
    );
    Constructor.childContextTypes = assign(
      {},
      Constructor.childContextTypes,
      childContextTypes
    );
  },
  contextTypes: function(Constructor, contextTypes) {
    validateTypeDef(
      Constructor,
      contextTypes,
      ReactPropTypeLocations.context
    );
    Constructor.contextTypes = assign(
      {},
      Constructor.contextTypes,
      contextTypes
    );
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function(Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(
        Constructor.getDefaultProps,
        getDefaultProps
      );
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function(Constructor, propTypes) {
    validateTypeDef(
      Constructor,
      propTypes,
      ReactPropTypeLocations.prop
    );
    Constructor.propTypes = assign(
      {},
      Constructor.propTypes,
      propTypes
    );
  },
  statics: function(Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  }
};

function getDeclarationErrorAddendum(component) {
  var owner = component._owner || null;
  if (owner && owner.constructor && owner.constructor.displayName) {
    return ' Check the render method of `' + owner.constructor.displayName +
      '`.';
  }
  return '';
}

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      ("production" !== "development" ? invariant(
        typeof typeDef[propName] == 'function',
        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
        'React.PropTypes.',
        Constructor.displayName || 'ReactCompositeComponent',
        ReactPropTypeLocationNames[location],
        propName
      ) : invariant(typeof typeDef[propName] == 'function'));
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactCompositeComponentInterface.hasOwnProperty(name) ?
    ReactCompositeComponentInterface[name] :
    null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.OVERRIDE_BASE,
      'ReactCompositeComponentInterface: You are attempting to override ' +
      '`%s` from your class specification. Ensure that your method names ' +
      'do not overlap with React methods.',
      name
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.DEFINE_MANY ||
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
      'ReactCompositeComponentInterface: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be due ' +
      'to a mixin.',
      name
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
  }
}

function validateLifeCycleOnReplaceState(instance) {
  var compositeLifeCycleState = instance._compositeLifeCycleState;
  ("production" !== "development" ? invariant(
    instance.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
    'replaceState(...): Can only update a mounted or mounting component.'
  ) : invariant(instance.isMounted() ||
    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
  ("production" !== "development" ? invariant(
    ReactCurrentOwner.current == null,
    'replaceState(...): Cannot update during an existing state transition ' +
    '(such as within `render`). Render methods should be a pure function ' +
    'of props and state.'
  ) : invariant(ReactCurrentOwner.current == null));
  ("production" !== "development" ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,
    'replaceState(...): Cannot update while unmounting component. This ' +
    'usually means you called setState() on an unmounted component.'
  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building `ReactCompositeComponent` classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  ("production" !== "development" ? invariant(
    !ReactLegacyElement.isValidFactory(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component class as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactLegacyElement.isValidFactory(spec)));
  ("production" !== "development" ? invariant(
    !ReactElement.isValidElement(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactElement.isValidElement(spec)));

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactCompositeComponent methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isCompositeComponentMethod =
        ReactCompositeComponentInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var markedDontBind = property && property.__reactDontBind;
      var isFunction = typeof property === 'function';
      var shouldAutoBind =
        isFunction &&
        !isCompositeComponentMethod &&
        !isAlreadyDefined &&
        !markedDontBind;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactCompositeComponentInterface[name];

          // These cases should already be caught by validateMethodOverride
          ("production" !== "development" ? invariant(
            isCompositeComponentMethod && (
              specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
              specPolicy === SpecPolicy.DEFINE_MANY
            ),
            'ReactCompositeComponent: Unexpected spec policy %s for key %s ' +
            'when mixing in component specs.',
            specPolicy,
            name
          ) : invariant(isCompositeComponentMethod && (
            specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
            specPolicy === SpecPolicy.DEFINE_MANY
          )));

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if ("production" !== "development") {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    ("production" !== "development" ? invariant(
      !isReserved,
      'ReactCompositeComponent: You are attempting to define a reserved ' +
      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
      'as an instance property instead; it will still be accessible on the ' +
      'constructor.',
      name
    ) : invariant(!isReserved));

    var isInherited = name in Constructor;
    ("production" !== "development" ? invariant(
      !isInherited,
      'ReactCompositeComponent: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be ' +
      'due to a mixin.',
      name
    ) : invariant(!isInherited));
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeObjectsWithNoDuplicateKeys(one, two) {
  ("production" !== "development" ? invariant(
    one && two && typeof one === 'object' && typeof two === 'object',
    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

  mapObject(two, function(value, key) {
    ("production" !== "development" ? invariant(
      one[key] === undefined,
      'mergeObjectsWithNoDuplicateKeys(): ' +
      'Tried to merge two objects with the same key: `%s`. This conflict ' +
      'may be due to a mixin; in particular, this may be caused by two ' +
      'getInitialState() or getDefaultProps() methods returning objects ' +
      'with clashing keys.',
      key
    ) : invariant(one[key] === undefined));
    one[key] = value;
  });
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    return mergeObjectsWithNoDuplicateKeys(a, b);
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * `ReactCompositeComponent` maintains an auxiliary life cycle state in
 * `this._compositeLifeCycleState` (which can be null).
 *
 * This is different from the life cycle state maintained by `ReactComponent` in
 * `this._lifeCycleState`. The following diagram shows how the states overlap in
 * time. There are times when the CompositeLifeCycle is null - at those times it
 * is only meaningful to look at ComponentLifeCycle alone.
 *
 * Top Row: ReactComponent.ComponentLifeCycle
 * Low Row: ReactComponent.CompositeLifeCycle
 *
 * +-------+---------------------------------+--------+
 * |  UN   |             MOUNTED             |   UN   |
 * |MOUNTED|                                 | MOUNTED|
 * +-------+---------------------------------+--------+
 * |       ^--------+   +-------+   +--------^        |
 * |       |        |   |       |   |        |        |
 * |    0--|MOUNTING|-0-|RECEIVE|-0-|   UN   |--->0   |
 * |       |        |   |PROPS  |   |MOUNTING|        |
 * |       |        |   |       |   |        |        |
 * |       |        |   |       |   |        |        |
 * |       +--------+   +-------+   +--------+        |
 * |       |                                 |        |
 * +-------+---------------------------------+--------+
 */
var CompositeLifeCycle = keyMirror({
  /**
   * Components in the process of being mounted respond to state changes
   * differently.
   */
  MOUNTING: null,
  /**
   * Components in the process of being unmounted are guarded against state
   * changes.
   */
  UNMOUNTING: null,
  /**
   * Components that are mounted and receiving new props respond to state
   * changes differently.
   */
  RECEIVING_PROPS: null
});

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function(element) {
    // Children can be either an array or more than one argument
    ReactComponent.Mixin.construct.apply(this, arguments);
    ReactOwner.Mixin.construct.apply(this, arguments);

    this.state = null;
    this._pendingState = null;

    // This is the public post-processed context. The real context and pending
    // context lives on the element.
    this.context = null;

    this._compositeLifeCycleState = null;
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function() {
    return ReactComponent.Mixin.isMounted.call(this) &&
      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;

      if (this.__reactAutoBindMap) {
        this._bindAutoBindMethods();
      }

      this.context = this._processContext(this._currentElement._context);
      this.props = this._processProps(this.props);

      this.state = this.getInitialState ? this.getInitialState() : null;
      ("production" !== "development" ? invariant(
        typeof this.state === 'object' && !Array.isArray(this.state),
        '%s.getInitialState(): must return an object or null',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(typeof this.state === 'object' && !Array.isArray(this.state)));

      this._pendingState = null;
      this._pendingForceUpdate = false;

      if (this.componentWillMount) {
        this.componentWillMount();
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingState` without triggering a re-render.
        if (this._pendingState) {
          this.state = this._pendingState;
          this._pendingState = null;
        }
      }

      this._renderedComponent = instantiateReactComponent(
        this._renderValidatedComponent(),
        this._currentElement.type // The wrapping type
      );

      // Done with mounting, `setState` will now trigger UI changes.
      this._compositeLifeCycleState = null;
      var markup = this._renderedComponent.mountComponent(
        rootID,
        transaction,
        mountDepth + 1
      );
      if (this.componentDidMount) {
        transaction.getReactMountReady().enqueue(this.componentDidMount, this);
      }
      return markup;
    }
  ),

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function() {
    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;
    if (this.componentWillUnmount) {
      this.componentWillUnmount();
    }
    this._compositeLifeCycleState = null;

    this._renderedComponent.unmountComponent();
    this._renderedComponent = null;

    ReactComponent.Mixin.unmountComponent.call(this);

    // Some existing components rely on this.props even after they've been
    // destroyed (in event handlers).
    // TODO: this.props = null;
    // TODO: this.state = null;
  },

  /**
   * Sets a subset of the state. Always use this or `replaceState` to mutate
   * state. You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * There is no guarantee that calls to `setState` will run synchronously,
   * as they may eventually be batched together.  You can provide an optional
   * callback that will be executed when the call to setState is actually
   * completed.
   *
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  setState: function(partialState, callback) {
    ("production" !== "development" ? invariant(
      typeof partialState === 'object' || partialState == null,
      'setState(...): takes an object of state variables to update.'
    ) : invariant(typeof partialState === 'object' || partialState == null));
    if ("production" !== "development"){
      ("production" !== "development" ? warning(
        partialState != null,
        'setState(...): You passed an undefined or null state object; ' +
        'instead, use forceUpdate().'
      ) : null);
    }
    // Merge with `_pendingState` if it exists, otherwise with existing state.
    this.replaceState(
      assign({}, this._pendingState || this.state, partialState),
      callback
    );
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {object} completeState Next state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  replaceState: function(completeState, callback) {
    validateLifeCycleOnReplaceState(this);
    this._pendingState = completeState;
    if (this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING) {
      // If we're in a componentWillMount handler, don't enqueue a rerender
      // because ReactUpdates assumes we're in a browser context (which is wrong
      // for server rendering) and we're about to do a render anyway.
      // TODO: The callback here is ignored when setState is called from
      // componentWillMount. Either fix it or disallow doing so completely in
      // favor of getInitialState.
      ReactUpdates.enqueueUpdate(this, callback);
    }
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function(context) {
    var maskedContext = null;
    var contextTypes = this.constructor.contextTypes;
    if (contextTypes) {
      maskedContext = {};
      for (var contextName in contextTypes) {
        maskedContext[contextName] = context[contextName];
      }
      if ("production" !== "development") {
        this._checkPropTypes(
          contextTypes,
          maskedContext,
          ReactPropTypeLocations.context
        );
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function(currentContext) {
    var childContext = this.getChildContext && this.getChildContext();
    var displayName = this.constructor.displayName || 'ReactCompositeComponent';
    if (childContext) {
      ("production" !== "development" ? invariant(
        typeof this.constructor.childContextTypes === 'object',
        '%s.getChildContext(): childContextTypes must be defined in order to ' +
        'use getChildContext().',
        displayName
      ) : invariant(typeof this.constructor.childContextTypes === 'object'));
      if ("production" !== "development") {
        this._checkPropTypes(
          this.constructor.childContextTypes,
          childContext,
          ReactPropTypeLocations.childContext
        );
      }
      for (var name in childContext) {
        ("production" !== "development" ? invariant(
          name in this.constructor.childContextTypes,
          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
          displayName,
          name
        ) : invariant(name in this.constructor.childContextTypes));
      }
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function(newProps) {
    if ("production" !== "development") {
      var propTypes = this.constructor.propTypes;
      if (propTypes) {
        this._checkPropTypes(propTypes, newProps, ReactPropTypeLocations.prop);
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function(propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.constructor.displayName;
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error =
          propTypes[propName](props, propName, componentName, location);
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // renderComponent calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);
          ("production" !== "development" ? warning(false, error.message + addendum) : null);
        }
      }
    }
  },

  /**
   * If any of `_pendingElement`, `_pendingState`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(transaction) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    // Do not trigger a state transition if we are in the middle of mounting or
    // receiving props because both of those will already be doing this.
    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||
        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {
      return;
    }

    if (this._pendingElement == null &&
        this._pendingState == null &&
        !this._pendingForceUpdate) {
      return;
    }

    var nextContext = this.context;
    var nextProps = this.props;
    var nextElement = this._currentElement;
    if (this._pendingElement != null) {
      nextElement = this._pendingElement;
      nextContext = this._processContext(nextElement._context);
      nextProps = this._processProps(nextElement.props);
      this._pendingElement = null;

      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;
      if (this.componentWillReceiveProps) {
        this.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    this._compositeLifeCycleState = null;

    var nextState = this._pendingState || this.state;
    this._pendingState = null;

    var shouldUpdate =
      this._pendingForceUpdate ||
      !this.shouldComponentUpdate ||
      this.shouldComponentUpdate(nextProps, nextState, nextContext);

    if ("production" !== "development") {
      if (typeof shouldUpdate === "undefined") {
        console.warn(
          (this.constructor.displayName || 'ReactCompositeComponent') +
          '.shouldComponentUpdate(): Returned undefined instead of a ' +
          'boolean value. Make sure to return true or false.'
        );
      }
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(
        nextElement,
        nextProps,
        nextState,
        nextContext,
        transaction
      );
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state.
      this._currentElement = nextElement;
      this.props = nextProps;
      this.state = nextState;
      this.context = nextContext;

      // Owner cannot change because shouldUpdateReactComponent doesn't allow
      // it. TODO: Remove this._owner completely.
      this._owner = nextElement._owner;
    }
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @private
   */
  _performComponentUpdate: function(
    nextElement,
    nextProps,
    nextState,
    nextContext,
    transaction
  ) {
    var prevElement = this._currentElement;
    var prevProps = this.props;
    var prevState = this.state;
    var prevContext = this.context;

    if (this.componentWillUpdate) {
      this.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this.props = nextProps;
    this.state = nextState;
    this.context = nextContext;

    // Owner cannot change because shouldUpdateReactComponent doesn't allow
    // it. TODO: Remove this._owner completely.
    this._owner = nextElement._owner;

    this.updateComponent(
      transaction,
      prevElement
    );

    if (this.componentDidUpdate) {
      transaction.getReactMountReady().enqueue(
        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext),
        this
      );
    }
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'updateComponent',
    function(transaction, prevParentElement) {
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevParentElement
      );

      var prevComponentInstance = this._renderedComponent;
      var prevElement = prevComponentInstance._currentElement;
      var nextElement = this._renderValidatedComponent();
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        prevComponentInstance.receiveComponent(nextElement, transaction);
      } else {
        // These two IDs are actually the same! But nothing should rely on that.
        var thisID = this._rootNodeID;
        var prevComponentID = prevComponentInstance._rootNodeID;
        prevComponentInstance.unmountComponent();
        this._renderedComponent = instantiateReactComponent(
          nextElement,
          this._currentElement.type
        );
        var nextMarkup = this._renderedComponent.mountComponent(
          thisID,
          transaction,
          this._mountDepth + 1
        );
        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(
          prevComponentID,
          nextMarkup
        );
      }
    }
  ),

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldUpdateComponent`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {?function} callback Called after update is complete.
   * @final
   * @protected
   */
  forceUpdate: function(callback) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    ("production" !== "development" ? invariant(
      this.isMounted() ||
        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
      'forceUpdate(...): Can only force an update on mounted or mounting ' +
        'components.'
    ) : invariant(this.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
    ("production" !== "development" ? invariant(
      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
      ReactCurrentOwner.current == null,
      'forceUpdate(...): Cannot force an update while unmounting component ' +
      'or within a `render` function.'
    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
    ReactCurrentOwner.current == null));
    this._pendingForceUpdate = true;
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * @private
   */
  _renderValidatedComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    '_renderValidatedComponent',
    function() {
      var renderedComponent;
      var previousContext = ReactContext.current;
      ReactContext.current = this._processChildContext(
        this._currentElement._context
      );
      ReactCurrentOwner.current = this;
      try {
        renderedComponent = this.render();
        if (renderedComponent === null || renderedComponent === false) {
          renderedComponent = ReactEmptyComponent.getEmptyComponent();
          ReactEmptyComponent.registerNullComponentID(this._rootNodeID);
        } else {
          ReactEmptyComponent.deregisterNullComponentID(this._rootNodeID);
        }
      } finally {
        ReactContext.current = previousContext;
        ReactCurrentOwner.current = null;
      }
      ("production" !== "development" ? invariant(
        ReactElement.isValidElement(renderedComponent),
        '%s.render(): A valid ReactComponent must be returned. You may have ' +
          'returned undefined, an array or some other invalid object.',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(ReactElement.isValidElement(renderedComponent)));
      return renderedComponent;
    }
  ),

  /**
   * @private
   */
  _bindAutoBindMethods: function() {
    for (var autoBindKey in this.__reactAutoBindMap) {
      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
        continue;
      }
      var method = this.__reactAutoBindMap[autoBindKey];
      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(
        method,
        this.constructor.displayName + '.' + autoBindKey
      ));
    }
  },

  /**
   * Binds a method to the component.
   *
   * @param {function} method Method to be bound.
   * @private
   */
  _bindAutoBindMethod: function(method) {
    var component = this;
    var boundMethod = method.bind(component);
    if ("production" !== "development") {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): React component methods may only be bound to the ' +
            'component instance. See ' + componentName
          );
        } else if (!args.length) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): You are binding a component method to the component. ' +
            'React does this for you automatically in a high-performance ' +
            'way, so you can safely remove this call. See ' + componentName
          );
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }
};

var ReactCompositeComponentBase = function() {};
assign(
  ReactCompositeComponentBase.prototype,
  ReactComponent.Mixin,
  ReactOwner.Mixin,
  ReactPropTransferer.Mixin,
  ReactCompositeComponentMixin
);

/**
 * Module for creating composite components.
 *
 * @class ReactCompositeComponent
 * @extends ReactComponent
 * @extends ReactOwner
 * @extends ReactPropTransferer
 */
var ReactCompositeComponent = {

  LifeCycle: CompositeLifeCycle,

  Base: ReactCompositeComponentBase,

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function(spec) {
    var Constructor = function(props) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted. This will later be used
      // by the stand-alone class implementation.
    };
    Constructor.prototype = new ReactCompositeComponentBase();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(
      mixSpecIntoComponent.bind(null, Constructor)
    );

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    ("production" !== "development" ? invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    ) : invariant(Constructor.prototype.render));

    if ("production" !== "development") {
      if (Constructor.prototype.componentShouldUpdate) {
        monitorCodeUse(
          'react_component_should_update_warning',
          { component: spec.displayName }
        );
        console.warn(
          (spec.displayName || 'A component') + ' has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.'
         );
      }
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactCompositeComponentInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    if ("production" !== "development") {
      return ReactLegacyElement.wrapFactory(
        ReactElementValidator.createFactory(Constructor)
      );
    }
    return ReactLegacyElement.wrapFactory(
      ReactElement.createFactory(Constructor)
    );
  },

  injection: {
    injectMixin: function(mixin) {
      injectedMixins.push(mixin);
    }
  }
};

module.exports = ReactCompositeComponent;

},{"./Object.assign":27,"./ReactComponent":32,"./ReactContext":35,"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactElementValidator":53,"./ReactEmptyComponent":54,"./ReactErrorUtils":55,"./ReactLegacyElement":61,"./ReactOwner":67,"./ReactPerf":68,"./ReactPropTransferer":69,"./ReactPropTypeLocationNames":70,"./ReactPropTypeLocations":71,"./ReactUpdates":79,"./instantiateReactComponent":125,"./invariant":126,"./keyMirror":132,"./keyOf":133,"./mapObject":134,"./monitorCodeUse":136,"./shouldUpdateReactComponent":142,"./warning":145}],35:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactContext
 */

"use strict";

var assign = _dereq_("./Object.assign");

/**
 * Keeps track of the current context.
 *
 * The context is automatically passed down the component ownership hierarchy
 * and is accessible via `this.context` on ReactCompositeComponents.
 */
var ReactContext = {

  /**
   * @internal
   * @type {object}
   */
  current: {},

  /**
   * Temporarily extends the current context while executing scopedCallback.
   *
   * A typical use case might look like
   *
   *  render: function() {
   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
   *
   *    ));
   *    return <div>{children}</div>;
   *  }
   *
   * @param {object} newContext New context to merge into the existing context
   * @param {function} scopedCallback Callback to run with the new context
   * @return {ReactComponent|array<ReactComponent>}
   */
  withContext: function(newContext, scopedCallback) {
    var result;
    var previousContext = ReactContext.current;
    ReactContext.current = assign({}, previousContext, newContext);
    try {
      result = scopedCallback();
    } finally {
      ReactContext.current = previousContext;
    }
    return result;
  }

};

module.exports = ReactContext;

},{"./Object.assign":27}],36:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

"use strict";

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 *
 * The depth indicate how many composite components are above this render level.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

},{}],37:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 * @typechecks static-only
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");

var mapObject = _dereq_("./mapObject");

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if ("production" !== "development") {
    return ReactLegacyElement.markNonLegacyFactory(
      ReactElementValidator.createFactory(tag)
    );
  }
  return ReactLegacyElement.markNonLegacyFactory(
    ReactElement.createFactory(tag)
  );
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOM = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOM;

},{"./ReactElement":52,"./ReactElementValidator":53,"./ReactLegacyElement":61,"./mapObject":134}],38:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

var keyMirror = _dereq_("./keyMirror");

// Store a reference to the <button> `ReactDOMComponent`. TODO: use string
var button = ReactElement.createFactory(ReactDOM.button.type);

var mouseListenerNames = keyMirror({
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,
  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
});

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMButton',

  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

  render: function() {
    var props = {};

    // Copy the props; except the mouse listeners if we're disabled
    for (var key in this.props) {
      if (this.props.hasOwnProperty(key) &&
          (!this.props.disabled || !mouseListenerNames[key])) {
        props[key] = this.props[key];
      }
    }

    return button(props, this.props.children);
  }

});

module.exports = ReactDOMButton;

},{"./AutoFocusMixin":2,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./keyMirror":132}],39:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

"use strict";

var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
var DOMProperty = _dereq_("./DOMProperty");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactComponent = _dereq_("./ReactComponent");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactMount = _dereq_("./ReactMount");
var ReactMultiChild = _dereq_("./ReactMultiChild");
var ReactPerf = _dereq_("./ReactPerf");

var assign = _dereq_("./Object.assign");
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
var invariant = _dereq_("./invariant");
var isEventSupported = _dereq_("./isEventSupported");
var keyOf = _dereq_("./keyOf");
var monitorCodeUse = _dereq_("./monitorCodeUse");

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = {'string': true, 'number': true};

var STYLE = keyOf({style: null});

var ELEMENT_NODE_TYPE = 1;

/**
 * @param {?object} props
 */
function assertValidProps(props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  ("production" !== "development" ? invariant(
    props.children == null || props.dangerouslySetInnerHTML == null,
    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
  ) : invariant(props.children == null || props.dangerouslySetInnerHTML == null));
  if ("production" !== "development") {
    if (props.contentEditable && props.children != null) {
      console.warn(
        'A component is `contentEditable` and contains `children` managed by ' +
        'React. It is now your responsibility to guarantee that none of those '+
        'nodes are unexpectedly modified or duplicated. This is probably not ' +
        'intentional.'
      );
    }
  }
  ("production" !== "development" ? invariant(
    props.style == null || typeof props.style === 'object',
    'The `style` prop expects a mapping from style properties to values, ' +
    'not a string.'
  ) : invariant(props.style == null || typeof props.style === 'object'));
}

function putListener(id, registrationName, listener, transaction) {
  if ("production" !== "development") {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    if (registrationName === 'onScroll' &&
        !isEventSupported('scroll', true)) {
      monitorCodeUse('react_no_scroll_event');
      console.warn('This browser doesn\'t support the `onScroll` event');
    }
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
      container.ownerDocument :
      container;
    listenTo(registrationName, doc);
  }
  transaction.getPutListenerQueue().enqueuePutListener(
    id,
    registrationName,
    listener
  );
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

// We accept any tag to be rendered but since this gets injected into abitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    ("production" !== "development" ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
    validatedTagCache[tag] = true;
  }
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag;
  this.tagName = tag.toUpperCase();
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} The computed markup.
   */
  mountComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      assertValidProps(this.props);
      var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
      return (
        this._createOpenTagMarkupAndPutListeners(transaction) +
        this._createContentMarkup(transaction) +
        closeTag
      );
    }
  ),

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function(transaction) {
    var props = this.props;
    var ret = '<' + this._tag;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, propValue, transaction);
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            propValue = props.style = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup =
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret + '>';
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID + '>';
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Content markup.
   */
  _createContentMarkup: function(transaction) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = this.props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        return innerHTML.__html;
      }
    } else {
      var contentToUse =
        CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;
      var childrenToUse = contentToUse != null ? null : this.props.children;
      if (contentToUse != null) {
        return escapeTextForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(
          childrenToUse,
          transaction
        );
        return mountImages.join('');
      }
    }
    return '';
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'updateComponent',
    function(transaction, prevElement) {
      assertValidProps(this._currentElement.props);
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevElement
      );
      this._updateDOMProperties(prevElement.props, transaction);
      this._updateDOMChildren(prevElement.props, transaction);
    }
  ),

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMProperties: function(lastProps, transaction) {
    var nextProps = this.props;
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) ||
         !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = lastProps[propKey];
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        deleteListener(this._rootNodeID, propKey);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.deletePropertyByID(
          this._rootNodeID,
          propKey
        );
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          nextProp = nextProps.style = assign({}, nextProp);
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) &&
                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) &&
                lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, nextProp, transaction);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.updatePropertyByID(
          this._rootNodeID,
          propKey,
          nextProp
        );
      }
    }
    if (styleUpdates) {
      ReactComponent.BackendIDOperations.updateStylesByID(
        this._rootNodeID,
        styleUpdates
      );
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMChildren: function(lastProps, transaction) {
    var nextProps = this.props;

    var lastContent =
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent =
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml =
      lastProps.dangerouslySetInnerHTML &&
      lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml =
      nextProps.dangerouslySetInnerHTML &&
      nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        ReactComponent.BackendIDOperations.updateInnerHTMLByID(
          this._rootNodeID,
          nextHtml
        );
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function() {
    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponent.Mixin.unmountComponent.call(this);
  }

};

assign(
  ReactDOMComponent.prototype,
  ReactComponent.Mixin,
  ReactDOMComponent.Mixin,
  ReactMultiChild.Mixin,
  ReactBrowserComponentMixin
);

module.exports = ReactDOMComponent;

},{"./CSSPropertyOperations":5,"./DOMProperty":11,"./DOMPropertyOperations":12,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactBrowserEventEmitter":30,"./ReactComponent":32,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":68,"./escapeTextForBrowser":109,"./invariant":126,"./isEventSupported":127,"./keyOf":133,"./monitorCodeUse":136}],40:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMForm
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var LocalEventTrapMixin = _dereq_("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

// Store a reference to the <form> `ReactDOMComponent`. TODO: use string
var form = ReactElement.createFactory(ReactDOM.form.type);

/**
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
 * to capture it on the <form> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <form> a
 * composite component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMForm = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMForm',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
    // `jshint` fails to parse JSX so in order for linting to work in the open
    // source repo, we need to just use `ReactDOM.form`.
    return form(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
  }
});

module.exports = ReactDOMForm;

},{"./EventConstants":16,"./LocalEventTrapMixin":25,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52}],41:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

/*jslint evil: true */

"use strict";

var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
var DOMChildrenOperations = _dereq_("./DOMChildrenOperations");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");

var invariant = _dereq_("./invariant");
var setInnerHTML = _dereq_("./setInnerHTML");

/**
 * Errors for properties that should not be updated with `updatePropertyById()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML:
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes. This is made injectable via
 * `ReactComponent.BackendIDOperations`.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updatePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertantly setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      if (value != null) {
        DOMPropertyOperations.setValueForProperty(node, name, value);
      } else {
        DOMPropertyOperations.deleteValueForProperty(node, name);
      }
    }
  ),

  /**
   * Updates a DOM node to remove a property. This should only be used to remove
   * DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A property name to remove, see `DOMProperty`.
   * @internal
   */
  deletePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'deletePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
      DOMPropertyOperations.deleteValueForProperty(node, name, value);
    }
  ),

  /**
   * Updates a DOM node with new style values. If a value is specified as '',
   * the corresponding style property will be unset.
   *
   * @param {string} id ID of the node to update.
   * @param {object} styles Mapping from styles to values.
   * @internal
   */
  updateStylesByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateStylesByID',
    function(id, styles) {
      var node = ReactMount.getNode(id);
      CSSPropertyOperations.setValueForStyles(node, styles);
    }
  ),

  /**
   * Updates a DOM node's innerHTML.
   *
   * @param {string} id ID of the node to update.
   * @param {string} html An HTML string.
   * @internal
   */
  updateInnerHTMLByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateInnerHTMLByID',
    function(id, html) {
      var node = ReactMount.getNode(id);
      setInnerHTML(node, html);
    }
  ),

  /**
   * Updates a DOM node's text content set by `props.content`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} content Text content.
   * @internal
   */
  updateTextContentByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateTextContentByID',
    function(id, content) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.updateTextContent(node, content);
    }
  ),

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyReplaceNodeWithMarkupByID',
    function(id, markup) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
    }
  ),

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyProcessChildrenUpdates',
    function(updates, markup) {
      for (var i = 0; i < updates.length; i++) {
        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
      }
      DOMChildrenOperations.processUpdates(updates, markup);
    }
  )
};

module.exports = ReactDOMIDOperations;

},{"./CSSPropertyOperations":5,"./DOMChildrenOperations":10,"./DOMPropertyOperations":12,"./ReactMount":63,"./ReactPerf":68,"./invariant":126,"./setInnerHTML":140}],42:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMImg
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var LocalEventTrapMixin = _dereq_("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

// Store a reference to the <img> `ReactDOMComponent`. TODO: use string
var img = ReactElement.createFactory(ReactDOM.img.type);

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <img> element itself. There are lots of hacks we could do
 * to accomplish this, but the most reliable is to make <img> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMImg = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMImg',
  tagName: 'IMG',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return img(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
  }
});

module.exports = ReactDOMImg;

},{"./EventConstants":16,"./LocalEventTrapMixin":25,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52}],43:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactMount = _dereq_("./ReactMount");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

// Store a reference to the <input> `ReactDOMComponent`. TODO: use string
var input = ReactElement.createFactory(ReactDOM.input.type);

var instancesByReactID = {};

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMInput',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    return {
      initialChecked: this.props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.defaultChecked = null;
    props.defaultValue = null;

    var value = LinkedValueUtils.getValue(this);
    props.value = value != null ? value : this.state.initialValue;

    var checked = LinkedValueUtils.getChecked(this);
    props.checked = checked != null ? checked : this.state.initialChecked;

    props.onChange = this._handleChange;

    return input(props, this.props.children);
  },

  componentDidMount: function() {
    var id = ReactMount.getID(this.getDOMNode());
    instancesByReactID[id] = this;
  },

  componentWillUnmount: function() {
    var rootNode = this.getDOMNode();
    var id = ReactMount.getID(rootNode);
    delete instancesByReactID[id];
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var rootNode = this.getDOMNode();
    if (this.props.checked != null) {
      DOMPropertyOperations.setValueForProperty(
        rootNode,
        'checked',
        this.props.checked || false
      );
    }

    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    // Here we use asap to wait until all updates have propagated, which
    // is important when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    ReactUpdates.asap(forceUpdateIfMounted, this);

    var name = this.props.name;
    if (this.props.type === 'radio' && name != null) {
      var rootNode = this.getDOMNode();
      var queryRoot = rootNode;

      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }

      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll(
        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode ||
            otherNode.form !== rootNode.form) {
          continue;
        }
        var otherID = ReactMount.getID(otherNode);
        ("production" !== "development" ? invariant(
          otherID,
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
          'same `name` is not supported.'
        ) : invariant(otherID));
        var otherInstance = instancesByReactID[otherID];
        ("production" !== "development" ? invariant(
          otherInstance,
          'ReactDOMInput: Unknown radio button ID %s.',
          otherID
        ) : invariant(otherInstance));
        // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.
        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
      }
    }

    return returnValue;
  }

});

module.exports = ReactDOMInput;

},{"./AutoFocusMixin":2,"./DOMPropertyOperations":12,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactMount":63,"./ReactUpdates":79,"./invariant":126}],44:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

"use strict";

var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

var warning = _dereq_("./warning");

// Store a reference to the <option> `ReactDOMComponent`. TODO: use string
var option = ReactElement.createFactory(ReactDOM.option.type);

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMOption',

  mixins: [ReactBrowserComponentMixin],

  componentWillMount: function() {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        this.props.selected == null,
        'Use the `defaultValue` or `value` props on <select> instead of ' +
        'setting `selected` on <option>.'
      ) : null);
    }
  },

  render: function() {
    return option(this.props, this.props.children);
  }

});

module.exports = ReactDOMOption;

},{"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./warning":145}],45:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");

// Store a reference to the <select> `ReactDOMComponent`. TODO: use string
var select = ReactElement.createFactory(ReactDOM.select.type);

function updateWithPendingValueIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.setState({value: this._pendingValue});
    this._pendingValue = 0;
  }
}

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function selectValueType(props, propName, componentName) {
  if (props[propName] == null) {
    return;
  }
  if (props.multiple) {
    if (!Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
        ("`multiple` is true.")
      );
    }
  } else {
    if (Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
        ("value if `multiple` is false.")
      );
    }
  }
}

/**
 * If `value` is supplied, updates <option> elements on mount and update.
 * @param {ReactComponent} component Instance of ReactDOMSelect
 * @param {?*} propValue For uncontrolled components, null/undefined. For
 * controlled components, a string (or with `multiple`, a list of strings).
 * @private
 */
function updateOptions(component, propValue) {
  var multiple = component.props.multiple;
  var value = propValue != null ? propValue : component.state.value;
  var options = component.getDOMNode().options;
  var selectedValue, i, l;
  if (multiple) {
    selectedValue = {};
    for (i = 0, l = value.length; i < l; ++i) {
      selectedValue['' + value[i]] = true;
    }
  } else {
    selectedValue = '' + value;
  }
  for (i = 0, l = options.length; i < l; i++) {
    var selected = multiple ?
      selectedValue.hasOwnProperty(options[i].value) :
      options[i].value === selectedValue;

    if (selected !== options[i].selected) {
      options[i].selected = selected;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * string. If `multiple` is true, the prop must be an array of strings.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMSelect',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  propTypes: {
    defaultValue: selectValueType,
    value: selectValueType
  },

  getInitialState: function() {
    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};
  },

  componentWillMount: function() {
    this._pendingValue = null;
  },

  componentWillReceiveProps: function(nextProps) {
    if (!this.props.multiple && nextProps.multiple) {
      this.setState({value: [this.state.value]});
    } else if (this.props.multiple && !nextProps.multiple) {
      this.setState({value: this.state.value[0]});
    }
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.onChange = this._handleChange;
    props.value = null;

    return select(props, this.props.children);
  },

  componentDidMount: function() {
    updateOptions(this, LinkedValueUtils.getValue(this));
  },

  componentDidUpdate: function(prevProps) {
    var value = LinkedValueUtils.getValue(this);
    var prevMultiple = !!prevProps.multiple;
    var multiple = !!this.props.multiple;
    if (value != null || prevMultiple !== multiple) {
      updateOptions(this, value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }

    var selectedValue;
    if (this.props.multiple) {
      selectedValue = [];
      var options = event.target.options;
      for (var i = 0, l = options.length; i < l; i++) {
        if (options[i].selected) {
          selectedValue.push(options[i].value);
        }
      }
    } else {
      selectedValue = event.target.value;
    }

    this._pendingValue = selectedValue;
    ReactUpdates.asap(updateWithPendingValueIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMSelect;

},{"./AutoFocusMixin":2,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactUpdates":79}],46:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var getNodeForCharacterOffset = _dereq_("./getNodeForCharacterOffset");
var getTextContentAccessor = _dereq_("./getTextContentAccessor");

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(
    selection.anchorNode,
    selection.anchorOffset,
    selection.focusNode,
    selection.focusOffset
  );

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(
    tempRange.startContainer,
    tempRange.startOffset,
    tempRange.endContainer,
    tempRange.endOffset
  );

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ?
            start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && document.selection;

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

},{"./ExecutionEnvironment":22,"./getNodeForCharacterOffset":119,"./getTextContentAccessor":121}],47:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

var warning = _dereq_("./warning");

// Store a reference to the <textarea> `ReactDOMComponent`. TODO: use string
var textarea = ReactElement.createFactory(ReactDOM.textarea.type);

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMTextarea',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = this.props.children;
    if (children != null) {
      if ("production" !== "development") {
        ("production" !== "development" ? warning(
          false,
          'Use the `defaultValue` or `value` props instead of setting ' +
          'children on <textarea>.'
        ) : null);
      }
      ("production" !== "development" ? invariant(
        defaultValue == null,
        'If you supply `defaultValue` on a <textarea>, do not pass children.'
      ) : invariant(defaultValue == null));
      if (Array.isArray(children)) {
        ("production" !== "development" ? invariant(
          children.length <= 1,
          '<textarea> can only have at most one child.'
        ) : invariant(children.length <= 1));
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(this);
    return {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue)
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    ("production" !== "development" ? invariant(
      props.dangerouslySetInnerHTML == null,
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
    ) : invariant(props.dangerouslySetInnerHTML == null));

    props.defaultValue = null;
    props.value = null;
    props.onChange = this._handleChange;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    return textarea(props, this.state.initialValue);
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      var rootNode = this.getDOMNode();
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    ReactUpdates.asap(forceUpdateIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMTextarea;

},{"./AutoFocusMixin":2,"./DOMPropertyOperations":12,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactUpdates":79,"./invariant":126,"./warning":145}],48:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

"use strict";

var ReactUpdates = _dereq_("./ReactUpdates");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(
  ReactDefaultBatchingStrategyTransaction.prototype,
  Transaction.Mixin,
  {
    getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    }
  }
);

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function(callback, a, b) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b);
    } else {
      transaction.perform(callback, null, a, b);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

},{"./Object.assign":27,"./ReactUpdates":79,"./Transaction":95,"./emptyFunction":107}],49:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

"use strict";

var BeforeInputEventPlugin = _dereq_("./BeforeInputEventPlugin");
var ChangeEventPlugin = _dereq_("./ChangeEventPlugin");
var ClientReactRootIndex = _dereq_("./ClientReactRootIndex");
var CompositionEventPlugin = _dereq_("./CompositionEventPlugin");
var DefaultEventPluginOrder = _dereq_("./DefaultEventPluginOrder");
var EnterLeaveEventPlugin = _dereq_("./EnterLeaveEventPlugin");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var HTMLDOMPropertyConfig = _dereq_("./HTMLDOMPropertyConfig");
var MobileSafariClickEventPlugin = _dereq_("./MobileSafariClickEventPlugin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactComponentBrowserEnvironment =
  _dereq_("./ReactComponentBrowserEnvironment");
var ReactDefaultBatchingStrategy = _dereq_("./ReactDefaultBatchingStrategy");
var ReactDOMComponent = _dereq_("./ReactDOMComponent");
var ReactDOMButton = _dereq_("./ReactDOMButton");
var ReactDOMForm = _dereq_("./ReactDOMForm");
var ReactDOMImg = _dereq_("./ReactDOMImg");
var ReactDOMInput = _dereq_("./ReactDOMInput");
var ReactDOMOption = _dereq_("./ReactDOMOption");
var ReactDOMSelect = _dereq_("./ReactDOMSelect");
var ReactDOMTextarea = _dereq_("./ReactDOMTextarea");
var ReactEventListener = _dereq_("./ReactEventListener");
var ReactInjection = _dereq_("./ReactInjection");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMount = _dereq_("./ReactMount");
var SelectEventPlugin = _dereq_("./SelectEventPlugin");
var ServerReactRootIndex = _dereq_("./ServerReactRootIndex");
var SimpleEventPlugin = _dereq_("./SimpleEventPlugin");
var SVGDOMPropertyConfig = _dereq_("./SVGDOMPropertyConfig");

var createFullPageComponent = _dereq_("./createFullPageComponent");

function inject() {
  ReactInjection.EventEmitter.injectReactEventListener(
    ReactEventListener
  );

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    CompositionEventPlugin: CompositionEventPlugin,
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(
    ReactDOMComponent
  );

  ReactInjection.NativeComponent.injectComponentClasses({
    'button': ReactDOMButton,
    'form': ReactDOMForm,
    'img': ReactDOMImg,
    'input': ReactDOMInput,
    'option': ReactDOMOption,
    'select': ReactDOMSelect,
    'textarea': ReactDOMTextarea,

    'html': createFullPageComponent('html'),
    'head': createFullPageComponent('head'),
    'body': createFullPageComponent('body')
  });

  // This needs to happen after createFullPageComponent() otherwise the mixin
  // gets double injected.
  ReactInjection.CompositeComponent.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(
    ReactComponentBrowserEnvironment.ReactReconcileTransaction
  );
  ReactInjection.Updates.injectBatchingStrategy(
    ReactDefaultBatchingStrategy
  );

  ReactInjection.RootIndex.injectCreateReactRootIndex(
    ExecutionEnvironment.canUseDOM ?
      ClientReactRootIndex.createReactRootIndex :
      ServerReactRootIndex.createReactRootIndex
  );

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

  if ("production" !== "development") {
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
    if ((/[?&]react_perf\b/).test(url)) {
      var ReactDefaultPerf = _dereq_("./ReactDefaultPerf");
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};

},{"./BeforeInputEventPlugin":3,"./ChangeEventPlugin":7,"./ClientReactRootIndex":8,"./CompositionEventPlugin":9,"./DefaultEventPluginOrder":14,"./EnterLeaveEventPlugin":15,"./ExecutionEnvironment":22,"./HTMLDOMPropertyConfig":23,"./MobileSafariClickEventPlugin":26,"./ReactBrowserComponentMixin":29,"./ReactComponentBrowserEnvironment":33,"./ReactDOMButton":38,"./ReactDOMComponent":39,"./ReactDOMForm":40,"./ReactDOMImg":42,"./ReactDOMInput":43,"./ReactDOMOption":44,"./ReactDOMSelect":45,"./ReactDOMTextarea":47,"./ReactDefaultBatchingStrategy":48,"./ReactDefaultPerf":50,"./ReactEventListener":57,"./ReactInjection":58,"./ReactInstanceHandles":60,"./ReactMount":63,"./SVGDOMPropertyConfig":80,"./SelectEventPlugin":81,"./ServerReactRootIndex":82,"./SimpleEventPlugin":83,"./createFullPageComponent":103}],50:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ReactDefaultPerfAnalysis = _dereq_("./ReactDefaultPerfAnalysis");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");

var performanceNow = _dereq_("./performanceNow");

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function() {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function() {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function() {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  getMeasurementsSummaryMap: function(measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
      measurements,
      true
    );
    return summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printDOM: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function(item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result['type'] = item.type;
      result['args'] = JSON.stringify(item.args);
      return result;
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  _recordWrite: function(id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes =
      ReactDefaultPerf
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
        .writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function(moduleName, fnName, func) {
    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' ||
          fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ].totalTime = performanceNow() - start;
        return rv;
      } else if (moduleName === 'ReactDOMIDOperations' ||
        moduleName === 'ReactComponentBrowserEnvironment') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === 'mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function(update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(
              update.parentID,
              update.type,
              totalTime,
              writeArgs
            );
          });
        } else {
          // basic format
          ReactDefaultPerf._recordWrite(
            args[0],
            fnName,
            totalTime,
            Array.prototype.slice.call(args, 1)
          );
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (
        fnName === 'mountComponent' ||
        fnName === 'updateComponent' || // TODO: receiveComponent()?
        fnName === '_renderValidatedComponent')) {

        var rootNodeID = fnName === 'mountComponent' ?
          args[0] :
          this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.constructor.displayName,
          owner: this._owner ? this._owner.constructor.displayName : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;

},{"./DOMProperty":11,"./ReactDefaultPerfAnalysis":51,"./ReactMount":63,"./ReactPerf":68,"./performanceNow":139}],51:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

var assign = _dereq_("./Object.assign");

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  'mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  TEXT_CONTENT: 'set textContent',
  'updatePropertyByID': 'update attribute',
  'deletePropertyByID': 'delete attribute',
  'updateStylesByID': 'update styles',
  'updateInnerHTMLByID': 'set innerHTML',
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var id;

    for (id in measurement.writes) {
      measurement.writes[id].forEach(function(write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    }
  }
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function(a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function(a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;

},{"./Object.assign":27}],52:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

"use strict";

var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var warning = _dereq_("./warning");

var RESERVED_PROPS = {
  key: true,
  ref: true
};

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} object
 * @param {string} key
 */
function defineWarningProperty(object, key) {
  Object.defineProperty(object, key, {

    configurable: false,
    enumerable: true,

    get: function() {
      if (!this._store) {
        return null;
      }
      return this._store[key];
    },

    set: function(value) {
      ("production" !== "development" ? warning(
        false,
        'Don\'t set the ' + key + ' property of the component. ' +
        'Mutate the existing props object instead.'
      ) : null);
      this._store[key] = value;
    }

  });
}

/**
 * This is updated to true if the membrane is successfully created.
 */
var useMutationMembrane = false;

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} element
 */
function defineMutationMembrane(prototype) {
  try {
    var pseudoFrozenProperties = {
      props: true
    };
    for (var key in pseudoFrozenProperties) {
      defineWarningProperty(prototype, key);
    }
    useMutationMembrane = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {string|object} ref
 * @param {*} key
 * @param {*} props
 * @internal
 */
var ReactElement = function(type, key, ref, owner, context, props) {
  // Built-in properties that belong on the element
  this.type = type;
  this.key = key;
  this.ref = ref;

  // Record the component responsible for creating this element.
  this._owner = owner;

  // TODO: Deprecate withContext, and then the context becomes accessible
  // through the owner.
  this._context = context;

  if ("production" !== "development") {
    // The validation flag and props are currently mutative. We put them on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    this._store = { validated: false, props: props };

    // We're not allowed to set props directly on the object so we early
    // return and rely on the prototype membrane to forward to the backing
    // store.
    if (useMutationMembrane) {
      Object.freeze(this);
      return;
    }
  }

  this.props = props;
};

// We intentionally don't expose the function on the constructor property.
// ReactElement should be indistinguishable from a plain object.
ReactElement.prototype = {
  _isReactElement: true
};

if ("production" !== "development") {
  defineMutationMembrane(ReactElement.prototype);
}

ReactElement.createElement = function(type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        config.key !== null,
        'createElement(...): Encountered component with a `key` of null. In ' +
        'a future version, this will be treated as equivalent to the string ' +
        '\'null\'; instead, provide an explicit key or use undefined.'
      ) : null);
    }
    // TODO: Change this back to `config.key === undefined`
    key = config.key == null ? null : '' + config.key;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return new ReactElement(
    type,
    key,
    ref,
    ReactCurrentOwner.current,
    ReactContext.current,
    props
  );
};

ReactElement.createFactory = function(type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
  var newElement = new ReactElement(
    oldElement.type,
    oldElement.key,
    oldElement.ref,
    oldElement._owner,
    oldElement._context,
    newProps
  );

  if ("production" !== "development") {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }
  return newElement;
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function(object) {
  // ReactTestUtils is often used outside of beforeEach where as React is
  // within it. This leads to two different instances of React on the same
  // page. To identify a element from a different React instance we use
  // a flag instead of an instanceof check.
  var isElement = !!(object && object._isReactElement);
  // if (isElement && !(object instanceof ReactElement)) {
  // This is an indicator that you're using multiple versions of React at the
  // same time. This will screw with ownership and stuff. Fix it, please.
  // TODO: We could possibly warn here.
  // }
  return isElement;
};

module.exports = ReactElement;

},{"./ReactContext":35,"./ReactCurrentOwner":36,"./warning":145}],53:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var monitorCodeUse = _dereq_("./monitorCodeUse");
var warning = _dereq_("./warning");

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {
  'react_key_warning': {},
  'react_numeric_key_warning': {}
};
var ownerHasMonitoredObjectMap = {};

var loggedTypeFailures = {};

var NUMERIC_PROPERTY_REGEX = /^\d+$/;

/**
 * Gets the current owner's displayName for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getCurrentOwnerDisplayName() {
  var current = ReactCurrentOwner.current;
  return current && current.constructor.displayName || undefined;
}

/**
 * Warn if the component doesn't have an explicit key assigned to it.
 * This component is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validateExplicitKey(component, parentType) {
  if (component._store.validated || component.key != null) {
    return;
  }
  component._store.validated = true;

  warnAndMonitorForKeyUse(
    'react_key_warning',
    'Each child in an array should have a unique "key" prop.',
    component,
    parentType
  );
}

/**
 * Warn if the key is being defined as an object property but has an incorrect
 * value.
 *
 * @internal
 * @param {string} name Property name of the key.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validatePropertyKey(name, component, parentType) {
  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
    return;
  }
  warnAndMonitorForKeyUse(
    'react_numeric_key_warning',
    'Child objects should have non-numeric keys so ordering is preserved.',
    component,
    parentType
  );
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} warningID The id used when logging.
 * @param {string} message The base warning that gets output.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function warnAndMonitorForKeyUse(warningID, message, component, parentType) {
  var ownerName = getCurrentOwnerDisplayName();
  var parentName = parentType.displayName;

  var useName = ownerName || parentName;
  var memoizer = ownerHasKeyUseWarning[warningID];
  if (memoizer.hasOwnProperty(useName)) {
    return;
  }
  memoizer[useName] = true;

  message += ownerName ?
    (" Check the render method of " + ownerName + ".") :
    (" Check the renderComponent call using <" + parentName + ">.");

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwnerName = null;
  if (component._owner && component._owner !== ReactCurrentOwner.current) {
    // Name of the component that originally created this child.
    childOwnerName = component._owner.constructor.displayName;

    message += (" It was passed a child from " + childOwnerName + ".");
  }

  message += ' See http://fb.me/react-warning-keys for more information.';
  monitorCodeUse(warningID, {
    component: useName,
    componentOwner: childOwnerName
  });
  console.warn(message);
}

/**
 * Log that we're using an object map. We're considering deprecating this
 * feature and replace it with proper Map and ImmutableMap data structures.
 *
 * @internal
 */
function monitorUseOfObjectMap() {
  var currentName = getCurrentOwnerDisplayName() || '';
  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {
    return;
  }
  ownerHasMonitoredObjectMap[currentName] = true;
  monitorCodeUse('react_object_map_children');
}

/**
 * Ensure that every component either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {*} component Statically passed child of any type.
 * @param {*} parentType component's parent's type.
 * @return {boolean}
 */
function validateChildKeys(component, parentType) {
  if (Array.isArray(component)) {
    for (var i = 0; i < component.length; i++) {
      var child = component[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(component)) {
    // This component was passed in a valid location.
    component._store.validated = true;
  } else if (component && typeof component === 'object') {
    monitorUseOfObjectMap();
    for (var name in component) {
      validatePropertyKey(name, component[name], parentType);
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;
        // This will soon use the warning module
        monitorCodeUse(
          'react_failed_descriptor_type_check',
          { message: error.message }
        );
      }
    }
  }
}

var ReactElementValidator = {

  createElement: function(type, props, children) {
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    ("production" !== "development" ? warning(
      type != null,
      'React.createElement: type should not be null or undefined. It should ' +
        'be a string (for DOM elements) or a ReactClass (for composite ' +
        'components).'
    ) : null);

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }

    if (type) {
      var name = type.displayName;
      if (type.propTypes) {
        checkPropTypes(
          name,
          type.propTypes,
          element.props,
          ReactPropTypeLocations.prop
        );
      }
      if (type.contextTypes) {
        checkPropTypes(
          name,
          type.contextTypes,
          element._context,
          ReactPropTypeLocations.context
        );
      }
    }
    return element;
  },

  createFactory: function(type) {
    var validatedFactory = ReactElementValidator.createElement.bind(
      null,
      type
    );
    validatedFactory.type = type;
    return validatedFactory;
  }

};

module.exports = ReactElementValidator;

},{"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactPropTypeLocations":71,"./monitorCodeUse":136,"./warning":145}],54:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

var component;
// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIdsRegistry = {};

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function(emptyComponent) {
    component = ReactElement.createFactory(emptyComponent);
  }
};

/**
 * @return {ReactComponent} component The injected empty component.
 */
function getEmptyComponent() {
  ("production" !== "development" ? invariant(
    component,
    'Trying to return null from a render, but no null placeholder component ' +
    'was injected.'
  ) : invariant(component));
  return component();
}

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIdsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIdsRegistry[id];
}

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return nullComponentIdsRegistry[id];
}

var ReactEmptyComponent = {
  deregisterNullComponentID: deregisterNullComponentID,
  getEmptyComponent: getEmptyComponent,
  injection: ReactEmptyComponentInjection,
  isNullComponentID: isNullComponentID,
  registerNullComponentID: registerNullComponentID
};

module.exports = ReactEmptyComponent;

},{"./ReactElement":52,"./invariant":126}],55:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

"use strict";

var ReactErrorUtils = {
  /**
   * Creates a guarded version of a function. This is supposed to make debugging
   * of event handlers easier. To aid debugging with the browser's debugger,
   * this currently simply returns the original function.
   *
   * @param {function} func Function to be executed
   * @param {string} name The name of the guard
   * @return {function}
   */
  guard: function(func, name) {
    return func;
  }
};

module.exports = ReactErrorUtils;

},{}],56:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

"use strict";

var EventPluginHub = _dereq_("./EventPluginHub");

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue();
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events = EventPluginHub.extractEvents(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    );

    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

},{"./EventPluginHub":18}],57:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

"use strict";

var EventListener = _dereq_("./EventListener");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var PooledClass = _dereq_("./PooledClass");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMount = _dereq_("./ReactMount");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var getEventTarget = _dereq_("./getEventTarget");
var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function() {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(
  TopLevelCallbackBookKeeping,
  PooledClass.twoArgumentPooler
);

function handleTopLevelImpl(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(
    getEventTarget(bookKeeping.nativeEvent)
  ) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(
      bookKeeping.topLevelType,
      topLevelTarget,
      topLevelTargetID,
      bookKeeping.nativeEvent
    );
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function(handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function(enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function() {
    return ReactEventListener._enabled;
  },


  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.listen(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.capture(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  monitorScrollValue: function(refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
    EventListener.listen(window, 'resize', callback);
  },

  dispatchEvent: function(topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
      topLevelType,
      nativeEvent
    );
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

},{"./EventListener":17,"./ExecutionEnvironment":22,"./Object.assign":27,"./PooledClass":28,"./ReactInstanceHandles":60,"./ReactMount":63,"./ReactUpdates":79,"./getEventTarget":117,"./getUnboundedScrollPosition":122}],58:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var EventPluginHub = _dereq_("./EventPluginHub");
var ReactComponent = _dereq_("./ReactComponent");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactNativeComponent = _dereq_("./ReactNativeComponent");
var ReactPerf = _dereq_("./ReactPerf");
var ReactRootIndex = _dereq_("./ReactRootIndex");
var ReactUpdates = _dereq_("./ReactUpdates");

var ReactInjection = {
  Component: ReactComponent.injection,
  CompositeComponent: ReactCompositeComponent.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

},{"./DOMProperty":11,"./EventPluginHub":18,"./ReactBrowserEventEmitter":30,"./ReactComponent":32,"./ReactCompositeComponent":34,"./ReactEmptyComponent":54,"./ReactNativeComponent":66,"./ReactPerf":68,"./ReactRootIndex":75,"./ReactUpdates":79}],59:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

"use strict";

var ReactDOMSelection = _dereq_("./ReactDOMSelection");

var containsNode = _dereq_("./containsNode");
var focusNode = _dereq_("./focusNode");
var getActiveElement = _dereq_("./getActiveElement");

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function(elem) {
    return elem && (
      (elem.nodeName === 'INPUT' && elem.type === 'text') ||
      elem.nodeName === 'TEXTAREA' ||
      elem.contentEditable === 'true'
    );
  },

  getSelectionInformation: function() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange:
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
          ReactInputSelection.getSelection(focusedElem) :
          null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem &&
        isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(
          priorFocusedElem,
          priorSelectionRange
        );
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName === 'INPUT') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || {start: 0, end: 0};
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName === 'INPUT') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

},{"./ReactDOMSelection":46,"./containsNode":101,"./focusNode":111,"./getActiveElement":113}],60:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

"use strict";

var ReactRootIndex = _dereq_("./ReactRootIndex");

var invariant = _dereq_("./invariant");

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 100;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || (
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
  );
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return (
    descendantID.indexOf(ancestorID) === 0 &&
    isBoundary(descendantID, ancestorID.length)
  );
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  ("production" !== "development" ? invariant(
    isValidID(ancestorID) && isValidID(destinationID),
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
    ancestorID,
    destinationID
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
  ("production" !== "development" ? invariant(
    isAncestorIDOf(ancestorID, destinationID),
    'getNextDescendantID(...): React has made an invalid assumption about ' +
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
    ancestorID,
    destinationID
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  for (var i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  ("production" !== "development" ? invariant(
    isValidID(longestCommonID),
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
    oneID,
    twoID,
    longestCommonID
  ) : invariant(isValidID(longestCommonID)));
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  ("production" !== "development" ? invariant(
    start !== stop,
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
    start
  ) : invariant(start !== stop));
  var traverseUp = isAncestorIDOf(stop, start);
  ("production" !== "development" ? invariant(
    traverseUp || isAncestorIDOf(start, stop),
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
    'not have a parent path.',
    start,
    stop
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start; /* until break */; id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    ("production" !== "development" ? invariant(
      depth++ < MAX_TREE_DEPTH,
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
      start, stop
    ) : invariant(depth++ < MAX_TREE_DEPTH));
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function() {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function(rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function(id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function(targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function(targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;

},{"./ReactRootIndex":75,"./invariant":126}],61:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactLegacyElement
 */

"use strict";

var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var invariant = _dereq_("./invariant");
var monitorCodeUse = _dereq_("./monitorCodeUse");
var warning = _dereq_("./warning");

var legacyFactoryLogs = {};
function warnForLegacyFactoryCall() {
  if (!ReactLegacyElementFactory._isLegacyCallWarningEnabled) {
    return;
  }
  var owner = ReactCurrentOwner.current;
  var name = owner && owner.constructor ? owner.constructor.displayName : '';
  if (!name) {
    name = 'Something';
  }
  if (legacyFactoryLogs.hasOwnProperty(name)) {
    return;
  }
  legacyFactoryLogs[name] = true;
  ("production" !== "development" ? warning(
    false,
    name + ' is calling a React component directly. ' +
    'Use a factory or JSX instead. See: http://fb.me/react-legacyfactory'
  ) : null);
  monitorCodeUse('react_legacy_factory_call', { version: 3, name: name });
}

function warnForPlainFunctionType(type) {
  var isReactClass =
    type.prototype &&
    typeof type.prototype.mountComponent === 'function' &&
    typeof type.prototype.receiveComponent === 'function';
  if (isReactClass) {
    ("production" !== "development" ? warning(
      false,
      'Did not expect to get a React class here. Use `Component` instead ' +
      'of `Component.type` or `this.constructor`.'
    ) : null);
  } else {
    if (!type._reactWarnedForThisType) {
      try {
        type._reactWarnedForThisType = true;
      } catch (x) {
        // just incase this is a frozen object or some special object
      }
      monitorCodeUse(
        'react_non_component_in_jsx',
        { version: 3, name: type.name }
      );
    }
    ("production" !== "development" ? warning(
      false,
      'This JSX uses a plain function. Only React components are ' +
      'valid in React\'s JSX transform.'
    ) : null);
  }
}

function warnForNonLegacyFactory(type) {
  ("production" !== "development" ? warning(
    false,
    'Do not pass React.DOM.' + type.type + ' to JSX or createFactory. ' +
    'Use the string "' + type.type + '" instead.'
  ) : null);
}

/**
 * Transfer static properties from the source to the target. Functions are
 * rebound to have this reflect the original source.
 */
function proxyStaticMethods(target, source) {
  if (typeof source !== 'function') {
    return;
  }
  for (var key in source) {
    if (source.hasOwnProperty(key)) {
      var value = source[key];
      if (typeof value === 'function') {
        var bound = value.bind(source);
        // Copy any properties defined on the function, such as `isRequired` on
        // a PropTypes validator.
        for (var k in value) {
          if (value.hasOwnProperty(k)) {
            bound[k] = value[k];
          }
        }
        target[key] = bound;
      } else {
        target[key] = value;
      }
    }
  }
}

// We use an object instead of a boolean because booleans are ignored by our
// mocking libraries when these factories gets mocked.
var LEGACY_MARKER = {};
var NON_LEGACY_MARKER = {};

var ReactLegacyElementFactory = {};

ReactLegacyElementFactory.wrapCreateFactory = function(createFactory) {
  var legacyCreateFactory = function(type) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createFactory(type);
    }

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== "development") {
        warnForNonLegacyFactory(type);
      }
      return createFactory(type.type);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      return createFactory(type.type);
    }

    if ("production" !== "development") {
      warnForPlainFunctionType(type);
    }

    // Unless it's a legacy factory, then this is probably a plain function,
    // that is expecting to be invoked by JSX. We can just return it as is.
    return type;
  };
  return legacyCreateFactory;
};

ReactLegacyElementFactory.wrapCreateElement = function(createElement) {
  var legacyCreateElement = function(type, props, children) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createElement.apply(this, arguments);
    }

    var args;

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== "development") {
        warnForNonLegacyFactory(type);
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      if (type._isMockFunction) {
        // If this is a mock function, people will expect it to be called. We
        // will actually call the original mock factory function instead. This
        // future proofs unit testing that assume that these are classes.
        type.type._mockedReactClassConstructor = type;
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if ("production" !== "development") {
      warnForPlainFunctionType(type);
    }

    // This is being called with a plain function we should invoke it
    // immediately as if this was used with legacy JSX.
    return type.apply(null, Array.prototype.slice.call(arguments, 1));
  };
  return legacyCreateElement;
};

ReactLegacyElementFactory.wrapFactory = function(factory) {
  ("production" !== "development" ? invariant(
    typeof factory === 'function',
    'This is suppose to accept a element factory'
  ) : invariant(typeof factory === 'function'));
  var legacyElementFactory = function(config, children) {
    // This factory should not be called when JSX is used. Use JSX instead.
    if ("production" !== "development") {
      warnForLegacyFactoryCall();
    }
    return factory.apply(this, arguments);
  };
  proxyStaticMethods(legacyElementFactory, factory.type);
  legacyElementFactory.isReactLegacyFactory = LEGACY_MARKER;
  legacyElementFactory.type = factory.type;
  return legacyElementFactory;
};

// This is used to mark a factory that will remain. E.g. we're allowed to call
// it as a function. However, you're not suppose to pass it to createElement
// or createFactory, so it will warn you if you do.
ReactLegacyElementFactory.markNonLegacyFactory = function(factory) {
  factory.isReactNonLegacyFactory = NON_LEGACY_MARKER;
  return factory;
};

// Checks if a factory function is actually a legacy factory pretending to
// be a class.
ReactLegacyElementFactory.isValidFactory = function(factory) {
  // TODO: This will be removed and moved into a class validator or something.
  return typeof factory === 'function' &&
    factory.isReactLegacyFactory === LEGACY_MARKER;
};

ReactLegacyElementFactory.isValidClass = function(factory) {
  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      false,
      'isValidClass is deprecated and will be removed in a future release. ' +
      'Use a more specific validator instead.'
    ) : null);
  }
  return ReactLegacyElementFactory.isValidFactory(factory);
};

ReactLegacyElementFactory._isLegacyCallWarningEnabled = true;

module.exports = ReactLegacyElementFactory;

},{"./ReactCurrentOwner":36,"./invariant":126,"./monitorCodeUse":136,"./warning":145}],62:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

"use strict";

var adler32 = _dereq_("./adler32");

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function(markup) {
    var checksum = adler32(markup);
    return markup.replace(
      '>',
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
    );
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function(markup, element) {
    var existingChecksum = element.getAttribute(
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
    );
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

},{"./adler32":98}],63:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactPerf = _dereq_("./ReactPerf");

var containsNode = _dereq_("./containsNode");
var deprecated = _dereq_("./deprecated");
var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
var warning = _dereq_("./warning");

var createElement = ReactLegacyElement.wrapCreateElement(
  ReactElement.createElement
);

var SEPARATOR = ReactInstanceHandles.SEPARATOR;

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if ("production" !== "development") {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        ("production" !== "development" ? invariant(
          !isValid(cached, id),
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
          ATTR_NAME, id
        ) : invariant(!isValid(cached, id)));

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    ("production" !== "development" ? invariant(
      internalGetID(node) === id,
      'ReactMount: Unexpected modification of `%s`',
      ATTR_NAME
    ) : invariant(internalGetID(node) === id));

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(
    targetID,
    findDeepestCachedAncestorImpl
  );

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounting is the process of initializing a React component by creatings its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function(container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function(
      prevComponent,
      nextComponent,
      container,
      callback) {
    var nextProps = nextComponent.props;
    ReactMount.scrollMonitor(container, function() {
      prevComponent.replaceProps(nextProps, callback);
    });

    if ("production" !== "development") {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] =
        getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function(nextComponent, container) {
    ("production" !== "development" ? invariant(
      container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
        container.nodeType === DOC_NODE_TYPE
      ),
      '_registerComponent(...): Target container is not a DOM element.'
    ) : invariant(container && (
      container.nodeType === ELEMENT_NODE_TYPE ||
      container.nodeType === DOC_NODE_TYPE
    )));

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: ReactPerf.measure(
    'ReactMount',
    '_renderNewRootComponent',
    function(
        nextComponent,
        container,
        shouldReuseMarkup) {
      // Various parts of our code (such as ReactCompositeComponent's
      // _renderValidatedComponent) assume that calls to render aren't nested;
      // verify that that's the case.
      ("production" !== "development" ? warning(
        ReactCurrentOwner.current == null,
        '_renderNewRootComponent(): Render methods should be a pure function ' +
        'of props and state; triggering nested component updates from ' +
        'render is not allowed. If necessary, trigger nested updates in ' +
        'componentDidUpdate.'
      ) : null);

      var componentInstance = instantiateReactComponent(nextComponent, null);
      var reactRootID = ReactMount._registerComponent(
        componentInstance,
        container
      );
      componentInstance.mountComponentIntoNode(
        reactRootID,
        container,
        shouldReuseMarkup
      );

      if ("production" !== "development") {
        // Record the root element in case it later gets transplanted.
        rootElementsByReactRootID[reactRootID] =
          getReactRootElementInContainer(container);
      }

      return componentInstance;
    }
  ),

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function(nextElement, container, callback) {
    ("production" !== "development" ? invariant(
      ReactElement.isValidElement(nextElement),
      'renderComponent(): Invalid component element.%s',
      (
        typeof nextElement === 'string' ?
          ' Instead of passing an element string, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        ReactLegacyElement.isValidFactory(nextElement) ?
          ' Instead of passing a component class, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        // Check if it quacks like a element
        typeof nextElement.props !== "undefined" ?
          ' This may be caused by unintentionally loading two independent ' +
          'copies of React.' :
          ''
      )
    ) : invariant(ReactElement.isValidElement(nextElement)));

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevElement = prevComponent._currentElement;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        return ReactMount._updateRootComponent(
          prevComponent,
          nextElement,
          container,
          callback
        );
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup =
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

    var component = ReactMount._renderNewRootComponent(
      nextElement,
      container,
      shouldReuseMarkup
    );
    callback && callback.call(component);
    return component;
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into the supplied `container`.
   *
   * @param {function} constructor React component constructor.
   * @param {?object} props Initial props of the component instance.
   * @param {DOMElement} container DOM element to render into.
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  constructAndRenderComponent: function(constructor, props, container) {
    var element = createElement(constructor, props);
    return ReactMount.render(element, container);
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into a container node identified by supplied `id`.
   *
   * @param {function} componentConstructor React component constructor
   * @param {?object} props Initial props of the component instance.
   * @param {string} id ID of the DOM element to render into.
   * @return {ReactComponent} Component instance rendered in the container node.
   */
  constructAndRenderComponentByID: function(constructor, props, id) {
    var domNode = document.getElementById(id);
    ("production" !== "development" ? invariant(
      domNode,
      'Tried to get element with id of "%s" but it is not present on the page.',
      id
    ) : invariant(domNode));
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function(container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function(container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    ("production" !== "development" ? warning(
      ReactCurrentOwner.current == null,
      'unmountComponentAtNode(): Render methods should be a pure function of ' +
      'props and state; triggering nested component updates from render is ' +
      'not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      return false;
    }
    ReactMount.unmountComponentFromNode(component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if ("production" !== "development") {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  unmountComponentFromNode: function(instance, container) {
    instance.unmountComponent();

    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }

    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function(id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if ("production" !== "development") {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        ("production" !== "development" ? invariant(
          // Call internalGetID here because getID calls isValid which calls
          // findReactContainerForID (this function).
          internalGetID(rootElement) === reactRootID,
          'ReactMount: Root element ID differed from reactRootID.'
        ) : invariant(// Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID));

        var containerChild = container.firstChild;
        if (containerChild &&
            reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          console.warn(
            'ReactMount: Root element has been removed from its original ' +
            'container. New container:', rootElement.parentNode
          );
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function(id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * True if the supplied `node` is rendered by React.
   *
   * @param {*} node DOM Element to check.
   * @return {boolean} True if the DOM Element appears to be rendered by React.
   * @internal
   */
  isRenderedByReact: function(node) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      return false;
    }
    var id = ReactMount.getID(node);
    return id ? id.charAt(0) === SEPARATOR : false;
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function(node) {
    var current = node;
    while (current && current.parentNode !== current) {
      if (ReactMount.isRenderedByReact(current)) {
        return current;
      }
      current = current.parentNode;
    }
    return null;
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function(ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }

        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    ("production" !== "development" ? invariant(
      false,
      'findComponentRoot(..., %s): Unable to find element. This probably ' +
      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
      'parent. ' +
      'Try inspecting the child nodes of the element with React ID `%s`.',
      targetID,
      ReactMount.getID(ancestorNode)
    ) : invariant(false));
  },


  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  purgeID: purgeID
};

// Deprecations (remove for 0.13)
ReactMount.renderComponent = deprecated(
  'ReactMount',
  'renderComponent',
  'render',
  this,
  ReactMount.render
);

module.exports = ReactMount;

},{"./DOMProperty":11,"./ReactBrowserEventEmitter":30,"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactInstanceHandles":60,"./ReactLegacyElement":61,"./ReactPerf":68,"./containsNode":101,"./deprecated":106,"./getReactRootElementInContainer":120,"./instantiateReactComponent":125,"./invariant":126,"./shouldUpdateReactComponent":142,"./warning":145}],64:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

"use strict";

var ReactComponent = _dereq_("./ReactComponent");
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");

var flattenChildren = _dereq_("./flattenChildren");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    textContent: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    textContent: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(
      updateQueue,
      markupQueue
    );
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function(nestedChildren, transaction) {
      var children = flattenChildren(nestedChildren);
      var mountImages = [];
      var index = 0;
      this._renderedChildren = children;
      for (var name in children) {
        var child = children[name];
        if (children.hasOwnProperty(name)) {
          // The rendered children must be turned into instances as they're
          // mounted.
          var childInstance = instantiateReactComponent(child, null);
          children[name] = childInstance;
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = childInstance.mountComponent(
            rootID,
            transaction,
            this._mountDepth + 1
          );
          childInstance._mountIndex = index;
          mountImages.push(mountImage);
          index++;
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function(nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function(nextNestedChildren, transaction) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildren, transaction);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function(nextNestedChildren, transaction) {
      var nextChildren = flattenChildren(nextNestedChildren);
      var prevChildren = this._renderedChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var prevElement = prevChild && prevChild._currentElement;
        var nextElement = nextChildren[name];
        if (shouldUpdateReactComponent(prevElement, nextElement)) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild.receiveComponent(nextElement, transaction);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChildByName(prevChild, name);
          }
          // The child must be instantiated before it's mounted.
          var nextChildInstance = instantiateReactComponent(
            nextElement,
            null
          );
          this._mountChildByNameAtIndex(
            nextChildInstance, name, nextIndex, transaction
          );
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) &&
            !(nextChildren && nextChildren[name])) {
          this._unmountChildByName(prevChildren[name], name);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function() {
      var renderedChildren = this._renderedChildren;
      for (var name in renderedChildren) {
        var renderedChild = renderedChildren[name];
        // TODO: When is this not true?
        if (renderedChild.unmountComponent) {
          renderedChild.unmountComponent();
        }
      }
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function(child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function(child, mountImage) {
      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function(child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function(textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function(child, name, index, transaction) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = child.mountComponent(
        rootID,
        transaction,
        this._mountDepth + 1
      );
      child._mountIndex = index;
      this.createChild(child, mountImage);
      this._renderedChildren = this._renderedChildren || {};
      this._renderedChildren[name] = child;
    },

    /**
     * Unmounts a rendered child by name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @param {string} name Name of the child in `this._renderedChildren`.
     * @private
     */
    _unmountChildByName: function(child, name) {
      this.removeChild(child);
      child._mountIndex = null;
      child.unmountComponent();
      delete this._renderedChildren[name];
    }

  }

};

module.exports = ReactMultiChild;

},{"./ReactComponent":32,"./ReactMultiChildUpdateTypes":65,"./flattenChildren":110,"./instantiateReactComponent":125,"./shouldUpdateReactComponent":142}],65:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;

},{"./keyMirror":132}],66:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

"use strict";

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags
var tagToComponentClass = {};

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function(componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function(componentClasses) {
    assign(tagToComponentClass, componentClasses);
  }
};

/**
 * Create an internal class for a specific tag.
 *
 * @param {string} tag The tag for which to create an internal instance.
 * @param {any} props The props passed to the instance constructor.
 * @return {ReactComponent} component The injected empty component.
 */
function createInstanceForTag(tag, props, parentType) {
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    ("production" !== "development" ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  if (parentType === tag) {
    // Avoid recursion
    ("production" !== "development" ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  // Unwrap legacy factories
  return new componentClass.type(props);
}

var ReactNativeComponent = {
  createInstanceForTag: createInstanceForTag,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;

},{"./Object.assign":27,"./invariant":126}],67:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

"use strict";

var emptyObject = _dereq_("./emptyObject");
var invariant = _dereq_("./invariant");

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function(object) {
    return !!(
      object &&
      typeof object.attachRef === 'function' &&
      typeof object.detachRef === 'function'
    );
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to add a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to remove a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.refs[ref] === component) {
      owner.detachRef(ref);
    }
  },

  /**
   * A ReactComponent must mix this in to have refs.
   *
   * @lends {ReactOwner.prototype}
   */
  Mixin: {

    construct: function() {
      this.refs = emptyObject;
    },

    /**
     * Lazily allocates the refs object and stores `component` as `ref`.
     *
     * @param {string} ref Reference name.
     * @param {component} component Component to store as `ref`.
     * @final
     * @private
     */
    attachRef: function(ref, component) {
      ("production" !== "development" ? invariant(
        component.isOwnedBy(this),
        'attachRef(%s, ...): Only a component\'s owner can store a ref to it.',
        ref
      ) : invariant(component.isOwnedBy(this)));
      var refs = this.refs === emptyObject ? (this.refs = {}) : this.refs;
      refs[ref] = component;
    },

    /**
     * Detaches a reference name.
     *
     * @param {string} ref Name to dereference.
     * @final
     * @private
     */
    detachRef: function(ref) {
      delete this.refs[ref];
    }

  }

};

module.exports = ReactOwner;

},{"./emptyObject":108,"./invariant":126}],68:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

"use strict";

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function(objName, fnName, func) {
    if ("production" !== "development") {
      var measuredFunc = null;
      var wrapper = function() {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function(measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;

},{}],69:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTransferer
 */

"use strict";

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");
var invariant = _dereq_("./invariant");
var joinClasses = _dereq_("./joinClasses");
var warning = _dereq_("./warning");

var didWarn = false;

/**
 * Creates a transfer strategy that will merge prop values using the supplied
 * `mergeStrategy`. If a prop was previously unset, this just sets it.
 *
 * @param {function} mergeStrategy
 * @return {function}
 */
function createTransferStrategy(mergeStrategy) {
  return function(props, key, value) {
    if (!props.hasOwnProperty(key)) {
      props[key] = value;
    } else {
      props[key] = mergeStrategy(props[key], value);
    }
  };
}

var transferStrategyMerge = createTransferStrategy(function(a, b) {
  // `merge` overrides the first object's (`props[key]` above) keys using the
  // second object's (`value`) keys. An object's style's existing `propA` would
  // get overridden. Flip the order here.
  return assign({}, b, a);
});

/**
 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
 * NOTE: if you add any more exceptions to this list you should be sure to
 * update `cloneWithProps()` accordingly.
 */
var TransferStrategies = {
  /**
   * Never transfer `children`.
   */
  children: emptyFunction,
  /**
   * Transfer the `className` prop by merging them.
   */
  className: createTransferStrategy(joinClasses),
  /**
   * Transfer the `style` prop (which is an object) by merging them.
   */
  style: transferStrategyMerge
};

/**
 * Mutates the first argument by transferring the properties from the second
 * argument.
 *
 * @param {object} props
 * @param {object} newProps
 * @return {object}
 */
function transferInto(props, newProps) {
  for (var thisKey in newProps) {
    if (!newProps.hasOwnProperty(thisKey)) {
      continue;
    }

    var transferStrategy = TransferStrategies[thisKey];

    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
      transferStrategy(props, thisKey, newProps[thisKey]);
    } else if (!props.hasOwnProperty(thisKey)) {
      props[thisKey] = newProps[thisKey];
    }
  }
  return props;
}

/**
 * ReactPropTransferer are capable of transferring props to another component
 * using a `transferPropsTo` method.
 *
 * @class ReactPropTransferer
 */
var ReactPropTransferer = {

  TransferStrategies: TransferStrategies,

  /**
   * Merge two props objects using TransferStrategies.
   *
   * @param {object} oldProps original props (they take precedence)
   * @param {object} newProps new props to merge in
   * @return {object} a new object containing both sets of props merged.
   */
  mergeProps: function(oldProps, newProps) {
    return transferInto(assign({}, oldProps), newProps);
  },

  /**
   * @lends {ReactPropTransferer.prototype}
   */
  Mixin: {

    /**
     * Transfer props from this component to a target component.
     *
     * Props that do not have an explicit transfer strategy will be transferred
     * only if the target component does not already have the prop set.
     *
     * This is usually used to pass down props to a returned root component.
     *
     * @param {ReactElement} element Component receiving the properties.
     * @return {ReactElement} The supplied `component`.
     * @final
     * @protected
     */
    transferPropsTo: function(element) {
      ("production" !== "development" ? invariant(
        element._owner === this,
        '%s: You can\'t call transferPropsTo() on a component that you ' +
        'don\'t own, %s. This usually means you are calling ' +
        'transferPropsTo() on a component passed in as props or children.',
        this.constructor.displayName,
        typeof element.type === 'string' ?
        element.type :
        element.type.displayName
      ) : invariant(element._owner === this));

      if ("production" !== "development") {
        if (!didWarn) {
          didWarn = true;
          ("production" !== "development" ? warning(
            false,
            'transferPropsTo is deprecated. ' +
            'See http://fb.me/react-transferpropsto for more information.'
          ) : null);
        }
      }

      // Because elements are immutable we have to merge into the existing
      // props object rather than clone it.
      transferInto(element.props, this.props);

      return element;
    }

  }
};

module.exports = ReactPropTransferer;

},{"./Object.assign":27,"./emptyFunction":107,"./invariant":126,"./joinClasses":131,"./warning":145}],70:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

"use strict";

var ReactPropTypeLocationNames = {};

if ("production" !== "development") {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

},{}],71:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;

},{"./keyMirror":132}],72:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");

var deprecated = _dereq_("./deprecated");
var emptyFunction = _dereq_("./emptyFunction");

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var elementTypeChecker = createElementTypeChecker();
var nodeTypeChecker = createNodeChecker();

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: elementTypeChecker,
  instanceOf: createInstanceTypeChecker,
  node: nodeTypeChecker,
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker,

  component: deprecated(
    'React.PropTypes',
    'component',
    'element',
    this,
    elementTypeChecker
  ),
  renderable: deprecated(
    'React.PropTypes',
    'renderable',
    'node',
    this,
    nodeTypeChecker
  )
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location) {
    componentName = componentName || ANONYMOUS;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error(
          ("Required " + locationName + " `" + propName + "` was not specified in ")+
          ("`" + componentName + "`.")
        );
      }
    } else {
      return validate(props, propName, componentName, location);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns());
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
      );
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location);
      if (error instanceof Error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactElement.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
    );
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
      );
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location);
        if (error instanceof Error) {
          return error;
        }
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  function validate(props, propName, componentName, location) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location) == null) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
      ("`" + componentName + "`.")
    );
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactNode.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
        ("supplied to `" + componentName + "`, expected `object`.")
      );
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location);
      if (error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate, 'expected `object`');
}

function isNode(propValue) {
  switch(typeof propValue) {
    case 'number':
    case 'string':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (ReactElement.isValidElement(propValue)) {
        return true;
      }
      for (var k in propValue) {
        if (!isNode(propValue[k])) {
          return false;
        }
      }
      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

module.exports = ReactPropTypes;

},{"./ReactElement":52,"./ReactPropTypeLocationNames":70,"./deprecated":106,"./emptyFunction":107}],73:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPutListenerQueue
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");

var assign = _dereq_("./Object.assign");

function ReactPutListenerQueue() {
  this.listenersToPut = [];
}

assign(ReactPutListenerQueue.prototype, {
  enqueuePutListener: function(rootNodeID, propKey, propValue) {
    this.listenersToPut.push({
      rootNodeID: rootNodeID,
      propKey: propKey,
      propValue: propValue
    });
  },

  putListeners: function() {
    for (var i = 0; i < this.listenersToPut.length; i++) {
      var listenerToPut = this.listenersToPut[i];
      ReactBrowserEventEmitter.putListener(
        listenerToPut.rootNodeID,
        listenerToPut.propKey,
        listenerToPut.propValue
      );
    }
  },

  reset: function() {
    this.listenersToPut.length = 0;
  },

  destructor: function() {
    this.reset();
  }
});

PooledClass.addPoolingTo(ReactPutListenerQueue);

module.exports = ReactPutListenerQueue;

},{"./Object.assign":27,"./PooledClass":28,"./ReactBrowserEventEmitter":30}],74:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

"use strict";

var CallbackQueue = _dereq_("./CallbackQueue");
var PooledClass = _dereq_("./PooledClass");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function() {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
   *   restores the previous value.
   */
  close: function(previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function() {
    this.reactMountReady.notifyAll();
  }
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: function() {
    this.putListenerQueue.putListeners();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  SELECTION_RESTORATION,
  EVENT_SUPPRESSION,
  ON_DOM_READY_QUEUEING
];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction() {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap proceedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactBrowserEventEmitter":30,"./ReactInputSelection":59,"./ReactPutListenerQueue":73,"./Transaction":95}],75:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

"use strict";

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function(_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;

},{}],76:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
var ReactServerRenderingTransaction =
  _dereq_("./ReactServerRenderingTransaction");

var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToString(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      var markup = componentInstance.mountComponent(id, transaction, 0);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToStaticMarkup(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, 0);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};

},{"./ReactElement":52,"./ReactInstanceHandles":60,"./ReactMarkupChecksum":62,"./ReactServerRenderingTransaction":77,"./instantiateReactComponent":125,"./invariant":126}],77:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");
var CallbackQueue = _dereq_("./CallbackQueue");
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  ON_DOM_READY_QUEUEING
];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap proceedures.
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(
  ReactServerRenderingTransaction.prototype,
  Transaction.Mixin,
  Mixin
);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactPutListenerQueue":73,"./Transaction":95,"./emptyFunction":107}],78:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTextComponent
 * @typechecks static-only
 */

"use strict";

var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactComponent = _dereq_("./ReactComponent");
var ReactElement = _dereq_("./ReactElement");

var assign = _dereq_("./Object.assign");
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactTextComponent = function(props) {
  // This constructor and it's argument is currently used by mocks.
};

assign(ReactTextComponent.prototype, ReactComponent.Mixin, {

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function(rootID, transaction, mountDepth) {
    ReactComponent.Mixin.mountComponent.call(
      this,
      rootID,
      transaction,
      mountDepth
    );

    var escapedText = escapeTextForBrowser(this.props);

    if (transaction.renderToStaticMarkup) {
      // Normally we'd wrap this in a `span` for the reasons stated above, but
      // since this is a situation where React won't take over (static pages),
      // we can simply return the text as it is.
      return escapedText;
    }

    return (
      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
        escapedText +
      '</span>'
    );
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {object} nextComponent Contains the next text content.
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function(nextComponent, transaction) {
    var nextProps = nextComponent.props;
    if (nextProps !== this.props) {
      this.props = nextProps;
      ReactComponent.BackendIDOperations.updateTextContentByID(
        this._rootNodeID,
        nextProps
      );
    }
  }

});

var ReactTextComponentFactory = function(text) {
  // Bypass validation and configuration
  return new ReactElement(ReactTextComponent, null, null, null, null, text);
};

ReactTextComponentFactory.type = ReactTextComponent;

module.exports = ReactTextComponentFactory;

},{"./DOMPropertyOperations":12,"./Object.assign":27,"./ReactComponent":32,"./ReactElement":52,"./escapeTextForBrowser":109}],79:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

"use strict";

var CallbackQueue = _dereq_("./CallbackQueue");
var PooledClass = _dereq_("./PooledClass");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactPerf = _dereq_("./ReactPerf");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");
var warning = _dereq_("./warning");

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  ("production" !== "development" ? invariant(
    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
    'ReactUpdates: must inject a reconcile transaction class and batching ' +
    'strategy'
  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
}

var NESTED_UPDATES = {
  initialize: function() {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function() {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function() {
    this.callbackQueue.reset();
  },
  close: function() {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction =
    ReactUpdates.ReactReconcileTransaction.getPooled();
}

assign(
  ReactUpdatesFlushTransaction.prototype,
  Transaction.Mixin, {
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function() {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function(method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(
      this,
      this.reconcileTransaction.perform,
      this.reconcileTransaction,
      method,
      scope,
      a
    );
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b);
}

/**
 * Array comparator for ReactComponents by owner depth
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountDepthComparator(c1, c2) {
  return c1._mountDepth - c2._mountDepth;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  ("production" !== "development" ? invariant(
    len === dirtyComponents.length,
    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
    'match dirty-components array length (%s).',
    len,
    dirtyComponents.length
  ) : invariant(len === dirtyComponents.length));

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountDepthComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, ignore them
    // TODO: Queue unmounts in the same list to avoid this happening at all
    var component = dirtyComponents[i];
    if (component.isMounted()) {
      // If performUpdateIfNecessary happens to enqueue any new updates, we
      // shouldn't execute the callbacks until the next render happens, so
      // stash the callbacks first
      var callbacks = component._pendingCallbacks;
      component._pendingCallbacks = null;
      component.performUpdateIfNecessary(transaction.reconcileTransaction);

      if (callbacks) {
        for (var j = 0; j < callbacks.length; j++) {
          transaction.callbackQueue.enqueue(
            callbacks[j],
            component
          );
        }
      }
    }
  }
}

var flushBatchedUpdates = ReactPerf.measure(
  'ReactUpdates',
  'flushBatchedUpdates',
  function() {
    // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
    // array and perform any updates enqueued by mount-ready handlers (i.e.,
    // componentDidUpdate) but we need to check here too in order to catch
    // updates enqueued by setState callbacks and asap calls.
    while (dirtyComponents.length || asapEnqueued) {
      if (dirtyComponents.length) {
        var transaction = ReactUpdatesFlushTransaction.getPooled();
        transaction.perform(runBatchedUpdates, null, transaction);
        ReactUpdatesFlushTransaction.release(transaction);
      }

      if (asapEnqueued) {
        asapEnqueued = false;
        var queue = asapCallbackQueue;
        asapCallbackQueue = CallbackQueue.getPooled();
        queue.notifyAll();
        CallbackQueue.release(queue);
      }
    }
  }
);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component, callback) {
  ("production" !== "development" ? invariant(
    !callback || typeof callback === "function",
    'enqueueUpdate(...): You called `setProps`, `replaceProps`, ' +
    '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
    'isn\'t callable.'
  ) : invariant(!callback || typeof callback === "function"));
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)
  ("production" !== "development" ? warning(
    ReactCurrentOwner.current == null,
    'enqueueUpdate(): Render methods should be a pure function of props ' +
    'and state; triggering nested component updates from render is not ' +
    'allowed. If necessary, trigger nested updates in ' +
    'componentDidUpdate.'
  ) : null);

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component, callback);
    return;
  }

  dirtyComponents.push(component);

  if (callback) {
    if (component._pendingCallbacks) {
      component._pendingCallbacks.push(callback);
    } else {
      component._pendingCallbacks = [callback];
    }
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  ("production" !== "development" ? invariant(
    batchingStrategy.isBatchingUpdates,
    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
    'updates are not being batched.'
  ) : invariant(batchingStrategy.isBatchingUpdates));
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function(ReconcileTransaction) {
    ("production" !== "development" ? invariant(
      ReconcileTransaction,
      'ReactUpdates: must provide a reconcile transaction class'
    ) : invariant(ReconcileTransaction));
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function(_batchingStrategy) {
    ("production" !== "development" ? invariant(
      _batchingStrategy,
      'ReactUpdates: must provide a batching strategy'
    ) : invariant(_batchingStrategy));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.batchedUpdates === 'function',
      'ReactUpdates: must provide a batchedUpdates() function'
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactCurrentOwner":36,"./ReactPerf":68,"./Transaction":95,"./invariant":126,"./warning":145}],80:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = _dereq_("./DOMProperty");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var SVGDOMPropertyConfig = {
  Properties: {
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox'
  }
};

module.exports = SVGDOMPropertyConfig;

},{"./DOMProperty":11}],81:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var SyntheticEvent = _dereq_("./SyntheticEvent");

var getActiveElement = _dereq_("./getActiveElement");
var isTextInputElement = _dereq_("./isTextInputElement");
var keyOf = _dereq_("./keyOf");
var shallowEqual = _dereq_("./shallowEqual");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSelect: null}),
      captured: keyOf({onSelectCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topContextMenu,
      topLevelTypes.topFocus,
      topLevelTypes.topKeyDown,
      topLevelTypes.topMouseDown,
      topLevelTypes.topMouseUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @param {object}
 */
function getSelection(node) {
  if ('selectionStart' in node &&
      ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown ||
      activeElement == null ||
      activeElement != getActiveElement()) {
    return;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(
      eventTypes.select,
      activeElementID,
      nativeEvent
    );

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) ||
            topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't).
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      case topLevelTypes.topSelectionChange:
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent);
    }
  }
};

module.exports = SelectEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ReactInputSelection":59,"./SyntheticEvent":87,"./getActiveElement":113,"./isTextInputElement":129,"./keyOf":133,"./shallowEqual":141}],82:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

"use strict";

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function() {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;

},{}],83:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginUtils = _dereq_("./EventPluginUtils");
var EventPropagators = _dereq_("./EventPropagators");
var SyntheticClipboardEvent = _dereq_("./SyntheticClipboardEvent");
var SyntheticEvent = _dereq_("./SyntheticEvent");
var SyntheticFocusEvent = _dereq_("./SyntheticFocusEvent");
var SyntheticKeyboardEvent = _dereq_("./SyntheticKeyboardEvent");
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");
var SyntheticDragEvent = _dereq_("./SyntheticDragEvent");
var SyntheticTouchEvent = _dereq_("./SyntheticTouchEvent");
var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
var SyntheticWheelEvent = _dereq_("./SyntheticWheelEvent");

var getEventCharCode = _dereq_("./getEventCharCode");

var invariant = _dereq_("./invariant");
var keyOf = _dereq_("./keyOf");
var warning = _dereq_("./warning");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBlur: true}),
      captured: keyOf({onBlurCapture: true})
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({onClick: true}),
      captured: keyOf({onClickCapture: true})
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({onContextMenu: true}),
      captured: keyOf({onContextMenuCapture: true})
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCopy: true}),
      captured: keyOf({onCopyCapture: true})
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCut: true}),
      captured: keyOf({onCutCapture: true})
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDoubleClick: true}),
      captured: keyOf({onDoubleClickCapture: true})
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrag: true}),
      captured: keyOf({onDragCapture: true})
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnd: true}),
      captured: keyOf({onDragEndCapture: true})
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnter: true}),
      captured: keyOf({onDragEnterCapture: true})
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragExit: true}),
      captured: keyOf({onDragExitCapture: true})
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragLeave: true}),
      captured: keyOf({onDragLeaveCapture: true})
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragOver: true}),
      captured: keyOf({onDragOverCapture: true})
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragStart: true}),
      captured: keyOf({onDragStartCapture: true})
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrop: true}),
      captured: keyOf({onDropCapture: true})
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({onFocus: true}),
      captured: keyOf({onFocusCapture: true})
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({onInput: true}),
      captured: keyOf({onInputCapture: true})
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyDown: true}),
      captured: keyOf({onKeyDownCapture: true})
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyPress: true}),
      captured: keyOf({onKeyPressCapture: true})
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyUp: true}),
      captured: keyOf({onKeyUpCapture: true})
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({onLoad: true}),
      captured: keyOf({onLoadCapture: true})
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({onError: true}),
      captured: keyOf({onErrorCapture: true})
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseDown: true}),
      captured: keyOf({onMouseDownCapture: true})
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseMove: true}),
      captured: keyOf({onMouseMoveCapture: true})
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOut: true}),
      captured: keyOf({onMouseOutCapture: true})
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOver: true}),
      captured: keyOf({onMouseOverCapture: true})
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseUp: true}),
      captured: keyOf({onMouseUpCapture: true})
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({onPaste: true}),
      captured: keyOf({onPasteCapture: true})
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({onReset: true}),
      captured: keyOf({onResetCapture: true})
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({onScroll: true}),
      captured: keyOf({onScrollCapture: true})
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSubmit: true}),
      captured: keyOf({onSubmitCapture: true})
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchCancel: true}),
      captured: keyOf({onTouchCancelCapture: true})
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchEnd: true}),
      captured: keyOf({onTouchEndCapture: true})
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchMove: true}),
      captured: keyOf({onTouchMoveCapture: true})
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchStart: true}),
      captured: keyOf({onTouchStartCapture: true})
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onWheel: true}),
      captured: keyOf({onWheelCapture: true})
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topBlur:        eventTypes.blur,
  topClick:       eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy:        eventTypes.copy,
  topCut:         eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag:        eventTypes.drag,
  topDragEnd:     eventTypes.dragEnd,
  topDragEnter:   eventTypes.dragEnter,
  topDragExit:    eventTypes.dragExit,
  topDragLeave:   eventTypes.dragLeave,
  topDragOver:    eventTypes.dragOver,
  topDragStart:   eventTypes.dragStart,
  topDrop:        eventTypes.drop,
  topError:       eventTypes.error,
  topFocus:       eventTypes.focus,
  topInput:       eventTypes.input,
  topKeyDown:     eventTypes.keyDown,
  topKeyPress:    eventTypes.keyPress,
  topKeyUp:       eventTypes.keyUp,
  topLoad:        eventTypes.load,
  topMouseDown:   eventTypes.mouseDown,
  topMouseMove:   eventTypes.mouseMove,
  topMouseOut:    eventTypes.mouseOut,
  topMouseOver:   eventTypes.mouseOver,
  topMouseUp:     eventTypes.mouseUp,
  topPaste:       eventTypes.paste,
  topReset:       eventTypes.reset,
  topScroll:      eventTypes.scroll,
  topSubmit:      eventTypes.submit,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd:    eventTypes.touchEnd,
  topTouchMove:   eventTypes.touchMove,
  topTouchStart:  eventTypes.touchStart,
  topWheel:       eventTypes.wheel
};

for (var topLevelType in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[topLevelType].dependencies = [topLevelType];
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * Same as the default implementation, except cancels the event when return
   * value is false. This behavior will be disabled in a future release.
   *
   * @param {object} Event to be dispatched.
   * @param {function} Application-level callback.
   * @param {string} domID DOM ID to pass to the callback.
   */
  executeDispatch: function(event, listener, domID) {
    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

    ("production" !== "development" ? warning(
      typeof returnValue !== 'boolean',
      'Returning `false` from an event handler is deprecated and will be ' +
      'ignored in a future release. Instead, manually call ' +
      'e.stopPropagation() or e.preventDefault(), as appropriate.'
    ) : null);

    if (returnValue === false) {
      event.stopPropagation();
      event.preventDefault();
    }
  },

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topError:
      case topLevelTypes.topReset:
      case topLevelTypes.topSubmit:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    ("production" !== "development" ? invariant(
      EventConstructor,
      'SimpleEventPlugin: Unhandled event type, `%s`.',
      topLevelType
    ) : invariant(EventConstructor));
    var event = EventConstructor.getPooled(
      dispatchConfig,
      topLevelTargetID,
      nativeEvent
    );
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

};

module.exports = SimpleEventPlugin;

},{"./EventConstants":16,"./EventPluginUtils":20,"./EventPropagators":21,"./SyntheticClipboardEvent":84,"./SyntheticDragEvent":86,"./SyntheticEvent":87,"./SyntheticFocusEvent":88,"./SyntheticKeyboardEvent":90,"./SyntheticMouseEvent":91,"./SyntheticTouchEvent":92,"./SyntheticUIEvent":93,"./SyntheticWheelEvent":94,"./getEventCharCode":114,"./invariant":126,"./keyOf":133,"./warning":145}],84:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function(event) {
    return (
      'clipboardData' in event ?
        event.clipboardData :
        window.clipboardData
    );
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;


},{"./SyntheticEvent":87}],85:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticCompositionEvent,
  CompositionEventInterface
);

module.exports = SyntheticCompositionEvent;


},{"./SyntheticEvent":87}],86:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

},{"./SyntheticMouseEvent":91}],87:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");
var getEventTarget = _dereq_("./getEventTarget");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: getEventTarget,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ?
    nativeEvent.defaultPrevented :
    nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    event.preventDefault ? event.preventDefault() : event.returnValue = false;
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function() {
    var event = this.nativeEvent;
    event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function(Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

module.exports = SyntheticEvent;

},{"./Object.assign":27,"./PooledClass":28,"./emptyFunction":107,"./getEventTarget":117}],88:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

},{"./SyntheticUIEvent":93}],89:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticInputEvent,
  InputEventInterface
);

module.exports = SyntheticInputEvent;


},{"./SyntheticEvent":87}],90:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

var getEventCharCode = _dereq_("./getEventCharCode");
var getEventKey = _dereq_("./getEventKey");
var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function(event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function(event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function(event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":93,"./getEventCharCode":114,"./getEventKey":115,"./getEventModifierState":116}],91:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
var ViewportMetrics = _dereq_("./ViewportMetrics");

var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function(event) {
    return event.relatedTarget || (
      event.fromElement === event.srcElement ?
        event.toElement :
        event.fromElement
    );
  },
  // "Proprietary" Interface.
  pageX: function(event) {
    return 'pageX' in event ?
      event.pageX :
      event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function(event) {
    return 'pageY' in event ?
      event.pageY :
      event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

},{"./SyntheticUIEvent":93,"./ViewportMetrics":96,"./getEventModifierState":116}],92:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

},{"./SyntheticUIEvent":93,"./getEventModifierState":116}],93:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

var getEventTarget = _dereq_("./getEventTarget");

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function(event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function(event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

},{"./SyntheticEvent":87,"./getEventTarget":117}],94:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function(event) {
    return (
      'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
    );
  },
  deltaY: function(event) {
    return (
      'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0
    );
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

},{"./SyntheticMouseEvent":91}],95:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM upates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (!this.wrapperInitData) {
      this.wrapperInitData = [];
    } else {
      this.wrapperInitData.length = 0;
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function() {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} args... Arguments to pass to the method (optional).
   *                           Helps prevent need to bind in many cases.
   * @return Return value from `method`.
   */
  perform: function(method, scope, a, b, c, d, e, f) {
    ("production" !== "development" ? invariant(
      !this.isInTransaction(),
      'Transaction.perform(...): Cannot initialize a transaction when there ' +
      'is already an outstanding transaction.'
    ) : invariant(!this.isInTransaction()));
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {
          }
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ?
          wrapper.initialize.call(this) :
          null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {
          }
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function(startIndex) {
    ("production" !== "development" ? invariant(
      this.isInTransaction(),
      'Transaction.closeAll(): Cannot close transaction when none are open.'
    ) : invariant(this.isInTransaction()));
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR) {
          wrapper.close && wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {
          }
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occured.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;

},{"./invariant":126}],96:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

"use strict";

var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function() {
    var scrollPosition = getUnboundedScrollPosition(window);
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

},{"./getUnboundedScrollPosition":122}],97:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  ("production" !== "development" ? invariant(
    next != null,
    'accumulateInto(...): Accumulated items must not be null or undefined.'
  ) : invariant(next != null));
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;

},{"./invariant":126}],98:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

/* jslint bitwise:true */

"use strict";

var MOD = 65521;

// This is a clean-room implementation of adler32 designed for detecting
// if markup is not what we expect it to be. It does not need to be
// cryptographically strong, only reasonably good at detecting if markup
// generated on the server is different than that on the client.
function adler32(data) {
  var a = 1;
  var b = 0;
  for (var i = 0; i < data.length; i++) {
    a = (a + data.charCodeAt(i)) % MOD;
    b = (b + a) % MOD;
  }
  return a | (b << 16);
}

module.exports = adler32;

},{}],99:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function(_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

},{}],100:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

"use strict";

var camelize = _dereq_("./camelize");

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

},{"./camelize":99}],101:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

var isTextNode = _dereq_("./isTextNode");

/*jslint bitwise:true */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if (outerNode.contains) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

},{"./isTextNode":130}],102:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFrom
 * @typechecks
 */

var toArray = _dereq_("./toArray");

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj &&
    // arrays are objects, NodeLists are functions in Safari
    (typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    ('length' in obj) &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    (typeof obj.nodeType != 'number') &&
    (
      // a real array
      (// HTMLCollection/NodeList
      (Array.isArray(obj) ||
      // arguments
      ('callee' in obj) || 'item' in obj))
    )
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFrom = require('createArrayFrom');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFrom(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFrom(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFrom;

},{"./toArray":143}],103:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createFullPageComponent
 * @typechecks
 */

"use strict";

// Defeat circular references by requiring this directly.
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

/**
 * Create a component that will throw an exception when unmounted.
 *
 * Components like <html> <head> and <body> can't be removed or added
 * easily in a cross-browser way, however it's valuable to be able to
 * take advantage of React's reconciliation for styling and <title>
 * management. So we just document it and throw in dangerous cases.
 *
 * @param {string} tag The tag to wrap
 * @return {function} convenience constructor of new component
 */
function createFullPageComponent(tag) {
  var elementFactory = ReactElement.createFactory(tag);

  var FullPageComponent = ReactCompositeComponent.createClass({
    displayName: 'ReactFullPageComponent' + tag,

    componentWillUnmount: function() {
      ("production" !== "development" ? invariant(
        false,
        '%s tried to unmount. Because of cross-browser quirks it is ' +
        'impossible to unmount some top-level components (eg <html>, <head>, ' +
        'and <body>) reliably and efficiently. To fix this, have a single ' +
        'top-level component that never unmounts render these elements.',
        this.constructor.displayName
      ) : invariant(false));
    },

    render: function() {
      return elementFactory(this.props);
    }
  });

  return FullPageComponent;
}

module.exports = createFullPageComponent;

},{"./ReactCompositeComponent":34,"./ReactElement":52,"./invariant":126}],104:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*jslint evil: true, sub: true */

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var createArrayFrom = _dereq_("./createArrayFrom");
var getMarkupWrap = _dereq_("./getMarkupWrap");
var invariant = _dereq_("./invariant");

/**
 * Dummy container used to render all markup.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  ("production" !== "development" ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    ("production" !== "development" ? invariant(
      handleScript,
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
    ) : invariant(handleScript));
    createArrayFrom(scripts).forEach(handleScript);
  }

  var nodes = createArrayFrom(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

},{"./ExecutionEnvironment":22,"./createArrayFrom":102,"./getMarkupWrap":118,"./invariant":126}],105:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

"use strict";

var CSSProperty = _dereq_("./CSSProperty");

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 ||
      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;

},{"./CSSProperty":4}],106:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule deprecated
 */

var assign = _dereq_("./Object.assign");
var warning = _dereq_("./warning");

/**
 * This will log a single deprecation notice per function and forward the call
 * on to the new API.
 *
 * @param {string} namespace The namespace of the call, eg 'React'
 * @param {string} oldName The old function name, eg 'renderComponent'
 * @param {string} newName The new function name, eg 'render'
 * @param {*} ctx The context this forwarded call should run in
 * @param {function} fn The function to forward on to
 * @return {*} Will be the value as returned from `fn`
 */
function deprecated(namespace, oldName, newName, ctx, fn) {
  var warned = false;
  if ("production" !== "development") {
    var newFn = function() {
      ("production" !== "development" ? warning(
        warned,
        (namespace + "." + oldName + " will be deprecated in a future version. ") +
        ("Use " + namespace + "." + newName + " instead.")
      ) : null);
      warned = true;
      return fn.apply(ctx, arguments);
    };
    newFn.displayName = (namespace + "_" + oldName);
    // We need to make sure all properties of the original fn are copied over.
    // In particular, this is needed to support PropTypes
    return assign(newFn, fn);
  }

  return fn;
}

module.exports = deprecated;

},{"./Object.assign":27,"./warning":145}],107:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

function makeEmptyFunction(arg) {
  return function() {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function() { return this; };
emptyFunction.thatReturnsArgument = function(arg) { return arg; };

module.exports = emptyFunction;

},{}],108:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

"use strict";

var emptyObject = {};

if ("production" !== "development") {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;

},{}],109:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextForBrowser
 * @typechecks static-only
 */

"use strict";

var ESCAPE_LOOKUP = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  "\"": "&quot;",
  "'": "&#x27;"
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextForBrowser;

},{}],110:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

"use strict";

var ReactTextComponent = _dereq_("./ReactTextComponent");

var traverseAllChildren = _dereq_("./traverseAllChildren");
var warning = _dereq_("./warning");

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = !result.hasOwnProperty(name);
  ("production" !== "development" ? warning(
    keyUnique,
    'flattenChildren(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);
  if (keyUnique && child != null) {
    var type = typeof child;
    var normalizedValue;

    if (type === 'string') {
      normalizedValue = ReactTextComponent(child);
    } else if (type === 'number') {
      normalizedValue = ReactTextComponent('' + child);
    } else {
      normalizedValue = child;
    }

    result[name] = normalizedValue;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;

},{"./ReactTextComponent":78,"./traverseAllChildren":144,"./warning":145}],111:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

"use strict";

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch(e) {
  }
}

module.exports = focusNode;

},{}],112:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

"use strict";

/**
 * @param {array} an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;

},{}],113:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document body is not yet defined.
 */
function getActiveElement() /*?DOMElement*/ {
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;

},{}],114:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

"use strict";

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

},{}],115:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

"use strict";

var getEventCharCode = _dereq_("./getEventCharCode");

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

},{"./getEventCharCode":114}],116:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

"use strict";

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  /*jshint validthis:true */
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

},{}],117:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

"use strict";

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

},{}],118:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var invariant = _dereq_("./invariant");

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */
var shouldWrap = {
  // Force wrapping for SVG elements because if they get created inside a <div>,
  // they will be initialized in the wrong namespace (and will not display).
  'circle': true,
  'defs': true,
  'ellipse': true,
  'g': true,
  'line': true,
  'linearGradient': true,
  'path': true,
  'polygon': true,
  'polyline': true,
  'radialGradient': true,
  'rect': true,
  'stop': true,
  'text': true
};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg>', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap,

  'circle': svgWrap,
  'defs': svgWrap,
  'ellipse': svgWrap,
  'g': svgWrap,
  'line': svgWrap,
  'linearGradient': svgWrap,
  'path': svgWrap,
  'polygon': svgWrap,
  'polyline': svgWrap,
  'radialGradient': svgWrap,
  'rect': svgWrap,
  'stop': svgWrap,
  'text': svgWrap
};

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  ("production" !== "development" ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}


module.exports = getMarkupWrap;

},{"./ExecutionEnvironment":22,"./invariant":126}],119:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

"use strict";

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType == 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

},{}],120:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getReactRootElementInContainer
 */

"use strict";

var DOC_NODE_TYPE = 9;

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 *                                           a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

module.exports = getReactRootElementInContainer;

},{}],121:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ?
      'textContent' :
      'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

},{"./ExecutionEnvironment":22}],122:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

"use strict";

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

},{}],123:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

},{}],124:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

"use strict";

var hyphenate = _dereq_("./hyphenate");

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

},{"./hyphenate":123}],125:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

"use strict";

var warning = _dereq_("./warning");

var ReactElement = _dereq_("./ReactElement");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactNativeComponent = _dereq_("./ReactNativeComponent");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");

/**
 * Given an `element` create an instance that will actually be mounted.
 *
 * @param {object} element
 * @param {*} parentCompositeType The composite type that resolved this.
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(element, parentCompositeType) {
  var instance;

  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      element && (typeof element.type === 'function' ||
                     typeof element.type === 'string'),
      'Only functions or strings can be mounted as React components.'
    ) : null);

    // Resolve mock instances
    if (element.type._mockedReactClassConstructor) {
      // If this is a mocked class, we treat the legacy factory as if it was the
      // class constructor for future proofing unit tests. Because this might
      // be mocked as a legacy factory, we ignore any warnings triggerd by
      // this temporary hack.
      ReactLegacyElement._isLegacyCallWarningEnabled = false;
      try {
        instance = new element.type._mockedReactClassConstructor(
          element.props
        );
      } finally {
        ReactLegacyElement._isLegacyCallWarningEnabled = true;
      }

      // If the mock implementation was a legacy factory, then it returns a
      // element. We need to turn this into a real component instance.
      if (ReactElement.isValidElement(instance)) {
        instance = new instance.type(instance.props);
      }

      var render = instance.render;
      if (!render) {
        // For auto-mocked factories, the prototype isn't shimmed and therefore
        // there is no render function on the instance. We replace the whole
        // component with an empty component instance instead.
        element = ReactEmptyComponent.getEmptyComponent();
      } else {
        if (render._isMockFunction && !render._getMockImplementation()) {
          // Auto-mocked components may have a prototype with a mocked render
          // function. For those, we'll need to mock the result of the render
          // since we consider undefined to be invalid results from render.
          render.mockImplementation(
            ReactEmptyComponent.getEmptyComponent
          );
        }
        instance.construct(element);
        return instance;
      }
    }
  }

  // Special case string values
  if (typeof element.type === 'string') {
    instance = ReactNativeComponent.createInstanceForTag(
      element.type,
      element.props,
      parentCompositeType
    );
  } else {
    // Normal case for non-mocks and non-strings
    instance = new element.type(element.props);
  }

  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      typeof instance.construct === 'function' &&
      typeof instance.mountComponent === 'function' &&
      typeof instance.receiveComponent === 'function',
      'Only React Components can be mounted.'
    ) : null);
  }

  // This actually sets up the internal instance. This will become decoupled
  // from the public instance in a future diff.
  instance.construct(element);

  return instance;
}

module.exports = instantiateReactComponent;

},{"./ReactElement":52,"./ReactEmptyComponent":54,"./ReactLegacyElement":61,"./ReactNativeComponent":66,"./warning":145}],126:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if ("production" !== "development") {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        'Invariant Violation: ' +
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

},{}],127:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature =
    document.implementation &&
    document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM ||
      capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

},{"./ExecutionEnvironment":22}],128:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (
    typeof Node === 'function' ? object instanceof Node :
      typeof object === 'object' &&
      typeof object.nodeType === 'number' &&
      typeof object.nodeName === 'string'
  ));
}

module.exports = isNode;

},{}],129:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

"use strict";

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  return elem && (
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type]) ||
    elem.nodeName === 'TEXTAREA'
  );
}

module.exports = isTextInputElement;

},{}],130:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

var isNode = _dereq_("./isNode");

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

},{"./isNode":128}],131:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule joinClasses
 * @typechecks static-only
 */

"use strict";

/**
 * Combines multiple className strings into one.
 * http://jsperf.com/joinclasses-args-vs-array
 *
 * @param {...?string} classes
 * @return {string}
 */
function joinClasses(className/*, ... */) {
  if (!className) {
    className = '';
  }
  var nextClass;
  var argLength = arguments.length;
  if (argLength > 1) {
    for (var ii = 1; ii < argLength; ii++) {
      nextClass = arguments[ii];
      if (nextClass) {
        className = (className ? className + ' ' : '') + nextClass;
      }
    }
  }
  return className;
}

module.exports = joinClasses;

},{}],132:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  ("production" !== "development" ? invariant(
    obj instanceof Object && !Array.isArray(obj),
    'keyMirror(...): Argument must be an object.'
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

},{"./invariant":126}],133:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without loosing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
var keyOf = function(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};


module.exports = keyOf;

},{}],134:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;

},{}],135:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

"use strict";

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function(string) {
    if (cache.hasOwnProperty(string)) {
      return cache[string];
    } else {
      return cache[string] = callback.call(this, string);
    }
  };
}

module.exports = memoizeStringOnly;

},{}],136:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule monitorCodeUse
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Provides open-source compatible instrumentation for monitoring certain API
 * uses before we're ready to issue a warning or refactor. It accepts an event
 * name which may only contain the characters [a-z0-9_] and an optional data
 * object with further information.
 */

function monitorCodeUse(eventName, data) {
  ("production" !== "development" ? invariant(
    eventName && !/[^a-z0-9_]/.test(eventName),
    'You must provide an eventName using only the characters [a-z0-9_]'
  ) : invariant(eventName && !/[^a-z0-9_]/.test(eventName)));
}

module.exports = monitorCodeUse;

},{"./invariant":126}],137:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
"use strict";

var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(children),
    'onlyChild must be passed a children with exactly one child.'
  ) : invariant(ReactElement.isValidElement(children)));
  return children;
}

module.exports = onlyChild;

},{"./ReactElement":52,"./invariant":126}],138:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance =
    window.performance ||
    window.msPerformance ||
    window.webkitPerformance;
}

module.exports = performance || {};

},{"./ExecutionEnvironment":22}],139:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

var performance = _dereq_("./performance");

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (!performance || !performance.now) {
  performance = Date;
}

var performanceNow = performance.now.bind(performance);

module.exports = performanceNow;

},{"./performance":138}],140:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function(node, html) {
  node.innerHTML = html;
};

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function(node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) ||
          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        node.innerHTML = '\uFEFF' + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;

},{"./ExecutionEnvironment":22}],141:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 */

"use strict";

/**
 * Performs equality by iterating through keys on an object and returning
 * false when any key has values which are not strictly equal between
 * objA and objB. Returns true when the values of all keys are strictly equal.
 *
 * @return {boolean}
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var key;
  // Test for A's keys different from B.
  for (key in objA) {
    if (objA.hasOwnProperty(key) &&
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
      return false;
    }
  }
  // Test for B's keys missing from A.
  for (key in objB) {
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}

module.exports = shallowEqual;

},{}],142:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

"use strict";

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  if (prevElement && nextElement &&
      prevElement.type === nextElement.type &&
      prevElement.key === nextElement.key &&
      prevElement._owner === nextElement._owner) {
    return true;
  }
  return false;
}

module.exports = shouldUpdateReactComponent;

},{}],143:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

var invariant = _dereq_("./invariant");

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFrom.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  ("production" !== "development" ? invariant(
    !Array.isArray(obj) &&
    (typeof obj === 'object' || typeof obj === 'function'),
    'toArray: Array-like object expected'
  ) : invariant(!Array.isArray(obj) &&
  (typeof obj === 'object' || typeof obj === 'function')));

  ("production" !== "development" ? invariant(
    typeof length === 'number',
    'toArray: Object needs a length property'
  ) : invariant(typeof length === 'number'));

  ("production" !== "development" ? invariant(
    length === 0 ||
    (length - 1) in obj,
    'toArray: Object should have keys for indices'
  ) : invariant(length === 0 ||
  (length - 1) in obj));

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;

},{"./invariant":126}],144:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");

var invariant = _dereq_("./invariant");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that:
 * 1. `mapChildren` transforms strings and numbers into `ReactTextComponent`.
 * 2. it('should fail when supplied duplicate key', function() {
 * 3. That a single child and an array with one item have the same key pattern.
 * });
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} key Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(
    userProvidedKeyEscapeRegex,
    userProvidedKeyEscaper
  );
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!number} indexSoFar Number of children encountered until this point.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
var traverseAllChildrenImpl =
  function(children, nameSoFar, indexSoFar, callback, traverseContext) {
    var nextName, nextIndex;
    var subtreeCount = 0;  // Count of children found in the current subtree.
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        nextName = (
          nameSoFar +
          (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
          getComponentKey(child, i)
        );
        nextIndex = indexSoFar + subtreeCount;
        subtreeCount += traverseAllChildrenImpl(
          child,
          nextName,
          nextIndex,
          callback,
          traverseContext
        );
      }
    } else {
      var type = typeof children;
      var isOnlyChild = nameSoFar === '';
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows
      var storageName =
        isOnlyChild ? SEPARATOR + getComponentKey(children, 0) : nameSoFar;
      if (children == null || type === 'boolean') {
        // All of the above are perceived as null.
        callback(traverseContext, null, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'string' || type === 'number' ||
                 ReactElement.isValidElement(children)) {
        callback(traverseContext, children, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'object') {
        ("production" !== "development" ? invariant(
          !children || children.nodeType !== 1,
          'traverseAllChildren(...): Encountered an invalid child; DOM ' +
          'elements are not valid children of React components.'
        ) : invariant(!children || children.nodeType !== 1));
        for (var key in children) {
          if (children.hasOwnProperty(key)) {
            nextName = (
              nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
              wrapUserProvidedKey(key) + SUBSEPARATOR +
              getComponentKey(children[key], 0)
            );
            nextIndex = indexSoFar + subtreeCount;
            subtreeCount += traverseAllChildrenImpl(
              children[key],
              nextName,
              nextIndex,
              callback,
              traverseContext
            );
          }
        }
      }
    }
    return subtreeCount;
  };

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
}

module.exports = traverseAllChildren;

},{"./ReactElement":52,"./ReactInstanceHandles":60,"./invariant":126}],145:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

"use strict";

var emptyFunction = _dereq_("./emptyFunction");

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("production" !== "development") {
  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (!condition) {
      var argIndex = 0;
      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));
    }
  };
}

module.exports = warning;

},{"./emptyFunction":107}]},{},[1])(1)
});
var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-3123";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_target_STAR_ = "default";
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function cljs$core$_STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function cljs$core$set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function cljs$core$pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function cljs$core$enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__15883__delegate = function(args) {
      return console.log.apply(console, function() {
        var G__15882 = args;
        return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(G__15882) : cljs.core.into_array.call(null, G__15882);
      }());
    };
    var G__15883 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__15884__i = 0, G__15884__a = new Array(arguments.length - 0);
        while (G__15884__i < G__15884__a.length) {
          G__15884__a[G__15884__i] = arguments[G__15884__i + 0];
          ++G__15884__i;
        }
        args = new cljs.core.IndexedSeq(G__15884__a, 0);
      }
      return G__15883__delegate.call(this, args);
    };
    G__15883.cljs$lang$maxFixedArity = 0;
    G__15883.cljs$lang$applyTo = function(arglist__15885) {
      var args = cljs.core.seq(arglist__15885);
      return G__15883__delegate(args);
    };
    G__15883.cljs$core$IFn$_invoke$arity$variadic = G__15883__delegate;
    return G__15883;
  }();
};
cljs.core.truth_ = function cljs$core$truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function cljs$core$identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function cljs$core$nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function cljs$core$array_QMARK_(x) {
  if (cljs.core._STAR_target_STAR_ === "nodejs") {
    return Array.isArray(x);
  } else {
    return x instanceof Array;
  }
};
cljs.core.number_QMARK_ = function cljs$core$number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function cljs$core$not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function cljs$core$some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function cljs$core$object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function cljs$core$string_QMARK_(x) {
  var G__15887 = x;
  return goog.isString(G__15887);
};
cljs.core.native_satisfies_QMARK_ = function cljs$core$native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[function() {
    var G__15889 = x__$1;
    return goog.typeOf(G__15889);
  }()]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function cljs$core$is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function cljs$core$type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function cljs$core$missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__4097__auto__ = ty;
    if (cljs.core.truth_(and__4097__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__4097__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : function() {
    var G__15891 = obj;
    return goog.typeOf(G__15891);
  }();
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function cljs$core$type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.load_file = function cljs$core$load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.nodeGlobalRequire(file);
  }
};
if (typeof Symbol !== "undefined" && function() {
  var G__15893 = Symbol;
  return goog.typeOf(G__15893);
}() === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.make_array = function() {
  var cljs$core$make_array = null;
  var cljs$core$make_array__1 = function(size) {
    return new Array(size);
  };
  var cljs$core$make_array__2 = function(type, size) {
    return cljs$core$make_array.cljs$core$IFn$_invoke$arity$1(size);
  };
  cljs$core$make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return cljs$core$make_array__1.call(this, type);
      case 2:
        return cljs$core$make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$make_array.cljs$core$IFn$_invoke$arity$1 = cljs$core$make_array__1;
  cljs$core$make_array.cljs$core$IFn$_invoke$arity$2 = cljs$core$make_array__2;
  return cljs$core$make_array;
}();
cljs.core.aclone = function cljs$core$aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4994__auto___15895 = len;
  var i_15896 = 0;
  while (true) {
    if (i_15896 < n__4994__auto___15895) {
      new_arr[i_15896] = arr[i_15896];
      var G__15897 = i_15896 + 1;
      i_15896 = G__15897;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function cljs$core$array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__15898 = i + 1;
      i = G__15898;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.aget = function() {
  var cljs$core$aget = null;
  var cljs$core$aget__2 = function(array, i) {
    return array[i];
  };
  var cljs$core$aget__3 = function() {
    var G__15907__delegate = function(array, i, idxs) {
      var G__15904 = cljs$core$aget;
      var G__15905 = cljs$core$aget.cljs$core$IFn$_invoke$arity$2(array, i);
      var G__15906 = idxs;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__15904, G__15905, G__15906) : cljs.core.apply.call(null, G__15904, G__15905, G__15906);
    };
    var G__15907 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        var G__15908__i = 0, G__15908__a = new Array(arguments.length - 2);
        while (G__15908__i < G__15908__a.length) {
          G__15908__a[G__15908__i] = arguments[G__15908__i + 2];
          ++G__15908__i;
        }
        idxs = new cljs.core.IndexedSeq(G__15908__a, 0);
      }
      return G__15907__delegate.call(this, array, i, idxs);
    };
    G__15907.cljs$lang$maxFixedArity = 2;
    G__15907.cljs$lang$applyTo = function(arglist__15909) {
      var array = cljs.core.first(arglist__15909);
      arglist__15909 = cljs.core.next(arglist__15909);
      var i = cljs.core.first(arglist__15909);
      var idxs = cljs.core.rest(arglist__15909);
      return G__15907__delegate(array, i, idxs);
    };
    G__15907.cljs$core$IFn$_invoke$arity$variadic = G__15907__delegate;
    return G__15907;
  }();
  cljs$core$aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$aget__2.call(this, array, i);
      default:
        var G__15910 = null;
        if (arguments.length > 2) {
          var G__15911__i = 0, G__15911__a = new Array(arguments.length - 2);
          while (G__15911__i < G__15911__a.length) {
            G__15911__a[G__15911__i] = arguments[G__15911__i + 2];
            ++G__15911__i;
          }
          G__15910 = new cljs.core.IndexedSeq(G__15911__a, 0);
        }
        return cljs$core$aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, G__15910);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$aget.cljs$lang$maxFixedArity = 2;
  cljs$core$aget.cljs$lang$applyTo = cljs$core$aget__3.cljs$lang$applyTo;
  cljs$core$aget.cljs$core$IFn$_invoke$arity$2 = cljs$core$aget__2;
  cljs$core$aget.cljs$core$IFn$_invoke$arity$variadic = cljs$core$aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$aget;
}();
cljs.core.aset = function() {
  var cljs$core$aset = null;
  var cljs$core$aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var cljs$core$aset__4 = function() {
    var G__15920__delegate = function(array, idx, idx2, idxv) {
      var G__15916 = cljs$core$aset;
      var G__15917 = array[idx];
      var G__15918 = idx2;
      var G__15919 = idxv;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__15916, G__15917, G__15918, G__15919) : cljs.core.apply.call(null, G__15916, G__15917, G__15918, G__15919);
    };
    var G__15920 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        var G__15921__i = 0, G__15921__a = new Array(arguments.length - 3);
        while (G__15921__i < G__15921__a.length) {
          G__15921__a[G__15921__i] = arguments[G__15921__i + 3];
          ++G__15921__i;
        }
        idxv = new cljs.core.IndexedSeq(G__15921__a, 0);
      }
      return G__15920__delegate.call(this, array, idx, idx2, idxv);
    };
    G__15920.cljs$lang$maxFixedArity = 3;
    G__15920.cljs$lang$applyTo = function(arglist__15922) {
      var array = cljs.core.first(arglist__15922);
      arglist__15922 = cljs.core.next(arglist__15922);
      var idx = cljs.core.first(arglist__15922);
      arglist__15922 = cljs.core.next(arglist__15922);
      var idx2 = cljs.core.first(arglist__15922);
      var idxv = cljs.core.rest(arglist__15922);
      return G__15920__delegate(array, idx, idx2, idxv);
    };
    G__15920.cljs$core$IFn$_invoke$arity$variadic = G__15920__delegate;
    return G__15920;
  }();
  cljs$core$aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return cljs$core$aset__3.call(this, array, idx, idx2);
      default:
        var G__15923 = null;
        if (arguments.length > 3) {
          var G__15924__i = 0, G__15924__a = new Array(arguments.length - 3);
          while (G__15924__i < G__15924__a.length) {
            G__15924__a[G__15924__i] = arguments[G__15924__i + 3];
            ++G__15924__i;
          }
          G__15923 = new cljs.core.IndexedSeq(G__15924__a, 0);
        }
        return cljs$core$aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, G__15923);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$aset.cljs$lang$maxFixedArity = 3;
  cljs$core$aset.cljs$lang$applyTo = cljs$core$aset__4.cljs$lang$applyTo;
  cljs$core$aset.cljs$core$IFn$_invoke$arity$3 = cljs$core$aset__3;
  cljs$core$aset.cljs$core$IFn$_invoke$arity$variadic = cljs$core$aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$aset;
}();
cljs.core.alength = function cljs$core$alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var cljs$core$into_array = null;
  var cljs$core$into_array__1 = function(aseq) {
    return cljs$core$into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
  };
  var cljs$core$into_array__2 = function(type, aseq) {
    var G__15930 = function(a, x) {
      a.push(x);
      return a;
    };
    var G__15931 = [];
    var G__15932 = aseq;
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__15930, G__15931, G__15932) : cljs.core.reduce.call(null, G__15930, G__15931, G__15932);
  };
  cljs$core$into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return cljs$core$into_array__1.call(this, type);
      case 2:
        return cljs$core$into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$into_array.cljs$core$IFn$_invoke$arity$1 = cljs$core$into_array__1;
  cljs$core$into_array.cljs$core$IFn$_invoke$arity$2 = cljs$core$into_array__2;
  return cljs$core$into_array;
}();
cljs.core.js_invoke = function() {
  var cljs$core$js_invoke__delegate = function(obj, s, args) {
    return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
  };
  var cljs$core$js_invoke = function(obj, s, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__15933__i = 0, G__15933__a = new Array(arguments.length - 2);
      while (G__15933__i < G__15933__a.length) {
        G__15933__a[G__15933__i] = arguments[G__15933__i + 2];
        ++G__15933__i;
      }
      args = new cljs.core.IndexedSeq(G__15933__a, 0);
    }
    return cljs$core$js_invoke__delegate.call(this, obj, s, args);
  };
  cljs$core$js_invoke.cljs$lang$maxFixedArity = 2;
  cljs$core$js_invoke.cljs$lang$applyTo = function(arglist__15934) {
    var obj = cljs.core.first(arglist__15934);
    arglist__15934 = cljs.core.next(arglist__15934);
    var s = cljs.core.first(arglist__15934);
    var args = cljs.core.rest(arglist__15934);
    return cljs$core$js_invoke__delegate(obj, s, args);
  };
  cljs$core$js_invoke.cljs$core$IFn$_invoke$arity$variadic = cljs$core$js_invoke__delegate;
  return cljs$core$js_invoke;
}();
cljs.core.Fn = function() {
  var obj15936 = {};
  return obj15936;
}();
cljs.core.IFn = function() {
  var obj15938 = {};
  return obj15938;
}();
cljs.core._invoke = function() {
  var cljs$core$_invoke = null;
  var cljs$core$_invoke__1 = function(this$) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = cljs.core._invoke[function() {
          var G__15984 = x__4745__auto__;
          return goog.typeOf(G__15984);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._invoke["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var cljs$core$_invoke__2 = function(this$, a) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = cljs.core._invoke[function() {
          var G__15986 = x__4745__auto__;
          return goog.typeOf(G__15986);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._invoke["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var cljs$core$_invoke__3 = function(this$, a, b) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = cljs.core._invoke[function() {
          var G__15988 = x__4745__auto__;
          return goog.typeOf(G__15988);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._invoke["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var cljs$core$_invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = cljs.core._invoke[function() {
          var G__15990 = x__4745__auto__;
          return goog.typeOf(G__15990);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._invoke["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var cljs$core$_invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = cljs.core._invoke[function() {
          var G__15992 = x__4745__auto__;
          return goog.typeOf(G__15992);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._invoke["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var cljs$core$_invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = cljs.core._invoke[function() {
          var G__15994 = x__4745__auto__;
          return goog.typeOf(G__15994);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._invoke["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var cljs$core$_invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = cljs.core._invoke[function() {
          var G__15996 = x__4745__auto__;
          return goog.typeOf(G__15996);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._invoke["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var cljs$core$_invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = cljs.core._invoke[function() {
          var G__15998 = x__4745__auto__;
          return goog.typeOf(G__15998);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._invoke["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var cljs$core$_invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = cljs.core._invoke[function() {
          var G__16000 = x__4745__auto__;
          return goog.typeOf(G__16000);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._invoke["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var cljs$core$_invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = cljs.core._invoke[function() {
          var G__16002 = x__4745__auto__;
          return goog.typeOf(G__16002);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._invoke["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var cljs$core$_invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = cljs.core._invoke[function() {
          var G__16004 = x__4745__auto__;
          return goog.typeOf(G__16004);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._invoke["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var cljs$core$_invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = cljs.core._invoke[function() {
          var G__16006 = x__4745__auto__;
          return goog.typeOf(G__16006);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._invoke["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var cljs$core$_invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = cljs.core._invoke[function() {
          var G__16008 = x__4745__auto__;
          return goog.typeOf(G__16008);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._invoke["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var cljs$core$_invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = cljs.core._invoke[function() {
          var G__16010 = x__4745__auto__;
          return goog.typeOf(G__16010);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._invoke["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var cljs$core$_invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = cljs.core._invoke[function() {
          var G__16012 = x__4745__auto__;
          return goog.typeOf(G__16012);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._invoke["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var cljs$core$_invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = cljs.core._invoke[function() {
          var G__16014 = x__4745__auto__;
          return goog.typeOf(G__16014);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._invoke["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var cljs$core$_invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = cljs.core._invoke[function() {
          var G__16016 = x__4745__auto__;
          return goog.typeOf(G__16016);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._invoke["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var cljs$core$_invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = cljs.core._invoke[function() {
          var G__16018 = x__4745__auto__;
          return goog.typeOf(G__16018);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._invoke["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var cljs$core$_invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = cljs.core._invoke[function() {
          var G__16020 = x__4745__auto__;
          return goog.typeOf(G__16020);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._invoke["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    }
  };
  var cljs$core$_invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = cljs.core._invoke[function() {
          var G__16022 = x__4745__auto__;
          return goog.typeOf(G__16022);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._invoke["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    }
  };
  var cljs$core$_invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = cljs.core._invoke[function() {
          var G__16024 = x__4745__auto__;
          return goog.typeOf(G__16024);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._invoke["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    }
  };
  var cljs$core$_invoke__22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$22;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = cljs.core._invoke[function() {
          var G__16026 = x__4745__auto__;
          return goog.typeOf(G__16026);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._invoke["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
  };
  cljs$core$_invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return cljs$core$_invoke__1.call(this, this$);
      case 2:
        return cljs$core$_invoke__2.call(this, this$, a);
      case 3:
        return cljs$core$_invoke__3.call(this, this$, a, b);
      case 4:
        return cljs$core$_invoke__4.call(this, this$, a, b, c);
      case 5:
        return cljs$core$_invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return cljs$core$_invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return cljs$core$_invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return cljs$core$_invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return cljs$core$_invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return cljs$core$_invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return cljs$core$_invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return cljs$core$_invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return cljs$core$_invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return cljs$core$_invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return cljs$core$_invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return cljs$core$_invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return cljs$core$_invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return cljs$core$_invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return cljs$core$_invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return cljs$core$_invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return cljs$core$_invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return cljs$core$_invoke__22.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$1 = cljs$core$_invoke__1;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$2 = cljs$core$_invoke__2;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$3 = cljs$core$_invoke__3;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$4 = cljs$core$_invoke__4;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$5 = cljs$core$_invoke__5;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$6 = cljs$core$_invoke__6;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$7 = cljs$core$_invoke__7;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$8 = cljs$core$_invoke__8;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$9 = cljs$core$_invoke__9;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$10 = cljs$core$_invoke__10;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$11 = cljs$core$_invoke__11;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$12 = cljs$core$_invoke__12;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$13 = cljs$core$_invoke__13;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$14 = cljs$core$_invoke__14;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$15 = cljs$core$_invoke__15;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$16 = cljs$core$_invoke__16;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$17 = cljs$core$_invoke__17;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$18 = cljs$core$_invoke__18;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$19 = cljs$core$_invoke__19;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$20 = cljs$core$_invoke__20;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$21 = cljs$core$_invoke__21;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$22 = cljs$core$_invoke__22;
  return cljs$core$_invoke;
}();
cljs.core.ICloneable = function() {
  var obj16028 = {};
  return obj16028;
}();
cljs.core._clone = function cljs$core$_clone(value) {
  if (function() {
    var and__4097__auto__ = value;
    if (and__4097__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4745__auto__ = value == null ? null : value;
    return function() {
      var or__4109__auto__ = cljs.core._clone[function() {
        var G__16032 = x__4745__auto__;
        return goog.typeOf(G__16032);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._clone["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj16034 = {};
  return obj16034;
}();
cljs.core._count = function cljs$core$_count(coll) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._count[function() {
        var G__16038 = x__4745__auto__;
        return goog.typeOf(G__16038);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._count["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj16040 = {};
  return obj16040;
}();
cljs.core._empty = function cljs$core$_empty(coll) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._empty[function() {
        var G__16044 = x__4745__auto__;
        return goog.typeOf(G__16044);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._empty["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj16046 = {};
  return obj16046;
}();
cljs.core._conj = function cljs$core$_conj(coll, o) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._conj[function() {
        var G__16050 = x__4745__auto__;
        return goog.typeOf(G__16050);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._conj["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj16052 = {};
  return obj16052;
}();
cljs.core._nth = function() {
  var cljs$core$_nth = null;
  var cljs$core$_nth__2 = function(coll, n) {
    if (function() {
      var and__4097__auto__ = coll;
      if (and__4097__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4745__auto__ = coll == null ? null : coll;
      return function() {
        var or__4109__auto__ = cljs.core._nth[function() {
          var G__16058 = x__4745__auto__;
          return goog.typeOf(G__16058);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._nth["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var cljs$core$_nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__4097__auto__ = coll;
      if (and__4097__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4745__auto__ = coll == null ? null : coll;
      return function() {
        var or__4109__auto__ = cljs.core._nth[function() {
          var G__16060 = x__4745__auto__;
          return goog.typeOf(G__16060);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._nth["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  cljs$core$_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return cljs$core$_nth__2.call(this, coll, n);
      case 3:
        return cljs$core$_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_nth.cljs$core$IFn$_invoke$arity$2 = cljs$core$_nth__2;
  cljs$core$_nth.cljs$core$IFn$_invoke$arity$3 = cljs$core$_nth__3;
  return cljs$core$_nth;
}();
cljs.core.ASeq = function() {
  var obj16062 = {};
  return obj16062;
}();
cljs.core.ISeq = function() {
  var obj16064 = {};
  return obj16064;
}();
cljs.core._first = function cljs$core$_first(coll) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._first[function() {
        var G__16068 = x__4745__auto__;
        return goog.typeOf(G__16068);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._first["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function cljs$core$_rest(coll) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._rest[function() {
        var G__16072 = x__4745__auto__;
        return goog.typeOf(G__16072);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._rest["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj16074 = {};
  return obj16074;
}();
cljs.core._next = function cljs$core$_next(coll) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._next[function() {
        var G__16078 = x__4745__auto__;
        return goog.typeOf(G__16078);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._next["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj16080 = {};
  return obj16080;
}();
cljs.core._lookup = function() {
  var cljs$core$_lookup = null;
  var cljs$core$_lookup__2 = function(o, k) {
    if (function() {
      var and__4097__auto__ = o;
      if (and__4097__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4745__auto__ = o == null ? null : o;
      return function() {
        var or__4109__auto__ = cljs.core._lookup[function() {
          var G__16086 = x__4745__auto__;
          return goog.typeOf(G__16086);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._lookup["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var cljs$core$_lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__4097__auto__ = o;
      if (and__4097__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4745__auto__ = o == null ? null : o;
      return function() {
        var or__4109__auto__ = cljs.core._lookup[function() {
          var G__16088 = x__4745__auto__;
          return goog.typeOf(G__16088);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._lookup["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  cljs$core$_lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return cljs$core$_lookup__2.call(this, o, k);
      case 3:
        return cljs$core$_lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_lookup.cljs$core$IFn$_invoke$arity$2 = cljs$core$_lookup__2;
  cljs$core$_lookup.cljs$core$IFn$_invoke$arity$3 = cljs$core$_lookup__3;
  return cljs$core$_lookup;
}();
cljs.core.IAssociative = function() {
  var obj16090 = {};
  return obj16090;
}();
cljs.core._contains_key_QMARK_ = function cljs$core$_contains_key_QMARK_(coll, k) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._contains_key_QMARK_[function() {
        var G__16094 = x__4745__auto__;
        return goog.typeOf(G__16094);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function cljs$core$_assoc(coll, k, v) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._assoc[function() {
        var G__16098 = x__4745__auto__;
        return goog.typeOf(G__16098);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._assoc["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj16100 = {};
  return obj16100;
}();
cljs.core._dissoc = function cljs$core$_dissoc(coll, k) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._dissoc[function() {
        var G__16104 = x__4745__auto__;
        return goog.typeOf(G__16104);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._dissoc["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj16106 = {};
  return obj16106;
}();
cljs.core._key = function cljs$core$_key(coll) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._key[function() {
        var G__16110 = x__4745__auto__;
        return goog.typeOf(G__16110);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._key["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function cljs$core$_val(coll) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._val[function() {
        var G__16114 = x__4745__auto__;
        return goog.typeOf(G__16114);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._val["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj16116 = {};
  return obj16116;
}();
cljs.core._disjoin = function cljs$core$_disjoin(coll, v) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._disjoin[function() {
        var G__16120 = x__4745__auto__;
        return goog.typeOf(G__16120);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._disjoin["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj16122 = {};
  return obj16122;
}();
cljs.core._peek = function cljs$core$_peek(coll) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._peek[function() {
        var G__16126 = x__4745__auto__;
        return goog.typeOf(G__16126);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._peek["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function cljs$core$_pop(coll) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._pop[function() {
        var G__16130 = x__4745__auto__;
        return goog.typeOf(G__16130);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._pop["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj16132 = {};
  return obj16132;
}();
cljs.core._assoc_n = function cljs$core$_assoc_n(coll, n, val) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._assoc_n[function() {
        var G__16136 = x__4745__auto__;
        return goog.typeOf(G__16136);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._assoc_n["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj16138 = {};
  return obj16138;
}();
cljs.core._deref = function cljs$core$_deref(o) {
  if (function() {
    var and__4097__auto__ = o;
    if (and__4097__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4745__auto__ = o == null ? null : o;
    return function() {
      var or__4109__auto__ = cljs.core._deref[function() {
        var G__16142 = x__4745__auto__;
        return goog.typeOf(G__16142);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._deref["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj16144 = {};
  return obj16144;
}();
cljs.core._deref_with_timeout = function cljs$core$_deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__4097__auto__ = o;
    if (and__4097__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4745__auto__ = o == null ? null : o;
    return function() {
      var or__4109__auto__ = cljs.core._deref_with_timeout[function() {
        var G__16148 = x__4745__auto__;
        return goog.typeOf(G__16148);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj16150 = {};
  return obj16150;
}();
cljs.core._meta = function cljs$core$_meta(o) {
  if (function() {
    var and__4097__auto__ = o;
    if (and__4097__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4745__auto__ = o == null ? null : o;
    return function() {
      var or__4109__auto__ = cljs.core._meta[function() {
        var G__16154 = x__4745__auto__;
        return goog.typeOf(G__16154);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._meta["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj16156 = {};
  return obj16156;
}();
cljs.core._with_meta = function cljs$core$_with_meta(o, meta) {
  if (function() {
    var and__4097__auto__ = o;
    if (and__4097__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4745__auto__ = o == null ? null : o;
    return function() {
      var or__4109__auto__ = cljs.core._with_meta[function() {
        var G__16160 = x__4745__auto__;
        return goog.typeOf(G__16160);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._with_meta["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj16162 = {};
  return obj16162;
}();
cljs.core._reduce = function() {
  var cljs$core$_reduce = null;
  var cljs$core$_reduce__2 = function(coll, f) {
    if (function() {
      var and__4097__auto__ = coll;
      if (and__4097__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4745__auto__ = coll == null ? null : coll;
      return function() {
        var or__4109__auto__ = cljs.core._reduce[function() {
          var G__16168 = x__4745__auto__;
          return goog.typeOf(G__16168);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._reduce["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var cljs$core$_reduce__3 = function(coll, f, start) {
    if (function() {
      var and__4097__auto__ = coll;
      if (and__4097__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4745__auto__ = coll == null ? null : coll;
      return function() {
        var or__4109__auto__ = cljs.core._reduce[function() {
          var G__16170 = x__4745__auto__;
          return goog.typeOf(G__16170);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._reduce["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  cljs$core$_reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return cljs$core$_reduce__2.call(this, coll, f);
      case 3:
        return cljs$core$_reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_reduce.cljs$core$IFn$_invoke$arity$2 = cljs$core$_reduce__2;
  cljs$core$_reduce.cljs$core$IFn$_invoke$arity$3 = cljs$core$_reduce__3;
  return cljs$core$_reduce;
}();
cljs.core.IKVReduce = function() {
  var obj16172 = {};
  return obj16172;
}();
cljs.core._kv_reduce = function cljs$core$_kv_reduce(coll, f, init) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._kv_reduce[function() {
        var G__16176 = x__4745__auto__;
        return goog.typeOf(G__16176);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj16178 = {};
  return obj16178;
}();
cljs.core._equiv = function cljs$core$_equiv(o, other) {
  if (function() {
    var and__4097__auto__ = o;
    if (and__4097__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4745__auto__ = o == null ? null : o;
    return function() {
      var or__4109__auto__ = cljs.core._equiv[function() {
        var G__16182 = x__4745__auto__;
        return goog.typeOf(G__16182);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._equiv["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj16184 = {};
  return obj16184;
}();
cljs.core._hash = function cljs$core$_hash(o) {
  if (function() {
    var and__4097__auto__ = o;
    if (and__4097__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4745__auto__ = o == null ? null : o;
    return function() {
      var or__4109__auto__ = cljs.core._hash[function() {
        var G__16188 = x__4745__auto__;
        return goog.typeOf(G__16188);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._hash["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj16190 = {};
  return obj16190;
}();
cljs.core._seq = function cljs$core$_seq(o) {
  if (function() {
    var and__4097__auto__ = o;
    if (and__4097__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4745__auto__ = o == null ? null : o;
    return function() {
      var or__4109__auto__ = cljs.core._seq[function() {
        var G__16194 = x__4745__auto__;
        return goog.typeOf(G__16194);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._seq["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj16196 = {};
  return obj16196;
}();
cljs.core.IList = function() {
  var obj16198 = {};
  return obj16198;
}();
cljs.core.IRecord = function() {
  var obj16200 = {};
  return obj16200;
}();
cljs.core.IReversible = function() {
  var obj16202 = {};
  return obj16202;
}();
cljs.core._rseq = function cljs$core$_rseq(coll) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._rseq[function() {
        var G__16206 = x__4745__auto__;
        return goog.typeOf(G__16206);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._rseq["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj16208 = {};
  return obj16208;
}();
cljs.core._sorted_seq = function cljs$core$_sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._sorted_seq[function() {
        var G__16212 = x__4745__auto__;
        return goog.typeOf(G__16212);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function cljs$core$_sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._sorted_seq_from[function() {
        var G__16216 = x__4745__auto__;
        return goog.typeOf(G__16216);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function cljs$core$_entry_key(coll, entry) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._entry_key[function() {
        var G__16220 = x__4745__auto__;
        return goog.typeOf(G__16220);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._entry_key["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function cljs$core$_comparator(coll) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._comparator[function() {
        var G__16224 = x__4745__auto__;
        return goog.typeOf(G__16224);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._comparator["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj16226 = {};
  return obj16226;
}();
cljs.core._write = function cljs$core$_write(writer, s) {
  if (function() {
    var and__4097__auto__ = writer;
    if (and__4097__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4745__auto__ = writer == null ? null : writer;
    return function() {
      var or__4109__auto__ = cljs.core._write[function() {
        var G__16230 = x__4745__auto__;
        return goog.typeOf(G__16230);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._write["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function cljs$core$_flush(writer) {
  if (function() {
    var and__4097__auto__ = writer;
    if (and__4097__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4745__auto__ = writer == null ? null : writer;
    return function() {
      var or__4109__auto__ = cljs.core._flush[function() {
        var G__16234 = x__4745__auto__;
        return goog.typeOf(G__16234);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._flush["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj16236 = {};
  return obj16236;
}();
cljs.core._pr_writer = function cljs$core$_pr_writer(o, writer, opts) {
  if (function() {
    var and__4097__auto__ = o;
    if (and__4097__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4745__auto__ = o == null ? null : o;
    return function() {
      var or__4109__auto__ = cljs.core._pr_writer[function() {
        var G__16240 = x__4745__auto__;
        return goog.typeOf(G__16240);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._pr_writer["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj16242 = {};
  return obj16242;
}();
cljs.core._realized_QMARK_ = function cljs$core$_realized_QMARK_(d) {
  if (function() {
    var and__4097__auto__ = d;
    if (and__4097__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4745__auto__ = d == null ? null : d;
    return function() {
      var or__4109__auto__ = cljs.core._realized_QMARK_[function() {
        var G__16246 = x__4745__auto__;
        return goog.typeOf(G__16246);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj16248 = {};
  return obj16248;
}();
cljs.core._notify_watches = function cljs$core$_notify_watches(this$, oldval, newval) {
  if (function() {
    var and__4097__auto__ = this$;
    if (and__4097__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4745__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4109__auto__ = cljs.core._notify_watches[function() {
        var G__16252 = x__4745__auto__;
        return goog.typeOf(G__16252);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._notify_watches["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function cljs$core$_add_watch(this$, key, f) {
  if (function() {
    var and__4097__auto__ = this$;
    if (and__4097__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4745__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4109__auto__ = cljs.core._add_watch[function() {
        var G__16256 = x__4745__auto__;
        return goog.typeOf(G__16256);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._add_watch["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function cljs$core$_remove_watch(this$, key) {
  if (function() {
    var and__4097__auto__ = this$;
    if (and__4097__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4745__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4109__auto__ = cljs.core._remove_watch[function() {
        var G__16260 = x__4745__auto__;
        return goog.typeOf(G__16260);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._remove_watch["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj16262 = {};
  return obj16262;
}();
cljs.core._as_transient = function cljs$core$_as_transient(coll) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._as_transient[function() {
        var G__16266 = x__4745__auto__;
        return goog.typeOf(G__16266);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._as_transient["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj16268 = {};
  return obj16268;
}();
cljs.core._conj_BANG_ = function cljs$core$_conj_BANG_(tcoll, val) {
  if (function() {
    var and__4097__auto__ = tcoll;
    if (and__4097__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4745__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4109__auto__ = cljs.core._conj_BANG_[function() {
        var G__16272 = x__4745__auto__;
        return goog.typeOf(G__16272);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function cljs$core$_persistent_BANG_(tcoll) {
  if (function() {
    var and__4097__auto__ = tcoll;
    if (and__4097__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4745__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4109__auto__ = cljs.core._persistent_BANG_[function() {
        var G__16276 = x__4745__auto__;
        return goog.typeOf(G__16276);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj16278 = {};
  return obj16278;
}();
cljs.core._assoc_BANG_ = function cljs$core$_assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__4097__auto__ = tcoll;
    if (and__4097__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4745__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4109__auto__ = cljs.core._assoc_BANG_[function() {
        var G__16282 = x__4745__auto__;
        return goog.typeOf(G__16282);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj16284 = {};
  return obj16284;
}();
cljs.core._dissoc_BANG_ = function cljs$core$_dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__4097__auto__ = tcoll;
    if (and__4097__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4745__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4109__auto__ = cljs.core._dissoc_BANG_[function() {
        var G__16288 = x__4745__auto__;
        return goog.typeOf(G__16288);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj16290 = {};
  return obj16290;
}();
cljs.core._assoc_n_BANG_ = function cljs$core$_assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__4097__auto__ = tcoll;
    if (and__4097__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4745__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4109__auto__ = cljs.core._assoc_n_BANG_[function() {
        var G__16294 = x__4745__auto__;
        return goog.typeOf(G__16294);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function cljs$core$_pop_BANG_(tcoll) {
  if (function() {
    var and__4097__auto__ = tcoll;
    if (and__4097__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4745__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4109__auto__ = cljs.core._pop_BANG_[function() {
        var G__16298 = x__4745__auto__;
        return goog.typeOf(G__16298);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj16300 = {};
  return obj16300;
}();
cljs.core._disjoin_BANG_ = function cljs$core$_disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__4097__auto__ = tcoll;
    if (and__4097__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4745__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4109__auto__ = cljs.core._disjoin_BANG_[function() {
        var G__16304 = x__4745__auto__;
        return goog.typeOf(G__16304);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj16306 = {};
  return obj16306;
}();
cljs.core._compare = function cljs$core$_compare(x, y) {
  if (function() {
    var and__4097__auto__ = x;
    if (and__4097__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4745__auto__ = x == null ? null : x;
    return function() {
      var or__4109__auto__ = cljs.core._compare[function() {
        var G__16310 = x__4745__auto__;
        return goog.typeOf(G__16310);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._compare["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj16312 = {};
  return obj16312;
}();
cljs.core._drop_first = function cljs$core$_drop_first(coll) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._drop_first[function() {
        var G__16316 = x__4745__auto__;
        return goog.typeOf(G__16316);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._drop_first["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj16318 = {};
  return obj16318;
}();
cljs.core._chunked_first = function cljs$core$_chunked_first(coll) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._chunked_first[function() {
        var G__16322 = x__4745__auto__;
        return goog.typeOf(G__16322);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._chunked_first["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function cljs$core$_chunked_rest(coll) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._chunked_rest[function() {
        var G__16326 = x__4745__auto__;
        return goog.typeOf(G__16326);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj16328 = {};
  return obj16328;
}();
cljs.core._chunked_next = function cljs$core$_chunked_next(coll) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._chunked_next[function() {
        var G__16332 = x__4745__auto__;
        return goog.typeOf(G__16332);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._chunked_next["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj16334 = {};
  return obj16334;
}();
cljs.core._name = function cljs$core$_name(x) {
  if (function() {
    var and__4097__auto__ = x;
    if (and__4097__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4745__auto__ = x == null ? null : x;
    return function() {
      var or__4109__auto__ = cljs.core._name[function() {
        var G__16338 = x__4745__auto__;
        return goog.typeOf(G__16338);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._name["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function cljs$core$_namespace(x) {
  if (function() {
    var and__4097__auto__ = x;
    if (and__4097__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4745__auto__ = x == null ? null : x;
    return function() {
      var or__4109__auto__ = cljs.core._namespace[function() {
        var G__16342 = x__4745__auto__;
        return goog.typeOf(G__16342);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._namespace["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj16344 = {};
  return obj16344;
}();
cljs.core.IReset = function() {
  var obj16346 = {};
  return obj16346;
}();
cljs.core._reset_BANG_ = function cljs$core$_reset_BANG_(o, new_value) {
  if (function() {
    var and__4097__auto__ = o;
    if (and__4097__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4745__auto__ = o == null ? null : o;
    return function() {
      var or__4109__auto__ = cljs.core._reset_BANG_[function() {
        var G__16350 = x__4745__auto__;
        return goog.typeOf(G__16350);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj16352 = {};
  return obj16352;
}();
cljs.core._swap_BANG_ = function() {
  var cljs$core$_swap_BANG_ = null;
  var cljs$core$_swap_BANG___2 = function(o, f) {
    if (function() {
      var and__4097__auto__ = o;
      if (and__4097__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4745__auto__ = o == null ? null : o;
      return function() {
        var or__4109__auto__ = cljs.core._swap_BANG_[function() {
          var G__16362 = x__4745__auto__;
          return goog.typeOf(G__16362);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var cljs$core$_swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__4097__auto__ = o;
      if (and__4097__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4745__auto__ = o == null ? null : o;
      return function() {
        var or__4109__auto__ = cljs.core._swap_BANG_[function() {
          var G__16364 = x__4745__auto__;
          return goog.typeOf(G__16364);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var cljs$core$_swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__4097__auto__ = o;
      if (and__4097__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4745__auto__ = o == null ? null : o;
      return function() {
        var or__4109__auto__ = cljs.core._swap_BANG_[function() {
          var G__16366 = x__4745__auto__;
          return goog.typeOf(G__16366);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var cljs$core$_swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__4097__auto__ = o;
      if (and__4097__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4745__auto__ = o == null ? null : o;
      return function() {
        var or__4109__auto__ = cljs.core._swap_BANG_[function() {
          var G__16368 = x__4745__auto__;
          return goog.typeOf(G__16368);
        }()];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  cljs$core$_swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return cljs$core$_swap_BANG___2.call(this, o, f);
      case 3:
        return cljs$core$_swap_BANG___3.call(this, o, f, a);
      case 4:
        return cljs$core$_swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return cljs$core$_swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_swap_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_swap_BANG___2;
  cljs$core$_swap_BANG_.cljs$core$IFn$_invoke$arity$3 = cljs$core$_swap_BANG___3;
  cljs$core$_swap_BANG_.cljs$core$IFn$_invoke$arity$4 = cljs$core$_swap_BANG___4;
  cljs$core$_swap_BANG_.cljs$core$IFn$_invoke$arity$5 = cljs$core$_swap_BANG___5;
  return cljs$core$_swap_BANG_;
}();
cljs.core.IVolatile = function() {
  var obj16370 = {};
  return obj16370;
}();
cljs.core._vreset_BANG_ = function cljs$core$_vreset_BANG_(o, new_value) {
  if (function() {
    var and__4097__auto__ = o;
    if (and__4097__auto__) {
      return o.cljs$core$IVolatile$_vreset_BANG_$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__4745__auto__ = o == null ? null : o;
    return function() {
      var or__4109__auto__ = cljs.core._vreset_BANG_[function() {
        var G__16374 = x__4745__auto__;
        return goog.typeOf(G__16374);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._vreset_BANG_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.IIterable = function() {
  var obj16376 = {};
  return obj16376;
}();
cljs.core._iterator = function cljs$core$_iterator(coll) {
  if (function() {
    var and__4097__auto__ = coll;
    if (and__4097__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4745__auto__ = coll == null ? null : coll;
    return function() {
      var or__4109__auto__ = cljs.core._iterator[function() {
        var G__16380 = x__4745__auto__;
        return goog.typeOf(G__16380);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._iterator["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function cljs$core$__GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function cljs$core$pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return[cljs.core.str(sb)].join("");
};
cljs.core.int_rotate_left = function cljs$core$int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(function() {
  var G__16383 = 4294967295;
  var G__16384 = 5;
  return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__16383, G__16384) : Math.imul.call(null, G__16383, G__16384);
}() === 0)) {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var G__16387 = a;
    var G__16388 = b;
    return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__16387, G__16388) : Math.imul.call(null, G__16387, G__16388);
  };
} else {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353 | 0;
cljs.core.m3_C2 = 461845907 | 0;
cljs.core.m3_mix_K1 = function cljs$core$m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1 | 0, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function cljs$core$m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left((h1 | 0) ^ (k1 | 0), 13), 5) + (3864292196 | 0) | 0;
};
cljs.core.m3_fmix = function cljs$core$m3_fmix(h1, len) {
  var h1__$1 = h1 | 0;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507 | 0);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909 | 0);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function cljs$core$m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function cljs$core$m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__16389 = i + 2;
        var G__16390 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__16389;
        h1 = G__16390;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj16392 = {};
  return obj16392;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function cljs$core$hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__16393 = i + 1;
          var G__16394 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__16393;
          hash = G__16394;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function cljs$core$add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function cljs$core$hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj16398 = {};
      return obj16398;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache(k);
  }
};
cljs.core.hash = function cljs$core$hash(o) {
  if (function() {
    var G__16401 = o;
    if (G__16401) {
      var bit__4776__auto__ = G__16401.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4776__auto__ || G__16401.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(null);
  } else {
    if (typeof o === "number") {
      return function() {
        var G__16402 = o;
        return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__16402) : Math.floor.call(null, G__16402);
      }() % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf();
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o);
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function cljs$core$hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function cljs$core$instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function cljs$core$symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function cljs$core$hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function cljs$core$compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4097__auto__ = cljs.core.not(a.ns);
      if (and__4097__auto__) {
        return b.ns;
      } else {
        return and__4097__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__16409 = a.ns;
            var G__16410 = b.ns;
            return goog.array.defaultCompare(G__16409, G__16410);
          }();
          if (0 === nsc) {
            var G__16411 = a.name;
            var G__16412 = b.name;
            return goog.array.defaultCompare(G__16411, G__16412);
          } else {
            return nsc;
          }
        }
      } else {
        var G__16413 = a.name;
        var G__16414 = b.name;
        return goog.array.defaultCompare(G__16413, G__16414);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4525__auto__ = self__._hash;
  if (!(h__4525__auto__ == null)) {
    return h__4525__auto__;
  } else {
    var h__4525__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__4525__auto____$1;
    return h__4525__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__16416 = null;
  var G__16416__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
  };
  var G__16416__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
  };
  G__16416 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16416__2.call(this, self__, coll);
      case 3:
        return G__16416__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16416.cljs$core$IFn$_invoke$arity$2 = G__16416__2;
  G__16416.cljs$core$IFn$_invoke$arity$3 = G__16416__3;
  return G__16416;
}();
cljs.core.Symbol.prototype.apply = function(self__, args16415) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args16415)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function cljs$core$__GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var cljs$core$symbol = null;
  var cljs$core$symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return cljs$core$symbol.cljs$core$IFn$_invoke$arity$2(null, name);
    }
  };
  var cljs$core$symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  cljs$core$symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return cljs$core$symbol__1.call(this, ns);
      case 2:
        return cljs$core$symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$symbol.cljs$core$IFn$_invoke$arity$1 = cljs$core$symbol__1;
  cljs$core$symbol.cljs$core$IFn$_invoke$arity$2 = cljs$core$symbol__2;
  return cljs$core$symbol;
}();
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 163841;
};
cljs.core.Var.prototype.call = function() {
  var G__16464 = null;
  var G__16464__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null);
  };
  var G__16464__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a);
  };
  var G__16464__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b);
  };
  var G__16464__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c);
  };
  var G__16464__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d);
  };
  var G__16464__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e);
  };
  var G__16464__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f);
  };
  var G__16464__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g);
  };
  var G__16464__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h);
  };
  var G__16464__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__16464__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__16464__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__16464__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__16464__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__16464__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__16464__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__16464__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__16464__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__16464__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__16464__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__16464__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__16464__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16420 = function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }();
    var G__16421 = a;
    var G__16422 = b;
    var G__16423 = c;
    var G__16424 = d;
    var G__16425 = e;
    var G__16426 = f;
    var G__16427 = g;
    var G__16428 = h;
    var G__16429 = i;
    var G__16430 = j;
    var G__16431 = k;
    var G__16432 = l;
    var G__16433 = m;
    var G__16434 = n;
    var G__16435 = o;
    var G__16436 = p;
    var G__16437 = q;
    var G__16438 = r;
    var G__16439 = s;
    var G__16440 = t;
    var G__16441 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__16420, G__16421, G__16422, G__16423, G__16424, G__16425, G__16426, G__16427, G__16428, G__16429, G__16430, G__16431, G__16432, G__16433, G__16434, G__16435, G__16436, G__16437, G__16438, G__16439, G__16440, G__16441) : cljs.core.apply.call(null, G__16420, G__16421, G__16422, G__16423, G__16424, G__16425, G__16426, G__16427, G__16428, G__16429, G__16430, G__16431, G__16432, G__16433, G__16434, 
    G__16435, G__16436, G__16437, G__16438, G__16439, G__16440, G__16441);
  };
  G__16464 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__16464__1.call(this, self__);
      case 2:
        return G__16464__2.call(this, self__, a);
      case 3:
        return G__16464__3.call(this, self__, a, b);
      case 4:
        return G__16464__4.call(this, self__, a, b, c);
      case 5:
        return G__16464__5.call(this, self__, a, b, c, d);
      case 6:
        return G__16464__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__16464__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__16464__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__16464__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__16464__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__16464__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__16464__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__16464__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__16464__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__16464__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__16464__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__16464__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__16464__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__16464__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__16464__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__16464__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__16464__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16464.cljs$core$IFn$_invoke$arity$1 = G__16464__1;
  G__16464.cljs$core$IFn$_invoke$arity$2 = G__16464__2;
  G__16464.cljs$core$IFn$_invoke$arity$3 = G__16464__3;
  G__16464.cljs$core$IFn$_invoke$arity$4 = G__16464__4;
  G__16464.cljs$core$IFn$_invoke$arity$5 = G__16464__5;
  G__16464.cljs$core$IFn$_invoke$arity$6 = G__16464__6;
  G__16464.cljs$core$IFn$_invoke$arity$7 = G__16464__7;
  G__16464.cljs$core$IFn$_invoke$arity$8 = G__16464__8;
  G__16464.cljs$core$IFn$_invoke$arity$9 = G__16464__9;
  G__16464.cljs$core$IFn$_invoke$arity$10 = G__16464__10;
  G__16464.cljs$core$IFn$_invoke$arity$11 = G__16464__11;
  G__16464.cljs$core$IFn$_invoke$arity$12 = G__16464__12;
  G__16464.cljs$core$IFn$_invoke$arity$13 = G__16464__13;
  G__16464.cljs$core$IFn$_invoke$arity$14 = G__16464__14;
  G__16464.cljs$core$IFn$_invoke$arity$15 = G__16464__15;
  G__16464.cljs$core$IFn$_invoke$arity$16 = G__16464__16;
  G__16464.cljs$core$IFn$_invoke$arity$17 = G__16464__17;
  G__16464.cljs$core$IFn$_invoke$arity$18 = G__16464__18;
  G__16464.cljs$core$IFn$_invoke$arity$19 = G__16464__19;
  G__16464.cljs$core$IFn$_invoke$arity$20 = G__16464__20;
  G__16464.cljs$core$IFn$_invoke$arity$21 = G__16464__21;
  G__16464.cljs$core$IFn$_invoke$arity$22 = G__16464__22;
  return G__16464;
}();
cljs.core.Var.prototype.apply = function(self__, args16419) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args16419)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__16442 = function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }();
  var G__16443 = a;
  var G__16444 = b;
  var G__16445 = c;
  var G__16446 = d;
  var G__16447 = e;
  var G__16448 = f;
  var G__16449 = g;
  var G__16450 = h;
  var G__16451 = i;
  var G__16452 = j;
  var G__16453 = k;
  var G__16454 = l;
  var G__16455 = m;
  var G__16456 = n;
  var G__16457 = o;
  var G__16458 = p;
  var G__16459 = q;
  var G__16460 = r;
  var G__16461 = s;
  var G__16462 = t;
  var G__16463 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__16442, G__16443, G__16444, G__16445, G__16446, G__16447, G__16448, G__16449, G__16450, G__16451, G__16452, G__16453, G__16454, G__16455, G__16456, G__16457, G__16458, G__16459, G__16460, G__16461, G__16462, G__16463) : cljs.core.apply.call(null, G__16442, G__16443, G__16444, G__16445, G__16446, G__16447, G__16448, G__16449, G__16450, G__16451, G__16452, G__16453, G__16454, G__16455, G__16456, 
  G__16457, G__16458, G__16459, G__16460, G__16461, G__16462, G__16463);
};
cljs.core.Var.prototype.cljs$core$Fn$ = true;
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function cljs$core$__GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.iterable_QMARK_ = function cljs$core$iterable_QMARK_(x) {
  var G__16466 = x;
  if (G__16466) {
    var bit__4783__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4109__auto__ = bit__4783__auto__;
      if (cljs.core.truth_(or__4109__auto__)) {
        return or__4109__auto__;
      } else {
        return G__16466.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__16466.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__16466);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__16466);
  }
};
cljs.core.clone = function cljs$core$clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cljs$core$cloneable_QMARK_(value) {
  var G__16468 = value;
  if (G__16468) {
    var bit__4783__auto__ = G__16468.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4783__auto__ || G__16468.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__16468.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__16468);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__16468);
  }
};
cljs.core.seq = function cljs$core$seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__16470 = coll;
      if (G__16470) {
        var bit__4776__auto__ = G__16470.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4776__auto__ || G__16470.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str(coll), cljs.core.str(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function cljs$core$first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__16472 = coll;
      if (G__16472) {
        var bit__4776__auto__ = G__16472.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4776__auto__ || G__16472.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function cljs$core$rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__16474 = coll;
      if (G__16474) {
        var bit__4776__auto__ = G__16474.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4776__auto__ || G__16474.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function cljs$core$next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__16476 = coll;
      if (G__16476) {
        var bit__4776__auto__ = G__16476.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4776__auto__ || G__16476.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var cljs$core$_EQ_ = null;
  var cljs$core$_EQ___1 = function(x) {
    return true;
  };
  var cljs$core$_EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv(x, y);
    }
  };
  var cljs$core$_EQ___3 = function() {
    var G__16481__delegate = function(x, y, more) {
      while (true) {
        if (cljs$core$_EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
          if (cljs.core.next(more)) {
            var G__16482 = y;
            var G__16483 = cljs.core.first(more);
            var G__16484 = cljs.core.next(more);
            x = G__16482;
            y = G__16483;
            more = G__16484;
            continue;
          } else {
            return cljs$core$_EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16481 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__16485__i = 0, G__16485__a = new Array(arguments.length - 2);
        while (G__16485__i < G__16485__a.length) {
          G__16485__a[G__16485__i] = arguments[G__16485__i + 2];
          ++G__16485__i;
        }
        more = new cljs.core.IndexedSeq(G__16485__a, 0);
      }
      return G__16481__delegate.call(this, x, y, more);
    };
    G__16481.cljs$lang$maxFixedArity = 2;
    G__16481.cljs$lang$applyTo = function(arglist__16486) {
      var x = cljs.core.first(arglist__16486);
      arglist__16486 = cljs.core.next(arglist__16486);
      var y = cljs.core.first(arglist__16486);
      var more = cljs.core.rest(arglist__16486);
      return G__16481__delegate(x, y, more);
    };
    G__16481.cljs$core$IFn$_invoke$arity$variadic = G__16481__delegate;
    return G__16481;
  }();
  cljs$core$_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_EQ___1.call(this, x);
      case 2:
        return cljs$core$_EQ___2.call(this, x, y);
      default:
        var G__16487 = null;
        if (arguments.length > 2) {
          var G__16488__i = 0, G__16488__a = new Array(arguments.length - 2);
          while (G__16488__i < G__16488__a.length) {
            G__16488__a[G__16488__i] = arguments[G__16488__i + 2];
            ++G__16488__i;
          }
          G__16487 = new cljs.core.IndexedSeq(G__16488__a, 0);
        }
        return cljs$core$_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16487);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_EQ_.cljs$lang$maxFixedArity = 2;
  cljs$core$_EQ_.cljs$lang$applyTo = cljs$core$_EQ___3.cljs$lang$applyTo;
  cljs$core$_EQ_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_EQ___1;
  cljs$core$_EQ_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_EQ___2;
  cljs$core$_EQ_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_EQ_;
}();
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function cljs$core$__GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function cljs$core$es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = function() {
      var G__16489 = self__.iter;
      return cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(G__16489) : cljs.core.es6_iterator_seq.call(null, G__16489);
    }();
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function cljs$core$__GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function cljs$core$es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function cljs$core$mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function cljs$core$hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__16490 = n + 1;
      var G__16491 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__16492 = cljs.core.next(coll__$1);
      n = G__16490;
      hash_code = G__16491;
      coll__$1 = G__16492;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function cljs$core$hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__16493 = n + 1;
      var G__16494 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__16495 = cljs.core.next(coll__$1);
      n = G__16493;
      hash_code = G__16494;
      coll__$1 = G__16495;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IComparable$ = true;
Date.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  var G__16496 = this$__$1.valueOf();
  var G__16497 = other.valueOf();
  return goog.array.defaultCompare(G__16496, G__16497);
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.valueOf() === other.valueOf();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  var G__16498 = o;
  return goog.getUid(G__16498);
};
cljs.core.inc = function cljs$core$inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function cljs$core$__GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function cljs$core$reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function cljs$core$reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function cljs$core$ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function cljs$core$unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    var G__16500 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16500) : cljs.core.deref.call(null, G__16500);
  } else {
    return x;
  }
};
cljs.core.deref = function cljs$core$deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function() {
  var cljs$core$ci_reduce = null;
  var cljs$core$ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count(cicoll);
    if (cnt === 0) {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    } else {
      var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = function() {
            var G__16507 = val;
            var G__16508 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16507, G__16508) : f.call(null, G__16507, G__16508);
          }();
          if (cljs.core.reduced_QMARK_(nval)) {
            return cljs.core.deref(nval);
          } else {
            var G__16513 = nval;
            var G__16514 = n + 1;
            val = G__16513;
            n = G__16514;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var cljs$core$ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count(cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__16509 = val__$1;
          var G__16510 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16509, G__16510) : f.call(null, G__16509, G__16510);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__16515 = nval;
          var G__16516 = n + 1;
          val__$1 = G__16515;
          n = G__16516;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var cljs$core$ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count(cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__16511 = val__$1;
          var G__16512 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16511, G__16512) : f.call(null, G__16511, G__16512);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__16517 = nval;
          var G__16518 = n + 1;
          val__$1 = G__16517;
          n = G__16518;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  cljs$core$ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return cljs$core$ci_reduce__2.call(this, cicoll, f);
      case 3:
        return cljs$core$ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return cljs$core$ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$ci_reduce.cljs$core$IFn$_invoke$arity$2 = cljs$core$ci_reduce__2;
  cljs$core$ci_reduce.cljs$core$IFn$_invoke$arity$3 = cljs$core$ci_reduce__3;
  cljs$core$ci_reduce.cljs$core$IFn$_invoke$arity$4 = cljs$core$ci_reduce__4;
  return cljs$core$ci_reduce;
}();
cljs.core.array_reduce = function() {
  var cljs$core$array_reduce = null;
  var cljs$core$array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = function() {
            var G__16525 = val;
            var G__16526 = arr[n];
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16525, G__16526) : f.call(null, G__16525, G__16526);
          }();
          if (cljs.core.reduced_QMARK_(nval)) {
            return cljs.core.deref(nval);
          } else {
            var G__16531 = nval;
            var G__16532 = n + 1;
            val = G__16531;
            n = G__16532;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var cljs$core$array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__16527 = val__$1;
          var G__16528 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16527, G__16528) : f.call(null, G__16527, G__16528);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__16533 = nval;
          var G__16534 = n + 1;
          val__$1 = G__16533;
          n = G__16534;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var cljs$core$array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__16529 = val__$1;
          var G__16530 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16529, G__16530) : f.call(null, G__16529, G__16530);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__16535 = nval;
          var G__16536 = n + 1;
          val__$1 = G__16535;
          n = G__16536;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  cljs$core$array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return cljs$core$array_reduce__2.call(this, arr, f);
      case 3:
        return cljs$core$array_reduce__3.call(this, arr, f, val);
      case 4:
        return cljs$core$array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$array_reduce.cljs$core$IFn$_invoke$arity$2 = cljs$core$array_reduce__2;
  cljs$core$array_reduce.cljs$core$IFn$_invoke$arity$3 = cljs$core$array_reduce__3;
  cljs$core$array_reduce.cljs$core$IFn$_invoke$arity$4 = cljs$core$array_reduce__4;
  return cljs$core$array_reduce;
}();
cljs.core.counted_QMARK_ = function cljs$core$counted_QMARK_(x) {
  var G__16538 = x;
  if (G__16538) {
    var bit__4783__auto__ = G__16538.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4783__auto__ || G__16538.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__16538.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__16538);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__16538);
  }
};
cljs.core.indexed_QMARK_ = function cljs$core$indexed_QMARK_(x) {
  var G__16540 = x;
  if (G__16540) {
    var bit__4783__auto__ = G__16540.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4783__auto__ || G__16540.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__16540.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__16540);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__16540);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function cljs$core$__GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count(coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__16541 = coll__$1;
  var G__16542 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__16541, G__16542) : cljs.core.equiv_sequential.call(null, G__16541, G__16542);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__16543 = o;
  var G__16544 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__16543, G__16544) : cljs.core.cons.call(null, G__16543, G__16544);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function cljs$core$__GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.prim_seq = function() {
  var cljs$core$prim_seq = null;
  var cljs$core$prim_seq__1 = function(prim) {
    return cljs$core$prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
  };
  var cljs$core$prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  cljs$core$prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return cljs$core$prim_seq__1.call(this, prim);
      case 2:
        return cljs$core$prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$prim_seq.cljs$core$IFn$_invoke$arity$1 = cljs$core$prim_seq__1;
  cljs$core$prim_seq.cljs$core$IFn$_invoke$arity$2 = cljs$core$prim_seq__2;
  return cljs$core$prim_seq;
}();
cljs.core.array_seq = function() {
  var cljs$core$array_seq = null;
  var cljs$core$array_seq__1 = function(array) {
    return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
  };
  var cljs$core$array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
  };
  cljs$core$array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return cljs$core$array_seq__1.call(this, array);
      case 2:
        return cljs$core$array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$array_seq.cljs$core$IFn$_invoke$arity$1 = cljs$core$array_seq__1;
  cljs$core$array_seq.cljs$core$IFn$_invoke$arity$2 = cljs$core$array_seq__2;
  return cljs$core$array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__16547 = coll__$1;
  var G__16548 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__16547, G__16548) : cljs.core.equiv_sequential.call(null, G__16547, G__16548);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__16549 = cljs.core.List.EMPTY;
  var G__16550 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__16549, G__16550) : cljs.core.with_meta.call(null, G__16549, G__16550);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  var G__16551 = f;
  var G__16552 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(G__16551, G__16552) : cljs.core.seq_reduce.call(null, G__16551, G__16552);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  var G__16553 = f;
  var G__16554 = start;
  var G__16555 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(G__16553, G__16554, G__16555) : cljs.core.seq_reduce.call(null, G__16553, G__16554, G__16555);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__16556 = o;
  var G__16557 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__16556, G__16557) : cljs.core.cons.call(null, G__16556, G__16557);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function cljs$core$__GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.second = function cljs$core$second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function cljs$core$ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function cljs$core$nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function cljs$core$fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function cljs$core$nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function cljs$core$last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__16558 = sn;
      s = G__16558;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var cljs$core$conj = null;
  var cljs$core$conj__0 = function() {
    return cljs.core.PersistentVector.EMPTY;
  };
  var cljs$core$conj__1 = function(coll) {
    return coll;
  };
  var cljs$core$conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj(coll, x);
    } else {
      return cljs.core._conj(cljs.core.List.EMPTY, x);
    }
  };
  var cljs$core$conj__3 = function() {
    var G__16563__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__16564 = cljs$core$conj.cljs$core$IFn$_invoke$arity$2(coll, x);
          var G__16565 = cljs.core.first(xs);
          var G__16566 = cljs.core.next(xs);
          coll = G__16564;
          x = G__16565;
          xs = G__16566;
          continue;
        } else {
          return cljs$core$conj.cljs$core$IFn$_invoke$arity$2(coll, x);
        }
        break;
      }
    };
    var G__16563 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        var G__16567__i = 0, G__16567__a = new Array(arguments.length - 2);
        while (G__16567__i < G__16567__a.length) {
          G__16567__a[G__16567__i] = arguments[G__16567__i + 2];
          ++G__16567__i;
        }
        xs = new cljs.core.IndexedSeq(G__16567__a, 0);
      }
      return G__16563__delegate.call(this, coll, x, xs);
    };
    G__16563.cljs$lang$maxFixedArity = 2;
    G__16563.cljs$lang$applyTo = function(arglist__16568) {
      var coll = cljs.core.first(arglist__16568);
      arglist__16568 = cljs.core.next(arglist__16568);
      var x = cljs.core.first(arglist__16568);
      var xs = cljs.core.rest(arglist__16568);
      return G__16563__delegate(coll, x, xs);
    };
    G__16563.cljs$core$IFn$_invoke$arity$variadic = G__16563__delegate;
    return G__16563;
  }();
  cljs$core$conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$conj__0.call(this);
      case 1:
        return cljs$core$conj__1.call(this, coll);
      case 2:
        return cljs$core$conj__2.call(this, coll, x);
      default:
        var G__16569 = null;
        if (arguments.length > 2) {
          var G__16570__i = 0, G__16570__a = new Array(arguments.length - 2);
          while (G__16570__i < G__16570__a.length) {
            G__16570__a[G__16570__i] = arguments[G__16570__i + 2];
            ++G__16570__i;
          }
          G__16569 = new cljs.core.IndexedSeq(G__16570__a, 0);
        }
        return cljs$core$conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, G__16569);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$conj.cljs$lang$maxFixedArity = 2;
  cljs$core$conj.cljs$lang$applyTo = cljs$core$conj__3.cljs$lang$applyTo;
  cljs$core$conj.cljs$core$IFn$_invoke$arity$0 = cljs$core$conj__0;
  cljs$core$conj.cljs$core$IFn$_invoke$arity$1 = cljs$core$conj__1;
  cljs$core$conj.cljs$core$IFn$_invoke$arity$2 = cljs$core$conj__2;
  cljs$core$conj.cljs$core$IFn$_invoke$arity$variadic = cljs$core$conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$conj;
}();
cljs.core.empty = function cljs$core$empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function cljs$core$accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__16571 = cljs.core.next(s);
      var G__16572 = acc + 1;
      s = G__16571;
      acc = G__16572;
      continue;
    }
    break;
  }
};
cljs.core.count = function cljs$core$count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__16574 = coll;
      if (G__16574) {
        var bit__4776__auto__ = G__16574.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4776__auto__ || G__16574.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, coll)) {
            return cljs.core._count(coll);
          } else {
            return cljs.core.accumulating_seq_count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var cljs$core$linear_traversal_nth = null;
  var cljs$core$linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq(coll)) {
            return cljs.core.first(coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_(coll)) {
            return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
          } else {
            if (cljs.core.seq(coll)) {
              var G__16575 = cljs.core.next(coll);
              var G__16576 = n - 1;
              coll = G__16575;
              n = G__16576;
              continue;
            } else {
              throw new Error("Index out of bounds");
            }
          }
        }
      }
      break;
    }
  };
  var cljs$core$linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq(coll)) {
            return cljs.core.first(coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_(coll)) {
            return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
          } else {
            if (cljs.core.seq(coll)) {
              var G__16577 = cljs.core.next(coll);
              var G__16578 = n - 1;
              var G__16579 = not_found;
              coll = G__16577;
              n = G__16578;
              not_found = G__16579;
              continue;
            } else {
              return not_found;
            }
          }
        }
      }
      break;
    }
  };
  cljs$core$linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return cljs$core$linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return cljs$core$linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = cljs$core$linear_traversal_nth__2;
  cljs$core$linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = cljs$core$linear_traversal_nth__3;
  return cljs$core$linear_traversal_nth;
}();
cljs.core.nth = function() {
  var cljs$core$nth = null;
  var cljs$core$nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__16584 = coll;
          if (G__16584) {
            var bit__4776__auto__ = G__16584.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4776__auto__ || G__16584.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
        } else {
          if (cljs.core.array_QMARK_(coll)) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                if (function() {
                  var G__16585 = coll;
                  if (G__16585) {
                    var bit__4783__auto__ = G__16585.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4783__auto__ || G__16585.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__16585.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__16585);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__16585);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
                }
              }
            }
          }
        }
      }
    }
  };
  var cljs$core$nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__16586 = coll;
          if (G__16586) {
            var bit__4776__auto__ = G__16586.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4776__auto__ || G__16586.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
        } else {
          if (cljs.core.array_QMARK_(coll)) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                if (function() {
                  var G__16587 = coll;
                  if (G__16587) {
                    var bit__4783__auto__ = G__16587.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4783__auto__ || G__16587.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__16587.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__16587);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__16587);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
                }
              }
            }
          }
        }
      }
    }
  };
  cljs$core$nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return cljs$core$nth__2.call(this, coll, n);
      case 3:
        return cljs$core$nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$nth.cljs$core$IFn$_invoke$arity$2 = cljs$core$nth__2;
  cljs$core$nth.cljs$core$IFn$_invoke$arity$3 = cljs$core$nth__3;
  return cljs$core$nth;
}();
cljs.core.nthrest = function cljs$core$nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__16588 = n__$1 - 1;
      var G__16589 = cljs.core.rest(xs);
      n__$1 = G__16588;
      xs = G__16589;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function() {
  var cljs$core$get = null;
  var cljs$core$get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__16592 = o;
        if (G__16592) {
          var bit__4776__auto__ = G__16592.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4776__auto__ || G__16592.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return o.cljs$core$ILookup$_lookup$arity$2(null, k);
      } else {
        if (cljs.core.array_QMARK_(o)) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
              return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var cljs$core$get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__16593 = o;
        if (G__16593) {
          var bit__4776__auto__ = G__16593.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4776__auto__ || G__16593.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
      } else {
        if (cljs.core.array_QMARK_(o)) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
              return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
            } else {
              return not_found;
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  cljs$core$get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return cljs$core$get__2.call(this, o, k);
      case 3:
        return cljs$core$get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$get.cljs$core$IFn$_invoke$arity$2 = cljs$core$get__2;
  cljs$core$get.cljs$core$IFn$_invoke$arity$3 = cljs$core$get__3;
  return cljs$core$get;
}();
cljs.core.assoc = function() {
  var cljs$core$assoc = null;
  var cljs$core$assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc(coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays([k], [v]);
    }
  };
  var cljs$core$assoc__4 = function() {
    var G__16597__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = cljs$core$assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__16598 = ret;
          var G__16599 = cljs.core.first(kvs);
          var G__16600 = cljs.core.second(kvs);
          var G__16601 = cljs.core.nnext(kvs);
          coll = G__16598;
          k = G__16599;
          v = G__16600;
          kvs = G__16601;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__16597 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        var G__16602__i = 0, G__16602__a = new Array(arguments.length - 3);
        while (G__16602__i < G__16602__a.length) {
          G__16602__a[G__16602__i] = arguments[G__16602__i + 3];
          ++G__16602__i;
        }
        kvs = new cljs.core.IndexedSeq(G__16602__a, 0);
      }
      return G__16597__delegate.call(this, coll, k, v, kvs);
    };
    G__16597.cljs$lang$maxFixedArity = 3;
    G__16597.cljs$lang$applyTo = function(arglist__16603) {
      var coll = cljs.core.first(arglist__16603);
      arglist__16603 = cljs.core.next(arglist__16603);
      var k = cljs.core.first(arglist__16603);
      arglist__16603 = cljs.core.next(arglist__16603);
      var v = cljs.core.first(arglist__16603);
      var kvs = cljs.core.rest(arglist__16603);
      return G__16597__delegate(coll, k, v, kvs);
    };
    G__16597.cljs$core$IFn$_invoke$arity$variadic = G__16597__delegate;
    return G__16597;
  }();
  cljs$core$assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return cljs$core$assoc__3.call(this, coll, k, v);
      default:
        var G__16604 = null;
        if (arguments.length > 3) {
          var G__16605__i = 0, G__16605__a = new Array(arguments.length - 3);
          while (G__16605__i < G__16605__a.length) {
            G__16605__a[G__16605__i] = arguments[G__16605__i + 3];
            ++G__16605__i;
          }
          G__16604 = new cljs.core.IndexedSeq(G__16605__a, 0);
        }
        return cljs$core$assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, G__16604);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$assoc.cljs$lang$maxFixedArity = 3;
  cljs$core$assoc.cljs$lang$applyTo = cljs$core$assoc__4.cljs$lang$applyTo;
  cljs$core$assoc.cljs$core$IFn$_invoke$arity$3 = cljs$core$assoc__3;
  cljs$core$assoc.cljs$core$IFn$_invoke$arity$variadic = cljs$core$assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$assoc;
}();
cljs.core.dissoc = function() {
  var cljs$core$dissoc = null;
  var cljs$core$dissoc__1 = function(coll) {
    return coll;
  };
  var cljs$core$dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc(coll, k);
    }
  };
  var cljs$core$dissoc__3 = function() {
    var G__16608__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = cljs$core$dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
          if (cljs.core.truth_(ks)) {
            var G__16609 = ret;
            var G__16610 = cljs.core.first(ks);
            var G__16611 = cljs.core.next(ks);
            coll = G__16609;
            k = G__16610;
            ks = G__16611;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__16608 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__16612__i = 0, G__16612__a = new Array(arguments.length - 2);
        while (G__16612__i < G__16612__a.length) {
          G__16612__a[G__16612__i] = arguments[G__16612__i + 2];
          ++G__16612__i;
        }
        ks = new cljs.core.IndexedSeq(G__16612__a, 0);
      }
      return G__16608__delegate.call(this, coll, k, ks);
    };
    G__16608.cljs$lang$maxFixedArity = 2;
    G__16608.cljs$lang$applyTo = function(arglist__16613) {
      var coll = cljs.core.first(arglist__16613);
      arglist__16613 = cljs.core.next(arglist__16613);
      var k = cljs.core.first(arglist__16613);
      var ks = cljs.core.rest(arglist__16613);
      return G__16608__delegate(coll, k, ks);
    };
    G__16608.cljs$core$IFn$_invoke$arity$variadic = G__16608__delegate;
    return G__16608;
  }();
  cljs$core$dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$dissoc__1.call(this, coll);
      case 2:
        return cljs$core$dissoc__2.call(this, coll, k);
      default:
        var G__16614 = null;
        if (arguments.length > 2) {
          var G__16615__i = 0, G__16615__a = new Array(arguments.length - 2);
          while (G__16615__i < G__16615__a.length) {
            G__16615__a[G__16615__i] = arguments[G__16615__i + 2];
            ++G__16615__i;
          }
          G__16614 = new cljs.core.IndexedSeq(G__16615__a, 0);
        }
        return cljs$core$dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, G__16614);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$dissoc.cljs$lang$maxFixedArity = 2;
  cljs$core$dissoc.cljs$lang$applyTo = cljs$core$dissoc__3.cljs$lang$applyTo;
  cljs$core$dissoc.cljs$core$IFn$_invoke$arity$1 = cljs$core$dissoc__1;
  cljs$core$dissoc.cljs$core$IFn$_invoke$arity$2 = cljs$core$dissoc__2;
  cljs$core$dissoc.cljs$core$IFn$_invoke$arity$variadic = cljs$core$dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$dissoc;
}();
cljs.core.fn_QMARK_ = function cljs$core$fn_QMARK_(f) {
  var or__4109__auto__ = function() {
    var G__16620 = f;
    return goog.isFunction(G__16620);
  }();
  if (cljs.core.truth_(or__4109__auto__)) {
    return or__4109__auto__;
  } else {
    var G__16621 = f;
    if (G__16621) {
      var bit__4783__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4109__auto____$1 = bit__4783__auto__;
        if (cljs.core.truth_(or__4109__auto____$1)) {
          return or__4109__auto____$1;
        } else {
          return G__16621.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__16621.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__16621);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__16621);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.prototype.call = function() {
  var G__17087 = null;
  var G__17087__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__17087__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16623 = a;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__16623) : self__.afn.call(null, G__16623);
  };
  var G__17087__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16624 = a;
    var G__16625 = b;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__16624, G__16625) : self__.afn.call(null, G__16624, G__16625);
  };
  var G__17087__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16626 = a;
    var G__16627 = b;
    var G__16628 = c;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__16626, G__16627, G__16628) : self__.afn.call(null, G__16626, G__16627, G__16628);
  };
  var G__17087__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16629 = a;
    var G__16630 = b;
    var G__16631 = c;
    var G__16632 = d;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__16629, G__16630, G__16631, G__16632) : self__.afn.call(null, G__16629, G__16630, G__16631, G__16632);
  };
  var G__17087__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16633 = a;
    var G__16634 = b;
    var G__16635 = c;
    var G__16636 = d;
    var G__16637 = e;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__16633, G__16634, G__16635, G__16636, G__16637) : self__.afn.call(null, G__16633, G__16634, G__16635, G__16636, G__16637);
  };
  var G__17087__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16638 = a;
    var G__16639 = b;
    var G__16640 = c;
    var G__16641 = d;
    var G__16642 = e;
    var G__16643 = f;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__16638, G__16639, G__16640, G__16641, G__16642, G__16643) : self__.afn.call(null, G__16638, G__16639, G__16640, G__16641, G__16642, G__16643);
  };
  var G__17087__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16644 = a;
    var G__16645 = b;
    var G__16646 = c;
    var G__16647 = d;
    var G__16648 = e;
    var G__16649 = f;
    var G__16650 = g;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__16644, G__16645, G__16646, G__16647, G__16648, G__16649, G__16650) : self__.afn.call(null, G__16644, G__16645, G__16646, G__16647, G__16648, G__16649, G__16650);
  };
  var G__17087__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16651 = a;
    var G__16652 = b;
    var G__16653 = c;
    var G__16654 = d;
    var G__16655 = e;
    var G__16656 = f;
    var G__16657 = g;
    var G__16658 = h;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__16651, G__16652, G__16653, G__16654, G__16655, G__16656, G__16657, G__16658) : self__.afn.call(null, G__16651, G__16652, G__16653, G__16654, G__16655, G__16656, G__16657, G__16658);
  };
  var G__17087__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16659 = a;
    var G__16660 = b;
    var G__16661 = c;
    var G__16662 = d;
    var G__16663 = e;
    var G__16664 = f;
    var G__16665 = g;
    var G__16666 = h;
    var G__16667 = i;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__16659, G__16660, G__16661, G__16662, G__16663, G__16664, G__16665, G__16666, G__16667) : self__.afn.call(null, G__16659, G__16660, G__16661, G__16662, G__16663, G__16664, G__16665, G__16666, G__16667);
  };
  var G__17087__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16668 = a;
    var G__16669 = b;
    var G__16670 = c;
    var G__16671 = d;
    var G__16672 = e;
    var G__16673 = f;
    var G__16674 = g;
    var G__16675 = h;
    var G__16676 = i;
    var G__16677 = j;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__16668, G__16669, G__16670, G__16671, G__16672, G__16673, G__16674, G__16675, G__16676, G__16677) : self__.afn.call(null, G__16668, G__16669, G__16670, G__16671, G__16672, G__16673, G__16674, G__16675, G__16676, G__16677);
  };
  var G__17087__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16678 = a;
    var G__16679 = b;
    var G__16680 = c;
    var G__16681 = d;
    var G__16682 = e;
    var G__16683 = f;
    var G__16684 = g;
    var G__16685 = h;
    var G__16686 = i;
    var G__16687 = j;
    var G__16688 = k;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__16678, G__16679, G__16680, G__16681, G__16682, G__16683, G__16684, G__16685, G__16686, G__16687, G__16688) : self__.afn.call(null, G__16678, G__16679, G__16680, G__16681, G__16682, G__16683, G__16684, G__16685, G__16686, G__16687, G__16688);
  };
  var G__17087__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16689 = a;
    var G__16690 = b;
    var G__16691 = c;
    var G__16692 = d;
    var G__16693 = e;
    var G__16694 = f;
    var G__16695 = g;
    var G__16696 = h;
    var G__16697 = i;
    var G__16698 = j;
    var G__16699 = k;
    var G__16700 = l;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__16689, G__16690, G__16691, G__16692, G__16693, G__16694, G__16695, G__16696, G__16697, G__16698, G__16699, G__16700) : self__.afn.call(null, G__16689, G__16690, G__16691, G__16692, G__16693, G__16694, G__16695, G__16696, G__16697, G__16698, G__16699, G__16700);
  };
  var G__17087__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16701 = a;
    var G__16702 = b;
    var G__16703 = c;
    var G__16704 = d;
    var G__16705 = e;
    var G__16706 = f;
    var G__16707 = g;
    var G__16708 = h;
    var G__16709 = i;
    var G__16710 = j;
    var G__16711 = k;
    var G__16712 = l;
    var G__16713 = m;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__16701, G__16702, G__16703, G__16704, G__16705, G__16706, G__16707, G__16708, G__16709, G__16710, G__16711, G__16712, G__16713) : self__.afn.call(null, G__16701, G__16702, G__16703, G__16704, G__16705, G__16706, G__16707, G__16708, G__16709, G__16710, G__16711, G__16712, G__16713);
  };
  var G__17087__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16714 = a;
    var G__16715 = b;
    var G__16716 = c;
    var G__16717 = d;
    var G__16718 = e;
    var G__16719 = f;
    var G__16720 = g;
    var G__16721 = h;
    var G__16722 = i;
    var G__16723 = j;
    var G__16724 = k;
    var G__16725 = l;
    var G__16726 = m;
    var G__16727 = n;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__16714, G__16715, G__16716, G__16717, G__16718, G__16719, G__16720, G__16721, G__16722, G__16723, G__16724, G__16725, G__16726, G__16727) : self__.afn.call(null, G__16714, G__16715, G__16716, G__16717, G__16718, G__16719, G__16720, G__16721, G__16722, G__16723, G__16724, G__16725, G__16726, G__16727);
  };
  var G__17087__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16728 = a;
    var G__16729 = b;
    var G__16730 = c;
    var G__16731 = d;
    var G__16732 = e;
    var G__16733 = f;
    var G__16734 = g;
    var G__16735 = h;
    var G__16736 = i;
    var G__16737 = j;
    var G__16738 = k;
    var G__16739 = l;
    var G__16740 = m;
    var G__16741 = n;
    var G__16742 = o;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__16728, G__16729, G__16730, G__16731, G__16732, G__16733, G__16734, G__16735, G__16736, G__16737, G__16738, G__16739, G__16740, G__16741, G__16742) : self__.afn.call(null, G__16728, G__16729, G__16730, G__16731, G__16732, G__16733, G__16734, G__16735, G__16736, G__16737, G__16738, G__16739, G__16740, G__16741, G__16742);
  };
  var G__17087__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16743 = a;
    var G__16744 = b;
    var G__16745 = c;
    var G__16746 = d;
    var G__16747 = e;
    var G__16748 = f;
    var G__16749 = g;
    var G__16750 = h;
    var G__16751 = i;
    var G__16752 = j;
    var G__16753 = k;
    var G__16754 = l;
    var G__16755 = m;
    var G__16756 = n;
    var G__16757 = o;
    var G__16758 = p;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__16743, G__16744, G__16745, G__16746, G__16747, G__16748, G__16749, G__16750, G__16751, G__16752, G__16753, G__16754, G__16755, G__16756, G__16757, G__16758) : self__.afn.call(null, G__16743, G__16744, G__16745, G__16746, G__16747, G__16748, G__16749, G__16750, G__16751, G__16752, G__16753, G__16754, G__16755, G__16756, G__16757, G__16758);
  };
  var G__17087__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16759 = a;
    var G__16760 = b;
    var G__16761 = c;
    var G__16762 = d;
    var G__16763 = e;
    var G__16764 = f;
    var G__16765 = g;
    var G__16766 = h;
    var G__16767 = i;
    var G__16768 = j;
    var G__16769 = k;
    var G__16770 = l;
    var G__16771 = m;
    var G__16772 = n;
    var G__16773 = o;
    var G__16774 = p;
    var G__16775 = q;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__16759, G__16760, G__16761, G__16762, G__16763, G__16764, G__16765, G__16766, G__16767, G__16768, G__16769, G__16770, G__16771, G__16772, G__16773, G__16774, G__16775) : self__.afn.call(null, G__16759, G__16760, G__16761, G__16762, G__16763, G__16764, G__16765, G__16766, G__16767, G__16768, G__16769, G__16770, G__16771, G__16772, G__16773, G__16774, G__16775);
  };
  var G__17087__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16776 = a;
    var G__16777 = b;
    var G__16778 = c;
    var G__16779 = d;
    var G__16780 = e;
    var G__16781 = f;
    var G__16782 = g;
    var G__16783 = h;
    var G__16784 = i;
    var G__16785 = j;
    var G__16786 = k;
    var G__16787 = l;
    var G__16788 = m;
    var G__16789 = n;
    var G__16790 = o;
    var G__16791 = p;
    var G__16792 = q;
    var G__16793 = r;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__16776, G__16777, G__16778, G__16779, G__16780, G__16781, G__16782, G__16783, G__16784, G__16785, G__16786, G__16787, G__16788, G__16789, G__16790, G__16791, G__16792, G__16793) : self__.afn.call(null, G__16776, G__16777, G__16778, G__16779, G__16780, G__16781, G__16782, G__16783, G__16784, G__16785, G__16786, G__16787, G__16788, G__16789, G__16790, G__16791, G__16792, G__16793);
  };
  var G__17087__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16794 = a;
    var G__16795 = b;
    var G__16796 = c;
    var G__16797 = d;
    var G__16798 = e;
    var G__16799 = f;
    var G__16800 = g;
    var G__16801 = h;
    var G__16802 = i;
    var G__16803 = j;
    var G__16804 = k;
    var G__16805 = l;
    var G__16806 = m;
    var G__16807 = n;
    var G__16808 = o;
    var G__16809 = p;
    var G__16810 = q;
    var G__16811 = r;
    var G__16812 = s;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__16794, G__16795, G__16796, G__16797, G__16798, G__16799, G__16800, G__16801, G__16802, G__16803, G__16804, G__16805, G__16806, G__16807, G__16808, G__16809, G__16810, G__16811, G__16812) : self__.afn.call(null, G__16794, G__16795, G__16796, G__16797, G__16798, G__16799, G__16800, G__16801, G__16802, G__16803, G__16804, G__16805, G__16806, G__16807, G__16808, G__16809, G__16810, G__16811, G__16812);
  };
  var G__17087__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16813 = a;
    var G__16814 = b;
    var G__16815 = c;
    var G__16816 = d;
    var G__16817 = e;
    var G__16818 = f;
    var G__16819 = g;
    var G__16820 = h;
    var G__16821 = i;
    var G__16822 = j;
    var G__16823 = k;
    var G__16824 = l;
    var G__16825 = m;
    var G__16826 = n;
    var G__16827 = o;
    var G__16828 = p;
    var G__16829 = q;
    var G__16830 = r;
    var G__16831 = s;
    var G__16832 = t;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__16813, G__16814, G__16815, G__16816, G__16817, G__16818, G__16819, G__16820, G__16821, G__16822, G__16823, G__16824, G__16825, G__16826, G__16827, G__16828, G__16829, G__16830, G__16831, G__16832) : self__.afn.call(null, G__16813, G__16814, G__16815, G__16816, G__16817, G__16818, G__16819, G__16820, G__16821, G__16822, G__16823, G__16824, G__16825, G__16826, G__16827, G__16828, G__16829, G__16830, 
    G__16831, G__16832);
  };
  var G__17087__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16833 = self__.afn;
    var G__16834 = a;
    var G__16835 = b;
    var G__16836 = c;
    var G__16837 = d;
    var G__16838 = e;
    var G__16839 = f;
    var G__16840 = g;
    var G__16841 = h;
    var G__16842 = i;
    var G__16843 = j;
    var G__16844 = k;
    var G__16845 = l;
    var G__16846 = m;
    var G__16847 = n;
    var G__16848 = o;
    var G__16849 = p;
    var G__16850 = q;
    var G__16851 = r;
    var G__16852 = s;
    var G__16853 = t;
    var G__16854 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__16833, G__16834, G__16835, G__16836, G__16837, G__16838, G__16839, G__16840, G__16841, G__16842, G__16843, G__16844, G__16845, G__16846, G__16847, G__16848, G__16849, G__16850, G__16851, G__16852, G__16853, G__16854) : cljs.core.apply.call(null, G__16833, G__16834, G__16835, G__16836, G__16837, G__16838, G__16839, G__16840, G__16841, G__16842, G__16843, G__16844, G__16845, G__16846, G__16847, 
    G__16848, G__16849, G__16850, G__16851, G__16852, G__16853, G__16854);
  };
  G__17087 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__17087__1.call(this, self__);
      case 2:
        return G__17087__2.call(this, self__, a);
      case 3:
        return G__17087__3.call(this, self__, a, b);
      case 4:
        return G__17087__4.call(this, self__, a, b, c);
      case 5:
        return G__17087__5.call(this, self__, a, b, c, d);
      case 6:
        return G__17087__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__17087__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__17087__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__17087__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__17087__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__17087__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__17087__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__17087__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__17087__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__17087__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__17087__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__17087__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__17087__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__17087__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__17087__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__17087__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__17087__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17087.cljs$core$IFn$_invoke$arity$1 = G__17087__1;
  G__17087.cljs$core$IFn$_invoke$arity$2 = G__17087__2;
  G__17087.cljs$core$IFn$_invoke$arity$3 = G__17087__3;
  G__17087.cljs$core$IFn$_invoke$arity$4 = G__17087__4;
  G__17087.cljs$core$IFn$_invoke$arity$5 = G__17087__5;
  G__17087.cljs$core$IFn$_invoke$arity$6 = G__17087__6;
  G__17087.cljs$core$IFn$_invoke$arity$7 = G__17087__7;
  G__17087.cljs$core$IFn$_invoke$arity$8 = G__17087__8;
  G__17087.cljs$core$IFn$_invoke$arity$9 = G__17087__9;
  G__17087.cljs$core$IFn$_invoke$arity$10 = G__17087__10;
  G__17087.cljs$core$IFn$_invoke$arity$11 = G__17087__11;
  G__17087.cljs$core$IFn$_invoke$arity$12 = G__17087__12;
  G__17087.cljs$core$IFn$_invoke$arity$13 = G__17087__13;
  G__17087.cljs$core$IFn$_invoke$arity$14 = G__17087__14;
  G__17087.cljs$core$IFn$_invoke$arity$15 = G__17087__15;
  G__17087.cljs$core$IFn$_invoke$arity$16 = G__17087__16;
  G__17087.cljs$core$IFn$_invoke$arity$17 = G__17087__17;
  G__17087.cljs$core$IFn$_invoke$arity$18 = G__17087__18;
  G__17087.cljs$core$IFn$_invoke$arity$19 = G__17087__19;
  G__17087.cljs$core$IFn$_invoke$arity$20 = G__17087__20;
  G__17087.cljs$core$IFn$_invoke$arity$21 = G__17087__21;
  G__17087.cljs$core$IFn$_invoke$arity$22 = G__17087__22;
  return G__17087;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args16622) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args16622)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  var G__16855 = a;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__16855) : self__.afn.call(null, G__16855);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  var G__16856 = a;
  var G__16857 = b;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__16856, G__16857) : self__.afn.call(null, G__16856, G__16857);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  var G__16858 = a;
  var G__16859 = b;
  var G__16860 = c;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__16858, G__16859, G__16860) : self__.afn.call(null, G__16858, G__16859, G__16860);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  var G__16861 = a;
  var G__16862 = b;
  var G__16863 = c;
  var G__16864 = d;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__16861, G__16862, G__16863, G__16864) : self__.afn.call(null, G__16861, G__16862, G__16863, G__16864);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  var G__16865 = a;
  var G__16866 = b;
  var G__16867 = c;
  var G__16868 = d;
  var G__16869 = e;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__16865, G__16866, G__16867, G__16868, G__16869) : self__.afn.call(null, G__16865, G__16866, G__16867, G__16868, G__16869);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  var G__16870 = a;
  var G__16871 = b;
  var G__16872 = c;
  var G__16873 = d;
  var G__16874 = e;
  var G__16875 = f;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__16870, G__16871, G__16872, G__16873, G__16874, G__16875) : self__.afn.call(null, G__16870, G__16871, G__16872, G__16873, G__16874, G__16875);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  var G__16876 = a;
  var G__16877 = b;
  var G__16878 = c;
  var G__16879 = d;
  var G__16880 = e;
  var G__16881 = f;
  var G__16882 = g;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__16876, G__16877, G__16878, G__16879, G__16880, G__16881, G__16882) : self__.afn.call(null, G__16876, G__16877, G__16878, G__16879, G__16880, G__16881, G__16882);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  var G__16883 = a;
  var G__16884 = b;
  var G__16885 = c;
  var G__16886 = d;
  var G__16887 = e;
  var G__16888 = f;
  var G__16889 = g;
  var G__16890 = h;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__16883, G__16884, G__16885, G__16886, G__16887, G__16888, G__16889, G__16890) : self__.afn.call(null, G__16883, G__16884, G__16885, G__16886, G__16887, G__16888, G__16889, G__16890);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  var G__16891 = a;
  var G__16892 = b;
  var G__16893 = c;
  var G__16894 = d;
  var G__16895 = e;
  var G__16896 = f;
  var G__16897 = g;
  var G__16898 = h;
  var G__16899 = i;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__16891, G__16892, G__16893, G__16894, G__16895, G__16896, G__16897, G__16898, G__16899) : self__.afn.call(null, G__16891, G__16892, G__16893, G__16894, G__16895, G__16896, G__16897, G__16898, G__16899);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  var G__16900 = a;
  var G__16901 = b;
  var G__16902 = c;
  var G__16903 = d;
  var G__16904 = e;
  var G__16905 = f;
  var G__16906 = g;
  var G__16907 = h;
  var G__16908 = i;
  var G__16909 = j;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__16900, G__16901, G__16902, G__16903, G__16904, G__16905, G__16906, G__16907, G__16908, G__16909) : self__.afn.call(null, G__16900, G__16901, G__16902, G__16903, G__16904, G__16905, G__16906, G__16907, G__16908, G__16909);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  var G__16910 = a;
  var G__16911 = b;
  var G__16912 = c;
  var G__16913 = d;
  var G__16914 = e;
  var G__16915 = f;
  var G__16916 = g;
  var G__16917 = h;
  var G__16918 = i;
  var G__16919 = j;
  var G__16920 = k;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__16910, G__16911, G__16912, G__16913, G__16914, G__16915, G__16916, G__16917, G__16918, G__16919, G__16920) : self__.afn.call(null, G__16910, G__16911, G__16912, G__16913, G__16914, G__16915, G__16916, G__16917, G__16918, G__16919, G__16920);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  var G__16921 = a;
  var G__16922 = b;
  var G__16923 = c;
  var G__16924 = d;
  var G__16925 = e;
  var G__16926 = f;
  var G__16927 = g;
  var G__16928 = h;
  var G__16929 = i;
  var G__16930 = j;
  var G__16931 = k;
  var G__16932 = l;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__16921, G__16922, G__16923, G__16924, G__16925, G__16926, G__16927, G__16928, G__16929, G__16930, G__16931, G__16932) : self__.afn.call(null, G__16921, G__16922, G__16923, G__16924, G__16925, G__16926, G__16927, G__16928, G__16929, G__16930, G__16931, G__16932);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  var G__16933 = a;
  var G__16934 = b;
  var G__16935 = c;
  var G__16936 = d;
  var G__16937 = e;
  var G__16938 = f;
  var G__16939 = g;
  var G__16940 = h;
  var G__16941 = i;
  var G__16942 = j;
  var G__16943 = k;
  var G__16944 = l;
  var G__16945 = m;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__16933, G__16934, G__16935, G__16936, G__16937, G__16938, G__16939, G__16940, G__16941, G__16942, G__16943, G__16944, G__16945) : self__.afn.call(null, G__16933, G__16934, G__16935, G__16936, G__16937, G__16938, G__16939, G__16940, G__16941, G__16942, G__16943, G__16944, G__16945);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  var G__16946 = a;
  var G__16947 = b;
  var G__16948 = c;
  var G__16949 = d;
  var G__16950 = e;
  var G__16951 = f;
  var G__16952 = g;
  var G__16953 = h;
  var G__16954 = i;
  var G__16955 = j;
  var G__16956 = k;
  var G__16957 = l;
  var G__16958 = m;
  var G__16959 = n;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__16946, G__16947, G__16948, G__16949, G__16950, G__16951, G__16952, G__16953, G__16954, G__16955, G__16956, G__16957, G__16958, G__16959) : self__.afn.call(null, G__16946, G__16947, G__16948, G__16949, G__16950, G__16951, G__16952, G__16953, G__16954, G__16955, G__16956, G__16957, G__16958, G__16959);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  var G__16960 = a;
  var G__16961 = b;
  var G__16962 = c;
  var G__16963 = d;
  var G__16964 = e;
  var G__16965 = f;
  var G__16966 = g;
  var G__16967 = h;
  var G__16968 = i;
  var G__16969 = j;
  var G__16970 = k;
  var G__16971 = l;
  var G__16972 = m;
  var G__16973 = n;
  var G__16974 = o;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__16960, G__16961, G__16962, G__16963, G__16964, G__16965, G__16966, G__16967, G__16968, G__16969, G__16970, G__16971, G__16972, G__16973, G__16974) : self__.afn.call(null, G__16960, G__16961, G__16962, G__16963, G__16964, G__16965, G__16966, G__16967, G__16968, G__16969, G__16970, G__16971, G__16972, G__16973, G__16974);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  var G__16975 = a;
  var G__16976 = b;
  var G__16977 = c;
  var G__16978 = d;
  var G__16979 = e;
  var G__16980 = f;
  var G__16981 = g;
  var G__16982 = h;
  var G__16983 = i;
  var G__16984 = j;
  var G__16985 = k;
  var G__16986 = l;
  var G__16987 = m;
  var G__16988 = n;
  var G__16989 = o;
  var G__16990 = p;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__16975, G__16976, G__16977, G__16978, G__16979, G__16980, G__16981, G__16982, G__16983, G__16984, G__16985, G__16986, G__16987, G__16988, G__16989, G__16990) : self__.afn.call(null, G__16975, G__16976, G__16977, G__16978, G__16979, G__16980, G__16981, G__16982, G__16983, G__16984, G__16985, G__16986, G__16987, G__16988, G__16989, G__16990);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  var G__16991 = a;
  var G__16992 = b;
  var G__16993 = c;
  var G__16994 = d;
  var G__16995 = e;
  var G__16996 = f;
  var G__16997 = g;
  var G__16998 = h;
  var G__16999 = i;
  var G__17000 = j;
  var G__17001 = k;
  var G__17002 = l;
  var G__17003 = m;
  var G__17004 = n;
  var G__17005 = o;
  var G__17006 = p;
  var G__17007 = q;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__16991, G__16992, G__16993, G__16994, G__16995, G__16996, G__16997, G__16998, G__16999, G__17000, G__17001, G__17002, G__17003, G__17004, G__17005, G__17006, G__17007) : self__.afn.call(null, G__16991, G__16992, G__16993, G__16994, G__16995, G__16996, G__16997, G__16998, G__16999, G__17000, G__17001, G__17002, G__17003, G__17004, G__17005, G__17006, G__17007);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  var G__17008 = a;
  var G__17009 = b;
  var G__17010 = c;
  var G__17011 = d;
  var G__17012 = e;
  var G__17013 = f;
  var G__17014 = g;
  var G__17015 = h;
  var G__17016 = i;
  var G__17017 = j;
  var G__17018 = k;
  var G__17019 = l;
  var G__17020 = m;
  var G__17021 = n;
  var G__17022 = o;
  var G__17023 = p;
  var G__17024 = q;
  var G__17025 = r;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__17008, G__17009, G__17010, G__17011, G__17012, G__17013, G__17014, G__17015, G__17016, G__17017, G__17018, G__17019, G__17020, G__17021, G__17022, G__17023, G__17024, G__17025) : self__.afn.call(null, G__17008, G__17009, G__17010, G__17011, G__17012, G__17013, G__17014, G__17015, G__17016, G__17017, G__17018, G__17019, G__17020, G__17021, G__17022, G__17023, G__17024, G__17025);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  var G__17026 = a;
  var G__17027 = b;
  var G__17028 = c;
  var G__17029 = d;
  var G__17030 = e;
  var G__17031 = f;
  var G__17032 = g;
  var G__17033 = h;
  var G__17034 = i;
  var G__17035 = j;
  var G__17036 = k;
  var G__17037 = l;
  var G__17038 = m;
  var G__17039 = n;
  var G__17040 = o;
  var G__17041 = p;
  var G__17042 = q;
  var G__17043 = r;
  var G__17044 = s;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__17026, G__17027, G__17028, G__17029, G__17030, G__17031, G__17032, G__17033, G__17034, G__17035, G__17036, G__17037, G__17038, G__17039, G__17040, G__17041, G__17042, G__17043, G__17044) : self__.afn.call(null, G__17026, G__17027, G__17028, G__17029, G__17030, G__17031, G__17032, G__17033, G__17034, G__17035, G__17036, G__17037, G__17038, G__17039, G__17040, G__17041, G__17042, G__17043, G__17044);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  var G__17045 = a;
  var G__17046 = b;
  var G__17047 = c;
  var G__17048 = d;
  var G__17049 = e;
  var G__17050 = f;
  var G__17051 = g;
  var G__17052 = h;
  var G__17053 = i;
  var G__17054 = j;
  var G__17055 = k;
  var G__17056 = l;
  var G__17057 = m;
  var G__17058 = n;
  var G__17059 = o;
  var G__17060 = p;
  var G__17061 = q;
  var G__17062 = r;
  var G__17063 = s;
  var G__17064 = t;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__17045, G__17046, G__17047, G__17048, G__17049, G__17050, G__17051, G__17052, G__17053, G__17054, G__17055, G__17056, G__17057, G__17058, G__17059, G__17060, G__17061, G__17062, G__17063, G__17064) : self__.afn.call(null, G__17045, G__17046, G__17047, G__17048, G__17049, G__17050, G__17051, G__17052, G__17053, G__17054, G__17055, G__17056, G__17057, G__17058, G__17059, G__17060, G__17061, G__17062, G__17063, 
  G__17064);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__17065 = self__.afn;
  var G__17066 = a;
  var G__17067 = b;
  var G__17068 = c;
  var G__17069 = d;
  var G__17070 = e;
  var G__17071 = f;
  var G__17072 = g;
  var G__17073 = h;
  var G__17074 = i;
  var G__17075 = j;
  var G__17076 = k;
  var G__17077 = l;
  var G__17078 = m;
  var G__17079 = n;
  var G__17080 = o;
  var G__17081 = p;
  var G__17082 = q;
  var G__17083 = r;
  var G__17084 = s;
  var G__17085 = t;
  var G__17086 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__17065, G__17066, G__17067, G__17068, G__17069, G__17070, G__17071, G__17072, G__17073, G__17074, G__17075, G__17076, G__17077, G__17078, G__17079, G__17080, G__17081, G__17082, G__17083, G__17084, G__17085, G__17086) : cljs.core.apply.call(null, G__17065, G__17066, G__17067, G__17068, G__17069, G__17070, G__17071, G__17072, G__17073, G__17074, G__17075, G__17076, G__17077, G__17078, G__17079, 
  G__17080, G__17081, G__17082, G__17083, G__17084, G__17085, G__17086);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function cljs$core$__GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function cljs$core$with_meta(o, meta) {
  if (cljs.core.fn_QMARK_(o) && !function() {
    var G__17091 = o;
    if (G__17091) {
      var bit__4783__auto__ = G__17091.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4783__auto__ || G__17091.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__17091.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__17091);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__17091);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function cljs$core$meta(o) {
  if (function() {
    var and__4097__auto__ = !(o == null);
    if (and__4097__auto__) {
      var G__17095 = o;
      if (G__17095) {
        var bit__4783__auto__ = G__17095.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4783__auto__ || G__17095.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__17095.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__17095);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__17095);
      }
    } else {
      return and__4097__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function cljs$core$peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function cljs$core$pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function() {
  var cljs$core$disj = null;
  var cljs$core$disj__1 = function(coll) {
    return coll;
  };
  var cljs$core$disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin(coll, k);
    }
  };
  var cljs$core$disj__3 = function() {
    var G__17098__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = cljs$core$disj.cljs$core$IFn$_invoke$arity$2(coll, k);
          if (cljs.core.truth_(ks)) {
            var G__17099 = ret;
            var G__17100 = cljs.core.first(ks);
            var G__17101 = cljs.core.next(ks);
            coll = G__17099;
            k = G__17100;
            ks = G__17101;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__17098 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__17102__i = 0, G__17102__a = new Array(arguments.length - 2);
        while (G__17102__i < G__17102__a.length) {
          G__17102__a[G__17102__i] = arguments[G__17102__i + 2];
          ++G__17102__i;
        }
        ks = new cljs.core.IndexedSeq(G__17102__a, 0);
      }
      return G__17098__delegate.call(this, coll, k, ks);
    };
    G__17098.cljs$lang$maxFixedArity = 2;
    G__17098.cljs$lang$applyTo = function(arglist__17103) {
      var coll = cljs.core.first(arglist__17103);
      arglist__17103 = cljs.core.next(arglist__17103);
      var k = cljs.core.first(arglist__17103);
      var ks = cljs.core.rest(arglist__17103);
      return G__17098__delegate(coll, k, ks);
    };
    G__17098.cljs$core$IFn$_invoke$arity$variadic = G__17098__delegate;
    return G__17098;
  }();
  cljs$core$disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$disj__1.call(this, coll);
      case 2:
        return cljs$core$disj__2.call(this, coll, k);
      default:
        var G__17104 = null;
        if (arguments.length > 2) {
          var G__17105__i = 0, G__17105__a = new Array(arguments.length - 2);
          while (G__17105__i < G__17105__a.length) {
            G__17105__a[G__17105__i] = arguments[G__17105__i + 2];
            ++G__17105__i;
          }
          G__17104 = new cljs.core.IndexedSeq(G__17105__a, 0);
        }
        return cljs$core$disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, G__17104);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$disj.cljs$lang$maxFixedArity = 2;
  cljs$core$disj.cljs$lang$applyTo = cljs$core$disj__3.cljs$lang$applyTo;
  cljs$core$disj.cljs$core$IFn$_invoke$arity$1 = cljs$core$disj__1;
  cljs$core$disj.cljs$core$IFn$_invoke$arity$2 = cljs$core$disj__2;
  cljs$core$disj.cljs$core$IFn$_invoke$arity$variadic = cljs$core$disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$disj;
}();
cljs.core.empty_QMARK_ = function cljs$core$empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function cljs$core$coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__17107 = x;
    if (G__17107) {
      var bit__4783__auto__ = G__17107.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4783__auto__ || G__17107.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__17107.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__17107);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__17107);
    }
  }
};
cljs.core.set_QMARK_ = function cljs$core$set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__17109 = x;
    if (G__17109) {
      var bit__4783__auto__ = G__17109.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4783__auto__ || G__17109.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__17109.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__17109);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__17109);
    }
  }
};
cljs.core.associative_QMARK_ = function cljs$core$associative_QMARK_(x) {
  var G__17111 = x;
  if (G__17111) {
    var bit__4783__auto__ = G__17111.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4783__auto__ || G__17111.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__17111.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__17111);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__17111);
  }
};
cljs.core.sequential_QMARK_ = function cljs$core$sequential_QMARK_(x) {
  var G__17113 = x;
  if (G__17113) {
    var bit__4783__auto__ = G__17113.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4783__auto__ || G__17113.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__17113.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__17113);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__17113);
  }
};
cljs.core.sorted_QMARK_ = function cljs$core$sorted_QMARK_(x) {
  var G__17115 = x;
  if (G__17115) {
    var bit__4783__auto__ = G__17115.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4783__auto__ || G__17115.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__17115.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__17115);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__17115);
  }
};
cljs.core.reduceable_QMARK_ = function cljs$core$reduceable_QMARK_(x) {
  var G__17117 = x;
  if (G__17117) {
    var bit__4783__auto__ = G__17117.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4783__auto__ || G__17117.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__17117.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__17117);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__17117);
  }
};
cljs.core.map_QMARK_ = function cljs$core$map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__17119 = x;
    if (G__17119) {
      var bit__4783__auto__ = G__17119.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4783__auto__ || G__17119.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__17119.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__17119);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__17119);
    }
  }
};
cljs.core.vector_QMARK_ = function cljs$core$vector_QMARK_(x) {
  var G__17121 = x;
  if (G__17121) {
    var bit__4783__auto__ = G__17121.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4783__auto__ || G__17121.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__17121.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__17121);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__17121);
  }
};
cljs.core.chunked_seq_QMARK_ = function cljs$core$chunked_seq_QMARK_(x) {
  var G__17123 = x;
  if (G__17123) {
    var bit__4776__auto__ = G__17123.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4776__auto__ || G__17123.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var cljs$core$js_obj = null;
  var cljs$core$js_obj__0 = function() {
    var obj17129 = {};
    return obj17129;
  };
  var cljs$core$js_obj__1 = function() {
    var G__17132__delegate = function(keyvals) {
      var G__17130 = goog.object.create;
      var G__17131 = keyvals;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(G__17130, G__17131) : cljs.core.apply.call(null, G__17130, G__17131);
    };
    var G__17132 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        var G__17133__i = 0, G__17133__a = new Array(arguments.length - 0);
        while (G__17133__i < G__17133__a.length) {
          G__17133__a[G__17133__i] = arguments[G__17133__i + 0];
          ++G__17133__i;
        }
        keyvals = new cljs.core.IndexedSeq(G__17133__a, 0);
      }
      return G__17132__delegate.call(this, keyvals);
    };
    G__17132.cljs$lang$maxFixedArity = 0;
    G__17132.cljs$lang$applyTo = function(arglist__17134) {
      var keyvals = cljs.core.seq(arglist__17134);
      return G__17132__delegate(keyvals);
    };
    G__17132.cljs$core$IFn$_invoke$arity$variadic = G__17132__delegate;
    return G__17132;
  }();
  cljs$core$js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$js_obj__0.call(this);
      default:
        var G__17135 = null;
        if (arguments.length > 0) {
          var G__17136__i = 0, G__17136__a = new Array(arguments.length - 0);
          while (G__17136__i < G__17136__a.length) {
            G__17136__a[G__17136__i] = arguments[G__17136__i + 0];
            ++G__17136__i;
          }
          G__17135 = new cljs.core.IndexedSeq(G__17136__a, 0);
        }
        return cljs$core$js_obj__1.cljs$core$IFn$_invoke$arity$variadic(G__17135);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$js_obj.cljs$lang$maxFixedArity = 0;
  cljs$core$js_obj.cljs$lang$applyTo = cljs$core$js_obj__1.cljs$lang$applyTo;
  cljs$core$js_obj.cljs$core$IFn$_invoke$arity$0 = cljs$core$js_obj__0;
  cljs$core$js_obj.cljs$core$IFn$_invoke$arity$variadic = cljs$core$js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$js_obj;
}();
cljs.core.js_keys = function cljs$core$js_keys(obj) {
  var keys = [];
  var G__17139_17141 = obj;
  var G__17140_17142 = function(G__17139_17141, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__17139_17141, keys);
  goog.object.forEach(G__17139_17141, G__17140_17142);
  return keys;
};
cljs.core.js_delete = function cljs$core$js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function cljs$core$array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__17143 = i__$1 + 1;
      var G__17144 = j__$1 + 1;
      var G__17145 = len__$1 - 1;
      i__$1 = G__17143;
      j__$1 = G__17144;
      len__$1 = G__17145;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function cljs$core$array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__17146 = i__$1 - 1;
      var G__17147 = j__$1 - 1;
      var G__17148 = len__$1 - 1;
      i__$1 = G__17146;
      j__$1 = G__17147;
      len__$1 = G__17148;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj17150 = {};
  return obj17150;
}();
cljs.core.false_QMARK_ = function cljs$core$false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function cljs$core$true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function cljs$core$undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function cljs$core$seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__17152 = s;
    if (G__17152) {
      var bit__4783__auto__ = G__17152.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4783__auto__ || G__17152.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__17152.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__17152);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__17152);
    }
  }
};
cljs.core.seqable_QMARK_ = function cljs$core$seqable_QMARK_(s) {
  var G__17154 = s;
  if (G__17154) {
    var bit__4783__auto__ = G__17154.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4783__auto__ || G__17154.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__17154.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__17154);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__17154);
  }
};
cljs.core.boolean$ = function cljs$core$boolean(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function cljs$core$ifn_QMARK_(f) {
  var or__4109__auto__ = cljs.core.fn_QMARK_(f);
  if (or__4109__auto__) {
    return or__4109__auto__;
  } else {
    var G__17158 = f;
    if (G__17158) {
      var bit__4783__auto__ = G__17158.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4783__auto__ || G__17158.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__17158.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__17158);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__17158);
    }
  }
};
cljs.core.integer_QMARK_ = function cljs$core$integer_QMARK_(n) {
  return typeof n === "number" && cljs.core.not(function() {
    var G__17171 = n;
    return isNaN(G__17171);
  }()) && !(n === Infinity) && function() {
    var G__17172 = n;
    return parseFloat(G__17172);
  }() === function() {
    var G__17173 = n;
    var G__17174 = 10;
    return parseInt(G__17173, G__17174);
  }();
};
cljs.core.contains_QMARK_ = function cljs$core$contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function cljs$core$find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var cljs$core$distinct_QMARK_ = null;
  var cljs$core$distinct_QMARK___1 = function(x) {
    return true;
  };
  var cljs$core$distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
  };
  var cljs$core$distinct_QMARK___3 = function() {
    var G__17175__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first(xs);
          var etc = cljs.core.next(xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_(s, x__$1)) {
              return false;
            } else {
              var G__17176 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
              var G__17177 = etc;
              s = G__17176;
              xs = G__17177;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__17175 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__17178__i = 0, G__17178__a = new Array(arguments.length - 2);
        while (G__17178__i < G__17178__a.length) {
          G__17178__a[G__17178__i] = arguments[G__17178__i + 2];
          ++G__17178__i;
        }
        more = new cljs.core.IndexedSeq(G__17178__a, 0);
      }
      return G__17175__delegate.call(this, x, y, more);
    };
    G__17175.cljs$lang$maxFixedArity = 2;
    G__17175.cljs$lang$applyTo = function(arglist__17179) {
      var x = cljs.core.first(arglist__17179);
      arglist__17179 = cljs.core.next(arglist__17179);
      var y = cljs.core.first(arglist__17179);
      var more = cljs.core.rest(arglist__17179);
      return G__17175__delegate(x, y, more);
    };
    G__17175.cljs$core$IFn$_invoke$arity$variadic = G__17175__delegate;
    return G__17175;
  }();
  cljs$core$distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$distinct_QMARK___1.call(this, x);
      case 2:
        return cljs$core$distinct_QMARK___2.call(this, x, y);
      default:
        var G__17180 = null;
        if (arguments.length > 2) {
          var G__17181__i = 0, G__17181__a = new Array(arguments.length - 2);
          while (G__17181__i < G__17181__a.length) {
            G__17181__a[G__17181__i] = arguments[G__17181__i + 2];
            ++G__17181__i;
          }
          G__17180 = new cljs.core.IndexedSeq(G__17181__a, 0);
        }
        return cljs$core$distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17180);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  cljs$core$distinct_QMARK_.cljs$lang$applyTo = cljs$core$distinct_QMARK___3.cljs$lang$applyTo;
  cljs$core$distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = cljs$core$distinct_QMARK___1;
  cljs$core$distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = cljs$core$distinct_QMARK___2;
  cljs$core$distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$distinct_QMARK_;
}();
cljs.core.compare = function cljs$core$compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type(x) === cljs.core.type(y)) {
          if (function() {
            var G__17185 = x;
            if (G__17185) {
              var bit__4776__auto__ = G__17185.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4776__auto__ || G__17185.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return x.cljs$core$IComparable$_compare$arity$2(null, y);
          } else {
            var G__17186 = x;
            var G__17187 = y;
            return goog.array.defaultCompare(G__17186, G__17187);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var cljs$core$compare_indexed = null;
  var cljs$core$compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count(xs);
    var yl = cljs.core.count(ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        return cljs$core$compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  };
  var cljs$core$compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
      if (d === 0 && n + 1 < len) {
        var G__17192 = xs;
        var G__17193 = ys;
        var G__17194 = len;
        var G__17195 = n + 1;
        xs = G__17192;
        ys = G__17193;
        len = G__17194;
        n = G__17195;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  cljs$core$compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$compare_indexed__2.call(this, xs, ys);
      case 4:
        return cljs$core$compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$compare_indexed.cljs$core$IFn$_invoke$arity$2 = cljs$core$compare_indexed__2;
  cljs$core$compare_indexed.cljs$core$IFn$_invoke$arity$4 = cljs$core$compare_indexed__4;
  return cljs$core$compare_indexed;
}();
cljs.core.fn__GT_comparator = function cljs$core$fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = function() {
        var G__17200 = x;
        var G__17201 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17200, G__17201) : f.call(null, G__17200, G__17201);
      }();
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(function() {
            var G__17202 = y;
            var G__17203 = x;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17202, G__17203) : f.call(null, G__17202, G__17203);
          }())) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var cljs$core$sort = null;
  var cljs$core$sort__1 = function(coll) {
    return cljs$core$sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
  };
  var cljs$core$sort__2 = function(comp, coll) {
    if (cljs.core.seq(coll)) {
      var a = function() {
        var G__17209 = coll;
        return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__17209) : cljs.core.to_array.call(null, G__17209);
      }();
      var G__17210_17212 = a;
      var G__17211_17213 = cljs.core.fn__GT_comparator(comp);
      goog.array.stableSort(G__17210_17212, G__17211_17213);
      return cljs.core.seq(a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  cljs$core$sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$sort__1.call(this, comp);
      case 2:
        return cljs$core$sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$sort.cljs$core$IFn$_invoke$arity$1 = cljs$core$sort__1;
  cljs$core$sort.cljs$core$IFn$_invoke$arity$2 = cljs$core$sort__2;
  return cljs$core$sort;
}();
cljs.core.sort_by = function() {
  var cljs$core$sort_by = null;
  var cljs$core$sort_by__2 = function(keyfn, coll) {
    return cljs$core$sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
  };
  var cljs$core$sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
      return cljs.core.fn__GT_comparator(comp).call(null, function() {
        var G__17219 = x;
        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__17219) : keyfn.call(null, G__17219);
      }(), function() {
        var G__17220 = y;
        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__17220) : keyfn.call(null, G__17220);
      }());
    }, coll);
  };
  cljs$core$sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return cljs$core$sort_by__2.call(this, keyfn, comp);
      case 3:
        return cljs$core$sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$sort_by.cljs$core$IFn$_invoke$arity$2 = cljs$core$sort_by__2;
  cljs$core$sort_by.cljs$core$IFn$_invoke$arity$3 = cljs$core$sort_by__3;
  return cljs$core$sort_by;
}();
cljs.core.seq_reduce = function() {
  var cljs$core$seq_reduce = null;
  var cljs$core$seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq(coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      var G__17226 = f;
      var G__17227 = cljs.core.first(s);
      var G__17228 = cljs.core.next(s);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__17226, G__17227, G__17228) : cljs.core.reduce.call(null, G__17226, G__17227, G__17228);
    } else {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }
  };
  var cljs$core$seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq(coll);
    while (true) {
      if (coll__$1) {
        var nval = function() {
          var G__17229 = val__$1;
          var G__17230 = cljs.core.first(coll__$1);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17229, G__17230) : f.call(null, G__17229, G__17230);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__17231 = nval;
          var G__17232 = cljs.core.next(coll__$1);
          val__$1 = G__17231;
          coll__$1 = G__17232;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  cljs$core$seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return cljs$core$seq_reduce__2.call(this, f, val);
      case 3:
        return cljs$core$seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$seq_reduce.cljs$core$IFn$_invoke$arity$2 = cljs$core$seq_reduce__2;
  cljs$core$seq_reduce.cljs$core$IFn$_invoke$arity$3 = cljs$core$seq_reduce__3;
  return cljs$core$seq_reduce;
}();
cljs.core.shuffle = function cljs$core$shuffle(coll) {
  var a = function() {
    var G__17236 = coll;
    return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__17236) : cljs.core.to_array.call(null, G__17236);
  }();
  var G__17237_17239 = a;
  goog.array.shuffle(G__17237_17239);
  var G__17238 = a;
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(G__17238) : cljs.core.vec.call(null, G__17238);
};
cljs.core.reduce = function() {
  var cljs$core$reduce = null;
  var cljs$core$reduce__2 = function(f, coll) {
    if (function() {
      var G__17242 = coll;
      if (G__17242) {
        var bit__4776__auto__ = G__17242.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4776__auto__ || G__17242.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
            return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
          } else {
            return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
          }
        }
      }
    }
  };
  var cljs$core$reduce__3 = function(f, val, coll) {
    if (function() {
      var G__17243 = coll;
      if (G__17243) {
        var bit__4776__auto__ = G__17243.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4776__auto__ || G__17243.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
            return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
          } else {
            return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
          }
        }
      }
    }
  };
  cljs$core$reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return cljs$core$reduce__2.call(this, f, val);
      case 3:
        return cljs$core$reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$reduce.cljs$core$IFn$_invoke$arity$2 = cljs$core$reduce__2;
  cljs$core$reduce.cljs$core$IFn$_invoke$arity$3 = cljs$core$reduce__3;
  return cljs$core$reduce;
}();
cljs.core.reduce_kv = function cljs$core$reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function cljs$core$identity(x) {
  return x;
};
cljs.core.completing = function() {
  var cljs$core$completing = null;
  var cljs$core$completing__1 = function(f) {
    return cljs$core$completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
  };
  var cljs$core$completing__2 = function(f, cf) {
    return function() {
      var G__17252 = null;
      var G__17252__0 = function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      };
      var G__17252__1 = function(x) {
        var G__17249 = x;
        return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(G__17249) : cf.call(null, G__17249);
      };
      var G__17252__2 = function(x, y) {
        var G__17250 = x;
        var G__17251 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17250, G__17251) : f.call(null, G__17250, G__17251);
      };
      G__17252 = function(x, y) {
        switch(arguments.length) {
          case 0:
            return G__17252__0.call(this);
          case 1:
            return G__17252__1.call(this, x);
          case 2:
            return G__17252__2.call(this, x, y);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17252.cljs$core$IFn$_invoke$arity$0 = G__17252__0;
      G__17252.cljs$core$IFn$_invoke$arity$1 = G__17252__1;
      G__17252.cljs$core$IFn$_invoke$arity$2 = G__17252__2;
      return G__17252;
    }();
  };
  cljs$core$completing = function(f, cf) {
    switch(arguments.length) {
      case 1:
        return cljs$core$completing__1.call(this, f);
      case 2:
        return cljs$core$completing__2.call(this, f, cf);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$completing.cljs$core$IFn$_invoke$arity$1 = cljs$core$completing__1;
  cljs$core$completing.cljs$core$IFn$_invoke$arity$2 = cljs$core$completing__2;
  return cljs$core$completing;
}();
cljs.core.transduce = function() {
  var cljs$core$transduce = null;
  var cljs$core$transduce__3 = function(xform, f, coll) {
    return cljs$core$transduce.cljs$core$IFn$_invoke$arity$4(xform, f, function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }(), coll);
  };
  var cljs$core$transduce__4 = function(xform, f, init, coll) {
    var f__$1 = function() {
      var G__17259 = f;
      return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__17259) : xform.call(null, G__17259);
    }();
    var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
    var G__17260 = ret;
    return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(G__17260) : f__$1.call(null, G__17260);
  };
  cljs$core$transduce = function(xform, f, init, coll) {
    switch(arguments.length) {
      case 3:
        return cljs$core$transduce__3.call(this, xform, f, init);
      case 4:
        return cljs$core$transduce__4.call(this, xform, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$transduce.cljs$core$IFn$_invoke$arity$3 = cljs$core$transduce__3;
  cljs$core$transduce.cljs$core$IFn$_invoke$arity$4 = cljs$core$transduce__4;
  return cljs$core$transduce;
}();
cljs.core._PLUS_ = function() {
  var cljs$core$_PLUS_ = null;
  var cljs$core$_PLUS___0 = function() {
    return 0;
  };
  var cljs$core$_PLUS___1 = function(x) {
    return x;
  };
  var cljs$core$_PLUS___2 = function(x, y) {
    return x + y;
  };
  var cljs$core$_PLUS___3 = function() {
    var G__17261__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$_PLUS_, x + y, more);
    };
    var G__17261 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__17262__i = 0, G__17262__a = new Array(arguments.length - 2);
        while (G__17262__i < G__17262__a.length) {
          G__17262__a[G__17262__i] = arguments[G__17262__i + 2];
          ++G__17262__i;
        }
        more = new cljs.core.IndexedSeq(G__17262__a, 0);
      }
      return G__17261__delegate.call(this, x, y, more);
    };
    G__17261.cljs$lang$maxFixedArity = 2;
    G__17261.cljs$lang$applyTo = function(arglist__17263) {
      var x = cljs.core.first(arglist__17263);
      arglist__17263 = cljs.core.next(arglist__17263);
      var y = cljs.core.first(arglist__17263);
      var more = cljs.core.rest(arglist__17263);
      return G__17261__delegate(x, y, more);
    };
    G__17261.cljs$core$IFn$_invoke$arity$variadic = G__17261__delegate;
    return G__17261;
  }();
  cljs$core$_PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$_PLUS___0.call(this);
      case 1:
        return cljs$core$_PLUS___1.call(this, x);
      case 2:
        return cljs$core$_PLUS___2.call(this, x, y);
      default:
        var G__17264 = null;
        if (arguments.length > 2) {
          var G__17265__i = 0, G__17265__a = new Array(arguments.length - 2);
          while (G__17265__i < G__17265__a.length) {
            G__17265__a[G__17265__i] = arguments[G__17265__i + 2];
            ++G__17265__i;
          }
          G__17264 = new cljs.core.IndexedSeq(G__17265__a, 0);
        }
        return cljs$core$_PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17264);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_PLUS_.cljs$lang$maxFixedArity = 2;
  cljs$core$_PLUS_.cljs$lang$applyTo = cljs$core$_PLUS___3.cljs$lang$applyTo;
  cljs$core$_PLUS_.cljs$core$IFn$_invoke$arity$0 = cljs$core$_PLUS___0;
  cljs$core$_PLUS_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_PLUS___1;
  cljs$core$_PLUS_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_PLUS___2;
  cljs$core$_PLUS_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_PLUS_;
}();
cljs.core._ = function() {
  var cljs$core$_ = null;
  var cljs$core$___1 = function(x) {
    return-x;
  };
  var cljs$core$___2 = function(x, y) {
    return x - y;
  };
  var cljs$core$___3 = function() {
    var G__17266__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$_, x - y, more);
    };
    var G__17266 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__17267__i = 0, G__17267__a = new Array(arguments.length - 2);
        while (G__17267__i < G__17267__a.length) {
          G__17267__a[G__17267__i] = arguments[G__17267__i + 2];
          ++G__17267__i;
        }
        more = new cljs.core.IndexedSeq(G__17267__a, 0);
      }
      return G__17266__delegate.call(this, x, y, more);
    };
    G__17266.cljs$lang$maxFixedArity = 2;
    G__17266.cljs$lang$applyTo = function(arglist__17268) {
      var x = cljs.core.first(arglist__17268);
      arglist__17268 = cljs.core.next(arglist__17268);
      var y = cljs.core.first(arglist__17268);
      var more = cljs.core.rest(arglist__17268);
      return G__17266__delegate(x, y, more);
    };
    G__17266.cljs$core$IFn$_invoke$arity$variadic = G__17266__delegate;
    return G__17266;
  }();
  cljs$core$_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$___1.call(this, x);
      case 2:
        return cljs$core$___2.call(this, x, y);
      default:
        var G__17269 = null;
        if (arguments.length > 2) {
          var G__17270__i = 0, G__17270__a = new Array(arguments.length - 2);
          while (G__17270__i < G__17270__a.length) {
            G__17270__a[G__17270__i] = arguments[G__17270__i + 2];
            ++G__17270__i;
          }
          G__17269 = new cljs.core.IndexedSeq(G__17270__a, 0);
        }
        return cljs$core$___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17269);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_.cljs$lang$maxFixedArity = 2;
  cljs$core$_.cljs$lang$applyTo = cljs$core$___3.cljs$lang$applyTo;
  cljs$core$_.cljs$core$IFn$_invoke$arity$1 = cljs$core$___1;
  cljs$core$_.cljs$core$IFn$_invoke$arity$2 = cljs$core$___2;
  cljs$core$_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_;
}();
cljs.core._STAR_ = function() {
  var cljs$core$_STAR_ = null;
  var cljs$core$_STAR___0 = function() {
    return 1;
  };
  var cljs$core$_STAR___1 = function(x) {
    return x;
  };
  var cljs$core$_STAR___2 = function(x, y) {
    return x * y;
  };
  var cljs$core$_STAR___3 = function() {
    var G__17271__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$_STAR_, x * y, more);
    };
    var G__17271 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__17272__i = 0, G__17272__a = new Array(arguments.length - 2);
        while (G__17272__i < G__17272__a.length) {
          G__17272__a[G__17272__i] = arguments[G__17272__i + 2];
          ++G__17272__i;
        }
        more = new cljs.core.IndexedSeq(G__17272__a, 0);
      }
      return G__17271__delegate.call(this, x, y, more);
    };
    G__17271.cljs$lang$maxFixedArity = 2;
    G__17271.cljs$lang$applyTo = function(arglist__17273) {
      var x = cljs.core.first(arglist__17273);
      arglist__17273 = cljs.core.next(arglist__17273);
      var y = cljs.core.first(arglist__17273);
      var more = cljs.core.rest(arglist__17273);
      return G__17271__delegate(x, y, more);
    };
    G__17271.cljs$core$IFn$_invoke$arity$variadic = G__17271__delegate;
    return G__17271;
  }();
  cljs$core$_STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$_STAR___0.call(this);
      case 1:
        return cljs$core$_STAR___1.call(this, x);
      case 2:
        return cljs$core$_STAR___2.call(this, x, y);
      default:
        var G__17274 = null;
        if (arguments.length > 2) {
          var G__17275__i = 0, G__17275__a = new Array(arguments.length - 2);
          while (G__17275__i < G__17275__a.length) {
            G__17275__a[G__17275__i] = arguments[G__17275__i + 2];
            ++G__17275__i;
          }
          G__17274 = new cljs.core.IndexedSeq(G__17275__a, 0);
        }
        return cljs$core$_STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17274);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_STAR_.cljs$lang$maxFixedArity = 2;
  cljs$core$_STAR_.cljs$lang$applyTo = cljs$core$_STAR___3.cljs$lang$applyTo;
  cljs$core$_STAR_.cljs$core$IFn$_invoke$arity$0 = cljs$core$_STAR___0;
  cljs$core$_STAR_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_STAR___1;
  cljs$core$_STAR_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_STAR___2;
  cljs$core$_STAR_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_STAR_;
}();
cljs.core._SLASH_ = function() {
  var cljs$core$_SLASH_ = null;
  var cljs$core$_SLASH___1 = function(x) {
    return cljs$core$_SLASH_.cljs$core$IFn$_invoke$arity$2(1, x);
  };
  var cljs$core$_SLASH___2 = function(x, y) {
    return x / y;
  };
  var cljs$core$_SLASH___3 = function() {
    var G__17280__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$_SLASH_, cljs$core$_SLASH_.cljs$core$IFn$_invoke$arity$2(x, y), more);
    };
    var G__17280 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__17281__i = 0, G__17281__a = new Array(arguments.length - 2);
        while (G__17281__i < G__17281__a.length) {
          G__17281__a[G__17281__i] = arguments[G__17281__i + 2];
          ++G__17281__i;
        }
        more = new cljs.core.IndexedSeq(G__17281__a, 0);
      }
      return G__17280__delegate.call(this, x, y, more);
    };
    G__17280.cljs$lang$maxFixedArity = 2;
    G__17280.cljs$lang$applyTo = function(arglist__17282) {
      var x = cljs.core.first(arglist__17282);
      arglist__17282 = cljs.core.next(arglist__17282);
      var y = cljs.core.first(arglist__17282);
      var more = cljs.core.rest(arglist__17282);
      return G__17280__delegate(x, y, more);
    };
    G__17280.cljs$core$IFn$_invoke$arity$variadic = G__17280__delegate;
    return G__17280;
  }();
  cljs$core$_SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_SLASH___1.call(this, x);
      case 2:
        return cljs$core$_SLASH___2.call(this, x, y);
      default:
        var G__17283 = null;
        if (arguments.length > 2) {
          var G__17284__i = 0, G__17284__a = new Array(arguments.length - 2);
          while (G__17284__i < G__17284__a.length) {
            G__17284__a[G__17284__i] = arguments[G__17284__i + 2];
            ++G__17284__i;
          }
          G__17283 = new cljs.core.IndexedSeq(G__17284__a, 0);
        }
        return cljs$core$_SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17283);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_SLASH_.cljs$lang$maxFixedArity = 2;
  cljs$core$_SLASH_.cljs$lang$applyTo = cljs$core$_SLASH___3.cljs$lang$applyTo;
  cljs$core$_SLASH_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_SLASH___1;
  cljs$core$_SLASH_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_SLASH___2;
  cljs$core$_SLASH_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_SLASH_;
}();
cljs.core._LT_ = function() {
  var cljs$core$_LT_ = null;
  var cljs$core$_LT___1 = function(x) {
    return true;
  };
  var cljs$core$_LT___2 = function(x, y) {
    return x < y;
  };
  var cljs$core$_LT___3 = function() {
    var G__17285__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next(more)) {
            var G__17286 = y;
            var G__17287 = cljs.core.first(more);
            var G__17288 = cljs.core.next(more);
            x = G__17286;
            y = G__17287;
            more = G__17288;
            continue;
          } else {
            return y < cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__17285 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__17289__i = 0, G__17289__a = new Array(arguments.length - 2);
        while (G__17289__i < G__17289__a.length) {
          G__17289__a[G__17289__i] = arguments[G__17289__i + 2];
          ++G__17289__i;
        }
        more = new cljs.core.IndexedSeq(G__17289__a, 0);
      }
      return G__17285__delegate.call(this, x, y, more);
    };
    G__17285.cljs$lang$maxFixedArity = 2;
    G__17285.cljs$lang$applyTo = function(arglist__17290) {
      var x = cljs.core.first(arglist__17290);
      arglist__17290 = cljs.core.next(arglist__17290);
      var y = cljs.core.first(arglist__17290);
      var more = cljs.core.rest(arglist__17290);
      return G__17285__delegate(x, y, more);
    };
    G__17285.cljs$core$IFn$_invoke$arity$variadic = G__17285__delegate;
    return G__17285;
  }();
  cljs$core$_LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_LT___1.call(this, x);
      case 2:
        return cljs$core$_LT___2.call(this, x, y);
      default:
        var G__17291 = null;
        if (arguments.length > 2) {
          var G__17292__i = 0, G__17292__a = new Array(arguments.length - 2);
          while (G__17292__i < G__17292__a.length) {
            G__17292__a[G__17292__i] = arguments[G__17292__i + 2];
            ++G__17292__i;
          }
          G__17291 = new cljs.core.IndexedSeq(G__17292__a, 0);
        }
        return cljs$core$_LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17291);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_LT_.cljs$lang$maxFixedArity = 2;
  cljs$core$_LT_.cljs$lang$applyTo = cljs$core$_LT___3.cljs$lang$applyTo;
  cljs$core$_LT_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_LT___1;
  cljs$core$_LT_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_LT___2;
  cljs$core$_LT_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_LT_;
}();
cljs.core._LT__EQ_ = function() {
  var cljs$core$_LT__EQ_ = null;
  var cljs$core$_LT__EQ___1 = function(x) {
    return true;
  };
  var cljs$core$_LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var cljs$core$_LT__EQ___3 = function() {
    var G__17293__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next(more)) {
            var G__17294 = y;
            var G__17295 = cljs.core.first(more);
            var G__17296 = cljs.core.next(more);
            x = G__17294;
            y = G__17295;
            more = G__17296;
            continue;
          } else {
            return y <= cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__17293 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__17297__i = 0, G__17297__a = new Array(arguments.length - 2);
        while (G__17297__i < G__17297__a.length) {
          G__17297__a[G__17297__i] = arguments[G__17297__i + 2];
          ++G__17297__i;
        }
        more = new cljs.core.IndexedSeq(G__17297__a, 0);
      }
      return G__17293__delegate.call(this, x, y, more);
    };
    G__17293.cljs$lang$maxFixedArity = 2;
    G__17293.cljs$lang$applyTo = function(arglist__17298) {
      var x = cljs.core.first(arglist__17298);
      arglist__17298 = cljs.core.next(arglist__17298);
      var y = cljs.core.first(arglist__17298);
      var more = cljs.core.rest(arglist__17298);
      return G__17293__delegate(x, y, more);
    };
    G__17293.cljs$core$IFn$_invoke$arity$variadic = G__17293__delegate;
    return G__17293;
  }();
  cljs$core$_LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_LT__EQ___1.call(this, x);
      case 2:
        return cljs$core$_LT__EQ___2.call(this, x, y);
      default:
        var G__17299 = null;
        if (arguments.length > 2) {
          var G__17300__i = 0, G__17300__a = new Array(arguments.length - 2);
          while (G__17300__i < G__17300__a.length) {
            G__17300__a[G__17300__i] = arguments[G__17300__i + 2];
            ++G__17300__i;
          }
          G__17299 = new cljs.core.IndexedSeq(G__17300__a, 0);
        }
        return cljs$core$_LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17299);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_LT__EQ_.cljs$lang$maxFixedArity = 2;
  cljs$core$_LT__EQ_.cljs$lang$applyTo = cljs$core$_LT__EQ___3.cljs$lang$applyTo;
  cljs$core$_LT__EQ_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_LT__EQ___1;
  cljs$core$_LT__EQ_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_LT__EQ___2;
  cljs$core$_LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_LT__EQ_;
}();
cljs.core._GT_ = function() {
  var cljs$core$_GT_ = null;
  var cljs$core$_GT___1 = function(x) {
    return true;
  };
  var cljs$core$_GT___2 = function(x, y) {
    return x > y;
  };
  var cljs$core$_GT___3 = function() {
    var G__17301__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next(more)) {
            var G__17302 = y;
            var G__17303 = cljs.core.first(more);
            var G__17304 = cljs.core.next(more);
            x = G__17302;
            y = G__17303;
            more = G__17304;
            continue;
          } else {
            return y > cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__17301 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__17305__i = 0, G__17305__a = new Array(arguments.length - 2);
        while (G__17305__i < G__17305__a.length) {
          G__17305__a[G__17305__i] = arguments[G__17305__i + 2];
          ++G__17305__i;
        }
        more = new cljs.core.IndexedSeq(G__17305__a, 0);
      }
      return G__17301__delegate.call(this, x, y, more);
    };
    G__17301.cljs$lang$maxFixedArity = 2;
    G__17301.cljs$lang$applyTo = function(arglist__17306) {
      var x = cljs.core.first(arglist__17306);
      arglist__17306 = cljs.core.next(arglist__17306);
      var y = cljs.core.first(arglist__17306);
      var more = cljs.core.rest(arglist__17306);
      return G__17301__delegate(x, y, more);
    };
    G__17301.cljs$core$IFn$_invoke$arity$variadic = G__17301__delegate;
    return G__17301;
  }();
  cljs$core$_GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_GT___1.call(this, x);
      case 2:
        return cljs$core$_GT___2.call(this, x, y);
      default:
        var G__17307 = null;
        if (arguments.length > 2) {
          var G__17308__i = 0, G__17308__a = new Array(arguments.length - 2);
          while (G__17308__i < G__17308__a.length) {
            G__17308__a[G__17308__i] = arguments[G__17308__i + 2];
            ++G__17308__i;
          }
          G__17307 = new cljs.core.IndexedSeq(G__17308__a, 0);
        }
        return cljs$core$_GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17307);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_GT_.cljs$lang$maxFixedArity = 2;
  cljs$core$_GT_.cljs$lang$applyTo = cljs$core$_GT___3.cljs$lang$applyTo;
  cljs$core$_GT_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_GT___1;
  cljs$core$_GT_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_GT___2;
  cljs$core$_GT_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_GT_;
}();
cljs.core._GT__EQ_ = function() {
  var cljs$core$_GT__EQ_ = null;
  var cljs$core$_GT__EQ___1 = function(x) {
    return true;
  };
  var cljs$core$_GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var cljs$core$_GT__EQ___3 = function() {
    var G__17309__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next(more)) {
            var G__17310 = y;
            var G__17311 = cljs.core.first(more);
            var G__17312 = cljs.core.next(more);
            x = G__17310;
            y = G__17311;
            more = G__17312;
            continue;
          } else {
            return y >= cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__17309 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__17313__i = 0, G__17313__a = new Array(arguments.length - 2);
        while (G__17313__i < G__17313__a.length) {
          G__17313__a[G__17313__i] = arguments[G__17313__i + 2];
          ++G__17313__i;
        }
        more = new cljs.core.IndexedSeq(G__17313__a, 0);
      }
      return G__17309__delegate.call(this, x, y, more);
    };
    G__17309.cljs$lang$maxFixedArity = 2;
    G__17309.cljs$lang$applyTo = function(arglist__17314) {
      var x = cljs.core.first(arglist__17314);
      arglist__17314 = cljs.core.next(arglist__17314);
      var y = cljs.core.first(arglist__17314);
      var more = cljs.core.rest(arglist__17314);
      return G__17309__delegate(x, y, more);
    };
    G__17309.cljs$core$IFn$_invoke$arity$variadic = G__17309__delegate;
    return G__17309;
  }();
  cljs$core$_GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_GT__EQ___1.call(this, x);
      case 2:
        return cljs$core$_GT__EQ___2.call(this, x, y);
      default:
        var G__17315 = null;
        if (arguments.length > 2) {
          var G__17316__i = 0, G__17316__a = new Array(arguments.length - 2);
          while (G__17316__i < G__17316__a.length) {
            G__17316__a[G__17316__i] = arguments[G__17316__i + 2];
            ++G__17316__i;
          }
          G__17315 = new cljs.core.IndexedSeq(G__17316__a, 0);
        }
        return cljs$core$_GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17315);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_GT__EQ_.cljs$lang$maxFixedArity = 2;
  cljs$core$_GT__EQ_.cljs$lang$applyTo = cljs$core$_GT__EQ___3.cljs$lang$applyTo;
  cljs$core$_GT__EQ_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_GT__EQ___1;
  cljs$core$_GT__EQ_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_GT__EQ___2;
  cljs$core$_GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_GT__EQ_;
}();
cljs.core.dec = function cljs$core$dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var cljs$core$max = null;
  var cljs$core$max__1 = function(x) {
    return x;
  };
  var cljs$core$max__2 = function(x, y) {
    var x__4421__auto__ = x;
    var y__4422__auto__ = y;
    return x__4421__auto__ > y__4422__auto__ ? x__4421__auto__ : y__4422__auto__;
  };
  var cljs$core$max__3 = function() {
    var G__17317__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$max, function() {
        var x__4421__auto__ = x;
        var y__4422__auto__ = y;
        return x__4421__auto__ > y__4422__auto__ ? x__4421__auto__ : y__4422__auto__;
      }(), more);
    };
    var G__17317 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__17318__i = 0, G__17318__a = new Array(arguments.length - 2);
        while (G__17318__i < G__17318__a.length) {
          G__17318__a[G__17318__i] = arguments[G__17318__i + 2];
          ++G__17318__i;
        }
        more = new cljs.core.IndexedSeq(G__17318__a, 0);
      }
      return G__17317__delegate.call(this, x, y, more);
    };
    G__17317.cljs$lang$maxFixedArity = 2;
    G__17317.cljs$lang$applyTo = function(arglist__17319) {
      var x = cljs.core.first(arglist__17319);
      arglist__17319 = cljs.core.next(arglist__17319);
      var y = cljs.core.first(arglist__17319);
      var more = cljs.core.rest(arglist__17319);
      return G__17317__delegate(x, y, more);
    };
    G__17317.cljs$core$IFn$_invoke$arity$variadic = G__17317__delegate;
    return G__17317;
  }();
  cljs$core$max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$max__1.call(this, x);
      case 2:
        return cljs$core$max__2.call(this, x, y);
      default:
        var G__17320 = null;
        if (arguments.length > 2) {
          var G__17321__i = 0, G__17321__a = new Array(arguments.length - 2);
          while (G__17321__i < G__17321__a.length) {
            G__17321__a[G__17321__i] = arguments[G__17321__i + 2];
            ++G__17321__i;
          }
          G__17320 = new cljs.core.IndexedSeq(G__17321__a, 0);
        }
        return cljs$core$max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17320);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$max.cljs$lang$maxFixedArity = 2;
  cljs$core$max.cljs$lang$applyTo = cljs$core$max__3.cljs$lang$applyTo;
  cljs$core$max.cljs$core$IFn$_invoke$arity$1 = cljs$core$max__1;
  cljs$core$max.cljs$core$IFn$_invoke$arity$2 = cljs$core$max__2;
  cljs$core$max.cljs$core$IFn$_invoke$arity$variadic = cljs$core$max__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$max;
}();
cljs.core.min = function() {
  var cljs$core$min = null;
  var cljs$core$min__1 = function(x) {
    return x;
  };
  var cljs$core$min__2 = function(x, y) {
    var x__4428__auto__ = x;
    var y__4429__auto__ = y;
    return x__4428__auto__ < y__4429__auto__ ? x__4428__auto__ : y__4429__auto__;
  };
  var cljs$core$min__3 = function() {
    var G__17322__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$min, function() {
        var x__4428__auto__ = x;
        var y__4429__auto__ = y;
        return x__4428__auto__ < y__4429__auto__ ? x__4428__auto__ : y__4429__auto__;
      }(), more);
    };
    var G__17322 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__17323__i = 0, G__17323__a = new Array(arguments.length - 2);
        while (G__17323__i < G__17323__a.length) {
          G__17323__a[G__17323__i] = arguments[G__17323__i + 2];
          ++G__17323__i;
        }
        more = new cljs.core.IndexedSeq(G__17323__a, 0);
      }
      return G__17322__delegate.call(this, x, y, more);
    };
    G__17322.cljs$lang$maxFixedArity = 2;
    G__17322.cljs$lang$applyTo = function(arglist__17324) {
      var x = cljs.core.first(arglist__17324);
      arglist__17324 = cljs.core.next(arglist__17324);
      var y = cljs.core.first(arglist__17324);
      var more = cljs.core.rest(arglist__17324);
      return G__17322__delegate(x, y, more);
    };
    G__17322.cljs$core$IFn$_invoke$arity$variadic = G__17322__delegate;
    return G__17322;
  }();
  cljs$core$min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$min__1.call(this, x);
      case 2:
        return cljs$core$min__2.call(this, x, y);
      default:
        var G__17325 = null;
        if (arguments.length > 2) {
          var G__17326__i = 0, G__17326__a = new Array(arguments.length - 2);
          while (G__17326__i < G__17326__a.length) {
            G__17326__a[G__17326__i] = arguments[G__17326__i + 2];
            ++G__17326__i;
          }
          G__17325 = new cljs.core.IndexedSeq(G__17326__a, 0);
        }
        return cljs$core$min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17325);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$min.cljs$lang$maxFixedArity = 2;
  cljs$core$min.cljs$lang$applyTo = cljs$core$min__3.cljs$lang$applyTo;
  cljs$core$min.cljs$core$IFn$_invoke$arity$1 = cljs$core$min__1;
  cljs$core$min.cljs$core$IFn$_invoke$arity$2 = cljs$core$min__2;
  cljs$core$min.cljs$core$IFn$_invoke$arity$variadic = cljs$core$min__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$min;
}();
cljs.core.byte$ = function cljs$core$byte(x) {
  return x;
};
cljs.core.char$ = function cljs$core$char(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function cljs$core$short(x) {
  return x;
};
cljs.core.float$ = function cljs$core$float(x) {
  return x;
};
cljs.core.double$ = function cljs$core$double(x) {
  return x;
};
cljs.core.unchecked_byte = function cljs$core$unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function cljs$core$unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function cljs$core$unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function cljs$core$unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function cljs$core$unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var cljs$core$unchecked_add = null;
  var cljs$core$unchecked_add__0 = function() {
    return 0;
  };
  var cljs$core$unchecked_add__1 = function(x) {
    return x;
  };
  var cljs$core$unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var cljs$core$unchecked_add__3 = function() {
    var G__17327__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_add, x + y, more);
    };
    var G__17327 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__17328__i = 0, G__17328__a = new Array(arguments.length - 2);
        while (G__17328__i < G__17328__a.length) {
          G__17328__a[G__17328__i] = arguments[G__17328__i + 2];
          ++G__17328__i;
        }
        more = new cljs.core.IndexedSeq(G__17328__a, 0);
      }
      return G__17327__delegate.call(this, x, y, more);
    };
    G__17327.cljs$lang$maxFixedArity = 2;
    G__17327.cljs$lang$applyTo = function(arglist__17329) {
      var x = cljs.core.first(arglist__17329);
      arglist__17329 = cljs.core.next(arglist__17329);
      var y = cljs.core.first(arglist__17329);
      var more = cljs.core.rest(arglist__17329);
      return G__17327__delegate(x, y, more);
    };
    G__17327.cljs$core$IFn$_invoke$arity$variadic = G__17327__delegate;
    return G__17327;
  }();
  cljs$core$unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$unchecked_add__0.call(this);
      case 1:
        return cljs$core$unchecked_add__1.call(this, x);
      case 2:
        return cljs$core$unchecked_add__2.call(this, x, y);
      default:
        var G__17330 = null;
        if (arguments.length > 2) {
          var G__17331__i = 0, G__17331__a = new Array(arguments.length - 2);
          while (G__17331__i < G__17331__a.length) {
            G__17331__a[G__17331__i] = arguments[G__17331__i + 2];
            ++G__17331__i;
          }
          G__17330 = new cljs.core.IndexedSeq(G__17331__a, 0);
        }
        return cljs$core$unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17330);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_add.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_add.cljs$lang$applyTo = cljs$core$unchecked_add__3.cljs$lang$applyTo;
  cljs$core$unchecked_add.cljs$core$IFn$_invoke$arity$0 = cljs$core$unchecked_add__0;
  cljs$core$unchecked_add.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_add__1;
  cljs$core$unchecked_add.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_add__2;
  cljs$core$unchecked_add.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var cljs$core$unchecked_add_int = null;
  var cljs$core$unchecked_add_int__0 = function() {
    return 0;
  };
  var cljs$core$unchecked_add_int__1 = function(x) {
    return x;
  };
  var cljs$core$unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var cljs$core$unchecked_add_int__3 = function() {
    var G__17332__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_add_int, x + y, more);
    };
    var G__17332 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__17333__i = 0, G__17333__a = new Array(arguments.length - 2);
        while (G__17333__i < G__17333__a.length) {
          G__17333__a[G__17333__i] = arguments[G__17333__i + 2];
          ++G__17333__i;
        }
        more = new cljs.core.IndexedSeq(G__17333__a, 0);
      }
      return G__17332__delegate.call(this, x, y, more);
    };
    G__17332.cljs$lang$maxFixedArity = 2;
    G__17332.cljs$lang$applyTo = function(arglist__17334) {
      var x = cljs.core.first(arglist__17334);
      arglist__17334 = cljs.core.next(arglist__17334);
      var y = cljs.core.first(arglist__17334);
      var more = cljs.core.rest(arglist__17334);
      return G__17332__delegate(x, y, more);
    };
    G__17332.cljs$core$IFn$_invoke$arity$variadic = G__17332__delegate;
    return G__17332;
  }();
  cljs$core$unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$unchecked_add_int__0.call(this);
      case 1:
        return cljs$core$unchecked_add_int__1.call(this, x);
      case 2:
        return cljs$core$unchecked_add_int__2.call(this, x, y);
      default:
        var G__17335 = null;
        if (arguments.length > 2) {
          var G__17336__i = 0, G__17336__a = new Array(arguments.length - 2);
          while (G__17336__i < G__17336__a.length) {
            G__17336__a[G__17336__i] = arguments[G__17336__i + 2];
            ++G__17336__i;
          }
          G__17335 = new cljs.core.IndexedSeq(G__17336__a, 0);
        }
        return cljs$core$unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17335);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_add_int.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_add_int.cljs$lang$applyTo = cljs$core$unchecked_add_int__3.cljs$lang$applyTo;
  cljs$core$unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = cljs$core$unchecked_add_int__0;
  cljs$core$unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_add_int__1;
  cljs$core$unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_add_int__2;
  cljs$core$unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_add_int;
}();
cljs.core.unchecked_dec = function cljs$core$unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function cljs$core$unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var cljs$core$unchecked_divide_int = null;
  var cljs$core$unchecked_divide_int__1 = function(x) {
    return cljs$core$unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(1, x);
  };
  var cljs$core$unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var cljs$core$unchecked_divide_int__3 = function() {
    var G__17341__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_divide_int, cljs$core$unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(x, y), more);
    };
    var G__17341 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__17342__i = 0, G__17342__a = new Array(arguments.length - 2);
        while (G__17342__i < G__17342__a.length) {
          G__17342__a[G__17342__i] = arguments[G__17342__i + 2];
          ++G__17342__i;
        }
        more = new cljs.core.IndexedSeq(G__17342__a, 0);
      }
      return G__17341__delegate.call(this, x, y, more);
    };
    G__17341.cljs$lang$maxFixedArity = 2;
    G__17341.cljs$lang$applyTo = function(arglist__17343) {
      var x = cljs.core.first(arglist__17343);
      arglist__17343 = cljs.core.next(arglist__17343);
      var y = cljs.core.first(arglist__17343);
      var more = cljs.core.rest(arglist__17343);
      return G__17341__delegate(x, y, more);
    };
    G__17341.cljs$core$IFn$_invoke$arity$variadic = G__17341__delegate;
    return G__17341;
  }();
  cljs$core$unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$unchecked_divide_int__1.call(this, x);
      case 2:
        return cljs$core$unchecked_divide_int__2.call(this, x, y);
      default:
        var G__17344 = null;
        if (arguments.length > 2) {
          var G__17345__i = 0, G__17345__a = new Array(arguments.length - 2);
          while (G__17345__i < G__17345__a.length) {
            G__17345__a[G__17345__i] = arguments[G__17345__i + 2];
            ++G__17345__i;
          }
          G__17344 = new cljs.core.IndexedSeq(G__17345__a, 0);
        }
        return cljs$core$unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17344);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_divide_int.cljs$lang$applyTo = cljs$core$unchecked_divide_int__3.cljs$lang$applyTo;
  cljs$core$unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_divide_int__1;
  cljs$core$unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_divide_int__2;
  cljs$core$unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_divide_int;
}();
cljs.core.unchecked_inc = function cljs$core$unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function cljs$core$unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var cljs$core$unchecked_multiply = null;
  var cljs$core$unchecked_multiply__0 = function() {
    return 1;
  };
  var cljs$core$unchecked_multiply__1 = function(x) {
    return x;
  };
  var cljs$core$unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var cljs$core$unchecked_multiply__3 = function() {
    var G__17346__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_multiply, x * y, more);
    };
    var G__17346 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__17347__i = 0, G__17347__a = new Array(arguments.length - 2);
        while (G__17347__i < G__17347__a.length) {
          G__17347__a[G__17347__i] = arguments[G__17347__i + 2];
          ++G__17347__i;
        }
        more = new cljs.core.IndexedSeq(G__17347__a, 0);
      }
      return G__17346__delegate.call(this, x, y, more);
    };
    G__17346.cljs$lang$maxFixedArity = 2;
    G__17346.cljs$lang$applyTo = function(arglist__17348) {
      var x = cljs.core.first(arglist__17348);
      arglist__17348 = cljs.core.next(arglist__17348);
      var y = cljs.core.first(arglist__17348);
      var more = cljs.core.rest(arglist__17348);
      return G__17346__delegate(x, y, more);
    };
    G__17346.cljs$core$IFn$_invoke$arity$variadic = G__17346__delegate;
    return G__17346;
  }();
  cljs$core$unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$unchecked_multiply__0.call(this);
      case 1:
        return cljs$core$unchecked_multiply__1.call(this, x);
      case 2:
        return cljs$core$unchecked_multiply__2.call(this, x, y);
      default:
        var G__17349 = null;
        if (arguments.length > 2) {
          var G__17350__i = 0, G__17350__a = new Array(arguments.length - 2);
          while (G__17350__i < G__17350__a.length) {
            G__17350__a[G__17350__i] = arguments[G__17350__i + 2];
            ++G__17350__i;
          }
          G__17349 = new cljs.core.IndexedSeq(G__17350__a, 0);
        }
        return cljs$core$unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17349);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_multiply.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_multiply.cljs$lang$applyTo = cljs$core$unchecked_multiply__3.cljs$lang$applyTo;
  cljs$core$unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = cljs$core$unchecked_multiply__0;
  cljs$core$unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_multiply__1;
  cljs$core$unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_multiply__2;
  cljs$core$unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var cljs$core$unchecked_multiply_int = null;
  var cljs$core$unchecked_multiply_int__0 = function() {
    return 1;
  };
  var cljs$core$unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var cljs$core$unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var cljs$core$unchecked_multiply_int__3 = function() {
    var G__17351__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_multiply_int, x * y, more);
    };
    var G__17351 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__17352__i = 0, G__17352__a = new Array(arguments.length - 2);
        while (G__17352__i < G__17352__a.length) {
          G__17352__a[G__17352__i] = arguments[G__17352__i + 2];
          ++G__17352__i;
        }
        more = new cljs.core.IndexedSeq(G__17352__a, 0);
      }
      return G__17351__delegate.call(this, x, y, more);
    };
    G__17351.cljs$lang$maxFixedArity = 2;
    G__17351.cljs$lang$applyTo = function(arglist__17353) {
      var x = cljs.core.first(arglist__17353);
      arglist__17353 = cljs.core.next(arglist__17353);
      var y = cljs.core.first(arglist__17353);
      var more = cljs.core.rest(arglist__17353);
      return G__17351__delegate(x, y, more);
    };
    G__17351.cljs$core$IFn$_invoke$arity$variadic = G__17351__delegate;
    return G__17351;
  }();
  cljs$core$unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$unchecked_multiply_int__0.call(this);
      case 1:
        return cljs$core$unchecked_multiply_int__1.call(this, x);
      case 2:
        return cljs$core$unchecked_multiply_int__2.call(this, x, y);
      default:
        var G__17354 = null;
        if (arguments.length > 2) {
          var G__17355__i = 0, G__17355__a = new Array(arguments.length - 2);
          while (G__17355__i < G__17355__a.length) {
            G__17355__a[G__17355__i] = arguments[G__17355__i + 2];
            ++G__17355__i;
          }
          G__17354 = new cljs.core.IndexedSeq(G__17355__a, 0);
        }
        return cljs$core$unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17354);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_multiply_int.cljs$lang$applyTo = cljs$core$unchecked_multiply_int__3.cljs$lang$applyTo;
  cljs$core$unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = cljs$core$unchecked_multiply_int__0;
  cljs$core$unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_multiply_int__1;
  cljs$core$unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_multiply_int__2;
  cljs$core$unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function cljs$core$unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function cljs$core$unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function cljs$core$unchecked_remainder_int(x, n) {
  var G__17358 = x;
  var G__17359 = n;
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(G__17358, G__17359) : cljs.core.mod.call(null, G__17358, G__17359);
};
cljs.core.unchecked_subtract = function() {
  var cljs$core$unchecked_subtract = null;
  var cljs$core$unchecked_subtract__1 = function(x) {
    return-x;
  };
  var cljs$core$unchecked_subtract__2 = function(x, y) {
    return x - y;
  };
  var cljs$core$unchecked_subtract__3 = function() {
    var G__17360__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_subtract, x - y, more);
    };
    var G__17360 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__17361__i = 0, G__17361__a = new Array(arguments.length - 2);
        while (G__17361__i < G__17361__a.length) {
          G__17361__a[G__17361__i] = arguments[G__17361__i + 2];
          ++G__17361__i;
        }
        more = new cljs.core.IndexedSeq(G__17361__a, 0);
      }
      return G__17360__delegate.call(this, x, y, more);
    };
    G__17360.cljs$lang$maxFixedArity = 2;
    G__17360.cljs$lang$applyTo = function(arglist__17362) {
      var x = cljs.core.first(arglist__17362);
      arglist__17362 = cljs.core.next(arglist__17362);
      var y = cljs.core.first(arglist__17362);
      var more = cljs.core.rest(arglist__17362);
      return G__17360__delegate(x, y, more);
    };
    G__17360.cljs$core$IFn$_invoke$arity$variadic = G__17360__delegate;
    return G__17360;
  }();
  cljs$core$unchecked_subtract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$unchecked_subtract__1.call(this, x);
      case 2:
        return cljs$core$unchecked_subtract__2.call(this, x, y);
      default:
        var G__17363 = null;
        if (arguments.length > 2) {
          var G__17364__i = 0, G__17364__a = new Array(arguments.length - 2);
          while (G__17364__i < G__17364__a.length) {
            G__17364__a[G__17364__i] = arguments[G__17364__i + 2];
            ++G__17364__i;
          }
          G__17363 = new cljs.core.IndexedSeq(G__17364__a, 0);
        }
        return cljs$core$unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17363);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_subtract.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_subtract.cljs$lang$applyTo = cljs$core$unchecked_subtract__3.cljs$lang$applyTo;
  cljs$core$unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_subtract__1;
  cljs$core$unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_subtract__2;
  cljs$core$unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_subtract;
}();
cljs.core.unchecked_subtract_int = function() {
  var cljs$core$unchecked_subtract_int = null;
  var cljs$core$unchecked_subtract_int__1 = function(x) {
    return-x;
  };
  var cljs$core$unchecked_subtract_int__2 = function(x, y) {
    return x - y;
  };
  var cljs$core$unchecked_subtract_int__3 = function() {
    var G__17365__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_subtract_int, x - y, more);
    };
    var G__17365 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__17366__i = 0, G__17366__a = new Array(arguments.length - 2);
        while (G__17366__i < G__17366__a.length) {
          G__17366__a[G__17366__i] = arguments[G__17366__i + 2];
          ++G__17366__i;
        }
        more = new cljs.core.IndexedSeq(G__17366__a, 0);
      }
      return G__17365__delegate.call(this, x, y, more);
    };
    G__17365.cljs$lang$maxFixedArity = 2;
    G__17365.cljs$lang$applyTo = function(arglist__17367) {
      var x = cljs.core.first(arglist__17367);
      arglist__17367 = cljs.core.next(arglist__17367);
      var y = cljs.core.first(arglist__17367);
      var more = cljs.core.rest(arglist__17367);
      return G__17365__delegate(x, y, more);
    };
    G__17365.cljs$core$IFn$_invoke$arity$variadic = G__17365__delegate;
    return G__17365;
  }();
  cljs$core$unchecked_subtract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$unchecked_subtract_int__1.call(this, x);
      case 2:
        return cljs$core$unchecked_subtract_int__2.call(this, x, y);
      default:
        var G__17368 = null;
        if (arguments.length > 2) {
          var G__17369__i = 0, G__17369__a = new Array(arguments.length - 2);
          while (G__17369__i < G__17369__a.length) {
            G__17369__a[G__17369__i] = arguments[G__17369__i + 2];
            ++G__17369__i;
          }
          G__17368 = new cljs.core.IndexedSeq(G__17369__a, 0);
        }
        return cljs$core$unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17368);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_subtract_int.cljs$lang$applyTo = cljs$core$unchecked_subtract_int__3.cljs$lang$applyTo;
  cljs$core$unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_subtract_int__1;
  cljs$core$unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_subtract_int__2;
  cljs$core$unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_subtract_int;
}();
cljs.core.fix = function cljs$core$fix(q) {
  if (q >= 0) {
    var G__17372 = q;
    return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__17372) : Math.floor.call(null, G__17372);
  } else {
    var G__17373 = q;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__17373) : Math.ceil.call(null, G__17373);
  }
};
cljs.core.int$ = function cljs$core$int(x) {
  return x | 0;
};
cljs.core.unchecked_int = function cljs$core$unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function cljs$core$long(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function cljs$core$unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function cljs$core$booleans(x) {
  return x;
};
cljs.core.bytes = function cljs$core$bytes(x) {
  return x;
};
cljs.core.chars = function cljs$core$chars(x) {
  return x;
};
cljs.core.shorts = function cljs$core$shorts(x) {
  return x;
};
cljs.core.ints = function cljs$core$ints(x) {
  return x;
};
cljs.core.floats = function cljs$core$floats(x) {
  return x;
};
cljs.core.doubles = function cljs$core$doubles(x) {
  return x;
};
cljs.core.longs = function cljs$core$longs(x) {
  return x;
};
cljs.core.js_mod = function cljs$core$js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function cljs$core$mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function cljs$core$quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function cljs$core$rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function() {
  var cljs$core$bit_xor = null;
  var cljs$core$bit_xor__2 = function(x, y) {
    return x ^ y;
  };
  var cljs$core$bit_xor__3 = function() {
    var G__17374__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$bit_xor, x ^ y, more);
    };
    var G__17374 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__17375__i = 0, G__17375__a = new Array(arguments.length - 2);
        while (G__17375__i < G__17375__a.length) {
          G__17375__a[G__17375__i] = arguments[G__17375__i + 2];
          ++G__17375__i;
        }
        more = new cljs.core.IndexedSeq(G__17375__a, 0);
      }
      return G__17374__delegate.call(this, x, y, more);
    };
    G__17374.cljs$lang$maxFixedArity = 2;
    G__17374.cljs$lang$applyTo = function(arglist__17376) {
      var x = cljs.core.first(arglist__17376);
      arglist__17376 = cljs.core.next(arglist__17376);
      var y = cljs.core.first(arglist__17376);
      var more = cljs.core.rest(arglist__17376);
      return G__17374__delegate(x, y, more);
    };
    G__17374.cljs$core$IFn$_invoke$arity$variadic = G__17374__delegate;
    return G__17374;
  }();
  cljs$core$bit_xor = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$bit_xor__2.call(this, x, y);
      default:
        var G__17377 = null;
        if (arguments.length > 2) {
          var G__17378__i = 0, G__17378__a = new Array(arguments.length - 2);
          while (G__17378__i < G__17378__a.length) {
            G__17378__a[G__17378__i] = arguments[G__17378__i + 2];
            ++G__17378__i;
          }
          G__17377 = new cljs.core.IndexedSeq(G__17378__a, 0);
        }
        return cljs$core$bit_xor__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17377);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$bit_xor.cljs$lang$maxFixedArity = 2;
  cljs$core$bit_xor.cljs$lang$applyTo = cljs$core$bit_xor__3.cljs$lang$applyTo;
  cljs$core$bit_xor.cljs$core$IFn$_invoke$arity$2 = cljs$core$bit_xor__2;
  cljs$core$bit_xor.cljs$core$IFn$_invoke$arity$variadic = cljs$core$bit_xor__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$bit_xor;
}();
cljs.core.bit_and = function() {
  var cljs$core$bit_and = null;
  var cljs$core$bit_and__2 = function(x, y) {
    return x & y;
  };
  var cljs$core$bit_and__3 = function() {
    var G__17379__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$bit_and, x & y, more);
    };
    var G__17379 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__17380__i = 0, G__17380__a = new Array(arguments.length - 2);
        while (G__17380__i < G__17380__a.length) {
          G__17380__a[G__17380__i] = arguments[G__17380__i + 2];
          ++G__17380__i;
        }
        more = new cljs.core.IndexedSeq(G__17380__a, 0);
      }
      return G__17379__delegate.call(this, x, y, more);
    };
    G__17379.cljs$lang$maxFixedArity = 2;
    G__17379.cljs$lang$applyTo = function(arglist__17381) {
      var x = cljs.core.first(arglist__17381);
      arglist__17381 = cljs.core.next(arglist__17381);
      var y = cljs.core.first(arglist__17381);
      var more = cljs.core.rest(arglist__17381);
      return G__17379__delegate(x, y, more);
    };
    G__17379.cljs$core$IFn$_invoke$arity$variadic = G__17379__delegate;
    return G__17379;
  }();
  cljs$core$bit_and = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$bit_and__2.call(this, x, y);
      default:
        var G__17382 = null;
        if (arguments.length > 2) {
          var G__17383__i = 0, G__17383__a = new Array(arguments.length - 2);
          while (G__17383__i < G__17383__a.length) {
            G__17383__a[G__17383__i] = arguments[G__17383__i + 2];
            ++G__17383__i;
          }
          G__17382 = new cljs.core.IndexedSeq(G__17383__a, 0);
        }
        return cljs$core$bit_and__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17382);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$bit_and.cljs$lang$maxFixedArity = 2;
  cljs$core$bit_and.cljs$lang$applyTo = cljs$core$bit_and__3.cljs$lang$applyTo;
  cljs$core$bit_and.cljs$core$IFn$_invoke$arity$2 = cljs$core$bit_and__2;
  cljs$core$bit_and.cljs$core$IFn$_invoke$arity$variadic = cljs$core$bit_and__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$bit_and;
}();
cljs.core.bit_or = function() {
  var cljs$core$bit_or = null;
  var cljs$core$bit_or__2 = function(x, y) {
    return x | y;
  };
  var cljs$core$bit_or__3 = function() {
    var G__17384__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$bit_or, x | y, more);
    };
    var G__17384 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__17385__i = 0, G__17385__a = new Array(arguments.length - 2);
        while (G__17385__i < G__17385__a.length) {
          G__17385__a[G__17385__i] = arguments[G__17385__i + 2];
          ++G__17385__i;
        }
        more = new cljs.core.IndexedSeq(G__17385__a, 0);
      }
      return G__17384__delegate.call(this, x, y, more);
    };
    G__17384.cljs$lang$maxFixedArity = 2;
    G__17384.cljs$lang$applyTo = function(arglist__17386) {
      var x = cljs.core.first(arglist__17386);
      arglist__17386 = cljs.core.next(arglist__17386);
      var y = cljs.core.first(arglist__17386);
      var more = cljs.core.rest(arglist__17386);
      return G__17384__delegate(x, y, more);
    };
    G__17384.cljs$core$IFn$_invoke$arity$variadic = G__17384__delegate;
    return G__17384;
  }();
  cljs$core$bit_or = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$bit_or__2.call(this, x, y);
      default:
        var G__17387 = null;
        if (arguments.length > 2) {
          var G__17388__i = 0, G__17388__a = new Array(arguments.length - 2);
          while (G__17388__i < G__17388__a.length) {
            G__17388__a[G__17388__i] = arguments[G__17388__i + 2];
            ++G__17388__i;
          }
          G__17387 = new cljs.core.IndexedSeq(G__17388__a, 0);
        }
        return cljs$core$bit_or__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17387);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$bit_or.cljs$lang$maxFixedArity = 2;
  cljs$core$bit_or.cljs$lang$applyTo = cljs$core$bit_or__3.cljs$lang$applyTo;
  cljs$core$bit_or.cljs$core$IFn$_invoke$arity$2 = cljs$core$bit_or__2;
  cljs$core$bit_or.cljs$core$IFn$_invoke$arity$variadic = cljs$core$bit_or__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$bit_or;
}();
cljs.core.bit_and_not = function() {
  var cljs$core$bit_and_not = null;
  var cljs$core$bit_and_not__2 = function(x, y) {
    return x & ~y;
  };
  var cljs$core$bit_and_not__3 = function() {
    var G__17389__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$bit_and_not, x & ~y, more);
    };
    var G__17389 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__17390__i = 0, G__17390__a = new Array(arguments.length - 2);
        while (G__17390__i < G__17390__a.length) {
          G__17390__a[G__17390__i] = arguments[G__17390__i + 2];
          ++G__17390__i;
        }
        more = new cljs.core.IndexedSeq(G__17390__a, 0);
      }
      return G__17389__delegate.call(this, x, y, more);
    };
    G__17389.cljs$lang$maxFixedArity = 2;
    G__17389.cljs$lang$applyTo = function(arglist__17391) {
      var x = cljs.core.first(arglist__17391);
      arglist__17391 = cljs.core.next(arglist__17391);
      var y = cljs.core.first(arglist__17391);
      var more = cljs.core.rest(arglist__17391);
      return G__17389__delegate(x, y, more);
    };
    G__17389.cljs$core$IFn$_invoke$arity$variadic = G__17389__delegate;
    return G__17389;
  }();
  cljs$core$bit_and_not = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$bit_and_not__2.call(this, x, y);
      default:
        var G__17392 = null;
        if (arguments.length > 2) {
          var G__17393__i = 0, G__17393__a = new Array(arguments.length - 2);
          while (G__17393__i < G__17393__a.length) {
            G__17393__a[G__17393__i] = arguments[G__17393__i + 2];
            ++G__17393__i;
          }
          G__17392 = new cljs.core.IndexedSeq(G__17393__a, 0);
        }
        return cljs$core$bit_and_not__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17392);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$bit_and_not.cljs$lang$maxFixedArity = 2;
  cljs$core$bit_and_not.cljs$lang$applyTo = cljs$core$bit_and_not__3.cljs$lang$applyTo;
  cljs$core$bit_and_not.cljs$core$IFn$_invoke$arity$2 = cljs$core$bit_and_not__2;
  cljs$core$bit_and_not.cljs$core$IFn$_invoke$arity$variadic = cljs$core$bit_and_not__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$bit_and_not;
}();
cljs.core.bit_clear = function cljs$core$bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function cljs$core$bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function cljs$core$bit_not(x) {
  return~x;
};
cljs.core.bit_set = function cljs$core$bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function cljs$core$bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function cljs$core$bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function cljs$core$bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function cljs$core$bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function cljs$core$unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function cljs$core$bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var cljs$core$_EQ__EQ_ = null;
  var cljs$core$_EQ__EQ___1 = function(x) {
    return true;
  };
  var cljs$core$_EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv(x, y);
  };
  var cljs$core$_EQ__EQ___3 = function() {
    var G__17398__delegate = function(x, y, more) {
      while (true) {
        if (cljs$core$_EQ__EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
          if (cljs.core.next(more)) {
            var G__17399 = y;
            var G__17400 = cljs.core.first(more);
            var G__17401 = cljs.core.next(more);
            x = G__17399;
            y = G__17400;
            more = G__17401;
            continue;
          } else {
            return cljs$core$_EQ__EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__17398 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__17402__i = 0, G__17402__a = new Array(arguments.length - 2);
        while (G__17402__i < G__17402__a.length) {
          G__17402__a[G__17402__i] = arguments[G__17402__i + 2];
          ++G__17402__i;
        }
        more = new cljs.core.IndexedSeq(G__17402__a, 0);
      }
      return G__17398__delegate.call(this, x, y, more);
    };
    G__17398.cljs$lang$maxFixedArity = 2;
    G__17398.cljs$lang$applyTo = function(arglist__17403) {
      var x = cljs.core.first(arglist__17403);
      arglist__17403 = cljs.core.next(arglist__17403);
      var y = cljs.core.first(arglist__17403);
      var more = cljs.core.rest(arglist__17403);
      return G__17398__delegate(x, y, more);
    };
    G__17398.cljs$core$IFn$_invoke$arity$variadic = G__17398__delegate;
    return G__17398;
  }();
  cljs$core$_EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_EQ__EQ___1.call(this, x);
      case 2:
        return cljs$core$_EQ__EQ___2.call(this, x, y);
      default:
        var G__17404 = null;
        if (arguments.length > 2) {
          var G__17405__i = 0, G__17405__a = new Array(arguments.length - 2);
          while (G__17405__i < G__17405__a.length) {
            G__17405__a[G__17405__i] = arguments[G__17405__i + 2];
            ++G__17405__i;
          }
          G__17404 = new cljs.core.IndexedSeq(G__17405__a, 0);
        }
        return cljs$core$_EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17404);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_EQ__EQ_.cljs$lang$maxFixedArity = 2;
  cljs$core$_EQ__EQ_.cljs$lang$applyTo = cljs$core$_EQ__EQ___3.cljs$lang$applyTo;
  cljs$core$_EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_EQ__EQ___1;
  cljs$core$_EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_EQ__EQ___2;
  cljs$core$_EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function cljs$core$pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function cljs$core$zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function cljs$core$neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function cljs$core$nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__17406 = n__$1 - 1;
      var G__17407 = cljs.core.next(xs);
      n__$1 = G__17406;
      xs = G__17407;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var cljs$core$str = null;
  var cljs$core$str__0 = function() {
    return "";
  };
  var cljs$core$str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      var G__17411 = x;
      return goog.string.buildString(G__17411);
    }
  };
  var cljs$core$str__2 = function() {
    var G__17412__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(cljs$core$str.cljs$core$IFn$_invoke$arity$1(x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__17413 = sb.append(cljs$core$str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(more)));
          var G__17414 = cljs.core.next(more);
          sb = G__17413;
          more = G__17414;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__17412 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        var G__17415__i = 0, G__17415__a = new Array(arguments.length - 1);
        while (G__17415__i < G__17415__a.length) {
          G__17415__a[G__17415__i] = arguments[G__17415__i + 1];
          ++G__17415__i;
        }
        ys = new cljs.core.IndexedSeq(G__17415__a, 0);
      }
      return G__17412__delegate.call(this, x, ys);
    };
    G__17412.cljs$lang$maxFixedArity = 1;
    G__17412.cljs$lang$applyTo = function(arglist__17416) {
      var x = cljs.core.first(arglist__17416);
      var ys = cljs.core.rest(arglist__17416);
      return G__17412__delegate(x, ys);
    };
    G__17412.cljs$core$IFn$_invoke$arity$variadic = G__17412__delegate;
    return G__17412;
  }();
  cljs$core$str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$str__0.call(this);
      case 1:
        return cljs$core$str__1.call(this, x);
      default:
        var G__17417 = null;
        if (arguments.length > 1) {
          var G__17418__i = 0, G__17418__a = new Array(arguments.length - 1);
          while (G__17418__i < G__17418__a.length) {
            G__17418__a[G__17418__i] = arguments[G__17418__i + 1];
            ++G__17418__i;
          }
          G__17417 = new cljs.core.IndexedSeq(G__17418__a, 0);
        }
        return cljs$core$str__2.cljs$core$IFn$_invoke$arity$variadic(x, G__17417);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$str.cljs$lang$maxFixedArity = 1;
  cljs$core$str.cljs$lang$applyTo = cljs$core$str__2.cljs$lang$applyTo;
  cljs$core$str.cljs$core$IFn$_invoke$arity$0 = cljs$core$str__0;
  cljs$core$str.cljs$core$IFn$_invoke$arity$1 = cljs$core$str__1;
  cljs$core$str.cljs$core$IFn$_invoke$arity$variadic = cljs$core$str__2.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$str;
}();
cljs.core.subs = function() {
  var cljs$core$subs = null;
  var cljs$core$subs__2 = function(s, start) {
    return s.substring(start);
  };
  var cljs$core$subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  cljs$core$subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return cljs$core$subs__2.call(this, s, start);
      case 3:
        return cljs$core$subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$subs.cljs$core$IFn$_invoke$arity$2 = cljs$core$subs__2;
  cljs$core$subs.cljs$core$IFn$_invoke$arity$3 = cljs$core$subs__3;
  return cljs$core$subs;
}();
cljs.core.equiv_sequential = function cljs$core$equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__17419 = cljs.core.next(xs);
            var G__17420 = cljs.core.next(ys);
            xs = G__17419;
            ys = G__17420;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function cljs$core$hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__17421 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__17422 = cljs.core.next(s);
        res = G__17421;
        s = G__17422;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function cljs$core$hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__17427 = (h + (cljs.core.hash(function() {
        var G__17425 = e;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__17425) : cljs.core.key.call(null, G__17425);
      }()) ^ cljs.core.hash(function() {
        var G__17426 = e;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__17426) : cljs.core.val.call(null, G__17426);
      }()))) % 4503599627370496;
      var G__17428 = cljs.core.next(s);
      h = G__17427;
      s = G__17428;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function cljs$core$hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__17429 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__17430 = cljs.core.next(s__$1);
      h = G__17429;
      s__$1 = G__17430;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function cljs$core$extend_object_BANG_(obj, fn_map) {
  var seq__17441_17451 = cljs.core.seq(fn_map);
  var chunk__17442_17452 = null;
  var count__17443_17453 = 0;
  var i__17444_17454 = 0;
  while (true) {
    if (i__17444_17454 < count__17443_17453) {
      var vec__17445_17455 = chunk__17442_17452.cljs$core$IIndexed$_nth$arity$2(null, i__17444_17454);
      var key_name_17456 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17445_17455, 0, null);
      var f_17457 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17445_17455, 1, null);
      var str_name_17458 = function() {
        var G__17446 = key_name_17456;
        return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__17446) : cljs.core.name.call(null, G__17446);
      }();
      obj[str_name_17458] = f_17457;
      var G__17459 = seq__17441_17451;
      var G__17460 = chunk__17442_17452;
      var G__17461 = count__17443_17453;
      var G__17462 = i__17444_17454 + 1;
      seq__17441_17451 = G__17459;
      chunk__17442_17452 = G__17460;
      count__17443_17453 = G__17461;
      i__17444_17454 = G__17462;
      continue;
    } else {
      var temp__4126__auto___17463 = cljs.core.seq(seq__17441_17451);
      if (temp__4126__auto___17463) {
        var seq__17441_17464__$1 = temp__4126__auto___17463;
        if (cljs.core.chunked_seq_QMARK_(seq__17441_17464__$1)) {
          var c__4894__auto___17465 = function() {
            var G__17447 = seq__17441_17464__$1;
            return cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(G__17447) : cljs.core.chunk_first.call(null, G__17447);
          }();
          var G__17466 = function() {
            var G__17448 = seq__17441_17464__$1;
            return cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(G__17448) : cljs.core.chunk_rest.call(null, G__17448);
          }();
          var G__17467 = c__4894__auto___17465;
          var G__17468 = cljs.core.count(c__4894__auto___17465);
          var G__17469 = 0;
          seq__17441_17451 = G__17466;
          chunk__17442_17452 = G__17467;
          count__17443_17453 = G__17468;
          i__17444_17454 = G__17469;
          continue;
        } else {
          var vec__17449_17470 = cljs.core.first(seq__17441_17464__$1);
          var key_name_17471 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17449_17470, 0, null);
          var f_17472 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17449_17470, 1, null);
          var str_name_17473 = function() {
            var G__17450 = key_name_17471;
            return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__17450) : cljs.core.name.call(null, G__17450);
          }();
          obj[str_name_17473] = f_17472;
          var G__17474 = cljs.core.next(seq__17441_17464__$1);
          var G__17475 = null;
          var G__17476 = 0;
          var G__17477 = 0;
          seq__17441_17451 = G__17474;
          chunk__17442_17452 = G__17475;
          count__17443_17453 = G__17476;
          i__17444_17454 = G__17477;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest(coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4525__auto__ = self__.__hash;
  if (!(h__4525__auto__ == null)) {
    return h__4525__auto__;
  } else {
    var h__4525__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4525__auto____$1;
    return h__4525__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function cljs$core$__GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function cljs$core$__GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.reversible_QMARK_ = function cljs$core$reversible_QMARK_(coll) {
  var G__17479 = coll;
  if (G__17479) {
    var bit__4783__auto__ = G__17479.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4783__auto__ || G__17479.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__17479.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__17479);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__17479);
  }
};
cljs.core.rseq = function cljs$core$rseq(coll) {
  return cljs.core._rseq(coll);
};
cljs.core.reverse = function cljs$core$reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var cljs$core$list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
          var G__17480 = xs__$1.cljs$core$INext$_next$arity$1(null);
          xs__$1 = G__17480;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__17481 = i - 1;
        var G__17482 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
        i = G__17481;
        r = G__17482;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var cljs$core$list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      var G__17483__i = 0, G__17483__a = new Array(arguments.length - 0);
      while (G__17483__i < G__17483__a.length) {
        G__17483__a[G__17483__i] = arguments[G__17483__i + 0];
        ++G__17483__i;
      }
      xs = new cljs.core.IndexedSeq(G__17483__a, 0);
    }
    return cljs$core$list__delegate.call(this, xs);
  };
  cljs$core$list.cljs$lang$maxFixedArity = 0;
  cljs$core$list.cljs$lang$applyTo = function(arglist__17484) {
    var xs = cljs.core.seq(arglist__17484);
    return cljs$core$list__delegate(xs);
  };
  cljs$core$list.cljs$core$IFn$_invoke$arity$variadic = cljs$core$list__delegate;
  return cljs$core$list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4525__auto__ = self__.__hash;
  if (!(h__4525__auto__ == null)) {
    return h__4525__auto__;
  } else {
    var h__4525__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4525__auto____$1;
    return h__4525__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function cljs$core$__GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.cons = function cljs$core$cons(x, coll) {
  if (function() {
    var or__4109__auto__ = coll == null;
    if (or__4109__auto__) {
      return or__4109__auto__;
    } else {
      var G__17488 = coll;
      if (G__17488) {
        var bit__4776__auto__ = G__17488.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4776__auto__ || G__17488.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.list_QMARK_ = function cljs$core$list_QMARK_(x) {
  var G__17490 = x;
  if (G__17490) {
    var bit__4783__auto__ = G__17490.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4783__auto__ || G__17490.cljs$core$IList$) {
      return true;
    } else {
      if (!G__17490.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__17490);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__17490);
  }
};
cljs.core.hash_keyword = function cljs$core$hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function cljs$core$compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4097__auto__ = cljs.core.not(a.ns);
      if (and__4097__auto__) {
        return b.ns;
      } else {
        return and__4097__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__17497 = a.ns;
            var G__17498 = b.ns;
            return goog.array.defaultCompare(G__17497, G__17498);
          }();
          if (0 === nsc) {
            var G__17499 = a.name;
            var G__17500 = b.name;
            return goog.array.defaultCompare(G__17499, G__17500);
          } else {
            return nsc;
          }
        }
      } else {
        var G__17501 = a.name;
        var G__17502 = b.name;
        return goog.array.defaultCompare(G__17501, G__17502);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4525__auto__ = self__._hash;
  if (!(h__4525__auto__ == null)) {
    return h__4525__auto__;
  } else {
    var h__4525__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__4525__auto____$1;
    return h__4525__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__17504 = null;
  var G__17504__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__17504__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__17504 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17504__2.call(this, self__, coll);
      case 3:
        return G__17504__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17504.cljs$core$IFn$_invoke$arity$2 = G__17504__2;
  G__17504.cljs$core$IFn$_invoke$arity$3 = G__17504__3;
  return G__17504;
}();
cljs.core.Keyword.prototype.apply = function(self__, args17503) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args17503)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function cljs$core$__GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function cljs$core$keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function cljs$core$keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function cljs$core$namespace(x) {
  if (function() {
    var G__17506 = x;
    if (G__17506) {
      var bit__4776__auto__ = G__17506.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4776__auto__ || G__17506.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var cljs$core$keyword = null;
  var cljs$core$keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace(name), function() {
          var G__17508 = name;
          return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__17508) : cljs.core.name.call(null, G__17508);
        }(), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var cljs$core$keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  cljs$core$keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return cljs$core$keyword__1.call(this, ns);
      case 2:
        return cljs$core$keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$keyword.cljs$core$IFn$_invoke$arity$1 = cljs$core$keyword__1;
  cljs$core$keyword.cljs$core$IFn$_invoke$arity$2 = cljs$core$keyword__2;
  return cljs$core$keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = function() {
      return self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    }();
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4525__auto__ = self__.__hash;
  if (!(h__4525__auto__ == null)) {
    return h__4525__auto__;
  } else {
    var h__4525__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4525__auto____$1;
    return h__4525__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__17509 = ls.sval();
        ls = G__17509;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function cljs$core$__GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function cljs$core$__GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function cljs$core$chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function cljs$core$__GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var cljs$core$array_chunk = null;
  var cljs$core$array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var cljs$core$array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var cljs$core$array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  cljs$core$array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return cljs$core$array_chunk__1.call(this, arr);
      case 2:
        return cljs$core$array_chunk__2.call(this, arr, off);
      case 3:
        return cljs$core$array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$array_chunk.cljs$core$IFn$_invoke$arity$1 = cljs$core$array_chunk__1;
  cljs$core$array_chunk.cljs$core$IFn$_invoke$arity$2 = cljs$core$array_chunk__2;
  cljs$core$array_chunk.cljs$core$IFn$_invoke$arity$3 = cljs$core$array_chunk__3;
  return cljs$core$array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4525__auto__ = self__.__hash;
  if (!(h__4525__auto__ == null)) {
    return h__4525__auto__;
  } else {
    var h__4525__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4525__auto____$1;
    return h__4525__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function cljs$core$__GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.chunk_cons = function cljs$core$chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function cljs$core$chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function cljs$core$chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function cljs$core$chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function cljs$core$chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function cljs$core$chunk_next(s) {
  if (function() {
    var G__17511 = s;
    if (G__17511) {
      var bit__4776__auto__ = G__17511.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4776__auto__ || G__17511.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function cljs$core$to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__17512 = cljs.core.next(s__$1);
      s__$1 = G__17512;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function cljs$core$to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_17513 = 0;
  var xs_17514 = cljs.core.seq(coll);
  while (true) {
    if (xs_17514) {
      ret[i_17513] = cljs.core.to_array(cljs.core.first(xs_17514));
      var G__17515 = i_17513 + 1;
      var G__17516 = cljs.core.next(xs_17514);
      i_17513 = G__17515;
      xs_17514 = G__17516;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var cljs$core$int_array = null;
  var cljs$core$int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return cljs$core$int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var cljs$core$int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__17519 = i + 1;
          var G__17520 = cljs.core.next(s__$1);
          i = G__17519;
          s__$1 = G__17520;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4994__auto___17521 = size;
      var i_17522 = 0;
      while (true) {
        if (i_17522 < n__4994__auto___17521) {
          a[i_17522] = init_val_or_seq;
          var G__17523 = i_17522 + 1;
          i_17522 = G__17523;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  cljs$core$int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return cljs$core$int_array__1.call(this, size);
      case 2:
        return cljs$core$int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$int_array.cljs$core$IFn$_invoke$arity$1 = cljs$core$int_array__1;
  cljs$core$int_array.cljs$core$IFn$_invoke$arity$2 = cljs$core$int_array__2;
  return cljs$core$int_array;
}();
cljs.core.long_array = function() {
  var cljs$core$long_array = null;
  var cljs$core$long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return cljs$core$long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var cljs$core$long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__17526 = i + 1;
          var G__17527 = cljs.core.next(s__$1);
          i = G__17526;
          s__$1 = G__17527;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4994__auto___17528 = size;
      var i_17529 = 0;
      while (true) {
        if (i_17529 < n__4994__auto___17528) {
          a[i_17529] = init_val_or_seq;
          var G__17530 = i_17529 + 1;
          i_17529 = G__17530;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  cljs$core$long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return cljs$core$long_array__1.call(this, size);
      case 2:
        return cljs$core$long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$long_array.cljs$core$IFn$_invoke$arity$1 = cljs$core$long_array__1;
  cljs$core$long_array.cljs$core$IFn$_invoke$arity$2 = cljs$core$long_array__2;
  return cljs$core$long_array;
}();
cljs.core.double_array = function() {
  var cljs$core$double_array = null;
  var cljs$core$double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return cljs$core$double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var cljs$core$double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__17533 = i + 1;
          var G__17534 = cljs.core.next(s__$1);
          i = G__17533;
          s__$1 = G__17534;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4994__auto___17535 = size;
      var i_17536 = 0;
      while (true) {
        if (i_17536 < n__4994__auto___17535) {
          a[i_17536] = init_val_or_seq;
          var G__17537 = i_17536 + 1;
          i_17536 = G__17537;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  cljs$core$double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return cljs$core$double_array__1.call(this, size);
      case 2:
        return cljs$core$double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$double_array.cljs$core$IFn$_invoke$arity$1 = cljs$core$double_array__1;
  cljs$core$double_array.cljs$core$IFn$_invoke$arity$2 = cljs$core$double_array__2;
  return cljs$core$double_array;
}();
cljs.core.object_array = function() {
  var cljs$core$object_array = null;
  var cljs$core$object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return cljs$core$object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var cljs$core$object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__17540 = i + 1;
          var G__17541 = cljs.core.next(s__$1);
          i = G__17540;
          s__$1 = G__17541;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4994__auto___17542 = size;
      var i_17543 = 0;
      while (true) {
        if (i_17543 < n__4994__auto___17542) {
          a[i_17543] = init_val_or_seq;
          var G__17544 = i_17543 + 1;
          i_17543 = G__17544;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  cljs$core$object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return cljs$core$object_array__1.call(this, size);
      case 2:
        return cljs$core$object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$object_array.cljs$core$IFn$_invoke$arity$1 = cljs$core$object_array__1;
  cljs$core$object_array.cljs$core$IFn$_invoke$arity$2 = cljs$core$object_array__2;
  return cljs$core$object_array;
}();
cljs.core.bounded_count = function cljs$core$bounded_count(s, n) {
  if (cljs.core.counted_QMARK_(s)) {
    return cljs.core.count(s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq(s__$1)) {
        var G__17545 = cljs.core.next(s__$1);
        var G__17546 = i - 1;
        var G__17547 = sum + 1;
        s__$1 = G__17545;
        i = G__17546;
        sum = G__17547;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function cljs$core$spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), cljs$core$spread(cljs.core.next(arglist)));
    }
  }
};
cljs.core.concat = function() {
  var cljs$core$concat = null;
  var cljs$core$concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var cljs$core$concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var cljs$core$concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq(x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_(s)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(s), cljs$core$concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
        } else {
          return cljs.core.cons(cljs.core.first(s), cljs$core$concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var cljs$core$concat__3 = function() {
    var G__17567__delegate = function(x, y, zs) {
      var cat = function cljs$core$concat_$_cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq(xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
              return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cljs$core$concat_$_cat(cljs.core.chunk_rest(xys__$1), zs__$1));
            } else {
              return cljs.core.cons(cljs.core.first(xys__$1), cljs$core$concat_$_cat(cljs.core.rest(xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cljs$core$concat_$_cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat(cljs$core$concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
    };
    var G__17567 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        var G__17568__i = 0, G__17568__a = new Array(arguments.length - 2);
        while (G__17568__i < G__17568__a.length) {
          G__17568__a[G__17568__i] = arguments[G__17568__i + 2];
          ++G__17568__i;
        }
        zs = new cljs.core.IndexedSeq(G__17568__a, 0);
      }
      return G__17567__delegate.call(this, x, y, zs);
    };
    G__17567.cljs$lang$maxFixedArity = 2;
    G__17567.cljs$lang$applyTo = function(arglist__17569) {
      var x = cljs.core.first(arglist__17569);
      arglist__17569 = cljs.core.next(arglist__17569);
      var y = cljs.core.first(arglist__17569);
      var zs = cljs.core.rest(arglist__17569);
      return G__17567__delegate(x, y, zs);
    };
    G__17567.cljs$core$IFn$_invoke$arity$variadic = G__17567__delegate;
    return G__17567;
  }();
  cljs$core$concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$concat__0.call(this);
      case 1:
        return cljs$core$concat__1.call(this, x);
      case 2:
        return cljs$core$concat__2.call(this, x, y);
      default:
        var G__17570 = null;
        if (arguments.length > 2) {
          var G__17571__i = 0, G__17571__a = new Array(arguments.length - 2);
          while (G__17571__i < G__17571__a.length) {
            G__17571__a[G__17571__i] = arguments[G__17571__i + 2];
            ++G__17571__i;
          }
          G__17570 = new cljs.core.IndexedSeq(G__17571__a, 0);
        }
        return cljs$core$concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17570);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$concat.cljs$lang$maxFixedArity = 2;
  cljs$core$concat.cljs$lang$applyTo = cljs$core$concat__3.cljs$lang$applyTo;
  cljs$core$concat.cljs$core$IFn$_invoke$arity$0 = cljs$core$concat__0;
  cljs$core$concat.cljs$core$IFn$_invoke$arity$1 = cljs$core$concat__1;
  cljs$core$concat.cljs$core$IFn$_invoke$arity$2 = cljs$core$concat__2;
  cljs$core$concat.cljs$core$IFn$_invoke$arity$variadic = cljs$core$concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$concat;
}();
cljs.core.list_STAR_ = function() {
  var cljs$core$list_STAR_ = null;
  var cljs$core$list_STAR___1 = function(args) {
    return cljs.core.seq(args);
  };
  var cljs$core$list_STAR___2 = function(a, args) {
    return cljs.core.cons(a, args);
  };
  var cljs$core$list_STAR___3 = function(a, b, args) {
    return cljs.core.cons(a, cljs.core.cons(b, args));
  };
  var cljs$core$list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
  };
  var cljs$core$list_STAR___5 = function() {
    var G__17572__delegate = function(a, b, c, d, more) {
      return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
    };
    var G__17572 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__17573__i = 0, G__17573__a = new Array(arguments.length - 4);
        while (G__17573__i < G__17573__a.length) {
          G__17573__a[G__17573__i] = arguments[G__17573__i + 4];
          ++G__17573__i;
        }
        more = new cljs.core.IndexedSeq(G__17573__a, 0);
      }
      return G__17572__delegate.call(this, a, b, c, d, more);
    };
    G__17572.cljs$lang$maxFixedArity = 4;
    G__17572.cljs$lang$applyTo = function(arglist__17574) {
      var a = cljs.core.first(arglist__17574);
      arglist__17574 = cljs.core.next(arglist__17574);
      var b = cljs.core.first(arglist__17574);
      arglist__17574 = cljs.core.next(arglist__17574);
      var c = cljs.core.first(arglist__17574);
      arglist__17574 = cljs.core.next(arglist__17574);
      var d = cljs.core.first(arglist__17574);
      var more = cljs.core.rest(arglist__17574);
      return G__17572__delegate(a, b, c, d, more);
    };
    G__17572.cljs$core$IFn$_invoke$arity$variadic = G__17572__delegate;
    return G__17572;
  }();
  cljs$core$list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$list_STAR___1.call(this, a);
      case 2:
        return cljs$core$list_STAR___2.call(this, a, b);
      case 3:
        return cljs$core$list_STAR___3.call(this, a, b, c);
      case 4:
        return cljs$core$list_STAR___4.call(this, a, b, c, d);
      default:
        var G__17575 = null;
        if (arguments.length > 4) {
          var G__17576__i = 0, G__17576__a = new Array(arguments.length - 4);
          while (G__17576__i < G__17576__a.length) {
            G__17576__a[G__17576__i] = arguments[G__17576__i + 4];
            ++G__17576__i;
          }
          G__17575 = new cljs.core.IndexedSeq(G__17576__a, 0);
        }
        return cljs$core$list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, G__17575);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$list_STAR_.cljs$lang$maxFixedArity = 4;
  cljs$core$list_STAR_.cljs$lang$applyTo = cljs$core$list_STAR___5.cljs$lang$applyTo;
  cljs$core$list_STAR_.cljs$core$IFn$_invoke$arity$1 = cljs$core$list_STAR___1;
  cljs$core$list_STAR_.cljs$core$IFn$_invoke$arity$2 = cljs$core$list_STAR___2;
  cljs$core$list_STAR_.cljs$core$IFn$_invoke$arity$3 = cljs$core$list_STAR___3;
  cljs$core$list_STAR_.cljs$core$IFn$_invoke$arity$4 = cljs$core$list_STAR___4;
  cljs$core$list_STAR_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$list_STAR_;
}();
cljs.core.transient$ = function cljs$core$transient(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function cljs$core$persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function() {
  var cljs$core$conj_BANG_ = null;
  var cljs$core$conj_BANG___0 = function() {
    return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
  };
  var cljs$core$conj_BANG___1 = function(coll) {
    return coll;
  };
  var cljs$core$conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_(tcoll, val);
  };
  var cljs$core$conj_BANG___3 = function() {
    var G__17577__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_(tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__17578 = ntcoll;
          var G__17579 = cljs.core.first(vals);
          var G__17580 = cljs.core.next(vals);
          tcoll = G__17578;
          val = G__17579;
          vals = G__17580;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__17577 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        var G__17581__i = 0, G__17581__a = new Array(arguments.length - 2);
        while (G__17581__i < G__17581__a.length) {
          G__17581__a[G__17581__i] = arguments[G__17581__i + 2];
          ++G__17581__i;
        }
        vals = new cljs.core.IndexedSeq(G__17581__a, 0);
      }
      return G__17577__delegate.call(this, tcoll, val, vals);
    };
    G__17577.cljs$lang$maxFixedArity = 2;
    G__17577.cljs$lang$applyTo = function(arglist__17582) {
      var tcoll = cljs.core.first(arglist__17582);
      arglist__17582 = cljs.core.next(arglist__17582);
      var val = cljs.core.first(arglist__17582);
      var vals = cljs.core.rest(arglist__17582);
      return G__17577__delegate(tcoll, val, vals);
    };
    G__17577.cljs$core$IFn$_invoke$arity$variadic = G__17577__delegate;
    return G__17577;
  }();
  cljs$core$conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$conj_BANG___0.call(this);
      case 1:
        return cljs$core$conj_BANG___1.call(this, tcoll);
      case 2:
        return cljs$core$conj_BANG___2.call(this, tcoll, val);
      default:
        var G__17583 = null;
        if (arguments.length > 2) {
          var G__17584__i = 0, G__17584__a = new Array(arguments.length - 2);
          while (G__17584__i < G__17584__a.length) {
            G__17584__a[G__17584__i] = arguments[G__17584__i + 2];
            ++G__17584__i;
          }
          G__17583 = new cljs.core.IndexedSeq(G__17584__a, 0);
        }
        return cljs$core$conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, G__17583);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$conj_BANG_.cljs$lang$maxFixedArity = 2;
  cljs$core$conj_BANG_.cljs$lang$applyTo = cljs$core$conj_BANG___3.cljs$lang$applyTo;
  cljs$core$conj_BANG_.cljs$core$IFn$_invoke$arity$0 = cljs$core$conj_BANG___0;
  cljs$core$conj_BANG_.cljs$core$IFn$_invoke$arity$1 = cljs$core$conj_BANG___1;
  cljs$core$conj_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$conj_BANG___2;
  cljs$core$conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var cljs$core$assoc_BANG_ = null;
  var cljs$core$assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_(tcoll, key, val);
  };
  var cljs$core$assoc_BANG___4 = function() {
    var G__17585__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__17586 = ntcoll;
          var G__17587 = cljs.core.first(kvs);
          var G__17588 = cljs.core.second(kvs);
          var G__17589 = cljs.core.nnext(kvs);
          tcoll = G__17586;
          key = G__17587;
          val = G__17588;
          kvs = G__17589;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__17585 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        var G__17590__i = 0, G__17590__a = new Array(arguments.length - 3);
        while (G__17590__i < G__17590__a.length) {
          G__17590__a[G__17590__i] = arguments[G__17590__i + 3];
          ++G__17590__i;
        }
        kvs = new cljs.core.IndexedSeq(G__17590__a, 0);
      }
      return G__17585__delegate.call(this, tcoll, key, val, kvs);
    };
    G__17585.cljs$lang$maxFixedArity = 3;
    G__17585.cljs$lang$applyTo = function(arglist__17591) {
      var tcoll = cljs.core.first(arglist__17591);
      arglist__17591 = cljs.core.next(arglist__17591);
      var key = cljs.core.first(arglist__17591);
      arglist__17591 = cljs.core.next(arglist__17591);
      var val = cljs.core.first(arglist__17591);
      var kvs = cljs.core.rest(arglist__17591);
      return G__17585__delegate(tcoll, key, val, kvs);
    };
    G__17585.cljs$core$IFn$_invoke$arity$variadic = G__17585__delegate;
    return G__17585;
  }();
  cljs$core$assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return cljs$core$assoc_BANG___3.call(this, tcoll, key, val);
      default:
        var G__17592 = null;
        if (arguments.length > 3) {
          var G__17593__i = 0, G__17593__a = new Array(arguments.length - 3);
          while (G__17593__i < G__17593__a.length) {
            G__17593__a[G__17593__i] = arguments[G__17593__i + 3];
            ++G__17593__i;
          }
          G__17592 = new cljs.core.IndexedSeq(G__17593__a, 0);
        }
        return cljs$core$assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, G__17592);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$assoc_BANG_.cljs$lang$maxFixedArity = 3;
  cljs$core$assoc_BANG_.cljs$lang$applyTo = cljs$core$assoc_BANG___4.cljs$lang$applyTo;
  cljs$core$assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = cljs$core$assoc_BANG___3;
  cljs$core$assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var cljs$core$dissoc_BANG_ = null;
  var cljs$core$dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_(tcoll, key);
  };
  var cljs$core$dissoc_BANG___3 = function() {
    var G__17594__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__17595 = ntcoll;
          var G__17596 = cljs.core.first(ks);
          var G__17597 = cljs.core.next(ks);
          tcoll = G__17595;
          key = G__17596;
          ks = G__17597;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__17594 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__17598__i = 0, G__17598__a = new Array(arguments.length - 2);
        while (G__17598__i < G__17598__a.length) {
          G__17598__a[G__17598__i] = arguments[G__17598__i + 2];
          ++G__17598__i;
        }
        ks = new cljs.core.IndexedSeq(G__17598__a, 0);
      }
      return G__17594__delegate.call(this, tcoll, key, ks);
    };
    G__17594.cljs$lang$maxFixedArity = 2;
    G__17594.cljs$lang$applyTo = function(arglist__17599) {
      var tcoll = cljs.core.first(arglist__17599);
      arglist__17599 = cljs.core.next(arglist__17599);
      var key = cljs.core.first(arglist__17599);
      var ks = cljs.core.rest(arglist__17599);
      return G__17594__delegate(tcoll, key, ks);
    };
    G__17594.cljs$core$IFn$_invoke$arity$variadic = G__17594__delegate;
    return G__17594;
  }();
  cljs$core$dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$dissoc_BANG___2.call(this, tcoll, key);
      default:
        var G__17600 = null;
        if (arguments.length > 2) {
          var G__17601__i = 0, G__17601__a = new Array(arguments.length - 2);
          while (G__17601__i < G__17601__a.length) {
            G__17601__a[G__17601__i] = arguments[G__17601__i + 2];
            ++G__17601__i;
          }
          G__17600 = new cljs.core.IndexedSeq(G__17601__a, 0);
        }
        return cljs$core$dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, G__17600);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  cljs$core$dissoc_BANG_.cljs$lang$applyTo = cljs$core$dissoc_BANG___3.cljs$lang$applyTo;
  cljs$core$dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$dissoc_BANG___2;
  cljs$core$dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function cljs$core$pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function() {
  var cljs$core$disj_BANG_ = null;
  var cljs$core$disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_(tcoll, val);
  };
  var cljs$core$disj_BANG___3 = function() {
    var G__17602__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__17603 = ntcoll;
          var G__17604 = cljs.core.first(vals);
          var G__17605 = cljs.core.next(vals);
          tcoll = G__17603;
          val = G__17604;
          vals = G__17605;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__17602 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        var G__17606__i = 0, G__17606__a = new Array(arguments.length - 2);
        while (G__17606__i < G__17606__a.length) {
          G__17606__a[G__17606__i] = arguments[G__17606__i + 2];
          ++G__17606__i;
        }
        vals = new cljs.core.IndexedSeq(G__17606__a, 0);
      }
      return G__17602__delegate.call(this, tcoll, val, vals);
    };
    G__17602.cljs$lang$maxFixedArity = 2;
    G__17602.cljs$lang$applyTo = function(arglist__17607) {
      var tcoll = cljs.core.first(arglist__17607);
      arglist__17607 = cljs.core.next(arglist__17607);
      var val = cljs.core.first(arglist__17607);
      var vals = cljs.core.rest(arglist__17607);
      return G__17602__delegate(tcoll, val, vals);
    };
    G__17602.cljs$core$IFn$_invoke$arity$variadic = G__17602__delegate;
    return G__17602;
  }();
  cljs$core$disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$disj_BANG___2.call(this, tcoll, val);
      default:
        var G__17608 = null;
        if (arguments.length > 2) {
          var G__17609__i = 0, G__17609__a = new Array(arguments.length - 2);
          while (G__17609__i < G__17609__a.length) {
            G__17609__a[G__17609__i] = arguments[G__17609__i + 2];
            ++G__17609__i;
          }
          G__17608 = new cljs.core.IndexedSeq(G__17609__a, 0);
        }
        return cljs$core$disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, G__17608);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$disj_BANG_.cljs$lang$maxFixedArity = 2;
  cljs$core$disj_BANG_.cljs$lang$applyTo = cljs$core$disj_BANG___3.cljs$lang$applyTo;
  cljs$core$disj_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$disj_BANG___2;
  cljs$core$disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$disj_BANG_;
}();
cljs.core.apply_to = function cljs$core$apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a5038 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a5038);
      } else {
        var G__17820 = a5038;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17820) : f.call(null, G__17820);
      }
    } else {
      var b5039 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a5038, b5039);
        } else {
          var G__17821 = a5038;
          var G__17822 = b5039;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17821, G__17822) : f.call(null, G__17821, G__17822);
        }
      } else {
        var c5040 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a5038, b5039, c5040);
          } else {
            var G__17823 = a5038;
            var G__17824 = b5039;
            var G__17825 = c5040;
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17823, G__17824, G__17825) : f.call(null, G__17823, G__17824, G__17825);
          }
        } else {
          var d5041 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a5038, b5039, c5040, d5041);
            } else {
              var G__17826 = a5038;
              var G__17827 = b5039;
              var G__17828 = c5040;
              var G__17829 = d5041;
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__17826, G__17827, G__17828, G__17829) : f.call(null, G__17826, G__17827, G__17828, G__17829);
            }
          } else {
            var e5042 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a5038, b5039, c5040, d5041, e5042);
              } else {
                var G__17830 = a5038;
                var G__17831 = b5039;
                var G__17832 = c5040;
                var G__17833 = d5041;
                var G__17834 = e5042;
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__17830, G__17831, G__17832, G__17833, G__17834) : f.call(null, G__17830, G__17831, G__17832, G__17833, G__17834);
              }
            } else {
              var f5043 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a5038, b5039, c5040, d5041, e5042, f5043);
                } else {
                  var G__17835 = a5038;
                  var G__17836 = b5039;
                  var G__17837 = c5040;
                  var G__17838 = d5041;
                  var G__17839 = e5042;
                  var G__17840 = f5043;
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__17835, G__17836, G__17837, G__17838, G__17839, G__17840) : f.call(null, G__17835, G__17836, G__17837, G__17838, G__17839, G__17840);
                }
              } else {
                var g5044 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a5038, b5039, c5040, d5041, e5042, f5043, g5044);
                  } else {
                    var G__17841 = a5038;
                    var G__17842 = b5039;
                    var G__17843 = c5040;
                    var G__17844 = d5041;
                    var G__17845 = e5042;
                    var G__17846 = f5043;
                    var G__17847 = g5044;
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(G__17841, G__17842, G__17843, G__17844, G__17845, G__17846, G__17847) : f.call(null, G__17841, G__17842, G__17843, G__17844, G__17845, G__17846, G__17847);
                  }
                } else {
                  var h5045 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a5038, b5039, c5040, d5041, e5042, f5043, g5044, h5045);
                    } else {
                      var G__17848 = a5038;
                      var G__17849 = b5039;
                      var G__17850 = c5040;
                      var G__17851 = d5041;
                      var G__17852 = e5042;
                      var G__17853 = f5043;
                      var G__17854 = g5044;
                      var G__17855 = h5045;
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(G__17848, G__17849, G__17850, G__17851, G__17852, G__17853, G__17854, G__17855) : f.call(null, G__17848, G__17849, G__17850, G__17851, G__17852, G__17853, G__17854, G__17855);
                    }
                  } else {
                    var i5046 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a5038, b5039, c5040, d5041, e5042, f5043, g5044, h5045, i5046);
                      } else {
                        var G__17856 = a5038;
                        var G__17857 = b5039;
                        var G__17858 = c5040;
                        var G__17859 = d5041;
                        var G__17860 = e5042;
                        var G__17861 = f5043;
                        var G__17862 = g5044;
                        var G__17863 = h5045;
                        var G__17864 = i5046;
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(G__17856, G__17857, G__17858, G__17859, G__17860, G__17861, G__17862, G__17863, G__17864) : f.call(null, G__17856, G__17857, G__17858, G__17859, G__17860, G__17861, G__17862, G__17863, G__17864);
                      }
                    } else {
                      var j5047 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a5038, b5039, c5040, d5041, e5042, f5043, g5044, h5045, i5046, j5047);
                        } else {
                          var G__17865 = a5038;
                          var G__17866 = b5039;
                          var G__17867 = c5040;
                          var G__17868 = d5041;
                          var G__17869 = e5042;
                          var G__17870 = f5043;
                          var G__17871 = g5044;
                          var G__17872 = h5045;
                          var G__17873 = i5046;
                          var G__17874 = j5047;
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(G__17865, G__17866, G__17867, G__17868, G__17869, G__17870, G__17871, G__17872, G__17873, G__17874) : f.call(null, G__17865, G__17866, G__17867, G__17868, G__17869, G__17870, G__17871, G__17872, G__17873, G__17874);
                        }
                      } else {
                        var k5048 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a5038, b5039, c5040, d5041, e5042, f5043, g5044, h5045, i5046, j5047, k5048);
                          } else {
                            var G__17875 = a5038;
                            var G__17876 = b5039;
                            var G__17877 = c5040;
                            var G__17878 = d5041;
                            var G__17879 = e5042;
                            var G__17880 = f5043;
                            var G__17881 = g5044;
                            var G__17882 = h5045;
                            var G__17883 = i5046;
                            var G__17884 = j5047;
                            var G__17885 = k5048;
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(G__17875, G__17876, G__17877, G__17878, G__17879, G__17880, G__17881, G__17882, G__17883, G__17884, G__17885) : f.call(null, G__17875, G__17876, G__17877, G__17878, G__17879, G__17880, G__17881, G__17882, G__17883, G__17884, G__17885);
                          }
                        } else {
                          var l5049 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a5038, b5039, c5040, d5041, e5042, f5043, g5044, h5045, i5046, j5047, k5048, l5049);
                            } else {
                              var G__17886 = a5038;
                              var G__17887 = b5039;
                              var G__17888 = c5040;
                              var G__17889 = d5041;
                              var G__17890 = e5042;
                              var G__17891 = f5043;
                              var G__17892 = g5044;
                              var G__17893 = h5045;
                              var G__17894 = i5046;
                              var G__17895 = j5047;
                              var G__17896 = k5048;
                              var G__17897 = l5049;
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(G__17886, G__17887, G__17888, G__17889, G__17890, G__17891, G__17892, G__17893, G__17894, G__17895, G__17896, G__17897) : f.call(null, G__17886, G__17887, G__17888, G__17889, G__17890, G__17891, G__17892, G__17893, G__17894, G__17895, G__17896, G__17897);
                            }
                          } else {
                            var m5050 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a5038, b5039, c5040, d5041, e5042, f5043, g5044, h5045, i5046, j5047, k5048, l5049, m5050);
                              } else {
                                var G__17898 = a5038;
                                var G__17899 = b5039;
                                var G__17900 = c5040;
                                var G__17901 = d5041;
                                var G__17902 = e5042;
                                var G__17903 = f5043;
                                var G__17904 = g5044;
                                var G__17905 = h5045;
                                var G__17906 = i5046;
                                var G__17907 = j5047;
                                var G__17908 = k5048;
                                var G__17909 = l5049;
                                var G__17910 = m5050;
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(G__17898, G__17899, G__17900, G__17901, G__17902, G__17903, G__17904, G__17905, G__17906, G__17907, G__17908, G__17909, G__17910) : f.call(null, G__17898, G__17899, G__17900, G__17901, G__17902, G__17903, G__17904, G__17905, G__17906, G__17907, G__17908, G__17909, G__17910);
                              }
                            } else {
                              var n5051 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a5038, b5039, c5040, d5041, e5042, f5043, g5044, h5045, i5046, j5047, k5048, l5049, m5050, n5051);
                                } else {
                                  var G__17911 = a5038;
                                  var G__17912 = b5039;
                                  var G__17913 = c5040;
                                  var G__17914 = d5041;
                                  var G__17915 = e5042;
                                  var G__17916 = f5043;
                                  var G__17917 = g5044;
                                  var G__17918 = h5045;
                                  var G__17919 = i5046;
                                  var G__17920 = j5047;
                                  var G__17921 = k5048;
                                  var G__17922 = l5049;
                                  var G__17923 = m5050;
                                  var G__17924 = n5051;
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(G__17911, G__17912, G__17913, G__17914, G__17915, G__17916, G__17917, G__17918, G__17919, G__17920, G__17921, G__17922, G__17923, G__17924) : f.call(null, G__17911, G__17912, G__17913, G__17914, G__17915, G__17916, G__17917, G__17918, G__17919, G__17920, G__17921, G__17922, G__17923, G__17924);
                                }
                              } else {
                                var o5052 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a5038, b5039, c5040, d5041, e5042, f5043, g5044, h5045, i5046, j5047, k5048, l5049, m5050, n5051, o5052);
                                  } else {
                                    var G__17925 = a5038;
                                    var G__17926 = b5039;
                                    var G__17927 = c5040;
                                    var G__17928 = d5041;
                                    var G__17929 = e5042;
                                    var G__17930 = f5043;
                                    var G__17931 = g5044;
                                    var G__17932 = h5045;
                                    var G__17933 = i5046;
                                    var G__17934 = j5047;
                                    var G__17935 = k5048;
                                    var G__17936 = l5049;
                                    var G__17937 = m5050;
                                    var G__17938 = n5051;
                                    var G__17939 = o5052;
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(G__17925, G__17926, G__17927, G__17928, G__17929, G__17930, G__17931, G__17932, G__17933, G__17934, G__17935, G__17936, G__17937, G__17938, G__17939) : f.call(null, G__17925, G__17926, G__17927, G__17928, G__17929, G__17930, G__17931, G__17932, G__17933, G__17934, G__17935, G__17936, G__17937, G__17938, G__17939);
                                  }
                                } else {
                                  var p5053 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a5038, b5039, c5040, d5041, e5042, f5043, g5044, h5045, i5046, j5047, k5048, l5049, m5050, n5051, o5052, p5053);
                                    } else {
                                      var G__17940 = a5038;
                                      var G__17941 = b5039;
                                      var G__17942 = c5040;
                                      var G__17943 = d5041;
                                      var G__17944 = e5042;
                                      var G__17945 = f5043;
                                      var G__17946 = g5044;
                                      var G__17947 = h5045;
                                      var G__17948 = i5046;
                                      var G__17949 = j5047;
                                      var G__17950 = k5048;
                                      var G__17951 = l5049;
                                      var G__17952 = m5050;
                                      var G__17953 = n5051;
                                      var G__17954 = o5052;
                                      var G__17955 = p5053;
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(G__17940, G__17941, G__17942, G__17943, G__17944, G__17945, G__17946, G__17947, G__17948, G__17949, G__17950, G__17951, G__17952, G__17953, G__17954, G__17955) : f.call(null, G__17940, G__17941, G__17942, G__17943, G__17944, G__17945, G__17946, G__17947, G__17948, G__17949, G__17950, G__17951, G__17952, G__17953, G__17954, G__17955);
                                    }
                                  } else {
                                    var q5054 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a5038, b5039, c5040, d5041, e5042, f5043, g5044, h5045, i5046, j5047, k5048, l5049, m5050, n5051, o5052, p5053, q5054);
                                      } else {
                                        var G__17956 = a5038;
                                        var G__17957 = b5039;
                                        var G__17958 = c5040;
                                        var G__17959 = d5041;
                                        var G__17960 = e5042;
                                        var G__17961 = f5043;
                                        var G__17962 = g5044;
                                        var G__17963 = h5045;
                                        var G__17964 = i5046;
                                        var G__17965 = j5047;
                                        var G__17966 = k5048;
                                        var G__17967 = l5049;
                                        var G__17968 = m5050;
                                        var G__17969 = n5051;
                                        var G__17970 = o5052;
                                        var G__17971 = p5053;
                                        var G__17972 = q5054;
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(G__17956, G__17957, G__17958, G__17959, G__17960, G__17961, G__17962, G__17963, G__17964, G__17965, G__17966, G__17967, G__17968, G__17969, G__17970, G__17971, G__17972) : f.call(null, G__17956, G__17957, G__17958, G__17959, G__17960, G__17961, G__17962, G__17963, G__17964, G__17965, G__17966, G__17967, G__17968, G__17969, G__17970, G__17971, G__17972);
                                      }
                                    } else {
                                      var r5055 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a5038, b5039, c5040, d5041, e5042, f5043, g5044, h5045, i5046, j5047, k5048, l5049, m5050, n5051, o5052, p5053, q5054, r5055);
                                        } else {
                                          var G__17973 = a5038;
                                          var G__17974 = b5039;
                                          var G__17975 = c5040;
                                          var G__17976 = d5041;
                                          var G__17977 = e5042;
                                          var G__17978 = f5043;
                                          var G__17979 = g5044;
                                          var G__17980 = h5045;
                                          var G__17981 = i5046;
                                          var G__17982 = j5047;
                                          var G__17983 = k5048;
                                          var G__17984 = l5049;
                                          var G__17985 = m5050;
                                          var G__17986 = n5051;
                                          var G__17987 = o5052;
                                          var G__17988 = p5053;
                                          var G__17989 = q5054;
                                          var G__17990 = r5055;
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(G__17973, G__17974, G__17975, G__17976, G__17977, G__17978, G__17979, G__17980, G__17981, G__17982, G__17983, G__17984, G__17985, G__17986, G__17987, G__17988, G__17989, G__17990) : f.call(null, G__17973, G__17974, G__17975, G__17976, G__17977, G__17978, G__17979, G__17980, G__17981, G__17982, G__17983, G__17984, G__17985, G__17986, G__17987, G__17988, G__17989, G__17990);
                                        }
                                      } else {
                                        var s5056 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a5038, b5039, c5040, d5041, e5042, f5043, g5044, h5045, i5046, j5047, k5048, l5049, m5050, n5051, o5052, p5053, q5054, r5055, s5056);
                                          } else {
                                            var G__17991 = a5038;
                                            var G__17992 = b5039;
                                            var G__17993 = c5040;
                                            var G__17994 = d5041;
                                            var G__17995 = e5042;
                                            var G__17996 = f5043;
                                            var G__17997 = g5044;
                                            var G__17998 = h5045;
                                            var G__17999 = i5046;
                                            var G__18000 = j5047;
                                            var G__18001 = k5048;
                                            var G__18002 = l5049;
                                            var G__18003 = m5050;
                                            var G__18004 = n5051;
                                            var G__18005 = o5052;
                                            var G__18006 = p5053;
                                            var G__18007 = q5054;
                                            var G__18008 = r5055;
                                            var G__18009 = s5056;
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(G__17991, G__17992, G__17993, G__17994, G__17995, G__17996, G__17997, G__17998, G__17999, G__18000, G__18001, G__18002, G__18003, G__18004, G__18005, G__18006, G__18007, G__18008, G__18009) : f.call(null, G__17991, G__17992, G__17993, G__17994, G__17995, G__17996, G__17997, G__17998, G__17999, G__18000, G__18001, G__18002, G__18003, G__18004, G__18005, G__18006, G__18007, G__18008, 
                                            G__18009);
                                          }
                                        } else {
                                          var t5057 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a5038, b5039, c5040, d5041, e5042, f5043, g5044, h5045, i5046, j5047, k5048, l5049, m5050, n5051, o5052, p5053, q5054, r5055, s5056, t5057);
                                            } else {
                                              var G__18010 = a5038;
                                              var G__18011 = b5039;
                                              var G__18012 = c5040;
                                              var G__18013 = d5041;
                                              var G__18014 = e5042;
                                              var G__18015 = f5043;
                                              var G__18016 = g5044;
                                              var G__18017 = h5045;
                                              var G__18018 = i5046;
                                              var G__18019 = j5047;
                                              var G__18020 = k5048;
                                              var G__18021 = l5049;
                                              var G__18022 = m5050;
                                              var G__18023 = n5051;
                                              var G__18024 = o5052;
                                              var G__18025 = p5053;
                                              var G__18026 = q5054;
                                              var G__18027 = r5055;
                                              var G__18028 = s5056;
                                              var G__18029 = t5057;
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(G__18010, G__18011, G__18012, G__18013, G__18014, G__18015, G__18016, G__18017, G__18018, G__18019, G__18020, G__18021, G__18022, G__18023, G__18024, G__18025, G__18026, G__18027, G__18028, G__18029) : f.call(null, G__18010, G__18011, G__18012, G__18013, G__18014, G__18015, G__18016, G__18017, G__18018, G__18019, G__18020, G__18021, G__18022, G__18023, G__18024, G__18025, G__18026, 
                                              G__18027, G__18028, G__18029);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var cljs$core$apply = null;
  var cljs$core$apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array(args));
    }
  };
  var cljs$core$apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var cljs$core$apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var cljs$core$apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var cljs$core$apply__6 = function() {
    var G__18030__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to(f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array(arglist));
      }
    };
    var G__18030 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        var G__18031__i = 0, G__18031__a = new Array(arguments.length - 5);
        while (G__18031__i < G__18031__a.length) {
          G__18031__a[G__18031__i] = arguments[G__18031__i + 5];
          ++G__18031__i;
        }
        args = new cljs.core.IndexedSeq(G__18031__a, 0);
      }
      return G__18030__delegate.call(this, f, a, b, c, d, args);
    };
    G__18030.cljs$lang$maxFixedArity = 5;
    G__18030.cljs$lang$applyTo = function(arglist__18032) {
      var f = cljs.core.first(arglist__18032);
      arglist__18032 = cljs.core.next(arglist__18032);
      var a = cljs.core.first(arglist__18032);
      arglist__18032 = cljs.core.next(arglist__18032);
      var b = cljs.core.first(arglist__18032);
      arglist__18032 = cljs.core.next(arglist__18032);
      var c = cljs.core.first(arglist__18032);
      arglist__18032 = cljs.core.next(arglist__18032);
      var d = cljs.core.first(arglist__18032);
      var args = cljs.core.rest(arglist__18032);
      return G__18030__delegate(f, a, b, c, d, args);
    };
    G__18030.cljs$core$IFn$_invoke$arity$variadic = G__18030__delegate;
    return G__18030;
  }();
  cljs$core$apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$apply__2.call(this, f, a);
      case 3:
        return cljs$core$apply__3.call(this, f, a, b);
      case 4:
        return cljs$core$apply__4.call(this, f, a, b, c);
      case 5:
        return cljs$core$apply__5.call(this, f, a, b, c, d);
      default:
        var G__18033 = null;
        if (arguments.length > 5) {
          var G__18034__i = 0, G__18034__a = new Array(arguments.length - 5);
          while (G__18034__i < G__18034__a.length) {
            G__18034__a[G__18034__i] = arguments[G__18034__i + 5];
            ++G__18034__i;
          }
          G__18033 = new cljs.core.IndexedSeq(G__18034__a, 0);
        }
        return cljs$core$apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, G__18033);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$apply.cljs$lang$maxFixedArity = 5;
  cljs$core$apply.cljs$lang$applyTo = cljs$core$apply__6.cljs$lang$applyTo;
  cljs$core$apply.cljs$core$IFn$_invoke$arity$2 = cljs$core$apply__2;
  cljs$core$apply.cljs$core$IFn$_invoke$arity$3 = cljs$core$apply__3;
  cljs$core$apply.cljs$core$IFn$_invoke$arity$4 = cljs$core$apply__4;
  cljs$core$apply.cljs$core$IFn$_invoke$arity$5 = cljs$core$apply__5;
  cljs$core$apply.cljs$core$IFn$_invoke$arity$variadic = cljs$core$apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$apply;
}();
cljs.core.vary_meta = function() {
  var cljs$core$vary_meta = null;
  var cljs$core$vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta(obj, function() {
      var G__18050 = cljs.core.meta(obj);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18050) : f.call(null, G__18050);
    }());
  };
  var cljs$core$vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta(obj, function() {
      var G__18051 = cljs.core.meta(obj);
      var G__18052 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18051, G__18052) : f.call(null, G__18051, G__18052);
    }());
  };
  var cljs$core$vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta(obj, function() {
      var G__18053 = cljs.core.meta(obj);
      var G__18054 = a;
      var G__18055 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18053, G__18054, G__18055) : f.call(null, G__18053, G__18054, G__18055);
    }());
  };
  var cljs$core$vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta(obj, function() {
      var G__18056 = cljs.core.meta(obj);
      var G__18057 = a;
      var G__18058 = b;
      var G__18059 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__18056, G__18057, G__18058, G__18059) : f.call(null, G__18056, G__18057, G__18058, G__18059);
    }());
  };
  var cljs$core$vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta(obj, function() {
      var G__18060 = cljs.core.meta(obj);
      var G__18061 = a;
      var G__18062 = b;
      var G__18063 = c;
      var G__18064 = d;
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__18060, G__18061, G__18062, G__18063, G__18064) : f.call(null, G__18060, G__18061, G__18062, G__18063, G__18064);
    }());
  };
  var cljs$core$vary_meta__7 = function() {
    var G__18065__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
    };
    var G__18065 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        var G__18066__i = 0, G__18066__a = new Array(arguments.length - 6);
        while (G__18066__i < G__18066__a.length) {
          G__18066__a[G__18066__i] = arguments[G__18066__i + 6];
          ++G__18066__i;
        }
        args = new cljs.core.IndexedSeq(G__18066__a, 0);
      }
      return G__18065__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__18065.cljs$lang$maxFixedArity = 6;
    G__18065.cljs$lang$applyTo = function(arglist__18067) {
      var obj = cljs.core.first(arglist__18067);
      arglist__18067 = cljs.core.next(arglist__18067);
      var f = cljs.core.first(arglist__18067);
      arglist__18067 = cljs.core.next(arglist__18067);
      var a = cljs.core.first(arglist__18067);
      arglist__18067 = cljs.core.next(arglist__18067);
      var b = cljs.core.first(arglist__18067);
      arglist__18067 = cljs.core.next(arglist__18067);
      var c = cljs.core.first(arglist__18067);
      arglist__18067 = cljs.core.next(arglist__18067);
      var d = cljs.core.first(arglist__18067);
      var args = cljs.core.rest(arglist__18067);
      return G__18065__delegate(obj, f, a, b, c, d, args);
    };
    G__18065.cljs$core$IFn$_invoke$arity$variadic = G__18065__delegate;
    return G__18065;
  }();
  cljs$core$vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$vary_meta__2.call(this, obj, f);
      case 3:
        return cljs$core$vary_meta__3.call(this, obj, f, a);
      case 4:
        return cljs$core$vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return cljs$core$vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return cljs$core$vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        var G__18068 = null;
        if (arguments.length > 6) {
          var G__18069__i = 0, G__18069__a = new Array(arguments.length - 6);
          while (G__18069__i < G__18069__a.length) {
            G__18069__a[G__18069__i] = arguments[G__18069__i + 6];
            ++G__18069__i;
          }
          G__18068 = new cljs.core.IndexedSeq(G__18069__a, 0);
        }
        return cljs$core$vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, G__18068);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$vary_meta.cljs$lang$maxFixedArity = 6;
  cljs$core$vary_meta.cljs$lang$applyTo = cljs$core$vary_meta__7.cljs$lang$applyTo;
  cljs$core$vary_meta.cljs$core$IFn$_invoke$arity$2 = cljs$core$vary_meta__2;
  cljs$core$vary_meta.cljs$core$IFn$_invoke$arity$3 = cljs$core$vary_meta__3;
  cljs$core$vary_meta.cljs$core$IFn$_invoke$arity$4 = cljs$core$vary_meta__4;
  cljs$core$vary_meta.cljs$core$IFn$_invoke$arity$5 = cljs$core$vary_meta__5;
  cljs$core$vary_meta.cljs$core$IFn$_invoke$arity$6 = cljs$core$vary_meta__6;
  cljs$core$vary_meta.cljs$core$IFn$_invoke$arity$variadic = cljs$core$vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var cljs$core$not_EQ_ = null;
  var cljs$core$not_EQ___1 = function(x) {
    return false;
  };
  var cljs$core$not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
  };
  var cljs$core$not_EQ___3 = function() {
    var G__18070__delegate = function(x, y, more) {
      return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
    };
    var G__18070 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__18071__i = 0, G__18071__a = new Array(arguments.length - 2);
        while (G__18071__i < G__18071__a.length) {
          G__18071__a[G__18071__i] = arguments[G__18071__i + 2];
          ++G__18071__i;
        }
        more = new cljs.core.IndexedSeq(G__18071__a, 0);
      }
      return G__18070__delegate.call(this, x, y, more);
    };
    G__18070.cljs$lang$maxFixedArity = 2;
    G__18070.cljs$lang$applyTo = function(arglist__18072) {
      var x = cljs.core.first(arglist__18072);
      arglist__18072 = cljs.core.next(arglist__18072);
      var y = cljs.core.first(arglist__18072);
      var more = cljs.core.rest(arglist__18072);
      return G__18070__delegate(x, y, more);
    };
    G__18070.cljs$core$IFn$_invoke$arity$variadic = G__18070__delegate;
    return G__18070;
  }();
  cljs$core$not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$not_EQ___1.call(this, x);
      case 2:
        return cljs$core$not_EQ___2.call(this, x, y);
      default:
        var G__18073 = null;
        if (arguments.length > 2) {
          var G__18074__i = 0, G__18074__a = new Array(arguments.length - 2);
          while (G__18074__i < G__18074__a.length) {
            G__18074__a[G__18074__i] = arguments[G__18074__i + 2];
            ++G__18074__i;
          }
          G__18073 = new cljs.core.IndexedSeq(G__18074__a, 0);
        }
        return cljs$core$not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18073);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$not_EQ_.cljs$lang$maxFixedArity = 2;
  cljs$core$not_EQ_.cljs$lang$applyTo = cljs$core$not_EQ___3.cljs$lang$applyTo;
  cljs$core$not_EQ_.cljs$core$IFn$_invoke$arity$1 = cljs$core$not_EQ___1;
  cljs$core$not_EQ_.cljs$core$IFn$_invoke$arity$2 = cljs$core$not_EQ___2;
  cljs$core$not_EQ_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$not_EQ_;
}();
cljs.core.not_empty = function cljs$core$not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function cljs$core$nil_iter() {
  if (typeof cljs.core.t18078 !== "undefined") {
  } else {
    cljs.core.t18078 = function(nil_iter, meta18079) {
      this.nil_iter = nil_iter;
      this.meta18079 = meta18079;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.t18078.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t18078.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t18078.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t18078.prototype.cljs$core$IMeta$_meta$arity$1 = function(_18080) {
      var self__ = this;
      var _18080__$1 = this;
      return self__.meta18079;
    };
    cljs.core.t18078.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_18080, meta18079__$1) {
      var self__ = this;
      var _18080__$1 = this;
      return new cljs.core.t18078(self__.nil_iter, meta18079__$1);
    };
    cljs.core.t18078.cljs$lang$type = true;
    cljs.core.t18078.cljs$lang$ctorStr = "cljs.core/t18078";
    cljs.core.t18078.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
      return cljs.core._write(writer__4689__auto__, "cljs.core/t18078");
    };
    cljs.core.__GT_t18078 = function cljs$core$nil_iter_$___GT_t18078(nil_iter__$1, meta18079) {
      return new cljs.core.t18078(nil_iter__$1, meta18079);
    };
  }
  return new cljs.core.t18078(cljs$core$nil_iter, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function cljs$core$__GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function cljs$core$string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function cljs$core$__GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function cljs$core$array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return!(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not(this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function cljs$core$__GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function cljs$core$seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function cljs$core$iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.iterable_QMARK_(coll)) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str("Cannot create iterator from "), cljs.core.str(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function cljs$core$lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4097__auto__ = !(lt.stepper == null);
      if (and__4097__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__4097__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__18081 = lt;
        var G__18082 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__18081, G__18082) : self__.xform.call(null, G__18081, G__18082);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__18083 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__18083) : self__.xform.call(null, G__18083);
  }
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function cljs$core$__GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function cljs$core$stepper(xform, iter) {
  var stepfn = function() {
    var cljs$core$stepper_$_stepfn = null;
    var cljs$core$stepper_$_stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var cljs$core$stepper_$_stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepper_$_stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepper_$_stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepper_$_stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepper_$_stepfn__1;
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepper_$_stepfn__2;
    return cljs$core$stepper_$_stepfn;
  }();
  return new cljs.core.Stepper(function() {
    var G__18085 = stepfn;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__18085) : xform.call(null, G__18085);
  }(), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (cljs.core.not(iter.hasNext())) {
        return false;
      } else {
        var G__18087 = cljs.core.next(iters__$1);
        iters__$1 = G__18087;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__4994__auto___18088 = self__.iters.length;
  var i_18089 = 0;
  while (true) {
    if (i_18089 < n__4994__auto___18088) {
      self__.nexts[i_18089] = self__.iters[i_18089].next();
      var G__18090 = i_18089 + 1;
      i_18089 = G__18090;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4097__auto__ = !(lt.stepper == null);
      if (and__4097__auto__) {
        return this$.hasNext();
      } else {
        return and__4097__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__18086 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__18086) : self__.xform.call(null, G__18086);
  }
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function cljs$core$__GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function() {
  var cljs$core$multi_stepper = null;
  var cljs$core$multi_stepper__2 = function(xform, iters) {
    return cljs$core$multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
  };
  var cljs$core$multi_stepper__3 = function(xform, iters, nexts) {
    var stepfn = function() {
      var cljs$core$multi_stepper_$_stepfn = null;
      var cljs$core$multi_stepper_$_stepfn__1 = function(result) {
        var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
        lt.stepper = null;
        return lt;
      };
      var cljs$core$multi_stepper_$_stepfn__2 = function(result, input) {
        var lt = result;
        lt.first = input;
        lt.rest = cljs.core.lazy_transformer(lt.stepper);
        lt.stepper = null;
        return lt.rest;
      };
      cljs$core$multi_stepper_$_stepfn = function(result, input) {
        switch(arguments.length) {
          case 1:
            return cljs$core$multi_stepper_$_stepfn__1.call(this, result);
          case 2:
            return cljs$core$multi_stepper_$_stepfn__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$multi_stepper_$_stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$multi_stepper_$_stepfn__1;
      cljs$core$multi_stepper_$_stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$multi_stepper_$_stepfn__2;
      return cljs$core$multi_stepper_$_stepfn;
    }();
    return new cljs.core.MultiStepper(function() {
      var G__18095 = stepfn;
      return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__18095) : xform.call(null, G__18095);
    }(), iters, nexts);
  };
  cljs$core$multi_stepper = function(xform, iters, nexts) {
    switch(arguments.length) {
      case 2:
        return cljs$core$multi_stepper__2.call(this, xform, iters);
      case 3:
        return cljs$core$multi_stepper__3.call(this, xform, iters, nexts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$multi_stepper.cljs$core$IFn$_invoke$arity$2 = cljs$core$multi_stepper__2;
  cljs$core$multi_stepper.cljs$core$IFn$_invoke$arity$3 = cljs$core$multi_stepper__3;
  return cljs$core$multi_stepper;
}();
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq(this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, cljs.core._seq(this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function cljs$core$__GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__18096_18100 = cljs.core.seq(colls);
  var chunk__18097_18101 = null;
  var count__18098_18102 = 0;
  var i__18099_18103 = 0;
  while (true) {
    if (i__18099_18103 < count__18098_18102) {
      var coll_18104 = chunk__18097_18101.cljs$core$IIndexed$_nth$arity$2(null, i__18099_18103);
      iters.push(cljs.core.iter(coll_18104));
      var G__18105 = seq__18096_18100;
      var G__18106 = chunk__18097_18101;
      var G__18107 = count__18098_18102;
      var G__18108 = i__18099_18103 + 1;
      seq__18096_18100 = G__18105;
      chunk__18097_18101 = G__18106;
      count__18098_18102 = G__18107;
      i__18099_18103 = G__18108;
      continue;
    } else {
      var temp__4126__auto___18109 = cljs.core.seq(seq__18096_18100);
      if (temp__4126__auto___18109) {
        var seq__18096_18110__$1 = temp__4126__auto___18109;
        if (cljs.core.chunked_seq_QMARK_(seq__18096_18110__$1)) {
          var c__4894__auto___18111 = cljs.core.chunk_first(seq__18096_18110__$1);
          var G__18112 = cljs.core.chunk_rest(seq__18096_18110__$1);
          var G__18113 = c__4894__auto___18111;
          var G__18114 = cljs.core.count(c__4894__auto___18111);
          var G__18115 = 0;
          seq__18096_18100 = G__18112;
          chunk__18097_18101 = G__18113;
          count__18098_18102 = G__18114;
          i__18099_18103 = G__18115;
          continue;
        } else {
          var coll_18116 = cljs.core.first(seq__18096_18110__$1);
          iters.push(cljs.core.iter(coll_18116));
          var G__18117 = cljs.core.next(seq__18096_18110__$1);
          var G__18118 = null;
          var G__18119 = 0;
          var G__18120 = 0;
          seq__18096_18100 = G__18117;
          chunk__18097_18101 = G__18118;
          count__18098_18102 = G__18119;
          i__18099_18103 = G__18120;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function() {
  var cljs$core$sequence = null;
  var cljs$core$sequence__1 = function(coll) {
    if (cljs.core.seq_QMARK_(coll)) {
      return coll;
    } else {
      var or__4109__auto__ = cljs.core.seq(coll);
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  };
  var cljs$core$sequence__2 = function(xform, coll) {
    return cljs.core.LazyTransformer.create(xform, coll);
  };
  var cljs$core$sequence__3 = function() {
    var G__18121__delegate = function(xform, coll, colls) {
      return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
    };
    var G__18121 = function(xform, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        var G__18122__i = 0, G__18122__a = new Array(arguments.length - 2);
        while (G__18122__i < G__18122__a.length) {
          G__18122__a[G__18122__i] = arguments[G__18122__i + 2];
          ++G__18122__i;
        }
        colls = new cljs.core.IndexedSeq(G__18122__a, 0);
      }
      return G__18121__delegate.call(this, xform, coll, colls);
    };
    G__18121.cljs$lang$maxFixedArity = 2;
    G__18121.cljs$lang$applyTo = function(arglist__18123) {
      var xform = cljs.core.first(arglist__18123);
      arglist__18123 = cljs.core.next(arglist__18123);
      var coll = cljs.core.first(arglist__18123);
      var colls = cljs.core.rest(arglist__18123);
      return G__18121__delegate(xform, coll, colls);
    };
    G__18121.cljs$core$IFn$_invoke$arity$variadic = G__18121__delegate;
    return G__18121;
  }();
  cljs$core$sequence = function(xform, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$sequence__1.call(this, xform);
      case 2:
        return cljs$core$sequence__2.call(this, xform, coll);
      default:
        var G__18124 = null;
        if (arguments.length > 2) {
          var G__18125__i = 0, G__18125__a = new Array(arguments.length - 2);
          while (G__18125__i < G__18125__a.length) {
            G__18125__a[G__18125__i] = arguments[G__18125__i + 2];
            ++G__18125__i;
          }
          G__18124 = new cljs.core.IndexedSeq(G__18125__a, 0);
        }
        return cljs$core$sequence__3.cljs$core$IFn$_invoke$arity$variadic(xform, coll, G__18124);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$sequence.cljs$lang$maxFixedArity = 2;
  cljs$core$sequence.cljs$lang$applyTo = cljs$core$sequence__3.cljs$lang$applyTo;
  cljs$core$sequence.cljs$core$IFn$_invoke$arity$1 = cljs$core$sequence__1;
  cljs$core$sequence.cljs$core$IFn$_invoke$arity$2 = cljs$core$sequence__2;
  cljs$core$sequence.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sequence__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$sequence;
}();
cljs.core.every_QMARK_ = function cljs$core$every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__18127 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__18127) : pred.call(null, G__18127);
      }())) {
        var G__18128 = pred;
        var G__18129 = cljs.core.next(coll);
        pred = G__18128;
        coll = G__18129;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function cljs$core$not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function cljs$core$some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__4109__auto__ = function() {
        var G__18133 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__18133) : pred.call(null, G__18133);
      }();
      if (cljs.core.truth_(or__4109__auto__)) {
        return or__4109__auto__;
      } else {
        var G__18134 = pred;
        var G__18135 = cljs.core.next(coll);
        pred = G__18134;
        coll = G__18135;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function cljs$core$not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function cljs$core$even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function cljs$core$odd_QMARK_(n) {
  return!cljs.core.even_QMARK_(n);
};
cljs.core.complement = function cljs$core$complement(f) {
  return function() {
    var G__18142 = null;
    var G__18142__0 = function() {
      return cljs.core.not(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }());
    };
    var G__18142__1 = function(x) {
      return cljs.core.not(function() {
        var G__18139 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18139) : f.call(null, G__18139);
      }());
    };
    var G__18142__2 = function(x, y) {
      return cljs.core.not(function() {
        var G__18140 = x;
        var G__18141 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18140, G__18141) : f.call(null, G__18140, G__18141);
      }());
    };
    var G__18142__3 = function() {
      var G__18143__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__18143 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__18144__i = 0, G__18144__a = new Array(arguments.length - 2);
          while (G__18144__i < G__18144__a.length) {
            G__18144__a[G__18144__i] = arguments[G__18144__i + 2];
            ++G__18144__i;
          }
          zs = new cljs.core.IndexedSeq(G__18144__a, 0);
        }
        return G__18143__delegate.call(this, x, y, zs);
      };
      G__18143.cljs$lang$maxFixedArity = 2;
      G__18143.cljs$lang$applyTo = function(arglist__18145) {
        var x = cljs.core.first(arglist__18145);
        arglist__18145 = cljs.core.next(arglist__18145);
        var y = cljs.core.first(arglist__18145);
        var zs = cljs.core.rest(arglist__18145);
        return G__18143__delegate(x, y, zs);
      };
      G__18143.cljs$core$IFn$_invoke$arity$variadic = G__18143__delegate;
      return G__18143;
    }();
    G__18142 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__18142__0.call(this);
        case 1:
          return G__18142__1.call(this, x);
        case 2:
          return G__18142__2.call(this, x, y);
        default:
          var G__18146 = null;
          if (arguments.length > 2) {
            var G__18147__i = 0, G__18147__a = new Array(arguments.length - 2);
            while (G__18147__i < G__18147__a.length) {
              G__18147__a[G__18147__i] = arguments[G__18147__i + 2];
              ++G__18147__i;
            }
            G__18146 = new cljs.core.IndexedSeq(G__18147__a, 0);
          }
          return G__18142__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18146);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__18142.cljs$lang$maxFixedArity = 2;
    G__18142.cljs$lang$applyTo = G__18142__3.cljs$lang$applyTo;
    G__18142.cljs$core$IFn$_invoke$arity$0 = G__18142__0;
    G__18142.cljs$core$IFn$_invoke$arity$1 = G__18142__1;
    G__18142.cljs$core$IFn$_invoke$arity$2 = G__18142__2;
    G__18142.cljs$core$IFn$_invoke$arity$variadic = G__18142__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__18142;
  }();
};
cljs.core.constantly = function cljs$core$constantly(x) {
  return function() {
    var G__18148__delegate = function(args) {
      return x;
    };
    var G__18148 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__18149__i = 0, G__18149__a = new Array(arguments.length - 0);
        while (G__18149__i < G__18149__a.length) {
          G__18149__a[G__18149__i] = arguments[G__18149__i + 0];
          ++G__18149__i;
        }
        args = new cljs.core.IndexedSeq(G__18149__a, 0);
      }
      return G__18148__delegate.call(this, args);
    };
    G__18148.cljs$lang$maxFixedArity = 0;
    G__18148.cljs$lang$applyTo = function(arglist__18150) {
      var args = cljs.core.seq(arglist__18150);
      return G__18148__delegate(args);
    };
    G__18148.cljs$core$IFn$_invoke$arity$variadic = G__18148__delegate;
    return G__18148;
  }();
};
cljs.core.comp = function() {
  var cljs$core$comp = null;
  var cljs$core$comp__0 = function() {
    return cljs.core.identity;
  };
  var cljs$core$comp__1 = function(f) {
    return f;
  };
  var cljs$core$comp__2 = function(f, g) {
    return function() {
      var G__18205 = null;
      var G__18205__0 = function() {
        var G__18178 = function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18178) : f.call(null, G__18178);
      };
      var G__18205__1 = function(x) {
        var G__18179 = function() {
          var G__18180 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__18180) : g.call(null, G__18180);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18179) : f.call(null, G__18179);
      };
      var G__18205__2 = function(x, y) {
        var G__18181 = function() {
          var G__18182 = x;
          var G__18183 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__18182, G__18183) : g.call(null, G__18182, G__18183);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18181) : f.call(null, G__18181);
      };
      var G__18205__3 = function(x, y, z) {
        var G__18184 = function() {
          var G__18185 = x;
          var G__18186 = y;
          var G__18187 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__18185, G__18186, G__18187) : g.call(null, G__18185, G__18186, G__18187);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18184) : f.call(null, G__18184);
      };
      var G__18205__4 = function() {
        var G__18206__delegate = function(x, y, z, args) {
          var G__18188 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18188) : f.call(null, G__18188);
        };
        var G__18206 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__18207__i = 0, G__18207__a = new Array(arguments.length - 3);
            while (G__18207__i < G__18207__a.length) {
              G__18207__a[G__18207__i] = arguments[G__18207__i + 3];
              ++G__18207__i;
            }
            args = new cljs.core.IndexedSeq(G__18207__a, 0);
          }
          return G__18206__delegate.call(this, x, y, z, args);
        };
        G__18206.cljs$lang$maxFixedArity = 3;
        G__18206.cljs$lang$applyTo = function(arglist__18208) {
          var x = cljs.core.first(arglist__18208);
          arglist__18208 = cljs.core.next(arglist__18208);
          var y = cljs.core.first(arglist__18208);
          arglist__18208 = cljs.core.next(arglist__18208);
          var z = cljs.core.first(arglist__18208);
          var args = cljs.core.rest(arglist__18208);
          return G__18206__delegate(x, y, z, args);
        };
        G__18206.cljs$core$IFn$_invoke$arity$variadic = G__18206__delegate;
        return G__18206;
      }();
      G__18205 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__18205__0.call(this);
          case 1:
            return G__18205__1.call(this, x);
          case 2:
            return G__18205__2.call(this, x, y);
          case 3:
            return G__18205__3.call(this, x, y, z);
          default:
            var G__18209 = null;
            if (arguments.length > 3) {
              var G__18210__i = 0, G__18210__a = new Array(arguments.length - 3);
              while (G__18210__i < G__18210__a.length) {
                G__18210__a[G__18210__i] = arguments[G__18210__i + 3];
                ++G__18210__i;
              }
              G__18209 = new cljs.core.IndexedSeq(G__18210__a, 0);
            }
            return G__18205__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18209);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18205.cljs$lang$maxFixedArity = 3;
      G__18205.cljs$lang$applyTo = G__18205__4.cljs$lang$applyTo;
      G__18205.cljs$core$IFn$_invoke$arity$0 = G__18205__0;
      G__18205.cljs$core$IFn$_invoke$arity$1 = G__18205__1;
      G__18205.cljs$core$IFn$_invoke$arity$2 = G__18205__2;
      G__18205.cljs$core$IFn$_invoke$arity$3 = G__18205__3;
      G__18205.cljs$core$IFn$_invoke$arity$variadic = G__18205__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__18205;
    }();
  };
  var cljs$core$comp__3 = function(f, g, h) {
    return function() {
      var G__18211 = null;
      var G__18211__0 = function() {
        var G__18189 = function() {
          var G__18190 = function() {
            return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__18190) : g.call(null, G__18190);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18189) : f.call(null, G__18189);
      };
      var G__18211__1 = function(x) {
        var G__18191 = function() {
          var G__18192 = function() {
            var G__18193 = x;
            return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__18193) : h.call(null, G__18193);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__18192) : g.call(null, G__18192);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18191) : f.call(null, G__18191);
      };
      var G__18211__2 = function(x, y) {
        var G__18194 = function() {
          var G__18195 = function() {
            var G__18196 = x;
            var G__18197 = y;
            return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__18196, G__18197) : h.call(null, G__18196, G__18197);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__18195) : g.call(null, G__18195);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18194) : f.call(null, G__18194);
      };
      var G__18211__3 = function(x, y, z) {
        var G__18198 = function() {
          var G__18199 = function() {
            var G__18200 = x;
            var G__18201 = y;
            var G__18202 = z;
            return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__18200, G__18201, G__18202) : h.call(null, G__18200, G__18201, G__18202);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__18199) : g.call(null, G__18199);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18198) : f.call(null, G__18198);
      };
      var G__18211__4 = function() {
        var G__18212__delegate = function(x, y, z, args) {
          var G__18203 = function() {
            var G__18204 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
            return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__18204) : g.call(null, G__18204);
          }();
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18203) : f.call(null, G__18203);
        };
        var G__18212 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__18213__i = 0, G__18213__a = new Array(arguments.length - 3);
            while (G__18213__i < G__18213__a.length) {
              G__18213__a[G__18213__i] = arguments[G__18213__i + 3];
              ++G__18213__i;
            }
            args = new cljs.core.IndexedSeq(G__18213__a, 0);
          }
          return G__18212__delegate.call(this, x, y, z, args);
        };
        G__18212.cljs$lang$maxFixedArity = 3;
        G__18212.cljs$lang$applyTo = function(arglist__18214) {
          var x = cljs.core.first(arglist__18214);
          arglist__18214 = cljs.core.next(arglist__18214);
          var y = cljs.core.first(arglist__18214);
          arglist__18214 = cljs.core.next(arglist__18214);
          var z = cljs.core.first(arglist__18214);
          var args = cljs.core.rest(arglist__18214);
          return G__18212__delegate(x, y, z, args);
        };
        G__18212.cljs$core$IFn$_invoke$arity$variadic = G__18212__delegate;
        return G__18212;
      }();
      G__18211 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__18211__0.call(this);
          case 1:
            return G__18211__1.call(this, x);
          case 2:
            return G__18211__2.call(this, x, y);
          case 3:
            return G__18211__3.call(this, x, y, z);
          default:
            var G__18215 = null;
            if (arguments.length > 3) {
              var G__18216__i = 0, G__18216__a = new Array(arguments.length - 3);
              while (G__18216__i < G__18216__a.length) {
                G__18216__a[G__18216__i] = arguments[G__18216__i + 3];
                ++G__18216__i;
              }
              G__18215 = new cljs.core.IndexedSeq(G__18216__a, 0);
            }
            return G__18211__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18215);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18211.cljs$lang$maxFixedArity = 3;
      G__18211.cljs$lang$applyTo = G__18211__4.cljs$lang$applyTo;
      G__18211.cljs$core$IFn$_invoke$arity$0 = G__18211__0;
      G__18211.cljs$core$IFn$_invoke$arity$1 = G__18211__1;
      G__18211.cljs$core$IFn$_invoke$arity$2 = G__18211__2;
      G__18211.cljs$core$IFn$_invoke$arity$3 = G__18211__3;
      G__18211.cljs$core$IFn$_invoke$arity$variadic = G__18211__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__18211;
    }();
  };
  var cljs$core$comp__4 = function() {
    var G__18217__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__18218__delegate = function(args) {
            var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
            var fs__$2 = cljs.core.next(fs__$1);
            while (true) {
              if (fs__$2) {
                var G__18219 = cljs.core.first(fs__$2).call(null, ret);
                var G__18220 = cljs.core.next(fs__$2);
                ret = G__18219;
                fs__$2 = G__18220;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__18218 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              var G__18221__i = 0, G__18221__a = new Array(arguments.length - 0);
              while (G__18221__i < G__18221__a.length) {
                G__18221__a[G__18221__i] = arguments[G__18221__i + 0];
                ++G__18221__i;
              }
              args = new cljs.core.IndexedSeq(G__18221__a, 0);
            }
            return G__18218__delegate.call(this, args);
          };
          G__18218.cljs$lang$maxFixedArity = 0;
          G__18218.cljs$lang$applyTo = function(arglist__18222) {
            var args = cljs.core.seq(arglist__18222);
            return G__18218__delegate(args);
          };
          G__18218.cljs$core$IFn$_invoke$arity$variadic = G__18218__delegate;
          return G__18218;
        }();
      }(fs__$1);
    };
    var G__18217 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        var G__18223__i = 0, G__18223__a = new Array(arguments.length - 3);
        while (G__18223__i < G__18223__a.length) {
          G__18223__a[G__18223__i] = arguments[G__18223__i + 3];
          ++G__18223__i;
        }
        fs = new cljs.core.IndexedSeq(G__18223__a, 0);
      }
      return G__18217__delegate.call(this, f1, f2, f3, fs);
    };
    G__18217.cljs$lang$maxFixedArity = 3;
    G__18217.cljs$lang$applyTo = function(arglist__18224) {
      var f1 = cljs.core.first(arglist__18224);
      arglist__18224 = cljs.core.next(arglist__18224);
      var f2 = cljs.core.first(arglist__18224);
      arglist__18224 = cljs.core.next(arglist__18224);
      var f3 = cljs.core.first(arglist__18224);
      var fs = cljs.core.rest(arglist__18224);
      return G__18217__delegate(f1, f2, f3, fs);
    };
    G__18217.cljs$core$IFn$_invoke$arity$variadic = G__18217__delegate;
    return G__18217;
  }();
  cljs$core$comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$comp__0.call(this);
      case 1:
        return cljs$core$comp__1.call(this, f1);
      case 2:
        return cljs$core$comp__2.call(this, f1, f2);
      case 3:
        return cljs$core$comp__3.call(this, f1, f2, f3);
      default:
        var G__18225 = null;
        if (arguments.length > 3) {
          var G__18226__i = 0, G__18226__a = new Array(arguments.length - 3);
          while (G__18226__i < G__18226__a.length) {
            G__18226__a[G__18226__i] = arguments[G__18226__i + 3];
            ++G__18226__i;
          }
          G__18225 = new cljs.core.IndexedSeq(G__18226__a, 0);
        }
        return cljs$core$comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, G__18225);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$comp.cljs$lang$maxFixedArity = 3;
  cljs$core$comp.cljs$lang$applyTo = cljs$core$comp__4.cljs$lang$applyTo;
  cljs$core$comp.cljs$core$IFn$_invoke$arity$0 = cljs$core$comp__0;
  cljs$core$comp.cljs$core$IFn$_invoke$arity$1 = cljs$core$comp__1;
  cljs$core$comp.cljs$core$IFn$_invoke$arity$2 = cljs$core$comp__2;
  cljs$core$comp.cljs$core$IFn$_invoke$arity$3 = cljs$core$comp__3;
  cljs$core$comp.cljs$core$IFn$_invoke$arity$variadic = cljs$core$comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$comp;
}();
cljs.core.partial = function() {
  var cljs$core$partial = null;
  var cljs$core$partial__1 = function(f) {
    return f;
  };
  var cljs$core$partial__2 = function(f, arg1) {
    return function() {
      var G__18311 = null;
      var G__18311__0 = function() {
        var G__18269 = arg1;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18269) : f.call(null, G__18269);
      };
      var G__18311__1 = function(x) {
        var G__18270 = arg1;
        var G__18271 = x;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18270, G__18271) : f.call(null, G__18270, G__18271);
      };
      var G__18311__2 = function(x, y) {
        var G__18272 = arg1;
        var G__18273 = x;
        var G__18274 = y;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18272, G__18273, G__18274) : f.call(null, G__18272, G__18273, G__18274);
      };
      var G__18311__3 = function(x, y, z) {
        var G__18275 = arg1;
        var G__18276 = x;
        var G__18277 = y;
        var G__18278 = z;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__18275, G__18276, G__18277, G__18278) : f.call(null, G__18275, G__18276, G__18277, G__18278);
      };
      var G__18311__4 = function() {
        var G__18312__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
        };
        var G__18312 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__18313__i = 0, G__18313__a = new Array(arguments.length - 3);
            while (G__18313__i < G__18313__a.length) {
              G__18313__a[G__18313__i] = arguments[G__18313__i + 3];
              ++G__18313__i;
            }
            args = new cljs.core.IndexedSeq(G__18313__a, 0);
          }
          return G__18312__delegate.call(this, x, y, z, args);
        };
        G__18312.cljs$lang$maxFixedArity = 3;
        G__18312.cljs$lang$applyTo = function(arglist__18314) {
          var x = cljs.core.first(arglist__18314);
          arglist__18314 = cljs.core.next(arglist__18314);
          var y = cljs.core.first(arglist__18314);
          arglist__18314 = cljs.core.next(arglist__18314);
          var z = cljs.core.first(arglist__18314);
          var args = cljs.core.rest(arglist__18314);
          return G__18312__delegate(x, y, z, args);
        };
        G__18312.cljs$core$IFn$_invoke$arity$variadic = G__18312__delegate;
        return G__18312;
      }();
      G__18311 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__18311__0.call(this);
          case 1:
            return G__18311__1.call(this, x);
          case 2:
            return G__18311__2.call(this, x, y);
          case 3:
            return G__18311__3.call(this, x, y, z);
          default:
            var G__18315 = null;
            if (arguments.length > 3) {
              var G__18316__i = 0, G__18316__a = new Array(arguments.length - 3);
              while (G__18316__i < G__18316__a.length) {
                G__18316__a[G__18316__i] = arguments[G__18316__i + 3];
                ++G__18316__i;
              }
              G__18315 = new cljs.core.IndexedSeq(G__18316__a, 0);
            }
            return G__18311__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18315);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18311.cljs$lang$maxFixedArity = 3;
      G__18311.cljs$lang$applyTo = G__18311__4.cljs$lang$applyTo;
      G__18311.cljs$core$IFn$_invoke$arity$0 = G__18311__0;
      G__18311.cljs$core$IFn$_invoke$arity$1 = G__18311__1;
      G__18311.cljs$core$IFn$_invoke$arity$2 = G__18311__2;
      G__18311.cljs$core$IFn$_invoke$arity$3 = G__18311__3;
      G__18311.cljs$core$IFn$_invoke$arity$variadic = G__18311__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__18311;
    }();
  };
  var cljs$core$partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__18317 = null;
      var G__18317__0 = function() {
        var G__18279 = arg1;
        var G__18280 = arg2;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18279, G__18280) : f.call(null, G__18279, G__18280);
      };
      var G__18317__1 = function(x) {
        var G__18281 = arg1;
        var G__18282 = arg2;
        var G__18283 = x;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18281, G__18282, G__18283) : f.call(null, G__18281, G__18282, G__18283);
      };
      var G__18317__2 = function(x, y) {
        var G__18284 = arg1;
        var G__18285 = arg2;
        var G__18286 = x;
        var G__18287 = y;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__18284, G__18285, G__18286, G__18287) : f.call(null, G__18284, G__18285, G__18286, G__18287);
      };
      var G__18317__3 = function(x, y, z) {
        var G__18288 = arg1;
        var G__18289 = arg2;
        var G__18290 = x;
        var G__18291 = y;
        var G__18292 = z;
        return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__18288, G__18289, G__18290, G__18291, G__18292) : f.call(null, G__18288, G__18289, G__18290, G__18291, G__18292);
      };
      var G__18317__4 = function() {
        var G__18318__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
        };
        var G__18318 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__18319__i = 0, G__18319__a = new Array(arguments.length - 3);
            while (G__18319__i < G__18319__a.length) {
              G__18319__a[G__18319__i] = arguments[G__18319__i + 3];
              ++G__18319__i;
            }
            args = new cljs.core.IndexedSeq(G__18319__a, 0);
          }
          return G__18318__delegate.call(this, x, y, z, args);
        };
        G__18318.cljs$lang$maxFixedArity = 3;
        G__18318.cljs$lang$applyTo = function(arglist__18320) {
          var x = cljs.core.first(arglist__18320);
          arglist__18320 = cljs.core.next(arglist__18320);
          var y = cljs.core.first(arglist__18320);
          arglist__18320 = cljs.core.next(arglist__18320);
          var z = cljs.core.first(arglist__18320);
          var args = cljs.core.rest(arglist__18320);
          return G__18318__delegate(x, y, z, args);
        };
        G__18318.cljs$core$IFn$_invoke$arity$variadic = G__18318__delegate;
        return G__18318;
      }();
      G__18317 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__18317__0.call(this);
          case 1:
            return G__18317__1.call(this, x);
          case 2:
            return G__18317__2.call(this, x, y);
          case 3:
            return G__18317__3.call(this, x, y, z);
          default:
            var G__18321 = null;
            if (arguments.length > 3) {
              var G__18322__i = 0, G__18322__a = new Array(arguments.length - 3);
              while (G__18322__i < G__18322__a.length) {
                G__18322__a[G__18322__i] = arguments[G__18322__i + 3];
                ++G__18322__i;
              }
              G__18321 = new cljs.core.IndexedSeq(G__18322__a, 0);
            }
            return G__18317__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18321);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18317.cljs$lang$maxFixedArity = 3;
      G__18317.cljs$lang$applyTo = G__18317__4.cljs$lang$applyTo;
      G__18317.cljs$core$IFn$_invoke$arity$0 = G__18317__0;
      G__18317.cljs$core$IFn$_invoke$arity$1 = G__18317__1;
      G__18317.cljs$core$IFn$_invoke$arity$2 = G__18317__2;
      G__18317.cljs$core$IFn$_invoke$arity$3 = G__18317__3;
      G__18317.cljs$core$IFn$_invoke$arity$variadic = G__18317__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__18317;
    }();
  };
  var cljs$core$partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__18323 = null;
      var G__18323__0 = function() {
        var G__18293 = arg1;
        var G__18294 = arg2;
        var G__18295 = arg3;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18293, G__18294, G__18295) : f.call(null, G__18293, G__18294, G__18295);
      };
      var G__18323__1 = function(x) {
        var G__18296 = arg1;
        var G__18297 = arg2;
        var G__18298 = arg3;
        var G__18299 = x;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__18296, G__18297, G__18298, G__18299) : f.call(null, G__18296, G__18297, G__18298, G__18299);
      };
      var G__18323__2 = function(x, y) {
        var G__18300 = arg1;
        var G__18301 = arg2;
        var G__18302 = arg3;
        var G__18303 = x;
        var G__18304 = y;
        return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__18300, G__18301, G__18302, G__18303, G__18304) : f.call(null, G__18300, G__18301, G__18302, G__18303, G__18304);
      };
      var G__18323__3 = function(x, y, z) {
        var G__18305 = arg1;
        var G__18306 = arg2;
        var G__18307 = arg3;
        var G__18308 = x;
        var G__18309 = y;
        var G__18310 = z;
        return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__18305, G__18306, G__18307, G__18308, G__18309, G__18310) : f.call(null, G__18305, G__18306, G__18307, G__18308, G__18309, G__18310);
      };
      var G__18323__4 = function() {
        var G__18324__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
        };
        var G__18324 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__18325__i = 0, G__18325__a = new Array(arguments.length - 3);
            while (G__18325__i < G__18325__a.length) {
              G__18325__a[G__18325__i] = arguments[G__18325__i + 3];
              ++G__18325__i;
            }
            args = new cljs.core.IndexedSeq(G__18325__a, 0);
          }
          return G__18324__delegate.call(this, x, y, z, args);
        };
        G__18324.cljs$lang$maxFixedArity = 3;
        G__18324.cljs$lang$applyTo = function(arglist__18326) {
          var x = cljs.core.first(arglist__18326);
          arglist__18326 = cljs.core.next(arglist__18326);
          var y = cljs.core.first(arglist__18326);
          arglist__18326 = cljs.core.next(arglist__18326);
          var z = cljs.core.first(arglist__18326);
          var args = cljs.core.rest(arglist__18326);
          return G__18324__delegate(x, y, z, args);
        };
        G__18324.cljs$core$IFn$_invoke$arity$variadic = G__18324__delegate;
        return G__18324;
      }();
      G__18323 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__18323__0.call(this);
          case 1:
            return G__18323__1.call(this, x);
          case 2:
            return G__18323__2.call(this, x, y);
          case 3:
            return G__18323__3.call(this, x, y, z);
          default:
            var G__18327 = null;
            if (arguments.length > 3) {
              var G__18328__i = 0, G__18328__a = new Array(arguments.length - 3);
              while (G__18328__i < G__18328__a.length) {
                G__18328__a[G__18328__i] = arguments[G__18328__i + 3];
                ++G__18328__i;
              }
              G__18327 = new cljs.core.IndexedSeq(G__18328__a, 0);
            }
            return G__18323__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18327);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18323.cljs$lang$maxFixedArity = 3;
      G__18323.cljs$lang$applyTo = G__18323__4.cljs$lang$applyTo;
      G__18323.cljs$core$IFn$_invoke$arity$0 = G__18323__0;
      G__18323.cljs$core$IFn$_invoke$arity$1 = G__18323__1;
      G__18323.cljs$core$IFn$_invoke$arity$2 = G__18323__2;
      G__18323.cljs$core$IFn$_invoke$arity$3 = G__18323__3;
      G__18323.cljs$core$IFn$_invoke$arity$variadic = G__18323__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__18323;
    }();
  };
  var cljs$core$partial__5 = function() {
    var G__18329__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__18330__delegate = function(args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
        };
        var G__18330 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            var G__18331__i = 0, G__18331__a = new Array(arguments.length - 0);
            while (G__18331__i < G__18331__a.length) {
              G__18331__a[G__18331__i] = arguments[G__18331__i + 0];
              ++G__18331__i;
            }
            args = new cljs.core.IndexedSeq(G__18331__a, 0);
          }
          return G__18330__delegate.call(this, args);
        };
        G__18330.cljs$lang$maxFixedArity = 0;
        G__18330.cljs$lang$applyTo = function(arglist__18332) {
          var args = cljs.core.seq(arglist__18332);
          return G__18330__delegate(args);
        };
        G__18330.cljs$core$IFn$_invoke$arity$variadic = G__18330__delegate;
        return G__18330;
      }();
    };
    var G__18329 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__18333__i = 0, G__18333__a = new Array(arguments.length - 4);
        while (G__18333__i < G__18333__a.length) {
          G__18333__a[G__18333__i] = arguments[G__18333__i + 4];
          ++G__18333__i;
        }
        more = new cljs.core.IndexedSeq(G__18333__a, 0);
      }
      return G__18329__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__18329.cljs$lang$maxFixedArity = 4;
    G__18329.cljs$lang$applyTo = function(arglist__18334) {
      var f = cljs.core.first(arglist__18334);
      arglist__18334 = cljs.core.next(arglist__18334);
      var arg1 = cljs.core.first(arglist__18334);
      arglist__18334 = cljs.core.next(arglist__18334);
      var arg2 = cljs.core.first(arglist__18334);
      arglist__18334 = cljs.core.next(arglist__18334);
      var arg3 = cljs.core.first(arglist__18334);
      var more = cljs.core.rest(arglist__18334);
      return G__18329__delegate(f, arg1, arg2, arg3, more);
    };
    G__18329.cljs$core$IFn$_invoke$arity$variadic = G__18329__delegate;
    return G__18329;
  }();
  cljs$core$partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$partial__1.call(this, f);
      case 2:
        return cljs$core$partial__2.call(this, f, arg1);
      case 3:
        return cljs$core$partial__3.call(this, f, arg1, arg2);
      case 4:
        return cljs$core$partial__4.call(this, f, arg1, arg2, arg3);
      default:
        var G__18335 = null;
        if (arguments.length > 4) {
          var G__18336__i = 0, G__18336__a = new Array(arguments.length - 4);
          while (G__18336__i < G__18336__a.length) {
            G__18336__a[G__18336__i] = arguments[G__18336__i + 4];
            ++G__18336__i;
          }
          G__18335 = new cljs.core.IndexedSeq(G__18336__a, 0);
        }
        return cljs$core$partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, G__18335);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$partial.cljs$lang$maxFixedArity = 4;
  cljs$core$partial.cljs$lang$applyTo = cljs$core$partial__5.cljs$lang$applyTo;
  cljs$core$partial.cljs$core$IFn$_invoke$arity$1 = cljs$core$partial__1;
  cljs$core$partial.cljs$core$IFn$_invoke$arity$2 = cljs$core$partial__2;
  cljs$core$partial.cljs$core$IFn$_invoke$arity$3 = cljs$core$partial__3;
  cljs$core$partial.cljs$core$IFn$_invoke$arity$4 = cljs$core$partial__4;
  cljs$core$partial.cljs$core$IFn$_invoke$arity$variadic = cljs$core$partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$partial;
}();
cljs.core.fnil = function() {
  var cljs$core$fnil = null;
  var cljs$core$fnil__2 = function(f, x) {
    return function() {
      var G__18369 = null;
      var G__18369__1 = function(a) {
        var G__18353 = a == null ? x : a;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18353) : f.call(null, G__18353);
      };
      var G__18369__2 = function(a, b) {
        var G__18354 = a == null ? x : a;
        var G__18355 = b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18354, G__18355) : f.call(null, G__18354, G__18355);
      };
      var G__18369__3 = function(a, b, c) {
        var G__18356 = a == null ? x : a;
        var G__18357 = b;
        var G__18358 = c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18356, G__18357, G__18358) : f.call(null, G__18356, G__18357, G__18358);
      };
      var G__18369__4 = function() {
        var G__18370__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
        };
        var G__18370 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__18371__i = 0, G__18371__a = new Array(arguments.length - 3);
            while (G__18371__i < G__18371__a.length) {
              G__18371__a[G__18371__i] = arguments[G__18371__i + 3];
              ++G__18371__i;
            }
            ds = new cljs.core.IndexedSeq(G__18371__a, 0);
          }
          return G__18370__delegate.call(this, a, b, c, ds);
        };
        G__18370.cljs$lang$maxFixedArity = 3;
        G__18370.cljs$lang$applyTo = function(arglist__18372) {
          var a = cljs.core.first(arglist__18372);
          arglist__18372 = cljs.core.next(arglist__18372);
          var b = cljs.core.first(arglist__18372);
          arglist__18372 = cljs.core.next(arglist__18372);
          var c = cljs.core.first(arglist__18372);
          var ds = cljs.core.rest(arglist__18372);
          return G__18370__delegate(a, b, c, ds);
        };
        G__18370.cljs$core$IFn$_invoke$arity$variadic = G__18370__delegate;
        return G__18370;
      }();
      G__18369 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__18369__1.call(this, a);
          case 2:
            return G__18369__2.call(this, a, b);
          case 3:
            return G__18369__3.call(this, a, b, c);
          default:
            var G__18373 = null;
            if (arguments.length > 3) {
              var G__18374__i = 0, G__18374__a = new Array(arguments.length - 3);
              while (G__18374__i < G__18374__a.length) {
                G__18374__a[G__18374__i] = arguments[G__18374__i + 3];
                ++G__18374__i;
              }
              G__18373 = new cljs.core.IndexedSeq(G__18374__a, 0);
            }
            return G__18369__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__18373);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18369.cljs$lang$maxFixedArity = 3;
      G__18369.cljs$lang$applyTo = G__18369__4.cljs$lang$applyTo;
      G__18369.cljs$core$IFn$_invoke$arity$1 = G__18369__1;
      G__18369.cljs$core$IFn$_invoke$arity$2 = G__18369__2;
      G__18369.cljs$core$IFn$_invoke$arity$3 = G__18369__3;
      G__18369.cljs$core$IFn$_invoke$arity$variadic = G__18369__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__18369;
    }();
  };
  var cljs$core$fnil__3 = function(f, x, y) {
    return function() {
      var G__18375 = null;
      var G__18375__2 = function(a, b) {
        var G__18359 = a == null ? x : a;
        var G__18360 = b == null ? y : b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18359, G__18360) : f.call(null, G__18359, G__18360);
      };
      var G__18375__3 = function(a, b, c) {
        var G__18361 = a == null ? x : a;
        var G__18362 = b == null ? y : b;
        var G__18363 = c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18361, G__18362, G__18363) : f.call(null, G__18361, G__18362, G__18363);
      };
      var G__18375__4 = function() {
        var G__18376__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__18376 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__18377__i = 0, G__18377__a = new Array(arguments.length - 3);
            while (G__18377__i < G__18377__a.length) {
              G__18377__a[G__18377__i] = arguments[G__18377__i + 3];
              ++G__18377__i;
            }
            ds = new cljs.core.IndexedSeq(G__18377__a, 0);
          }
          return G__18376__delegate.call(this, a, b, c, ds);
        };
        G__18376.cljs$lang$maxFixedArity = 3;
        G__18376.cljs$lang$applyTo = function(arglist__18378) {
          var a = cljs.core.first(arglist__18378);
          arglist__18378 = cljs.core.next(arglist__18378);
          var b = cljs.core.first(arglist__18378);
          arglist__18378 = cljs.core.next(arglist__18378);
          var c = cljs.core.first(arglist__18378);
          var ds = cljs.core.rest(arglist__18378);
          return G__18376__delegate(a, b, c, ds);
        };
        G__18376.cljs$core$IFn$_invoke$arity$variadic = G__18376__delegate;
        return G__18376;
      }();
      G__18375 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__18375__2.call(this, a, b);
          case 3:
            return G__18375__3.call(this, a, b, c);
          default:
            var G__18379 = null;
            if (arguments.length > 3) {
              var G__18380__i = 0, G__18380__a = new Array(arguments.length - 3);
              while (G__18380__i < G__18380__a.length) {
                G__18380__a[G__18380__i] = arguments[G__18380__i + 3];
                ++G__18380__i;
              }
              G__18379 = new cljs.core.IndexedSeq(G__18380__a, 0);
            }
            return G__18375__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__18379);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18375.cljs$lang$maxFixedArity = 3;
      G__18375.cljs$lang$applyTo = G__18375__4.cljs$lang$applyTo;
      G__18375.cljs$core$IFn$_invoke$arity$2 = G__18375__2;
      G__18375.cljs$core$IFn$_invoke$arity$3 = G__18375__3;
      G__18375.cljs$core$IFn$_invoke$arity$variadic = G__18375__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__18375;
    }();
  };
  var cljs$core$fnil__4 = function(f, x, y, z) {
    return function() {
      var G__18381 = null;
      var G__18381__2 = function(a, b) {
        var G__18364 = a == null ? x : a;
        var G__18365 = b == null ? y : b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18364, G__18365) : f.call(null, G__18364, G__18365);
      };
      var G__18381__3 = function(a, b, c) {
        var G__18366 = a == null ? x : a;
        var G__18367 = b == null ? y : b;
        var G__18368 = c == null ? z : c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18366, G__18367, G__18368) : f.call(null, G__18366, G__18367, G__18368);
      };
      var G__18381__4 = function() {
        var G__18382__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__18382 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__18383__i = 0, G__18383__a = new Array(arguments.length - 3);
            while (G__18383__i < G__18383__a.length) {
              G__18383__a[G__18383__i] = arguments[G__18383__i + 3];
              ++G__18383__i;
            }
            ds = new cljs.core.IndexedSeq(G__18383__a, 0);
          }
          return G__18382__delegate.call(this, a, b, c, ds);
        };
        G__18382.cljs$lang$maxFixedArity = 3;
        G__18382.cljs$lang$applyTo = function(arglist__18384) {
          var a = cljs.core.first(arglist__18384);
          arglist__18384 = cljs.core.next(arglist__18384);
          var b = cljs.core.first(arglist__18384);
          arglist__18384 = cljs.core.next(arglist__18384);
          var c = cljs.core.first(arglist__18384);
          var ds = cljs.core.rest(arglist__18384);
          return G__18382__delegate(a, b, c, ds);
        };
        G__18382.cljs$core$IFn$_invoke$arity$variadic = G__18382__delegate;
        return G__18382;
      }();
      G__18381 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__18381__2.call(this, a, b);
          case 3:
            return G__18381__3.call(this, a, b, c);
          default:
            var G__18385 = null;
            if (arguments.length > 3) {
              var G__18386__i = 0, G__18386__a = new Array(arguments.length - 3);
              while (G__18386__i < G__18386__a.length) {
                G__18386__a[G__18386__i] = arguments[G__18386__i + 3];
                ++G__18386__i;
              }
              G__18385 = new cljs.core.IndexedSeq(G__18386__a, 0);
            }
            return G__18381__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__18385);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18381.cljs$lang$maxFixedArity = 3;
      G__18381.cljs$lang$applyTo = G__18381__4.cljs$lang$applyTo;
      G__18381.cljs$core$IFn$_invoke$arity$2 = G__18381__2;
      G__18381.cljs$core$IFn$_invoke$arity$3 = G__18381__3;
      G__18381.cljs$core$IFn$_invoke$arity$variadic = G__18381__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__18381;
    }();
  };
  cljs$core$fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return cljs$core$fnil__2.call(this, f, x);
      case 3:
        return cljs$core$fnil__3.call(this, f, x, y);
      case 4:
        return cljs$core$fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$fnil.cljs$core$IFn$_invoke$arity$2 = cljs$core$fnil__2;
  cljs$core$fnil.cljs$core$IFn$_invoke$arity$3 = cljs$core$fnil__3;
  cljs$core$fnil.cljs$core$IFn$_invoke$arity$4 = cljs$core$fnil__4;
  return cljs$core$fnil;
}();
cljs.core.map_indexed = function() {
  var cljs$core$map_indexed = null;
  var cljs$core$map_indexed__1 = function(f) {
    return function(rf) {
      var i = function() {
        var G__18417 = -1;
        return cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(G__18417) : cljs.core.volatile_BANG_.call(null, G__18417);
      }();
      return function(i) {
        return function() {
          var G__18447 = null;
          var G__18447__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__18447__1 = function(result) {
            var G__18418 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__18418) : rf.call(null, G__18418);
          };
          var G__18447__2 = function(result, input) {
            var G__18419 = result;
            var G__18420 = function() {
              var G__18421 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
              var G__18422 = input;
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18421, G__18422) : f.call(null, G__18421, G__18422);
            }();
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18419, G__18420) : rf.call(null, G__18419, G__18420);
          };
          G__18447 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__18447__0.call(this);
              case 1:
                return G__18447__1.call(this, result);
              case 2:
                return G__18447__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__18447.cljs$core$IFn$_invoke$arity$0 = G__18447__0;
          G__18447.cljs$core$IFn$_invoke$arity$1 = G__18447__1;
          G__18447.cljs$core$IFn$_invoke$arity$2 = G__18447__2;
          return G__18447;
        }();
      }(i);
    };
  };
  var cljs$core$map_indexed__2 = function(f, coll) {
    var mapi = function cljs$core$map_indexed_$_mapi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq(coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(s)) {
            var c = cljs.core.chunk_first(s);
            var size = cljs.core.count(c);
            var b = cljs.core.chunk_buffer(size);
            var n__4994__auto___18448 = size;
            var i_18449 = 0;
            while (true) {
              if (i_18449 < n__4994__auto___18448) {
                cljs.core.chunk_append(b, function() {
                  var G__18443 = idx + i_18449;
                  var G__18444 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_18449);
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18443, G__18444) : f.call(null, G__18443, G__18444);
                }());
                var G__18450 = i_18449 + 1;
                i_18449 = G__18450;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$map_indexed_$_mapi(idx + size, cljs.core.chunk_rest(s)));
          } else {
            return cljs.core.cons(function() {
              var G__18445 = idx;
              var G__18446 = cljs.core.first(s);
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18445, G__18446) : f.call(null, G__18445, G__18446);
            }(), cljs$core$map_indexed_$_mapi(idx + 1, cljs.core.rest(s)));
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return mapi(0, coll);
  };
  cljs$core$map_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$map_indexed__1.call(this, f);
      case 2:
        return cljs$core$map_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$map_indexed.cljs$core$IFn$_invoke$arity$1 = cljs$core$map_indexed__1;
  cljs$core$map_indexed.cljs$core$IFn$_invoke$arity$2 = cljs$core$map_indexed__2;
  return cljs$core$map_indexed;
}();
cljs.core.keep = function() {
  var cljs$core$keep = null;
  var cljs$core$keep__1 = function(f) {
    return function(rf) {
      return function() {
        var G__18469 = null;
        var G__18469__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__18469__1 = function(result) {
          var G__18463 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__18463) : rf.call(null, G__18463);
        };
        var G__18469__2 = function(result, input) {
          var v = function() {
            var G__18464 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18464) : f.call(null, G__18464);
          }();
          if (v == null) {
            return result;
          } else {
            var G__18465 = result;
            var G__18466 = v;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18465, G__18466) : rf.call(null, G__18465, G__18466);
          }
        };
        G__18469 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__18469__0.call(this);
            case 1:
              return G__18469__1.call(this, result);
            case 2:
              return G__18469__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__18469.cljs$core$IFn$_invoke$arity$0 = G__18469__0;
        G__18469.cljs$core$IFn$_invoke$arity$1 = G__18469__1;
        G__18469.cljs$core$IFn$_invoke$arity$2 = G__18469__2;
        return G__18469;
      }();
    };
  };
  var cljs$core$keep__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__4994__auto___18470 = size;
          var i_18471 = 0;
          while (true) {
            if (i_18471 < n__4994__auto___18470) {
              var x_18472 = function() {
                var G__18467 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_18471);
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18467) : f.call(null, G__18467);
              }();
              if (x_18472 == null) {
              } else {
                cljs.core.chunk_append(b, x_18472);
              }
              var G__18473 = i_18471 + 1;
              i_18471 = G__18473;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__18468 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18468) : f.call(null, G__18468);
          }();
          if (x == null) {
            return cljs$core$keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, cljs$core$keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$keep = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$keep__1.call(this, f);
      case 2:
        return cljs$core$keep__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$keep.cljs$core$IFn$_invoke$arity$1 = cljs$core$keep__1;
  cljs$core$keep.cljs$core$IFn$_invoke$arity$2 = cljs$core$keep__2;
  return cljs$core$keep;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__18474 = this$__$1;
  return goog.getUid(G__18474);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__18475 = cljs.core.seq(self__.watches);
  var chunk__18476 = null;
  var count__18477 = 0;
  var i__18478 = 0;
  while (true) {
    if (i__18478 < count__18477) {
      var vec__18479 = chunk__18476.cljs$core$IIndexed$_nth$arity$2(null, i__18478);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18479, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18479, 1, null);
      var G__18480_18489 = key;
      var G__18481_18490 = this$__$1;
      var G__18482_18491 = oldval;
      var G__18483_18492 = newval;
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__18480_18489, G__18481_18490, G__18482_18491, G__18483_18492) : f.call(null, G__18480_18489, G__18481_18490, G__18482_18491, G__18483_18492);
      var G__18493 = seq__18475;
      var G__18494 = chunk__18476;
      var G__18495 = count__18477;
      var G__18496 = i__18478 + 1;
      seq__18475 = G__18493;
      chunk__18476 = G__18494;
      count__18477 = G__18495;
      i__18478 = G__18496;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__18475);
      if (temp__4126__auto__) {
        var seq__18475__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__18475__$1)) {
          var c__4894__auto__ = cljs.core.chunk_first(seq__18475__$1);
          var G__18497 = cljs.core.chunk_rest(seq__18475__$1);
          var G__18498 = c__4894__auto__;
          var G__18499 = cljs.core.count(c__4894__auto__);
          var G__18500 = 0;
          seq__18475 = G__18497;
          chunk__18476 = G__18498;
          count__18477 = G__18499;
          i__18478 = G__18500;
          continue;
        } else {
          var vec__18484 = cljs.core.first(seq__18475__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18484, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18484, 1, null);
          var G__18485_18501 = key;
          var G__18486_18502 = this$__$1;
          var G__18487_18503 = oldval;
          var G__18488_18504 = newval;
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__18485_18501, G__18486_18502, G__18487_18503, G__18488_18504) : f.call(null, G__18485_18501, G__18486_18502, G__18487_18503, G__18488_18504);
          var G__18505 = cljs.core.next(seq__18475__$1);
          var G__18506 = null;
          var G__18507 = 0;
          var G__18508 = 0;
          seq__18475 = G__18505;
          chunk__18476 = G__18506;
          count__18477 = G__18507;
          i__18478 = G__18508;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function cljs$core$__GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var cljs$core$atom = null;
  var cljs$core$atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var cljs$core$atom__2 = function() {
    var G__18512__delegate = function(x, p__18509) {
      var map__18511 = p__18509;
      var map__18511__$1 = cljs.core.seq_QMARK_(map__18511) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__18511) : map__18511;
      var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__18511__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__18511__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__18512 = function(x, var_args) {
      var p__18509 = null;
      if (arguments.length > 1) {
        var G__18513__i = 0, G__18513__a = new Array(arguments.length - 1);
        while (G__18513__i < G__18513__a.length) {
          G__18513__a[G__18513__i] = arguments[G__18513__i + 1];
          ++G__18513__i;
        }
        p__18509 = new cljs.core.IndexedSeq(G__18513__a, 0);
      }
      return G__18512__delegate.call(this, x, p__18509);
    };
    G__18512.cljs$lang$maxFixedArity = 1;
    G__18512.cljs$lang$applyTo = function(arglist__18514) {
      var x = cljs.core.first(arglist__18514);
      var p__18509 = cljs.core.rest(arglist__18514);
      return G__18512__delegate(x, p__18509);
    };
    G__18512.cljs$core$IFn$_invoke$arity$variadic = G__18512__delegate;
    return G__18512;
  }();
  cljs$core$atom = function(x, var_args) {
    var p__18509 = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$atom__1.call(this, x);
      default:
        var G__18515 = null;
        if (arguments.length > 1) {
          var G__18516__i = 0, G__18516__a = new Array(arguments.length - 1);
          while (G__18516__i < G__18516__a.length) {
            G__18516__a[G__18516__i] = arguments[G__18516__i + 1];
            ++G__18516__i;
          }
          G__18515 = new cljs.core.IndexedSeq(G__18516__a, 0);
        }
        return cljs$core$atom__2.cljs$core$IFn$_invoke$arity$variadic(x, G__18515);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$atom.cljs$lang$maxFixedArity = 1;
  cljs$core$atom.cljs$lang$applyTo = cljs$core$atom__2.cljs$lang$applyTo;
  cljs$core$atom.cljs$core$IFn$_invoke$arity$1 = cljs$core$atom__1;
  cljs$core$atom.cljs$core$IFn$_invoke$arity$variadic = cljs$core$atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$atom;
}();
cljs.core.reset_BANG_ = function cljs$core$reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(function() {
        var G__18519 = new_value;
        return validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(G__18519) : validate.call(null, G__18519);
      }())) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(function() {
          var G__18520 = cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null));
          return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__18520) : cljs.core.pr_str.call(null, G__18520);
        }())].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function() {
  var cljs$core$swap_BANG_ = null;
  var cljs$core$swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__18527 = a.state;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18527) : f.call(null, G__18527);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
    }
  };
  var cljs$core$swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__18528 = a.state;
        var G__18529 = x;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18528, G__18529) : f.call(null, G__18528, G__18529);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
    }
  };
  var cljs$core$swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__18530 = a.state;
        var G__18531 = x;
        var G__18532 = y;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18530, G__18531, G__18532) : f.call(null, G__18530, G__18531, G__18532);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
    }
  };
  var cljs$core$swap_BANG___5 = function() {
    var G__18533__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
      }
    };
    var G__18533 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__18534__i = 0, G__18534__a = new Array(arguments.length - 4);
        while (G__18534__i < G__18534__a.length) {
          G__18534__a[G__18534__i] = arguments[G__18534__i + 4];
          ++G__18534__i;
        }
        more = new cljs.core.IndexedSeq(G__18534__a, 0);
      }
      return G__18533__delegate.call(this, a, f, x, y, more);
    };
    G__18533.cljs$lang$maxFixedArity = 4;
    G__18533.cljs$lang$applyTo = function(arglist__18535) {
      var a = cljs.core.first(arglist__18535);
      arglist__18535 = cljs.core.next(arglist__18535);
      var f = cljs.core.first(arglist__18535);
      arglist__18535 = cljs.core.next(arglist__18535);
      var x = cljs.core.first(arglist__18535);
      arglist__18535 = cljs.core.next(arglist__18535);
      var y = cljs.core.first(arglist__18535);
      var more = cljs.core.rest(arglist__18535);
      return G__18533__delegate(a, f, x, y, more);
    };
    G__18533.cljs$core$IFn$_invoke$arity$variadic = G__18533__delegate;
    return G__18533;
  }();
  cljs$core$swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$swap_BANG___2.call(this, a, f);
      case 3:
        return cljs$core$swap_BANG___3.call(this, a, f, x);
      case 4:
        return cljs$core$swap_BANG___4.call(this, a, f, x, y);
      default:
        var G__18536 = null;
        if (arguments.length > 4) {
          var G__18537__i = 0, G__18537__a = new Array(arguments.length - 4);
          while (G__18537__i < G__18537__a.length) {
            G__18537__a[G__18537__i] = arguments[G__18537__i + 4];
            ++G__18537__i;
          }
          G__18536 = new cljs.core.IndexedSeq(G__18537__a, 0);
        }
        return cljs$core$swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, G__18536);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$swap_BANG_.cljs$lang$maxFixedArity = 4;
  cljs$core$swap_BANG_.cljs$lang$applyTo = cljs$core$swap_BANG___5.cljs$lang$applyTo;
  cljs$core$swap_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$swap_BANG___2;
  cljs$core$swap_BANG_.cljs$core$IFn$_invoke$arity$3 = cljs$core$swap_BANG___3;
  cljs$core$swap_BANG_.cljs$core$IFn$_invoke$arity$4 = cljs$core$swap_BANG___4;
  cljs$core$swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function cljs$core$compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function cljs$core$set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function cljs$core$get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = true;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function cljs$core$__GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function cljs$core$volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function cljs$core$volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function cljs$core$vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function() {
  var cljs$core$keep_indexed = null;
  var cljs$core$keep_indexed__1 = function(f) {
    return function(rf) {
      var ia = cljs.core.volatile_BANG_(-1);
      return function(ia) {
        return function() {
          var G__18604 = null;
          var G__18604__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__18604__1 = function(result) {
            var G__18571 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__18571) : rf.call(null, G__18571);
          };
          var G__18604__2 = function(result, input) {
            var i = ia.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, ia.cljs$core$IDeref$_deref$arity$1(null) + 1);
            var v = function() {
              var G__18572 = i;
              var G__18573 = input;
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18572, G__18573) : f.call(null, G__18572, G__18573);
            }();
            if (v == null) {
              return result;
            } else {
              var G__18574 = result;
              var G__18575 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18574, G__18575) : rf.call(null, G__18574, G__18575);
            }
          };
          G__18604 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__18604__0.call(this);
              case 1:
                return G__18604__1.call(this, result);
              case 2:
                return G__18604__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__18604.cljs$core$IFn$_invoke$arity$0 = G__18604__0;
          G__18604.cljs$core$IFn$_invoke$arity$1 = G__18604__1;
          G__18604.cljs$core$IFn$_invoke$arity$2 = G__18604__2;
          return G__18604;
        }();
      }(ia);
    };
  };
  var cljs$core$keep_indexed__2 = function(f, coll) {
    var keepi = function cljs$core$keep_indexed_$_keepi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq(coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(s)) {
            var c = cljs.core.chunk_first(s);
            var size = cljs.core.count(c);
            var b = cljs.core.chunk_buffer(size);
            var n__4994__auto___18605 = size;
            var i_18606 = 0;
            while (true) {
              if (i_18606 < n__4994__auto___18605) {
                var x_18607 = function() {
                  var G__18600 = idx + i_18606;
                  var G__18601 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_18606);
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18600, G__18601) : f.call(null, G__18600, G__18601);
                }();
                if (x_18607 == null) {
                } else {
                  cljs.core.chunk_append(b, x_18607);
                }
                var G__18608 = i_18606 + 1;
                i_18606 = G__18608;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keep_indexed_$_keepi(idx + size, cljs.core.chunk_rest(s)));
          } else {
            var x = function() {
              var G__18602 = idx;
              var G__18603 = cljs.core.first(s);
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18602, G__18603) : f.call(null, G__18602, G__18603);
            }();
            if (x == null) {
              return cljs$core$keep_indexed_$_keepi(idx + 1, cljs.core.rest(s));
            } else {
              return cljs.core.cons(x, cljs$core$keep_indexed_$_keepi(idx + 1, cljs.core.rest(s)));
            }
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return keepi(0, coll);
  };
  cljs$core$keep_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$keep_indexed__1.call(this, f);
      case 2:
        return cljs$core$keep_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$keep_indexed.cljs$core$IFn$_invoke$arity$1 = cljs$core$keep_indexed__1;
  cljs$core$keep_indexed.cljs$core$IFn$_invoke$arity$2 = cljs$core$keep_indexed__2;
  return cljs$core$keep_indexed;
}();
cljs.core.every_pred = function() {
  var cljs$core$every_pred = null;
  var cljs$core$every_pred__1 = function(p) {
    return function() {
      var cljs$core$every_pred_$_ep1 = null;
      var cljs$core$every_pred_$_ep1__0 = function() {
        return true;
      };
      var cljs$core$every_pred_$_ep1__1 = function(x) {
        return cljs.core.boolean$(function() {
          var G__18822 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18822) : p.call(null, G__18822);
        }());
      };
      var cljs$core$every_pred_$_ep1__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__4097__auto__ = function() {
            var G__18824 = x;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18824) : p.call(null, G__18824);
          }();
          if (cljs.core.truth_(and__4097__auto__)) {
            var G__18825 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18825) : p.call(null, G__18825);
          } else {
            return and__4097__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep1__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__4097__auto__ = function() {
            var G__18827 = x;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18827) : p.call(null, G__18827);
          }();
          if (cljs.core.truth_(and__4097__auto__)) {
            var and__4097__auto____$1 = function() {
              var G__18829 = y;
              return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18829) : p.call(null, G__18829);
            }();
            if (cljs.core.truth_(and__4097__auto____$1)) {
              var G__18830 = z;
              return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18830) : p.call(null, G__18830);
            } else {
              return and__4097__auto____$1;
            }
          } else {
            return and__4097__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep1__4 = function() {
        var G__18999__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(cljs$core$every_pred_$_ep1.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(p, args));
        };
        var G__18999 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__19000__i = 0, G__19000__a = new Array(arguments.length - 3);
            while (G__19000__i < G__19000__a.length) {
              G__19000__a[G__19000__i] = arguments[G__19000__i + 3];
              ++G__19000__i;
            }
            args = new cljs.core.IndexedSeq(G__19000__a, 0);
          }
          return G__18999__delegate.call(this, x, y, z, args);
        };
        G__18999.cljs$lang$maxFixedArity = 3;
        G__18999.cljs$lang$applyTo = function(arglist__19001) {
          var x = cljs.core.first(arglist__19001);
          arglist__19001 = cljs.core.next(arglist__19001);
          var y = cljs.core.first(arglist__19001);
          arglist__19001 = cljs.core.next(arglist__19001);
          var z = cljs.core.first(arglist__19001);
          var args = cljs.core.rest(arglist__19001);
          return G__18999__delegate(x, y, z, args);
        };
        G__18999.cljs$core$IFn$_invoke$arity$variadic = G__18999__delegate;
        return G__18999;
      }();
      cljs$core$every_pred_$_ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$every_pred_$_ep1__0.call(this);
          case 1:
            return cljs$core$every_pred_$_ep1__1.call(this, x);
          case 2:
            return cljs$core$every_pred_$_ep1__2.call(this, x, y);
          case 3:
            return cljs$core$every_pred_$_ep1__3.call(this, x, y, z);
          default:
            var G__19002 = null;
            if (arguments.length > 3) {
              var G__19003__i = 0, G__19003__a = new Array(arguments.length - 3);
              while (G__19003__i < G__19003__a.length) {
                G__19003__a[G__19003__i] = arguments[G__19003__i + 3];
                ++G__19003__i;
              }
              G__19002 = new cljs.core.IndexedSeq(G__19003__a, 0);
            }
            return cljs$core$every_pred_$_ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19002);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$every_pred_$_ep1.cljs$lang$maxFixedArity = 3;
      cljs$core$every_pred_$_ep1.cljs$lang$applyTo = cljs$core$every_pred_$_ep1__4.cljs$lang$applyTo;
      cljs$core$every_pred_$_ep1.cljs$core$IFn$_invoke$arity$0 = cljs$core$every_pred_$_ep1__0;
      cljs$core$every_pred_$_ep1.cljs$core$IFn$_invoke$arity$1 = cljs$core$every_pred_$_ep1__1;
      cljs$core$every_pred_$_ep1.cljs$core$IFn$_invoke$arity$2 = cljs$core$every_pred_$_ep1__2;
      cljs$core$every_pred_$_ep1.cljs$core$IFn$_invoke$arity$3 = cljs$core$every_pred_$_ep1__3;
      cljs$core$every_pred_$_ep1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$every_pred_$_ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$every_pred_$_ep1;
    }();
  };
  var cljs$core$every_pred__2 = function(p1, p2) {
    return function() {
      var cljs$core$every_pred_$_ep2 = null;
      var cljs$core$every_pred_$_ep2__0 = function() {
        return true;
      };
      var cljs$core$every_pred_$_ep2__1 = function(x) {
        return cljs.core.boolean$(function() {
          var and__4097__auto__ = function() {
            var G__18862 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18862) : p1.call(null, G__18862);
          }();
          if (cljs.core.truth_(and__4097__auto__)) {
            var G__18863 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18863) : p2.call(null, G__18863);
          } else {
            return and__4097__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep2__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__4097__auto__ = function() {
            var G__18865 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18865) : p1.call(null, G__18865);
          }();
          if (cljs.core.truth_(and__4097__auto__)) {
            var and__4097__auto____$1 = function() {
              var G__18867 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18867) : p1.call(null, G__18867);
            }();
            if (cljs.core.truth_(and__4097__auto____$1)) {
              var and__4097__auto____$2 = function() {
                var G__18869 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18869) : p2.call(null, G__18869);
              }();
              if (cljs.core.truth_(and__4097__auto____$2)) {
                var G__18870 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18870) : p2.call(null, G__18870);
              } else {
                return and__4097__auto____$2;
              }
            } else {
              return and__4097__auto____$1;
            }
          } else {
            return and__4097__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep2__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__4097__auto__ = function() {
            var G__18872 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18872) : p1.call(null, G__18872);
          }();
          if (cljs.core.truth_(and__4097__auto__)) {
            var and__4097__auto____$1 = function() {
              var G__18874 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18874) : p1.call(null, G__18874);
            }();
            if (cljs.core.truth_(and__4097__auto____$1)) {
              var and__4097__auto____$2 = function() {
                var G__18876 = z;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18876) : p1.call(null, G__18876);
              }();
              if (cljs.core.truth_(and__4097__auto____$2)) {
                var and__4097__auto____$3 = function() {
                  var G__18878 = x;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18878) : p2.call(null, G__18878);
                }();
                if (cljs.core.truth_(and__4097__auto____$3)) {
                  var and__4097__auto____$4 = function() {
                    var G__18880 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18880) : p2.call(null, G__18880);
                  }();
                  if (cljs.core.truth_(and__4097__auto____$4)) {
                    var G__18881 = z;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18881) : p2.call(null, G__18881);
                  } else {
                    return and__4097__auto____$4;
                  }
                } else {
                  return and__4097__auto____$3;
                }
              } else {
                return and__4097__auto____$2;
              }
            } else {
              return and__4097__auto____$1;
            }
          } else {
            return and__4097__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep2__4 = function() {
        var G__19004__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(cljs$core$every_pred_$_ep2.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(p1__18609_SHARP_) {
            var and__4097__auto__ = function() {
              var G__18886 = p1__18609_SHARP_;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18886) : p1.call(null, G__18886);
            }();
            if (cljs.core.truth_(and__4097__auto__)) {
              var G__18887 = p1__18609_SHARP_;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18887) : p2.call(null, G__18887);
            } else {
              return and__4097__auto__;
            }
          }, args));
        };
        var G__19004 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__19005__i = 0, G__19005__a = new Array(arguments.length - 3);
            while (G__19005__i < G__19005__a.length) {
              G__19005__a[G__19005__i] = arguments[G__19005__i + 3];
              ++G__19005__i;
            }
            args = new cljs.core.IndexedSeq(G__19005__a, 0);
          }
          return G__19004__delegate.call(this, x, y, z, args);
        };
        G__19004.cljs$lang$maxFixedArity = 3;
        G__19004.cljs$lang$applyTo = function(arglist__19006) {
          var x = cljs.core.first(arglist__19006);
          arglist__19006 = cljs.core.next(arglist__19006);
          var y = cljs.core.first(arglist__19006);
          arglist__19006 = cljs.core.next(arglist__19006);
          var z = cljs.core.first(arglist__19006);
          var args = cljs.core.rest(arglist__19006);
          return G__19004__delegate(x, y, z, args);
        };
        G__19004.cljs$core$IFn$_invoke$arity$variadic = G__19004__delegate;
        return G__19004;
      }();
      cljs$core$every_pred_$_ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$every_pred_$_ep2__0.call(this);
          case 1:
            return cljs$core$every_pred_$_ep2__1.call(this, x);
          case 2:
            return cljs$core$every_pred_$_ep2__2.call(this, x, y);
          case 3:
            return cljs$core$every_pred_$_ep2__3.call(this, x, y, z);
          default:
            var G__19007 = null;
            if (arguments.length > 3) {
              var G__19008__i = 0, G__19008__a = new Array(arguments.length - 3);
              while (G__19008__i < G__19008__a.length) {
                G__19008__a[G__19008__i] = arguments[G__19008__i + 3];
                ++G__19008__i;
              }
              G__19007 = new cljs.core.IndexedSeq(G__19008__a, 0);
            }
            return cljs$core$every_pred_$_ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19007);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$every_pred_$_ep2.cljs$lang$maxFixedArity = 3;
      cljs$core$every_pred_$_ep2.cljs$lang$applyTo = cljs$core$every_pred_$_ep2__4.cljs$lang$applyTo;
      cljs$core$every_pred_$_ep2.cljs$core$IFn$_invoke$arity$0 = cljs$core$every_pred_$_ep2__0;
      cljs$core$every_pred_$_ep2.cljs$core$IFn$_invoke$arity$1 = cljs$core$every_pred_$_ep2__1;
      cljs$core$every_pred_$_ep2.cljs$core$IFn$_invoke$arity$2 = cljs$core$every_pred_$_ep2__2;
      cljs$core$every_pred_$_ep2.cljs$core$IFn$_invoke$arity$3 = cljs$core$every_pred_$_ep2__3;
      cljs$core$every_pred_$_ep2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$every_pred_$_ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$every_pred_$_ep2;
    }();
  };
  var cljs$core$every_pred__3 = function(p1, p2, p3) {
    return function() {
      var cljs$core$every_pred_$_ep3 = null;
      var cljs$core$every_pred_$_ep3__0 = function() {
        return true;
      };
      var cljs$core$every_pred_$_ep3__1 = function(x) {
        return cljs.core.boolean$(function() {
          var and__4097__auto__ = function() {
            var G__18933 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18933) : p1.call(null, G__18933);
          }();
          if (cljs.core.truth_(and__4097__auto__)) {
            var and__4097__auto____$1 = function() {
              var G__18935 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18935) : p2.call(null, G__18935);
            }();
            if (cljs.core.truth_(and__4097__auto____$1)) {
              var G__18936 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18936) : p3.call(null, G__18936);
            } else {
              return and__4097__auto____$1;
            }
          } else {
            return and__4097__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep3__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__4097__auto__ = function() {
            var G__18938 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18938) : p1.call(null, G__18938);
          }();
          if (cljs.core.truth_(and__4097__auto__)) {
            var and__4097__auto____$1 = function() {
              var G__18940 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18940) : p2.call(null, G__18940);
            }();
            if (cljs.core.truth_(and__4097__auto____$1)) {
              var and__4097__auto____$2 = function() {
                var G__18942 = x;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18942) : p3.call(null, G__18942);
              }();
              if (cljs.core.truth_(and__4097__auto____$2)) {
                var and__4097__auto____$3 = function() {
                  var G__18944 = y;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18944) : p1.call(null, G__18944);
                }();
                if (cljs.core.truth_(and__4097__auto____$3)) {
                  var and__4097__auto____$4 = function() {
                    var G__18946 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18946) : p2.call(null, G__18946);
                  }();
                  if (cljs.core.truth_(and__4097__auto____$4)) {
                    var G__18947 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18947) : p3.call(null, G__18947);
                  } else {
                    return and__4097__auto____$4;
                  }
                } else {
                  return and__4097__auto____$3;
                }
              } else {
                return and__4097__auto____$2;
              }
            } else {
              return and__4097__auto____$1;
            }
          } else {
            return and__4097__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep3__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__4097__auto__ = function() {
            var G__18949 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18949) : p1.call(null, G__18949);
          }();
          if (cljs.core.truth_(and__4097__auto__)) {
            var and__4097__auto____$1 = function() {
              var G__18951 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18951) : p2.call(null, G__18951);
            }();
            if (cljs.core.truth_(and__4097__auto____$1)) {
              var and__4097__auto____$2 = function() {
                var G__18953 = x;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18953) : p3.call(null, G__18953);
              }();
              if (cljs.core.truth_(and__4097__auto____$2)) {
                var and__4097__auto____$3 = function() {
                  var G__18955 = y;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18955) : p1.call(null, G__18955);
                }();
                if (cljs.core.truth_(and__4097__auto____$3)) {
                  var and__4097__auto____$4 = function() {
                    var G__18957 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18957) : p2.call(null, G__18957);
                  }();
                  if (cljs.core.truth_(and__4097__auto____$4)) {
                    var and__4097__auto____$5 = function() {
                      var G__18959 = y;
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18959) : p3.call(null, G__18959);
                    }();
                    if (cljs.core.truth_(and__4097__auto____$5)) {
                      var and__4097__auto____$6 = function() {
                        var G__18961 = z;
                        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18961) : p1.call(null, G__18961);
                      }();
                      if (cljs.core.truth_(and__4097__auto____$6)) {
                        var and__4097__auto____$7 = function() {
                          var G__18963 = z;
                          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18963) : p2.call(null, G__18963);
                        }();
                        if (cljs.core.truth_(and__4097__auto____$7)) {
                          var G__18964 = z;
                          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18964) : p3.call(null, G__18964);
                        } else {
                          return and__4097__auto____$7;
                        }
                      } else {
                        return and__4097__auto____$6;
                      }
                    } else {
                      return and__4097__auto____$5;
                    }
                  } else {
                    return and__4097__auto____$4;
                  }
                } else {
                  return and__4097__auto____$3;
                }
              } else {
                return and__4097__auto____$2;
              }
            } else {
              return and__4097__auto____$1;
            }
          } else {
            return and__4097__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep3__4 = function() {
        var G__19009__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(cljs$core$every_pred_$_ep3.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(p1__18610_SHARP_) {
            var and__4097__auto__ = function() {
              var G__18971 = p1__18610_SHARP_;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18971) : p1.call(null, G__18971);
            }();
            if (cljs.core.truth_(and__4097__auto__)) {
              var and__4097__auto____$1 = function() {
                var G__18973 = p1__18610_SHARP_;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18973) : p2.call(null, G__18973);
              }();
              if (cljs.core.truth_(and__4097__auto____$1)) {
                var G__18974 = p1__18610_SHARP_;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18974) : p3.call(null, G__18974);
              } else {
                return and__4097__auto____$1;
              }
            } else {
              return and__4097__auto__;
            }
          }, args));
        };
        var G__19009 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__19010__i = 0, G__19010__a = new Array(arguments.length - 3);
            while (G__19010__i < G__19010__a.length) {
              G__19010__a[G__19010__i] = arguments[G__19010__i + 3];
              ++G__19010__i;
            }
            args = new cljs.core.IndexedSeq(G__19010__a, 0);
          }
          return G__19009__delegate.call(this, x, y, z, args);
        };
        G__19009.cljs$lang$maxFixedArity = 3;
        G__19009.cljs$lang$applyTo = function(arglist__19011) {
          var x = cljs.core.first(arglist__19011);
          arglist__19011 = cljs.core.next(arglist__19011);
          var y = cljs.core.first(arglist__19011);
          arglist__19011 = cljs.core.next(arglist__19011);
          var z = cljs.core.first(arglist__19011);
          var args = cljs.core.rest(arglist__19011);
          return G__19009__delegate(x, y, z, args);
        };
        G__19009.cljs$core$IFn$_invoke$arity$variadic = G__19009__delegate;
        return G__19009;
      }();
      cljs$core$every_pred_$_ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$every_pred_$_ep3__0.call(this);
          case 1:
            return cljs$core$every_pred_$_ep3__1.call(this, x);
          case 2:
            return cljs$core$every_pred_$_ep3__2.call(this, x, y);
          case 3:
            return cljs$core$every_pred_$_ep3__3.call(this, x, y, z);
          default:
            var G__19012 = null;
            if (arguments.length > 3) {
              var G__19013__i = 0, G__19013__a = new Array(arguments.length - 3);
              while (G__19013__i < G__19013__a.length) {
                G__19013__a[G__19013__i] = arguments[G__19013__i + 3];
                ++G__19013__i;
              }
              G__19012 = new cljs.core.IndexedSeq(G__19013__a, 0);
            }
            return cljs$core$every_pred_$_ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19012);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$every_pred_$_ep3.cljs$lang$maxFixedArity = 3;
      cljs$core$every_pred_$_ep3.cljs$lang$applyTo = cljs$core$every_pred_$_ep3__4.cljs$lang$applyTo;
      cljs$core$every_pred_$_ep3.cljs$core$IFn$_invoke$arity$0 = cljs$core$every_pred_$_ep3__0;
      cljs$core$every_pred_$_ep3.cljs$core$IFn$_invoke$arity$1 = cljs$core$every_pred_$_ep3__1;
      cljs$core$every_pred_$_ep3.cljs$core$IFn$_invoke$arity$2 = cljs$core$every_pred_$_ep3__2;
      cljs$core$every_pred_$_ep3.cljs$core$IFn$_invoke$arity$3 = cljs$core$every_pred_$_ep3__3;
      cljs$core$every_pred_$_ep3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$every_pred_$_ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$every_pred_$_ep3;
    }();
  };
  var cljs$core$every_pred__4 = function() {
    var G__19014__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var cljs$core$every_pred_$_epn = null;
          var cljs$core$every_pred_$_epn__0 = function() {
            return true;
          };
          var cljs$core$every_pred_$_epn__1 = function(x) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__18611_SHARP_) {
                var G__18990 = x;
                return p1__18611_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__18611_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18990) : p1__18611_SHARP_.call(null, G__18990);
              };
            }(ps__$1), ps__$1);
          };
          var cljs$core$every_pred_$_epn__2 = function(x, y) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__18612_SHARP_) {
                var and__4097__auto__ = function() {
                  var G__18992 = x;
                  return p1__18612_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__18612_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18992) : p1__18612_SHARP_.call(null, G__18992);
                }();
                if (cljs.core.truth_(and__4097__auto__)) {
                  var G__18993 = y;
                  return p1__18612_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__18612_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18993) : p1__18612_SHARP_.call(null, G__18993);
                } else {
                  return and__4097__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var cljs$core$every_pred_$_epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__18613_SHARP_) {
                var and__4097__auto__ = function() {
                  var G__18995 = x;
                  return p1__18613_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__18613_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18995) : p1__18613_SHARP_.call(null, G__18995);
                }();
                if (cljs.core.truth_(and__4097__auto__)) {
                  var and__4097__auto____$1 = function() {
                    var G__18997 = y;
                    return p1__18613_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__18613_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18997) : p1__18613_SHARP_.call(null, G__18997);
                  }();
                  if (cljs.core.truth_(and__4097__auto____$1)) {
                    var G__18998 = z;
                    return p1__18613_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__18613_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18998) : p1__18613_SHARP_.call(null, G__18998);
                  } else {
                    return and__4097__auto____$1;
                  }
                } else {
                  return and__4097__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var cljs$core$every_pred_$_epn__4 = function() {
            var G__19015__delegate = function(x, y, z, args) {
              return cljs.core.boolean$(cljs$core$every_pred_$_epn.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(ps__$1) {
                return function(p1__18614_SHARP_) {
                  return cljs.core.every_QMARK_(p1__18614_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__19015 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__19016__i = 0, G__19016__a = new Array(arguments.length - 3);
                while (G__19016__i < G__19016__a.length) {
                  G__19016__a[G__19016__i] = arguments[G__19016__i + 3];
                  ++G__19016__i;
                }
                args = new cljs.core.IndexedSeq(G__19016__a, 0);
              }
              return G__19015__delegate.call(this, x, y, z, args);
            };
            G__19015.cljs$lang$maxFixedArity = 3;
            G__19015.cljs$lang$applyTo = function(arglist__19017) {
              var x = cljs.core.first(arglist__19017);
              arglist__19017 = cljs.core.next(arglist__19017);
              var y = cljs.core.first(arglist__19017);
              arglist__19017 = cljs.core.next(arglist__19017);
              var z = cljs.core.first(arglist__19017);
              var args = cljs.core.rest(arglist__19017);
              return G__19015__delegate(x, y, z, args);
            };
            G__19015.cljs$core$IFn$_invoke$arity$variadic = G__19015__delegate;
            return G__19015;
          }();
          cljs$core$every_pred_$_epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return cljs$core$every_pred_$_epn__0.call(this);
              case 1:
                return cljs$core$every_pred_$_epn__1.call(this, x);
              case 2:
                return cljs$core$every_pred_$_epn__2.call(this, x, y);
              case 3:
                return cljs$core$every_pred_$_epn__3.call(this, x, y, z);
              default:
                var G__19018 = null;
                if (arguments.length > 3) {
                  var G__19019__i = 0, G__19019__a = new Array(arguments.length - 3);
                  while (G__19019__i < G__19019__a.length) {
                    G__19019__a[G__19019__i] = arguments[G__19019__i + 3];
                    ++G__19019__i;
                  }
                  G__19018 = new cljs.core.IndexedSeq(G__19019__a, 0);
                }
                return cljs$core$every_pred_$_epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19018);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          cljs$core$every_pred_$_epn.cljs$lang$maxFixedArity = 3;
          cljs$core$every_pred_$_epn.cljs$lang$applyTo = cljs$core$every_pred_$_epn__4.cljs$lang$applyTo;
          cljs$core$every_pred_$_epn.cljs$core$IFn$_invoke$arity$0 = cljs$core$every_pred_$_epn__0;
          cljs$core$every_pred_$_epn.cljs$core$IFn$_invoke$arity$1 = cljs$core$every_pred_$_epn__1;
          cljs$core$every_pred_$_epn.cljs$core$IFn$_invoke$arity$2 = cljs$core$every_pred_$_epn__2;
          cljs$core$every_pred_$_epn.cljs$core$IFn$_invoke$arity$3 = cljs$core$every_pred_$_epn__3;
          cljs$core$every_pred_$_epn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$every_pred_$_epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return cljs$core$every_pred_$_epn;
        }();
      }(ps__$1);
    };
    var G__19014 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        var G__19020__i = 0, G__19020__a = new Array(arguments.length - 3);
        while (G__19020__i < G__19020__a.length) {
          G__19020__a[G__19020__i] = arguments[G__19020__i + 3];
          ++G__19020__i;
        }
        ps = new cljs.core.IndexedSeq(G__19020__a, 0);
      }
      return G__19014__delegate.call(this, p1, p2, p3, ps);
    };
    G__19014.cljs$lang$maxFixedArity = 3;
    G__19014.cljs$lang$applyTo = function(arglist__19021) {
      var p1 = cljs.core.first(arglist__19021);
      arglist__19021 = cljs.core.next(arglist__19021);
      var p2 = cljs.core.first(arglist__19021);
      arglist__19021 = cljs.core.next(arglist__19021);
      var p3 = cljs.core.first(arglist__19021);
      var ps = cljs.core.rest(arglist__19021);
      return G__19014__delegate(p1, p2, p3, ps);
    };
    G__19014.cljs$core$IFn$_invoke$arity$variadic = G__19014__delegate;
    return G__19014;
  }();
  cljs$core$every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$every_pred__1.call(this, p1);
      case 2:
        return cljs$core$every_pred__2.call(this, p1, p2);
      case 3:
        return cljs$core$every_pred__3.call(this, p1, p2, p3);
      default:
        var G__19022 = null;
        if (arguments.length > 3) {
          var G__19023__i = 0, G__19023__a = new Array(arguments.length - 3);
          while (G__19023__i < G__19023__a.length) {
            G__19023__a[G__19023__i] = arguments[G__19023__i + 3];
            ++G__19023__i;
          }
          G__19022 = new cljs.core.IndexedSeq(G__19023__a, 0);
        }
        return cljs$core$every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, G__19022);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$every_pred.cljs$lang$maxFixedArity = 3;
  cljs$core$every_pred.cljs$lang$applyTo = cljs$core$every_pred__4.cljs$lang$applyTo;
  cljs$core$every_pred.cljs$core$IFn$_invoke$arity$1 = cljs$core$every_pred__1;
  cljs$core$every_pred.cljs$core$IFn$_invoke$arity$2 = cljs$core$every_pred__2;
  cljs$core$every_pred.cljs$core$IFn$_invoke$arity$3 = cljs$core$every_pred__3;
  cljs$core$every_pred.cljs$core$IFn$_invoke$arity$variadic = cljs$core$every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$every_pred;
}();
cljs.core.some_fn = function() {
  var cljs$core$some_fn = null;
  var cljs$core$some_fn__1 = function(p) {
    return function() {
      var cljs$core$some_fn_$_sp1 = null;
      var cljs$core$some_fn_$_sp1__0 = function() {
        return null;
      };
      var cljs$core$some_fn_$_sp1__1 = function(x) {
        var G__19229 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__19229) : p.call(null, G__19229);
      };
      var cljs$core$some_fn_$_sp1__2 = function(x, y) {
        var or__4109__auto__ = function() {
          var G__19231 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__19231) : p.call(null, G__19231);
        }();
        if (cljs.core.truth_(or__4109__auto__)) {
          return or__4109__auto__;
        } else {
          var G__19232 = y;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__19232) : p.call(null, G__19232);
        }
      };
      var cljs$core$some_fn_$_sp1__3 = function(x, y, z) {
        var or__4109__auto__ = function() {
          var G__19234 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__19234) : p.call(null, G__19234);
        }();
        if (cljs.core.truth_(or__4109__auto__)) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = function() {
            var G__19236 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__19236) : p.call(null, G__19236);
          }();
          if (cljs.core.truth_(or__4109__auto____$1)) {
            return or__4109__auto____$1;
          } else {
            var G__19237 = z;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__19237) : p.call(null, G__19237);
          }
        }
      };
      var cljs$core$some_fn_$_sp1__4 = function() {
        var G__19398__delegate = function(x, y, z, args) {
          var or__4109__auto__ = cljs$core$some_fn_$_sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__4109__auto__)) {
            return or__4109__auto__;
          } else {
            return cljs.core.some(p, args);
          }
        };
        var G__19398 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__19399__i = 0, G__19399__a = new Array(arguments.length - 3);
            while (G__19399__i < G__19399__a.length) {
              G__19399__a[G__19399__i] = arguments[G__19399__i + 3];
              ++G__19399__i;
            }
            args = new cljs.core.IndexedSeq(G__19399__a, 0);
          }
          return G__19398__delegate.call(this, x, y, z, args);
        };
        G__19398.cljs$lang$maxFixedArity = 3;
        G__19398.cljs$lang$applyTo = function(arglist__19400) {
          var x = cljs.core.first(arglist__19400);
          arglist__19400 = cljs.core.next(arglist__19400);
          var y = cljs.core.first(arglist__19400);
          arglist__19400 = cljs.core.next(arglist__19400);
          var z = cljs.core.first(arglist__19400);
          var args = cljs.core.rest(arglist__19400);
          return G__19398__delegate(x, y, z, args);
        };
        G__19398.cljs$core$IFn$_invoke$arity$variadic = G__19398__delegate;
        return G__19398;
      }();
      cljs$core$some_fn_$_sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$some_fn_$_sp1__0.call(this);
          case 1:
            return cljs$core$some_fn_$_sp1__1.call(this, x);
          case 2:
            return cljs$core$some_fn_$_sp1__2.call(this, x, y);
          case 3:
            return cljs$core$some_fn_$_sp1__3.call(this, x, y, z);
          default:
            var G__19401 = null;
            if (arguments.length > 3) {
              var G__19402__i = 0, G__19402__a = new Array(arguments.length - 3);
              while (G__19402__i < G__19402__a.length) {
                G__19402__a[G__19402__i] = arguments[G__19402__i + 3];
                ++G__19402__i;
              }
              G__19401 = new cljs.core.IndexedSeq(G__19402__a, 0);
            }
            return cljs$core$some_fn_$_sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19401);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$some_fn_$_sp1.cljs$lang$maxFixedArity = 3;
      cljs$core$some_fn_$_sp1.cljs$lang$applyTo = cljs$core$some_fn_$_sp1__4.cljs$lang$applyTo;
      cljs$core$some_fn_$_sp1.cljs$core$IFn$_invoke$arity$0 = cljs$core$some_fn_$_sp1__0;
      cljs$core$some_fn_$_sp1.cljs$core$IFn$_invoke$arity$1 = cljs$core$some_fn_$_sp1__1;
      cljs$core$some_fn_$_sp1.cljs$core$IFn$_invoke$arity$2 = cljs$core$some_fn_$_sp1__2;
      cljs$core$some_fn_$_sp1.cljs$core$IFn$_invoke$arity$3 = cljs$core$some_fn_$_sp1__3;
      cljs$core$some_fn_$_sp1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$some_fn_$_sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$some_fn_$_sp1;
    }();
  };
  var cljs$core$some_fn__2 = function(p1, p2) {
    return function() {
      var cljs$core$some_fn_$_sp2 = null;
      var cljs$core$some_fn_$_sp2__0 = function() {
        return null;
      };
      var cljs$core$some_fn_$_sp2__1 = function(x) {
        var or__4109__auto__ = function() {
          var G__19269 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19269) : p1.call(null, G__19269);
        }();
        if (cljs.core.truth_(or__4109__auto__)) {
          return or__4109__auto__;
        } else {
          var G__19270 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19270) : p2.call(null, G__19270);
        }
      };
      var cljs$core$some_fn_$_sp2__2 = function(x, y) {
        var or__4109__auto__ = function() {
          var G__19272 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19272) : p1.call(null, G__19272);
        }();
        if (cljs.core.truth_(or__4109__auto__)) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = function() {
            var G__19274 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19274) : p1.call(null, G__19274);
          }();
          if (cljs.core.truth_(or__4109__auto____$1)) {
            return or__4109__auto____$1;
          } else {
            var or__4109__auto____$2 = function() {
              var G__19276 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19276) : p2.call(null, G__19276);
            }();
            if (cljs.core.truth_(or__4109__auto____$2)) {
              return or__4109__auto____$2;
            } else {
              var G__19277 = y;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19277) : p2.call(null, G__19277);
            }
          }
        }
      };
      var cljs$core$some_fn_$_sp2__3 = function(x, y, z) {
        var or__4109__auto__ = function() {
          var G__19279 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19279) : p1.call(null, G__19279);
        }();
        if (cljs.core.truth_(or__4109__auto__)) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = function() {
            var G__19281 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19281) : p1.call(null, G__19281);
          }();
          if (cljs.core.truth_(or__4109__auto____$1)) {
            return or__4109__auto____$1;
          } else {
            var or__4109__auto____$2 = function() {
              var G__19283 = z;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19283) : p1.call(null, G__19283);
            }();
            if (cljs.core.truth_(or__4109__auto____$2)) {
              return or__4109__auto____$2;
            } else {
              var or__4109__auto____$3 = function() {
                var G__19285 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19285) : p2.call(null, G__19285);
              }();
              if (cljs.core.truth_(or__4109__auto____$3)) {
                return or__4109__auto____$3;
              } else {
                var or__4109__auto____$4 = function() {
                  var G__19287 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19287) : p2.call(null, G__19287);
                }();
                if (cljs.core.truth_(or__4109__auto____$4)) {
                  return or__4109__auto____$4;
                } else {
                  var G__19288 = z;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19288) : p2.call(null, G__19288);
                }
              }
            }
          }
        }
      };
      var cljs$core$some_fn_$_sp2__4 = function() {
        var G__19403__delegate = function(x, y, z, args) {
          var or__4109__auto__ = cljs$core$some_fn_$_sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__4109__auto__)) {
            return or__4109__auto__;
          } else {
            return cljs.core.some(function(or__4109__auto__) {
              return function(p1__19024_SHARP_) {
                var or__4109__auto____$1 = function() {
                  var G__19290 = p1__19024_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19290) : p1.call(null, G__19290);
                }();
                if (cljs.core.truth_(or__4109__auto____$1)) {
                  return or__4109__auto____$1;
                } else {
                  var G__19291 = p1__19024_SHARP_;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19291) : p2.call(null, G__19291);
                }
              };
            }(or__4109__auto__), args);
          }
        };
        var G__19403 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__19404__i = 0, G__19404__a = new Array(arguments.length - 3);
            while (G__19404__i < G__19404__a.length) {
              G__19404__a[G__19404__i] = arguments[G__19404__i + 3];
              ++G__19404__i;
            }
            args = new cljs.core.IndexedSeq(G__19404__a, 0);
          }
          return G__19403__delegate.call(this, x, y, z, args);
        };
        G__19403.cljs$lang$maxFixedArity = 3;
        G__19403.cljs$lang$applyTo = function(arglist__19405) {
          var x = cljs.core.first(arglist__19405);
          arglist__19405 = cljs.core.next(arglist__19405);
          var y = cljs.core.first(arglist__19405);
          arglist__19405 = cljs.core.next(arglist__19405);
          var z = cljs.core.first(arglist__19405);
          var args = cljs.core.rest(arglist__19405);
          return G__19403__delegate(x, y, z, args);
        };
        G__19403.cljs$core$IFn$_invoke$arity$variadic = G__19403__delegate;
        return G__19403;
      }();
      cljs$core$some_fn_$_sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$some_fn_$_sp2__0.call(this);
          case 1:
            return cljs$core$some_fn_$_sp2__1.call(this, x);
          case 2:
            return cljs$core$some_fn_$_sp2__2.call(this, x, y);
          case 3:
            return cljs$core$some_fn_$_sp2__3.call(this, x, y, z);
          default:
            var G__19406 = null;
            if (arguments.length > 3) {
              var G__19407__i = 0, G__19407__a = new Array(arguments.length - 3);
              while (G__19407__i < G__19407__a.length) {
                G__19407__a[G__19407__i] = arguments[G__19407__i + 3];
                ++G__19407__i;
              }
              G__19406 = new cljs.core.IndexedSeq(G__19407__a, 0);
            }
            return cljs$core$some_fn_$_sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19406);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$some_fn_$_sp2.cljs$lang$maxFixedArity = 3;
      cljs$core$some_fn_$_sp2.cljs$lang$applyTo = cljs$core$some_fn_$_sp2__4.cljs$lang$applyTo;
      cljs$core$some_fn_$_sp2.cljs$core$IFn$_invoke$arity$0 = cljs$core$some_fn_$_sp2__0;
      cljs$core$some_fn_$_sp2.cljs$core$IFn$_invoke$arity$1 = cljs$core$some_fn_$_sp2__1;
      cljs$core$some_fn_$_sp2.cljs$core$IFn$_invoke$arity$2 = cljs$core$some_fn_$_sp2__2;
      cljs$core$some_fn_$_sp2.cljs$core$IFn$_invoke$arity$3 = cljs$core$some_fn_$_sp2__3;
      cljs$core$some_fn_$_sp2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$some_fn_$_sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$some_fn_$_sp2;
    }();
  };
  var cljs$core$some_fn__3 = function(p1, p2, p3) {
    return function() {
      var cljs$core$some_fn_$_sp3 = null;
      var cljs$core$some_fn_$_sp3__0 = function() {
        return null;
      };
      var cljs$core$some_fn_$_sp3__1 = function(x) {
        var or__4109__auto__ = function() {
          var G__19337 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19337) : p1.call(null, G__19337);
        }();
        if (cljs.core.truth_(or__4109__auto__)) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = function() {
            var G__19339 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19339) : p2.call(null, G__19339);
          }();
          if (cljs.core.truth_(or__4109__auto____$1)) {
            return or__4109__auto____$1;
          } else {
            var G__19340 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__19340) : p3.call(null, G__19340);
          }
        }
      };
      var cljs$core$some_fn_$_sp3__2 = function(x, y) {
        var or__4109__auto__ = function() {
          var G__19342 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19342) : p1.call(null, G__19342);
        }();
        if (cljs.core.truth_(or__4109__auto__)) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = function() {
            var G__19344 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19344) : p2.call(null, G__19344);
          }();
          if (cljs.core.truth_(or__4109__auto____$1)) {
            return or__4109__auto____$1;
          } else {
            var or__4109__auto____$2 = function() {
              var G__19346 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__19346) : p3.call(null, G__19346);
            }();
            if (cljs.core.truth_(or__4109__auto____$2)) {
              return or__4109__auto____$2;
            } else {
              var or__4109__auto____$3 = function() {
                var G__19348 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19348) : p1.call(null, G__19348);
              }();
              if (cljs.core.truth_(or__4109__auto____$3)) {
                return or__4109__auto____$3;
              } else {
                var or__4109__auto____$4 = function() {
                  var G__19350 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19350) : p2.call(null, G__19350);
                }();
                if (cljs.core.truth_(or__4109__auto____$4)) {
                  return or__4109__auto____$4;
                } else {
                  var G__19351 = y;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__19351) : p3.call(null, G__19351);
                }
              }
            }
          }
        }
      };
      var cljs$core$some_fn_$_sp3__3 = function(x, y, z) {
        var or__4109__auto__ = function() {
          var G__19353 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19353) : p1.call(null, G__19353);
        }();
        if (cljs.core.truth_(or__4109__auto__)) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = function() {
            var G__19355 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19355) : p2.call(null, G__19355);
          }();
          if (cljs.core.truth_(or__4109__auto____$1)) {
            return or__4109__auto____$1;
          } else {
            var or__4109__auto____$2 = function() {
              var G__19357 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__19357) : p3.call(null, G__19357);
            }();
            if (cljs.core.truth_(or__4109__auto____$2)) {
              return or__4109__auto____$2;
            } else {
              var or__4109__auto____$3 = function() {
                var G__19359 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19359) : p1.call(null, G__19359);
              }();
              if (cljs.core.truth_(or__4109__auto____$3)) {
                return or__4109__auto____$3;
              } else {
                var or__4109__auto____$4 = function() {
                  var G__19361 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19361) : p2.call(null, G__19361);
                }();
                if (cljs.core.truth_(or__4109__auto____$4)) {
                  return or__4109__auto____$4;
                } else {
                  var or__4109__auto____$5 = function() {
                    var G__19363 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__19363) : p3.call(null, G__19363);
                  }();
                  if (cljs.core.truth_(or__4109__auto____$5)) {
                    return or__4109__auto____$5;
                  } else {
                    var or__4109__auto____$6 = function() {
                      var G__19365 = z;
                      return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19365) : p1.call(null, G__19365);
                    }();
                    if (cljs.core.truth_(or__4109__auto____$6)) {
                      return or__4109__auto____$6;
                    } else {
                      var or__4109__auto____$7 = function() {
                        var G__19367 = z;
                        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19367) : p2.call(null, G__19367);
                      }();
                      if (cljs.core.truth_(or__4109__auto____$7)) {
                        return or__4109__auto____$7;
                      } else {
                        var G__19368 = z;
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__19368) : p3.call(null, G__19368);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var cljs$core$some_fn_$_sp3__4 = function() {
        var G__19408__delegate = function(x, y, z, args) {
          var or__4109__auto__ = cljs$core$some_fn_$_sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__4109__auto__)) {
            return or__4109__auto__;
          } else {
            return cljs.core.some(function(or__4109__auto__) {
              return function(p1__19025_SHARP_) {
                var or__4109__auto____$1 = function() {
                  var G__19370 = p1__19025_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19370) : p1.call(null, G__19370);
                }();
                if (cljs.core.truth_(or__4109__auto____$1)) {
                  return or__4109__auto____$1;
                } else {
                  var or__4109__auto____$2 = function() {
                    var G__19372 = p1__19025_SHARP_;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19372) : p2.call(null, G__19372);
                  }();
                  if (cljs.core.truth_(or__4109__auto____$2)) {
                    return or__4109__auto____$2;
                  } else {
                    var G__19373 = p1__19025_SHARP_;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__19373) : p3.call(null, G__19373);
                  }
                }
              };
            }(or__4109__auto__), args);
          }
        };
        var G__19408 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__19409__i = 0, G__19409__a = new Array(arguments.length - 3);
            while (G__19409__i < G__19409__a.length) {
              G__19409__a[G__19409__i] = arguments[G__19409__i + 3];
              ++G__19409__i;
            }
            args = new cljs.core.IndexedSeq(G__19409__a, 0);
          }
          return G__19408__delegate.call(this, x, y, z, args);
        };
        G__19408.cljs$lang$maxFixedArity = 3;
        G__19408.cljs$lang$applyTo = function(arglist__19410) {
          var x = cljs.core.first(arglist__19410);
          arglist__19410 = cljs.core.next(arglist__19410);
          var y = cljs.core.first(arglist__19410);
          arglist__19410 = cljs.core.next(arglist__19410);
          var z = cljs.core.first(arglist__19410);
          var args = cljs.core.rest(arglist__19410);
          return G__19408__delegate(x, y, z, args);
        };
        G__19408.cljs$core$IFn$_invoke$arity$variadic = G__19408__delegate;
        return G__19408;
      }();
      cljs$core$some_fn_$_sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$some_fn_$_sp3__0.call(this);
          case 1:
            return cljs$core$some_fn_$_sp3__1.call(this, x);
          case 2:
            return cljs$core$some_fn_$_sp3__2.call(this, x, y);
          case 3:
            return cljs$core$some_fn_$_sp3__3.call(this, x, y, z);
          default:
            var G__19411 = null;
            if (arguments.length > 3) {
              var G__19412__i = 0, G__19412__a = new Array(arguments.length - 3);
              while (G__19412__i < G__19412__a.length) {
                G__19412__a[G__19412__i] = arguments[G__19412__i + 3];
                ++G__19412__i;
              }
              G__19411 = new cljs.core.IndexedSeq(G__19412__a, 0);
            }
            return cljs$core$some_fn_$_sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19411);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$some_fn_$_sp3.cljs$lang$maxFixedArity = 3;
      cljs$core$some_fn_$_sp3.cljs$lang$applyTo = cljs$core$some_fn_$_sp3__4.cljs$lang$applyTo;
      cljs$core$some_fn_$_sp3.cljs$core$IFn$_invoke$arity$0 = cljs$core$some_fn_$_sp3__0;
      cljs$core$some_fn_$_sp3.cljs$core$IFn$_invoke$arity$1 = cljs$core$some_fn_$_sp3__1;
      cljs$core$some_fn_$_sp3.cljs$core$IFn$_invoke$arity$2 = cljs$core$some_fn_$_sp3__2;
      cljs$core$some_fn_$_sp3.cljs$core$IFn$_invoke$arity$3 = cljs$core$some_fn_$_sp3__3;
      cljs$core$some_fn_$_sp3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$some_fn_$_sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$some_fn_$_sp3;
    }();
  };
  var cljs$core$some_fn__4 = function() {
    var G__19413__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var cljs$core$some_fn_$_spn = null;
          var cljs$core$some_fn_$_spn__0 = function() {
            return null;
          };
          var cljs$core$some_fn_$_spn__1 = function(x) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__19026_SHARP_) {
                var G__19389 = x;
                return p1__19026_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__19026_SHARP_.cljs$core$IFn$_invoke$arity$1(G__19389) : p1__19026_SHARP_.call(null, G__19389);
              };
            }(ps__$1), ps__$1);
          };
          var cljs$core$some_fn_$_spn__2 = function(x, y) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__19027_SHARP_) {
                var or__4109__auto__ = function() {
                  var G__19391 = x;
                  return p1__19027_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__19027_SHARP_.cljs$core$IFn$_invoke$arity$1(G__19391) : p1__19027_SHARP_.call(null, G__19391);
                }();
                if (cljs.core.truth_(or__4109__auto__)) {
                  return or__4109__auto__;
                } else {
                  var G__19392 = y;
                  return p1__19027_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__19027_SHARP_.cljs$core$IFn$_invoke$arity$1(G__19392) : p1__19027_SHARP_.call(null, G__19392);
                }
              };
            }(ps__$1), ps__$1);
          };
          var cljs$core$some_fn_$_spn__3 = function(x, y, z) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__19028_SHARP_) {
                var or__4109__auto__ = function() {
                  var G__19394 = x;
                  return p1__19028_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__19028_SHARP_.cljs$core$IFn$_invoke$arity$1(G__19394) : p1__19028_SHARP_.call(null, G__19394);
                }();
                if (cljs.core.truth_(or__4109__auto__)) {
                  return or__4109__auto__;
                } else {
                  var or__4109__auto____$1 = function() {
                    var G__19396 = y;
                    return p1__19028_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__19028_SHARP_.cljs$core$IFn$_invoke$arity$1(G__19396) : p1__19028_SHARP_.call(null, G__19396);
                  }();
                  if (cljs.core.truth_(or__4109__auto____$1)) {
                    return or__4109__auto____$1;
                  } else {
                    var G__19397 = z;
                    return p1__19028_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__19028_SHARP_.cljs$core$IFn$_invoke$arity$1(G__19397) : p1__19028_SHARP_.call(null, G__19397);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var cljs$core$some_fn_$_spn__4 = function() {
            var G__19414__delegate = function(x, y, z, args) {
              var or__4109__auto__ = cljs$core$some_fn_$_spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
              if (cljs.core.truth_(or__4109__auto__)) {
                return or__4109__auto__;
              } else {
                return cljs.core.some(function(or__4109__auto__, ps__$1) {
                  return function(p1__19029_SHARP_) {
                    return cljs.core.some(p1__19029_SHARP_, args);
                  };
                }(or__4109__auto__, ps__$1), ps__$1);
              }
            };
            var G__19414 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__19415__i = 0, G__19415__a = new Array(arguments.length - 3);
                while (G__19415__i < G__19415__a.length) {
                  G__19415__a[G__19415__i] = arguments[G__19415__i + 3];
                  ++G__19415__i;
                }
                args = new cljs.core.IndexedSeq(G__19415__a, 0);
              }
              return G__19414__delegate.call(this, x, y, z, args);
            };
            G__19414.cljs$lang$maxFixedArity = 3;
            G__19414.cljs$lang$applyTo = function(arglist__19416) {
              var x = cljs.core.first(arglist__19416);
              arglist__19416 = cljs.core.next(arglist__19416);
              var y = cljs.core.first(arglist__19416);
              arglist__19416 = cljs.core.next(arglist__19416);
              var z = cljs.core.first(arglist__19416);
              var args = cljs.core.rest(arglist__19416);
              return G__19414__delegate(x, y, z, args);
            };
            G__19414.cljs$core$IFn$_invoke$arity$variadic = G__19414__delegate;
            return G__19414;
          }();
          cljs$core$some_fn_$_spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return cljs$core$some_fn_$_spn__0.call(this);
              case 1:
                return cljs$core$some_fn_$_spn__1.call(this, x);
              case 2:
                return cljs$core$some_fn_$_spn__2.call(this, x, y);
              case 3:
                return cljs$core$some_fn_$_spn__3.call(this, x, y, z);
              default:
                var G__19417 = null;
                if (arguments.length > 3) {
                  var G__19418__i = 0, G__19418__a = new Array(arguments.length - 3);
                  while (G__19418__i < G__19418__a.length) {
                    G__19418__a[G__19418__i] = arguments[G__19418__i + 3];
                    ++G__19418__i;
                  }
                  G__19417 = new cljs.core.IndexedSeq(G__19418__a, 0);
                }
                return cljs$core$some_fn_$_spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19417);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          cljs$core$some_fn_$_spn.cljs$lang$maxFixedArity = 3;
          cljs$core$some_fn_$_spn.cljs$lang$applyTo = cljs$core$some_fn_$_spn__4.cljs$lang$applyTo;
          cljs$core$some_fn_$_spn.cljs$core$IFn$_invoke$arity$0 = cljs$core$some_fn_$_spn__0;
          cljs$core$some_fn_$_spn.cljs$core$IFn$_invoke$arity$1 = cljs$core$some_fn_$_spn__1;
          cljs$core$some_fn_$_spn.cljs$core$IFn$_invoke$arity$2 = cljs$core$some_fn_$_spn__2;
          cljs$core$some_fn_$_spn.cljs$core$IFn$_invoke$arity$3 = cljs$core$some_fn_$_spn__3;
          cljs$core$some_fn_$_spn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$some_fn_$_spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return cljs$core$some_fn_$_spn;
        }();
      }(ps__$1);
    };
    var G__19413 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        var G__19419__i = 0, G__19419__a = new Array(arguments.length - 3);
        while (G__19419__i < G__19419__a.length) {
          G__19419__a[G__19419__i] = arguments[G__19419__i + 3];
          ++G__19419__i;
        }
        ps = new cljs.core.IndexedSeq(G__19419__a, 0);
      }
      return G__19413__delegate.call(this, p1, p2, p3, ps);
    };
    G__19413.cljs$lang$maxFixedArity = 3;
    G__19413.cljs$lang$applyTo = function(arglist__19420) {
      var p1 = cljs.core.first(arglist__19420);
      arglist__19420 = cljs.core.next(arglist__19420);
      var p2 = cljs.core.first(arglist__19420);
      arglist__19420 = cljs.core.next(arglist__19420);
      var p3 = cljs.core.first(arglist__19420);
      var ps = cljs.core.rest(arglist__19420);
      return G__19413__delegate(p1, p2, p3, ps);
    };
    G__19413.cljs$core$IFn$_invoke$arity$variadic = G__19413__delegate;
    return G__19413;
  }();
  cljs$core$some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$some_fn__1.call(this, p1);
      case 2:
        return cljs$core$some_fn__2.call(this, p1, p2);
      case 3:
        return cljs$core$some_fn__3.call(this, p1, p2, p3);
      default:
        var G__19421 = null;
        if (arguments.length > 3) {
          var G__19422__i = 0, G__19422__a = new Array(arguments.length - 3);
          while (G__19422__i < G__19422__a.length) {
            G__19422__a[G__19422__i] = arguments[G__19422__i + 3];
            ++G__19422__i;
          }
          G__19421 = new cljs.core.IndexedSeq(G__19422__a, 0);
        }
        return cljs$core$some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, G__19421);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$some_fn.cljs$lang$maxFixedArity = 3;
  cljs$core$some_fn.cljs$lang$applyTo = cljs$core$some_fn__4.cljs$lang$applyTo;
  cljs$core$some_fn.cljs$core$IFn$_invoke$arity$1 = cljs$core$some_fn__1;
  cljs$core$some_fn.cljs$core$IFn$_invoke$arity$2 = cljs$core$some_fn__2;
  cljs$core$some_fn.cljs$core$IFn$_invoke$arity$3 = cljs$core$some_fn__3;
  cljs$core$some_fn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$some_fn;
}();
cljs.core.map = function() {
  var cljs$core$map = null;
  var cljs$core$map__1 = function(f) {
    return function(rf) {
      return function() {
        var G__19477 = null;
        var G__19477__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__19477__1 = function(result) {
          var G__19463 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19463) : rf.call(null, G__19463);
        };
        var G__19477__2 = function(result, input) {
          var G__19464 = result;
          var G__19465 = function() {
            var G__19466 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19466) : f.call(null, G__19466);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19464, G__19465) : rf.call(null, G__19464, G__19465);
        };
        var G__19477__3 = function() {
          var G__19478__delegate = function(result, input, inputs) {
            var G__19467 = result;
            var G__19468 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19467, G__19468) : rf.call(null, G__19467, G__19468);
          };
          var G__19478 = function(result, input, var_args) {
            var inputs = null;
            if (arguments.length > 2) {
              var G__19479__i = 0, G__19479__a = new Array(arguments.length - 2);
              while (G__19479__i < G__19479__a.length) {
                G__19479__a[G__19479__i] = arguments[G__19479__i + 2];
                ++G__19479__i;
              }
              inputs = new cljs.core.IndexedSeq(G__19479__a, 0);
            }
            return G__19478__delegate.call(this, result, input, inputs);
          };
          G__19478.cljs$lang$maxFixedArity = 2;
          G__19478.cljs$lang$applyTo = function(arglist__19480) {
            var result = cljs.core.first(arglist__19480);
            arglist__19480 = cljs.core.next(arglist__19480);
            var input = cljs.core.first(arglist__19480);
            var inputs = cljs.core.rest(arglist__19480);
            return G__19478__delegate(result, input, inputs);
          };
          G__19478.cljs$core$IFn$_invoke$arity$variadic = G__19478__delegate;
          return G__19478;
        }();
        G__19477 = function(result, input, var_args) {
          var inputs = var_args;
          switch(arguments.length) {
            case 0:
              return G__19477__0.call(this);
            case 1:
              return G__19477__1.call(this, result);
            case 2:
              return G__19477__2.call(this, result, input);
            default:
              var G__19481 = null;
              if (arguments.length > 2) {
                var G__19482__i = 0, G__19482__a = new Array(arguments.length - 2);
                while (G__19482__i < G__19482__a.length) {
                  G__19482__a[G__19482__i] = arguments[G__19482__i + 2];
                  ++G__19482__i;
                }
                G__19481 = new cljs.core.IndexedSeq(G__19482__a, 0);
              }
              return G__19477__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__19481);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__19477.cljs$lang$maxFixedArity = 2;
        G__19477.cljs$lang$applyTo = G__19477__3.cljs$lang$applyTo;
        G__19477.cljs$core$IFn$_invoke$arity$0 = G__19477__0;
        G__19477.cljs$core$IFn$_invoke$arity$1 = G__19477__1;
        G__19477.cljs$core$IFn$_invoke$arity$2 = G__19477__2;
        G__19477.cljs$core$IFn$_invoke$arity$variadic = G__19477__3.cljs$core$IFn$_invoke$arity$variadic;
        return G__19477;
      }();
    };
  };
  var cljs$core$map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__4994__auto___19483 = size;
          var i_19484 = 0;
          while (true) {
            if (i_19484 < n__4994__auto___19483) {
              cljs.core.chunk_append(b, function() {
                var G__19469 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_19484);
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19469) : f.call(null, G__19469);
              }());
              var G__19485 = i_19484 + 1;
              i_19484 = G__19485;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__19470 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19470) : f.call(null, G__19470);
          }(), cljs$core$map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var cljs$core$map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      if (s1 && s2) {
        return cljs.core.cons(function() {
          var G__19471 = cljs.core.first(s1);
          var G__19472 = cljs.core.first(s2);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19471, G__19472) : f.call(null, G__19471, G__19472);
        }(), cljs$core$map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var cljs$core$map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      var s3 = cljs.core.seq(c3);
      if (s1 && s2 && s3) {
        return cljs.core.cons(function() {
          var G__19473 = cljs.core.first(s1);
          var G__19474 = cljs.core.first(s2);
          var G__19475 = cljs.core.first(s3);
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19473, G__19474, G__19475) : f.call(null, G__19473, G__19474, G__19475);
        }(), cljs$core$map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var cljs$core$map__5 = function() {
    var G__19486__delegate = function(f, c1, c2, c3, colls) {
      var step = function cljs$core$map_$_step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = cljs$core$map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
          if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
            return cljs.core.cons(cljs$core$map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs$core$map_$_step(cljs$core$map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return cljs$core$map.cljs$core$IFn$_invoke$arity$2(function(step) {
        return function(p1__19423_SHARP_) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__19423_SHARP_);
        };
      }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
    };
    var G__19486 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        var G__19487__i = 0, G__19487__a = new Array(arguments.length - 4);
        while (G__19487__i < G__19487__a.length) {
          G__19487__a[G__19487__i] = arguments[G__19487__i + 4];
          ++G__19487__i;
        }
        colls = new cljs.core.IndexedSeq(G__19487__a, 0);
      }
      return G__19486__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__19486.cljs$lang$maxFixedArity = 4;
    G__19486.cljs$lang$applyTo = function(arglist__19488) {
      var f = cljs.core.first(arglist__19488);
      arglist__19488 = cljs.core.next(arglist__19488);
      var c1 = cljs.core.first(arglist__19488);
      arglist__19488 = cljs.core.next(arglist__19488);
      var c2 = cljs.core.first(arglist__19488);
      arglist__19488 = cljs.core.next(arglist__19488);
      var c3 = cljs.core.first(arglist__19488);
      var colls = cljs.core.rest(arglist__19488);
      return G__19486__delegate(f, c1, c2, c3, colls);
    };
    G__19486.cljs$core$IFn$_invoke$arity$variadic = G__19486__delegate;
    return G__19486;
  }();
  cljs$core$map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$map__1.call(this, f);
      case 2:
        return cljs$core$map__2.call(this, f, c1);
      case 3:
        return cljs$core$map__3.call(this, f, c1, c2);
      case 4:
        return cljs$core$map__4.call(this, f, c1, c2, c3);
      default:
        var G__19489 = null;
        if (arguments.length > 4) {
          var G__19490__i = 0, G__19490__a = new Array(arguments.length - 4);
          while (G__19490__i < G__19490__a.length) {
            G__19490__a[G__19490__i] = arguments[G__19490__i + 4];
            ++G__19490__i;
          }
          G__19489 = new cljs.core.IndexedSeq(G__19490__a, 0);
        }
        return cljs$core$map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, G__19489);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$map.cljs$lang$maxFixedArity = 4;
  cljs$core$map.cljs$lang$applyTo = cljs$core$map__5.cljs$lang$applyTo;
  cljs$core$map.cljs$core$IFn$_invoke$arity$1 = cljs$core$map__1;
  cljs$core$map.cljs$core$IFn$_invoke$arity$2 = cljs$core$map__2;
  cljs$core$map.cljs$core$IFn$_invoke$arity$3 = cljs$core$map__3;
  cljs$core$map.cljs$core$IFn$_invoke$arity$4 = cljs$core$map__4;
  cljs$core$map.cljs$core$IFn$_invoke$arity$variadic = cljs$core$map__5.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$map;
}();
cljs.core.take = function() {
  var cljs$core$take = null;
  var cljs$core$take__1 = function(n) {
    return function(rf) {
      var na = cljs.core.volatile_BANG_(n);
      return function(na) {
        return function() {
          var G__19499 = null;
          var G__19499__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__19499__1 = function(result) {
            var G__19496 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19496) : rf.call(null, G__19496);
          };
          var G__19499__2 = function(result, input) {
            var n__$1 = cljs.core.deref(na);
            var nn = na.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, na.cljs$core$IDeref$_deref$arity$1(null) - 1);
            var result__$1 = n__$1 > 0 ? function() {
              var G__19497 = result;
              var G__19498 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19497, G__19498) : rf.call(null, G__19497, G__19498);
            }() : result;
            if (!(nn > 0)) {
              return cljs.core.ensure_reduced(result__$1);
            } else {
              return result__$1;
            }
          };
          G__19499 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__19499__0.call(this);
              case 1:
                return G__19499__1.call(this, result);
              case 2:
                return G__19499__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__19499.cljs$core$IFn$_invoke$arity$0 = G__19499__0;
          G__19499.cljs$core$IFn$_invoke$arity$1 = G__19499__1;
          G__19499.cljs$core$IFn$_invoke$arity$2 = G__19499__2;
          return G__19499;
        }();
      }(na);
    };
  };
  var cljs$core$take__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      if (n > 0) {
        var temp__4126__auto__ = cljs.core.seq(coll);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          return cljs.core.cons(cljs.core.first(s), cljs$core$take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$take = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$take__1.call(this, n);
      case 2:
        return cljs$core$take__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$take.cljs$core$IFn$_invoke$arity$1 = cljs$core$take__1;
  cljs$core$take.cljs$core$IFn$_invoke$arity$2 = cljs$core$take__2;
  return cljs$core$take;
}();
cljs.core.drop = function() {
  var cljs$core$drop = null;
  var cljs$core$drop__1 = function(n) {
    return function(rf) {
      var na = cljs.core.volatile_BANG_(n);
      return function(na) {
        return function() {
          var G__19506 = null;
          var G__19506__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__19506__1 = function(result) {
            var G__19503 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19503) : rf.call(null, G__19503);
          };
          var G__19506__2 = function(result, input) {
            var n__$1 = cljs.core.deref(na);
            na.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, na.cljs$core$IDeref$_deref$arity$1(null) - 1);
            if (n__$1 > 0) {
              return result;
            } else {
              var G__19504 = result;
              var G__19505 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19504, G__19505) : rf.call(null, G__19504, G__19505);
            }
          };
          G__19506 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__19506__0.call(this);
              case 1:
                return G__19506__1.call(this, result);
              case 2:
                return G__19506__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__19506.cljs$core$IFn$_invoke$arity$0 = G__19506__0;
          G__19506.cljs$core$IFn$_invoke$arity$1 = G__19506__1;
          G__19506.cljs$core$IFn$_invoke$arity$2 = G__19506__2;
          return G__19506;
        }();
      }(na);
    };
  };
  var cljs$core$drop__2 = function(n, coll) {
    var step = function(n__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq(coll__$1);
        if (n__$1 > 0 && s) {
          var G__19507 = n__$1 - 1;
          var G__19508 = cljs.core.rest(s);
          n__$1 = G__19507;
          coll__$1 = G__19508;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step(n, coll);
      };
    }(step), null, null);
  };
  cljs$core$drop = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$drop__1.call(this, n);
      case 2:
        return cljs$core$drop__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$drop.cljs$core$IFn$_invoke$arity$1 = cljs$core$drop__1;
  cljs$core$drop.cljs$core$IFn$_invoke$arity$2 = cljs$core$drop__2;
  return cljs$core$drop;
}();
cljs.core.drop_last = function() {
  var cljs$core$drop_last = null;
  var cljs$core$drop_last__1 = function(s) {
    return cljs$core$drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
  };
  var cljs$core$drop_last__2 = function(n, s) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
      return x;
    }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
  };
  cljs$core$drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return cljs$core$drop_last__1.call(this, n);
      case 2:
        return cljs$core$drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$drop_last.cljs$core$IFn$_invoke$arity$1 = cljs$core$drop_last__1;
  cljs$core$drop_last.cljs$core$IFn$_invoke$arity$2 = cljs$core$drop_last__2;
  return cljs$core$drop_last;
}();
cljs.core.take_last = function cljs$core$take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__19511 = cljs.core.next(s);
      var G__19512 = cljs.core.next(lead);
      s = G__19511;
      lead = G__19512;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function() {
  var cljs$core$drop_while = null;
  var cljs$core$drop_while__1 = function(pred) {
    return function(rf) {
      var da = cljs.core.volatile_BANG_(true);
      return function(da) {
        return function() {
          var G__19525 = null;
          var G__19525__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__19525__1 = function(result) {
            var G__19519 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19519) : rf.call(null, G__19519);
          };
          var G__19525__2 = function(result, input) {
            var drop_QMARK_ = cljs.core.deref(da);
            if (cljs.core.truth_(function() {
              var and__4097__auto__ = drop_QMARK_;
              if (cljs.core.truth_(and__4097__auto__)) {
                var G__19520 = input;
                return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__19520) : pred.call(null, G__19520);
              } else {
                return and__4097__auto__;
              }
            }())) {
              return result;
            } else {
              cljs.core.vreset_BANG_(da, null);
              var G__19521 = result;
              var G__19522 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19521, G__19522) : rf.call(null, G__19521, G__19522);
            }
          };
          G__19525 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__19525__0.call(this);
              case 1:
                return G__19525__1.call(this, result);
              case 2:
                return G__19525__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__19525.cljs$core$IFn$_invoke$arity$0 = G__19525__0;
          G__19525.cljs$core$IFn$_invoke$arity$1 = G__19525__1;
          G__19525.cljs$core$IFn$_invoke$arity$2 = G__19525__2;
          return G__19525;
        }();
      }(da);
    };
  };
  var cljs$core$drop_while__2 = function(pred, coll) {
    var step = function(pred__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq(coll__$1);
        if (cljs.core.truth_(function() {
          var and__4097__auto__ = s;
          if (and__4097__auto__) {
            var G__19524 = cljs.core.first(s);
            return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__19524) : pred__$1.call(null, G__19524);
          } else {
            return and__4097__auto__;
          }
        }())) {
          var G__19526 = pred__$1;
          var G__19527 = cljs.core.rest(s);
          pred__$1 = G__19526;
          coll__$1 = G__19527;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step(pred, coll);
      };
    }(step), null, null);
  };
  cljs$core$drop_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$drop_while__1.call(this, pred);
      case 2:
        return cljs$core$drop_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$drop_while.cljs$core$IFn$_invoke$arity$1 = cljs$core$drop_while__1;
  cljs$core$drop_while.cljs$core$IFn$_invoke$arity$2 = cljs$core$drop_while__2;
  return cljs$core$drop_while;
}();
cljs.core.cycle = function cljs$core$cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cljs$core$cycle(s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function cljs$core$split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function() {
  var cljs$core$repeat = null;
  var cljs$core$repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(x, cljs$core$repeat.cljs$core$IFn$_invoke$arity$1(x));
    }, null, null);
  };
  var cljs$core$repeat__2 = function(n, x) {
    return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs$core$repeat.cljs$core$IFn$_invoke$arity$1(x));
  };
  cljs$core$repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return cljs$core$repeat__1.call(this, n);
      case 2:
        return cljs$core$repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$repeat.cljs$core$IFn$_invoke$arity$1 = cljs$core$repeat__1;
  cljs$core$repeat.cljs$core$IFn$_invoke$arity$2 = cljs$core$repeat__2;
  return cljs$core$repeat;
}();
cljs.core.replicate = function cljs$core$replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function() {
  var cljs$core$repeatedly = null;
  var cljs$core$repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }(), cljs$core$repeatedly.cljs$core$IFn$_invoke$arity$1(f));
    }, null, null);
  };
  var cljs$core$repeatedly__2 = function(n, f) {
    return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs$core$repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  };
  cljs$core$repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return cljs$core$repeatedly__1.call(this, n);
      case 2:
        return cljs$core$repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$repeatedly.cljs$core$IFn$_invoke$arity$1 = cljs$core$repeatedly__1;
  cljs$core$repeatedly.cljs$core$IFn$_invoke$arity$2 = cljs$core$repeatedly__2;
  return cljs$core$repeatedly;
}();
cljs.core.iterate = function cljs$core$iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    return cljs$core$iterate(f, function() {
      var G__19536 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19536) : f.call(null, G__19536);
    }());
  }, null, null));
};
cljs.core.interleave = function() {
  var cljs$core$interleave = null;
  var cljs$core$interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      if (s1 && s2) {
        return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), cljs$core$interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var cljs$core$interleave__3 = function() {
    var G__19539__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
        if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
          return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs$core$interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__19539 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        var G__19540__i = 0, G__19540__a = new Array(arguments.length - 2);
        while (G__19540__i < G__19540__a.length) {
          G__19540__a[G__19540__i] = arguments[G__19540__i + 2];
          ++G__19540__i;
        }
        colls = new cljs.core.IndexedSeq(G__19540__a, 0);
      }
      return G__19539__delegate.call(this, c1, c2, colls);
    };
    G__19539.cljs$lang$maxFixedArity = 2;
    G__19539.cljs$lang$applyTo = function(arglist__19541) {
      var c1 = cljs.core.first(arglist__19541);
      arglist__19541 = cljs.core.next(arglist__19541);
      var c2 = cljs.core.first(arglist__19541);
      var colls = cljs.core.rest(arglist__19541);
      return G__19539__delegate(c1, c2, colls);
    };
    G__19539.cljs$core$IFn$_invoke$arity$variadic = G__19539__delegate;
    return G__19539;
  }();
  cljs$core$interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$interleave__2.call(this, c1, c2);
      default:
        var G__19542 = null;
        if (arguments.length > 2) {
          var G__19543__i = 0, G__19543__a = new Array(arguments.length - 2);
          while (G__19543__i < G__19543__a.length) {
            G__19543__a[G__19543__i] = arguments[G__19543__i + 2];
            ++G__19543__i;
          }
          G__19542 = new cljs.core.IndexedSeq(G__19543__a, 0);
        }
        return cljs$core$interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, G__19542);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$interleave.cljs$lang$maxFixedArity = 2;
  cljs$core$interleave.cljs$lang$applyTo = cljs$core$interleave__3.cljs$lang$applyTo;
  cljs$core$interleave.cljs$core$IFn$_invoke$arity$2 = cljs$core$interleave__2;
  cljs$core$interleave.cljs$core$IFn$_invoke$arity$variadic = cljs$core$interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$interleave;
}();
cljs.core.interpose = function() {
  var cljs$core$interpose = null;
  var cljs$core$interpose__1 = function(sep) {
    return function(rf) {
      var started = cljs.core.volatile_BANG_(false);
      return function(started) {
        return function() {
          var G__19558 = null;
          var G__19558__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__19558__1 = function(result) {
            var G__19551 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19551) : rf.call(null, G__19551);
          };
          var G__19558__2 = function(result, input) {
            if (cljs.core.truth_(cljs.core.deref(started))) {
              var sepr = function() {
                var G__19552 = result;
                var G__19553 = sep;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19552, G__19553) : rf.call(null, G__19552, G__19553);
              }();
              if (cljs.core.reduced_QMARK_(sepr)) {
                return sepr;
              } else {
                var G__19554 = sepr;
                var G__19555 = input;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19554, G__19555) : rf.call(null, G__19554, G__19555);
              }
            } else {
              cljs.core.vreset_BANG_(started, true);
              var G__19556 = result;
              var G__19557 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19556, G__19557) : rf.call(null, G__19556, G__19557);
            }
          };
          G__19558 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__19558__0.call(this);
              case 1:
                return G__19558__1.call(this, result);
              case 2:
                return G__19558__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__19558.cljs$core$IFn$_invoke$arity$0 = G__19558__0;
          G__19558.cljs$core$IFn$_invoke$arity$1 = G__19558__1;
          G__19558.cljs$core$IFn$_invoke$arity$2 = G__19558__2;
          return G__19558;
        }();
      }(started);
    };
  };
  var cljs$core$interpose__2 = function(sep, coll) {
    return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
  };
  cljs$core$interpose = function(sep, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$interpose__1.call(this, sep);
      case 2:
        return cljs$core$interpose__2.call(this, sep, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$interpose.cljs$core$IFn$_invoke$arity$1 = cljs$core$interpose__1;
  cljs$core$interpose.cljs$core$IFn$_invoke$arity$2 = cljs$core$interpose__2;
  return cljs$core$interpose;
}();
cljs.core.flatten1 = function cljs$core$flatten1(colls) {
  var cat = function cljs$core$flatten1_$_cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq(coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cljs$core$flatten1_$_cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cljs$core$flatten1_$_cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.mapcat = function() {
  var cljs$core$mapcat = null;
  var cljs$core$mapcat__1 = function(f) {
    return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
  };
  var cljs$core$mapcat__2 = function() {
    var G__19567__delegate = function(f, colls) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
    };
    var G__19567 = function(f, var_args) {
      var colls = null;
      if (arguments.length > 1) {
        var G__19568__i = 0, G__19568__a = new Array(arguments.length - 1);
        while (G__19568__i < G__19568__a.length) {
          G__19568__a[G__19568__i] = arguments[G__19568__i + 1];
          ++G__19568__i;
        }
        colls = new cljs.core.IndexedSeq(G__19568__a, 0);
      }
      return G__19567__delegate.call(this, f, colls);
    };
    G__19567.cljs$lang$maxFixedArity = 1;
    G__19567.cljs$lang$applyTo = function(arglist__19569) {
      var f = cljs.core.first(arglist__19569);
      var colls = cljs.core.rest(arglist__19569);
      return G__19567__delegate(f, colls);
    };
    G__19567.cljs$core$IFn$_invoke$arity$variadic = G__19567__delegate;
    return G__19567;
  }();
  cljs$core$mapcat = function(f, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$mapcat__1.call(this, f);
      default:
        var G__19570 = null;
        if (arguments.length > 1) {
          var G__19571__i = 0, G__19571__a = new Array(arguments.length - 1);
          while (G__19571__i < G__19571__a.length) {
            G__19571__a[G__19571__i] = arguments[G__19571__i + 1];
            ++G__19571__i;
          }
          G__19570 = new cljs.core.IndexedSeq(G__19571__a, 0);
        }
        return cljs$core$mapcat__2.cljs$core$IFn$_invoke$arity$variadic(f, G__19570);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$mapcat.cljs$lang$maxFixedArity = 1;
  cljs$core$mapcat.cljs$lang$applyTo = cljs$core$mapcat__2.cljs$lang$applyTo;
  cljs$core$mapcat.cljs$core$IFn$_invoke$arity$1 = cljs$core$mapcat__1;
  cljs$core$mapcat.cljs$core$IFn$_invoke$arity$variadic = cljs$core$mapcat__2.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$mapcat;
}();
cljs.core.filter = function() {
  var cljs$core$filter = null;
  var cljs$core$filter__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__19590 = null;
        var G__19590__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__19590__1 = function(result) {
          var G__19584 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19584) : rf.call(null, G__19584);
        };
        var G__19590__2 = function(result, input) {
          if (cljs.core.truth_(function() {
            var G__19585 = input;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__19585) : pred.call(null, G__19585);
          }())) {
            var G__19586 = result;
            var G__19587 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19586, G__19587) : rf.call(null, G__19586, G__19587);
          } else {
            return result;
          }
        };
        G__19590 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__19590__0.call(this);
            case 1:
              return G__19590__1.call(this, result);
            case 2:
              return G__19590__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__19590.cljs$core$IFn$_invoke$arity$0 = G__19590__0;
        G__19590.cljs$core$IFn$_invoke$arity$1 = G__19590__1;
        G__19590.cljs$core$IFn$_invoke$arity$2 = G__19590__2;
        return G__19590;
      }();
    };
  };
  var cljs$core$filter__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__4994__auto___19591 = size;
          var i_19592 = 0;
          while (true) {
            if (i_19592 < n__4994__auto___19591) {
              if (cljs.core.truth_(function() {
                var G__19588 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_19592);
                return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__19588) : pred.call(null, G__19588);
              }())) {
                cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_19592));
              } else {
              }
              var G__19593 = i_19592 + 1;
              i_19592 = G__19593;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
        } else {
          var f = cljs.core.first(s);
          var r = cljs.core.rest(s);
          if (cljs.core.truth_(function() {
            var G__19589 = f;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__19589) : pred.call(null, G__19589);
          }())) {
            return cljs.core.cons(f, cljs$core$filter.cljs$core$IFn$_invoke$arity$2(pred, r));
          } else {
            return cljs$core$filter.cljs$core$IFn$_invoke$arity$2(pred, r);
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$filter = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$filter__1.call(this, pred);
      case 2:
        return cljs$core$filter__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$filter.cljs$core$IFn$_invoke$arity$1 = cljs$core$filter__1;
  cljs$core$filter.cljs$core$IFn$_invoke$arity$2 = cljs$core$filter__2;
  return cljs$core$filter;
}();
cljs.core.remove = function() {
  var cljs$core$remove = null;
  var cljs$core$remove__1 = function(pred) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
  };
  var cljs$core$remove__2 = function(pred, coll) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
  };
  cljs$core$remove = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$remove__1.call(this, pred);
      case 2:
        return cljs$core$remove__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$remove.cljs$core$IFn$_invoke$arity$1 = cljs$core$remove__1;
  cljs$core$remove.cljs$core$IFn$_invoke$arity$2 = cljs$core$remove__2;
  return cljs$core$remove;
}();
cljs.core.tree_seq = function cljs$core$tree_seq(branch_QMARK_, children, root) {
  var walk = function cljs$core$tree_seq_$_walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(function() {
        var G__19600 = node;
        return branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(G__19600) : branch_QMARK_.call(null, G__19600);
      }()) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs$core$tree_seq_$_walk, cljs.core.array_seq([function() {
        var G__19601 = node;
        return children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(G__19601) : children.call(null, G__19601);
      }()], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function cljs$core$flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__19602_SHARP_) {
    return!cljs.core.sequential_QMARK_(p1__19602_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function() {
  var cljs$core$into = null;
  var cljs$core$into__2 = function(to, from) {
    if (!(to == null)) {
      if (function() {
        var G__19605 = to;
        if (G__19605) {
          var bit__4776__auto__ = G__19605.cljs$lang$protocol_mask$partition1$ & 4;
          if (bit__4776__auto__ || G__19605.cljs$core$IEditableCollection$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
      } else {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
      }
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
    }
  };
  var cljs$core$into__3 = function(to, xform, from) {
    if (function() {
      var G__19606 = to;
      if (G__19606) {
        var bit__4776__auto__ = G__19606.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4776__auto__ || G__19606.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
    }
  };
  cljs$core$into = function(to, xform, from) {
    switch(arguments.length) {
      case 2:
        return cljs$core$into__2.call(this, to, xform);
      case 3:
        return cljs$core$into__3.call(this, to, xform, from);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$into.cljs$core$IFn$_invoke$arity$2 = cljs$core$into__2;
  cljs$core$into.cljs$core$IFn$_invoke$arity$3 = cljs$core$into__3;
  return cljs$core$into;
}();
cljs.core.mapv = function() {
  var cljs$core$mapv = null;
  var cljs$core$mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, function() {
        var G__19608 = o;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19608) : f.call(null, G__19608);
      }());
    }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
  };
  var cljs$core$mapv__3 = function(f, c1, c2) {
    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
  };
  var cljs$core$mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
  };
  var cljs$core$mapv__5 = function() {
    var G__19609__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
    };
    var G__19609 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        var G__19610__i = 0, G__19610__a = new Array(arguments.length - 4);
        while (G__19610__i < G__19610__a.length) {
          G__19610__a[G__19610__i] = arguments[G__19610__i + 4];
          ++G__19610__i;
        }
        colls = new cljs.core.IndexedSeq(G__19610__a, 0);
      }
      return G__19609__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__19609.cljs$lang$maxFixedArity = 4;
    G__19609.cljs$lang$applyTo = function(arglist__19611) {
      var f = cljs.core.first(arglist__19611);
      arglist__19611 = cljs.core.next(arglist__19611);
      var c1 = cljs.core.first(arglist__19611);
      arglist__19611 = cljs.core.next(arglist__19611);
      var c2 = cljs.core.first(arglist__19611);
      arglist__19611 = cljs.core.next(arglist__19611);
      var c3 = cljs.core.first(arglist__19611);
      var colls = cljs.core.rest(arglist__19611);
      return G__19609__delegate(f, c1, c2, c3, colls);
    };
    G__19609.cljs$core$IFn$_invoke$arity$variadic = G__19609__delegate;
    return G__19609;
  }();
  cljs$core$mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$mapv__2.call(this, f, c1);
      case 3:
        return cljs$core$mapv__3.call(this, f, c1, c2);
      case 4:
        return cljs$core$mapv__4.call(this, f, c1, c2, c3);
      default:
        var G__19612 = null;
        if (arguments.length > 4) {
          var G__19613__i = 0, G__19613__a = new Array(arguments.length - 4);
          while (G__19613__i < G__19613__a.length) {
            G__19613__a[G__19613__i] = arguments[G__19613__i + 4];
            ++G__19613__i;
          }
          G__19612 = new cljs.core.IndexedSeq(G__19613__a, 0);
        }
        return cljs$core$mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, G__19612);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$mapv.cljs$lang$maxFixedArity = 4;
  cljs$core$mapv.cljs$lang$applyTo = cljs$core$mapv__5.cljs$lang$applyTo;
  cljs$core$mapv.cljs$core$IFn$_invoke$arity$2 = cljs$core$mapv__2;
  cljs$core$mapv.cljs$core$IFn$_invoke$arity$3 = cljs$core$mapv__3;
  cljs$core$mapv.cljs$core$IFn$_invoke$arity$4 = cljs$core$mapv__4;
  cljs$core$mapv.cljs$core$IFn$_invoke$arity$variadic = cljs$core$mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$mapv;
}();
cljs.core.filterv = function cljs$core$filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(function() {
      var G__19615 = o;
      return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__19615) : pred.call(null, G__19615);
    }())) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var cljs$core$partition = null;
  var cljs$core$partition__2 = function(n, coll) {
    return cljs$core$partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
  };
  var cljs$core$partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
        if (n === cljs.core.count(p)) {
          return cljs.core.cons(p, cljs$core$partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var cljs$core$partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
        if (n === cljs.core.count(p)) {
          return cljs.core.cons(p, cljs$core$partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
        } else {
          return cljs.core._conj(cljs.core.List.EMPTY, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return cljs$core$partition__2.call(this, n, step);
      case 3:
        return cljs$core$partition__3.call(this, n, step, pad);
      case 4:
        return cljs$core$partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$partition.cljs$core$IFn$_invoke$arity$2 = cljs$core$partition__2;
  cljs$core$partition.cljs$core$IFn$_invoke$arity$3 = cljs$core$partition__3;
  cljs$core$partition.cljs$core$IFn$_invoke$arity$4 = cljs$core$partition__4;
  return cljs$core$partition;
}();
cljs.core.get_in = function() {
  var cljs$core$get_in = null;
  var cljs$core$get_in__2 = function(m, ks) {
    return cljs$core$get_in.cljs$core$IFn$_invoke$arity$3(m, ks, null);
  };
  var cljs$core$get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq(ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__19630 = m__$1;
          if (G__19630) {
            var bit__4783__auto__ = G__19630.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4783__auto__ || G__19630.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__19630.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__19630);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__19630);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__19631 = sentinel;
            var G__19632 = m__$2;
            var G__19633 = cljs.core.next(ks__$1);
            sentinel = G__19631;
            m__$1 = G__19632;
            ks__$1 = G__19633;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  cljs$core$get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return cljs$core$get_in__2.call(this, m, ks);
      case 3:
        return cljs$core$get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$get_in.cljs$core$IFn$_invoke$arity$2 = cljs$core$get_in__2;
  cljs$core$get_in.cljs$core$IFn$_invoke$arity$3 = cljs$core$get_in__3;
  return cljs$core$get_in;
}();
cljs.core.assoc_in = function cljs$core$assoc_in(m, p__19634, v) {
  var vec__19639 = p__19634;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19639, 0, null);
  var ks = cljs.core.nthnext(vec__19639, 1);
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$assoc_in(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, v));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function() {
  var cljs$core$update_in = null;
  var cljs$core$update_in__3 = function(m, p__19640, f) {
    var vec__19678 = p__19640;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19678, 0, null);
    var ks = cljs.core.nthnext(vec__19678, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__19679 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19679) : f.call(null, G__19679);
      }());
    }
  };
  var cljs$core$update_in__4 = function(m, p__19641, f, a) {
    var vec__19680 = p__19641;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19680, 0, null);
    var ks = cljs.core.nthnext(vec__19680, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__19681 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__19682 = a;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19681, G__19682) : f.call(null, G__19681, G__19682);
      }());
    }
  };
  var cljs$core$update_in__5 = function(m, p__19642, f, a, b) {
    var vec__19683 = p__19642;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19683, 0, null);
    var ks = cljs.core.nthnext(vec__19683, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__19684 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__19685 = a;
        var G__19686 = b;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19684, G__19685, G__19686) : f.call(null, G__19684, G__19685, G__19686);
      }());
    }
  };
  var cljs$core$update_in__6 = function(m, p__19643, f, a, b, c) {
    var vec__19687 = p__19643;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19687, 0, null);
    var ks = cljs.core.nthnext(vec__19687, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__19688 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__19689 = a;
        var G__19690 = b;
        var G__19691 = c;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__19688, G__19689, G__19690, G__19691) : f.call(null, G__19688, G__19689, G__19690, G__19691);
      }());
    }
  };
  var cljs$core$update_in__7 = function() {
    var G__19693__delegate = function(m, p__19644, f, a, b, c, args) {
      var vec__19692 = p__19644;
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19692, 0, null);
      var ks = cljs.core.nthnext(vec__19692, 1);
      if (ks) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs$core$update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
      }
    };
    var G__19693 = function(m, p__19644, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        var G__19694__i = 0, G__19694__a = new Array(arguments.length - 6);
        while (G__19694__i < G__19694__a.length) {
          G__19694__a[G__19694__i] = arguments[G__19694__i + 6];
          ++G__19694__i;
        }
        args = new cljs.core.IndexedSeq(G__19694__a, 0);
      }
      return G__19693__delegate.call(this, m, p__19644, f, a, b, c, args);
    };
    G__19693.cljs$lang$maxFixedArity = 6;
    G__19693.cljs$lang$applyTo = function(arglist__19695) {
      var m = cljs.core.first(arglist__19695);
      arglist__19695 = cljs.core.next(arglist__19695);
      var p__19644 = cljs.core.first(arglist__19695);
      arglist__19695 = cljs.core.next(arglist__19695);
      var f = cljs.core.first(arglist__19695);
      arglist__19695 = cljs.core.next(arglist__19695);
      var a = cljs.core.first(arglist__19695);
      arglist__19695 = cljs.core.next(arglist__19695);
      var b = cljs.core.first(arglist__19695);
      arglist__19695 = cljs.core.next(arglist__19695);
      var c = cljs.core.first(arglist__19695);
      var args = cljs.core.rest(arglist__19695);
      return G__19693__delegate(m, p__19644, f, a, b, c, args);
    };
    G__19693.cljs$core$IFn$_invoke$arity$variadic = G__19693__delegate;
    return G__19693;
  }();
  cljs$core$update_in = function(m, p__19644, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return cljs$core$update_in__3.call(this, m, p__19644, f);
      case 4:
        return cljs$core$update_in__4.call(this, m, p__19644, f, a);
      case 5:
        return cljs$core$update_in__5.call(this, m, p__19644, f, a, b);
      case 6:
        return cljs$core$update_in__6.call(this, m, p__19644, f, a, b, c);
      default:
        var G__19696 = null;
        if (arguments.length > 6) {
          var G__19697__i = 0, G__19697__a = new Array(arguments.length - 6);
          while (G__19697__i < G__19697__a.length) {
            G__19697__a[G__19697__i] = arguments[G__19697__i + 6];
            ++G__19697__i;
          }
          G__19696 = new cljs.core.IndexedSeq(G__19697__a, 0);
        }
        return cljs$core$update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__19644, f, a, b, c, G__19696);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$update_in.cljs$lang$maxFixedArity = 6;
  cljs$core$update_in.cljs$lang$applyTo = cljs$core$update_in__7.cljs$lang$applyTo;
  cljs$core$update_in.cljs$core$IFn$_invoke$arity$3 = cljs$core$update_in__3;
  cljs$core$update_in.cljs$core$IFn$_invoke$arity$4 = cljs$core$update_in__4;
  cljs$core$update_in.cljs$core$IFn$_invoke$arity$5 = cljs$core$update_in__5;
  cljs$core$update_in.cljs$core$IFn$_invoke$arity$6 = cljs$core$update_in__6;
  cljs$core$update_in.cljs$core$IFn$_invoke$arity$variadic = cljs$core$update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$update_in;
}();
cljs.core.update = function() {
  var cljs$core$update = null;
  var cljs$core$update__3 = function(m, k, f) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__19708 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19708) : f.call(null, G__19708);
    }());
  };
  var cljs$core$update__4 = function(m, k, f, x) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__19709 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__19710 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19709, G__19710) : f.call(null, G__19709, G__19710);
    }());
  };
  var cljs$core$update__5 = function(m, k, f, x, y) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__19711 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__19712 = x;
      var G__19713 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19711, G__19712, G__19713) : f.call(null, G__19711, G__19712, G__19713);
    }());
  };
  var cljs$core$update__6 = function(m, k, f, x, y, z) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__19714 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__19715 = x;
      var G__19716 = y;
      var G__19717 = z;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__19714, G__19715, G__19716, G__19717) : f.call(null, G__19714, G__19715, G__19716, G__19717);
    }());
  };
  var cljs$core$update__7 = function() {
    var G__19718__delegate = function(m, k, f, x, y, z, more) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
    };
    var G__19718 = function(m, k, f, x, y, z, var_args) {
      var more = null;
      if (arguments.length > 6) {
        var G__19719__i = 0, G__19719__a = new Array(arguments.length - 6);
        while (G__19719__i < G__19719__a.length) {
          G__19719__a[G__19719__i] = arguments[G__19719__i + 6];
          ++G__19719__i;
        }
        more = new cljs.core.IndexedSeq(G__19719__a, 0);
      }
      return G__19718__delegate.call(this, m, k, f, x, y, z, more);
    };
    G__19718.cljs$lang$maxFixedArity = 6;
    G__19718.cljs$lang$applyTo = function(arglist__19720) {
      var m = cljs.core.first(arglist__19720);
      arglist__19720 = cljs.core.next(arglist__19720);
      var k = cljs.core.first(arglist__19720);
      arglist__19720 = cljs.core.next(arglist__19720);
      var f = cljs.core.first(arglist__19720);
      arglist__19720 = cljs.core.next(arglist__19720);
      var x = cljs.core.first(arglist__19720);
      arglist__19720 = cljs.core.next(arglist__19720);
      var y = cljs.core.first(arglist__19720);
      arglist__19720 = cljs.core.next(arglist__19720);
      var z = cljs.core.first(arglist__19720);
      var more = cljs.core.rest(arglist__19720);
      return G__19718__delegate(m, k, f, x, y, z, more);
    };
    G__19718.cljs$core$IFn$_invoke$arity$variadic = G__19718__delegate;
    return G__19718;
  }();
  cljs$core$update = function(m, k, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 3:
        return cljs$core$update__3.call(this, m, k, f);
      case 4:
        return cljs$core$update__4.call(this, m, k, f, x);
      case 5:
        return cljs$core$update__5.call(this, m, k, f, x, y);
      case 6:
        return cljs$core$update__6.call(this, m, k, f, x, y, z);
      default:
        var G__19721 = null;
        if (arguments.length > 6) {
          var G__19722__i = 0, G__19722__a = new Array(arguments.length - 6);
          while (G__19722__i < G__19722__a.length) {
            G__19722__a[G__19722__i] = arguments[G__19722__i + 6];
            ++G__19722__i;
          }
          G__19721 = new cljs.core.IndexedSeq(G__19722__a, 0);
        }
        return cljs$core$update__7.cljs$core$IFn$_invoke$arity$variadic(m, k, f, x, y, z, G__19721);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$update.cljs$lang$maxFixedArity = 6;
  cljs$core$update.cljs$lang$applyTo = cljs$core$update__7.cljs$lang$applyTo;
  cljs$core$update.cljs$core$IFn$_invoke$arity$3 = cljs$core$update__3;
  cljs$core$update.cljs$core$IFn$_invoke$arity$4 = cljs$core$update__4;
  cljs$core$update.cljs$core$IFn$_invoke$arity$5 = cljs$core$update__5;
  cljs$core$update.cljs$core$IFn$_invoke$arity$6 = cljs$core$update__6;
  cljs$core$update.cljs$core$IFn$_invoke$arity$variadic = cljs$core$update__7.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$update;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function cljs$core$__GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function cljs$core$pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function cljs$core$pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function cljs$core$pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function cljs$core$pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function cljs$core$tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function cljs$core$new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__19723 = ll - 5;
      var G__19724 = r;
      ll = G__19723;
      ret = G__19724;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function cljs$core$push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = cljs$core$push_tail(pv, level - 5, child, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function cljs$core$vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function cljs$core$first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__19729 = cljs.core.pv_aget(node, 0);
      var G__19730 = level - 5;
      node = G__19729;
      level = G__19730;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function cljs$core$unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__19731 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__19732 = level - 5;
        node = G__19731;
        level = G__19732;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function cljs$core$array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function cljs$core$do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, cljs$core$do_assoc(pv, level - 5, cljs.core.pv_aget(node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function cljs$core$pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$pop_tail(pv, level - 5, cljs.core.pv_aget(node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function cljs$core$__GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function cljs$core$ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__19742 = init__$2;
              var G__19743 = j + i;
              var G__19744 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19742, G__19743, G__19744) : f.call(null, G__19742, G__19743, G__19744);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__19755 = j + 1;
              var G__19756 = init__$3;
              j = G__19755;
              init__$2 = G__19756;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__19745 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19745) : cljs.core.deref.call(null, G__19745);
      } else {
        var G__19757 = i + len;
        var G__19758 = init__$2;
        i = G__19757;
        init__$1 = G__19758;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj(coll__$1, val);
    } else {
      throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4525__auto__ = self__.__hash;
  if (!(h__4525__auto__ == null)) {
    return h__4525__auto__;
  } else {
    var h__4525__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4525__auto____$1;
    return h__4525__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = cljs.core._iterator(coll__$1);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, function() {
    var G__19746 = self__.root;
    return cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(G__19746) : cljs.core.tv_editable_root.call(null, G__19746);
  }(), function() {
    var G__19747 = self__.tail;
    return cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(G__19747) : cljs.core.tv_editable_tail.call(null, G__19747);
  }());
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__19748 = init__$2;
              var G__19749 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19748, G__19749) : f.call(null, G__19748, G__19749);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__19759 = j + 1;
              var G__19760 = init__$3;
              j = G__19759;
              init__$2 = G__19760;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__19750 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19750) : cljs.core.deref.call(null, G__19750);
      } else {
        var G__19761 = i + len;
        var G__19762 = init__$2;
        i = G__19761;
        init__$1 = G__19762;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n(coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      var G__19751 = coll__$1;
      var G__19752 = cljs.core.first_array_for_longvec(coll__$1);
      var G__19753 = 0;
      var G__19754 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__19751, G__19752, G__19753, G__19754) : cljs.core.chunked_seq.call(null, G__19751, G__19752, G__19753, G__19754);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4994__auto___19763 = len;
    var i_19764 = 0;
    while (true) {
      if (i_19764 < n__4994__auto___19763) {
        new_tail[i_19764] = self__.tail[i_19764];
        var G__19765 = i_19764 + 1;
        i_19764 = G__19765;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__19766 = null;
  var G__19766__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__19766__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__19766 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19766__2.call(this, self__, k);
      case 3:
        return G__19766__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19766.cljs$core$IFn$_invoke$arity$2 = G__19766__2;
  G__19766.cljs$core$IFn$_invoke$arity$3 = G__19766__3;
  return G__19766;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args19741) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19741)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function cljs$core$__GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__19767 = i + 1;
        var G__19768 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__19767;
        out = G__19768;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.vec = function cljs$core$vec(coll) {
  if (cljs.core.array_QMARK_(coll)) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function() {
  var cljs$core$vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray(args.arr, true);
    } else {
      return cljs.core.vec(args);
    }
  };
  var cljs$core$vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      var G__19769__i = 0, G__19769__a = new Array(arguments.length - 0);
      while (G__19769__i < G__19769__a.length) {
        G__19769__a[G__19769__i] = arguments[G__19769__i + 0];
        ++G__19769__i;
      }
      args = new cljs.core.IndexedSeq(G__19769__a, 0);
    }
    return cljs$core$vector__delegate.call(this, args);
  };
  cljs$core$vector.cljs$lang$maxFixedArity = 0;
  cljs$core$vector.cljs$lang$applyTo = function(arglist__19770) {
    var args = cljs.core.seq(arglist__19770);
    return cljs$core$vector__delegate(args);
  };
  cljs$core$vector.cljs$core$IFn$_invoke$arity$variadic = cljs$core$vector__delegate;
  return cljs$core$vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__19771 = self__.vec;
      var G__19772 = self__.node;
      var G__19773 = self__.i;
      var G__19774 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__19771, G__19772, G__19773, G__19774) : cljs.core.chunked_seq.call(null, G__19771, G__19772, G__19773, G__19774);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4525__auto__ = self__.__hash;
  if (!(h__4525__auto__ == null)) {
    return h__4525__auto__;
  } else {
    var h__4525__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4525__auto____$1;
    return h__4525__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__19775 = self__.vec;
    var G__19776 = self__.i + self__.off;
    var G__19777 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__19775, G__19776, G__19777) : cljs.core.subvec.call(null, G__19775, G__19776, G__19777);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__19778 = self__.vec;
    var G__19779 = self__.i + self__.off;
    var G__19780 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__19778, G__19779, G__19780) : cljs.core.subvec.call(null, G__19778, G__19779, G__19780);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__19781 = self__.vec;
      var G__19782 = self__.node;
      var G__19783 = self__.i;
      var G__19784 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__19781, G__19782, G__19783, G__19784) : cljs.core.chunked_seq.call(null, G__19781, G__19782, G__19783, G__19784);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__19785 = self__.vec;
    var G__19786 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__19787 = end;
    var G__19788 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__19785, G__19786, G__19787, G__19788) : cljs.core.chunked_seq.call(null, G__19785, G__19786, G__19787, G__19788);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  var G__19789 = self__.vec;
  var G__19790 = self__.node;
  var G__19791 = self__.i;
  var G__19792 = self__.off;
  var G__19793 = m;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(G__19789, G__19790, G__19791, G__19792, G__19793) : cljs.core.chunked_seq.call(null, G__19789, G__19790, G__19791, G__19792, G__19793);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__19794 = self__.vec;
    var G__19795 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__19796 = end;
    var G__19797 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__19794, G__19795, G__19796, G__19797) : cljs.core.chunked_seq.call(null, G__19794, G__19795, G__19796, G__19797);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function cljs$core$__GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.chunked_seq = function() {
  var cljs$core$chunked_seq = null;
  var cljs$core$chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
  };
  var cljs$core$chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var cljs$core$chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  cljs$core$chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return cljs$core$chunked_seq__3.call(this, vec, node, i);
      case 4:
        return cljs$core$chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return cljs$core$chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$chunked_seq.cljs$core$IFn$_invoke$arity$3 = cljs$core$chunked_seq__3;
  cljs$core$chunked_seq.cljs$core$IFn$_invoke$arity$4 = cljs$core$chunked_seq__4;
  cljs$core$chunked_seq.cljs$core$IFn$_invoke$arity$5 = cljs$core$chunked_seq__5;
  return cljs$core$chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167666463;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var i = self__.start;
  var j = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.end) {
      var init__$2 = function() {
        var G__19799 = init__$1;
        var G__19800 = j;
        var G__19801 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19799, G__19800, G__19801) : f.call(null, G__19799, G__19800, G__19801);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__19802 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19802) : cljs.core.deref.call(null, G__19802);
      } else {
        var G__19824 = i + 1;
        var G__19825 = j + 1;
        var G__19826 = init__$2;
        i = G__19824;
        j = G__19825;
        init__$1 = G__19826;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  var G__19803 = self__.meta;
  var G__19804 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
  var G__19805 = self__.start;
  var G__19806 = function() {
    var x__4421__auto__ = self__.end;
    var y__4422__auto__ = v_pos + 1;
    return x__4421__auto__ > y__4422__auto__ ? x__4421__auto__ : y__4422__auto__;
  }();
  var G__19807 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__19803, G__19804, G__19805, G__19806, G__19807) : cljs.core.build_subvec.call(null, G__19803, G__19804, G__19805, G__19806, G__19807);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__19808 = self__.meta;
    var G__19809 = self__.v;
    var G__19810 = self__.start;
    var G__19811 = self__.end - 1;
    var G__19812 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__19808, G__19809, G__19810, G__19811, G__19812) : cljs.core.build_subvec.call(null, G__19808, G__19809, G__19810, G__19811, G__19812);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4525__auto__ = self__.__hash;
  if (!(h__4525__auto__ == null)) {
    return h__4525__auto__;
  } else {
    var h__4525__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4525__auto____$1;
    return h__4525__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n(coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function cljs$core$subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return cljs$core$subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  var G__19814 = meta__$1;
  var G__19815 = self__.v;
  var G__19816 = self__.start;
  var G__19817 = self__.end;
  var G__19818 = self__.__hash;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__19814, G__19815, G__19816, G__19817, G__19818) : cljs.core.build_subvec.call(null, G__19814, G__19815, G__19816, G__19817, G__19818);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__19819 = self__.meta;
  var G__19820 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__19821 = self__.start;
  var G__19822 = self__.end + 1;
  var G__19823 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__19819, G__19820, G__19821, G__19822, G__19823) : cljs.core.build_subvec.call(null, G__19819, G__19820, G__19821, G__19822, G__19823);
};
cljs.core.Subvec.prototype.call = function() {
  var G__19827 = null;
  var G__19827__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__19827__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__19827 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19827__2.call(this, self__, k);
      case 3:
        return G__19827__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19827.cljs$core$IFn$_invoke$arity$2 = G__19827__2;
  G__19827.cljs$core$IFn$_invoke$arity$3 = G__19827__3;
  return G__19827;
}();
cljs.core.Subvec.prototype.apply = function(self__, args19798) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19798)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function cljs$core$__GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.build_subvec = function cljs$core$build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__19828 = meta;
      var G__19829 = v.v;
      var G__19830 = v.start + start;
      var G__19831 = v.start + end;
      var G__19832 = __hash;
      meta = G__19828;
      v = G__19829;
      start = G__19830;
      end = G__19831;
      __hash = G__19832;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var cljs$core$subvec = null;
  var cljs$core$subvec__2 = function(v, start) {
    return cljs$core$subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
  };
  var cljs$core$subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec(null, v, start, end, null);
  };
  cljs$core$subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return cljs$core$subvec__2.call(this, v, start);
      case 3:
        return cljs$core$subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$subvec.cljs$core$IFn$_invoke$arity$2 = cljs$core$subvec__2;
  cljs$core$subvec.cljs$core$IFn$_invoke$arity$3 = cljs$core$subvec__3;
  return cljs$core$subvec;
}();
cljs.core.tv_ensure_editable = function cljs$core$tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function cljs$core$tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj19839 = {};
    return obj19839;
  }(), cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function cljs$core$tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function cljs$core$tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      return cljs$core$tv_push_tail(tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function cljs$core$tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$tv_pop_tail(tv, level - 5, cljs.core.pv_aget(node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function cljs$core$unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__19847 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__19848 = level - 5;
        node = G__19847;
        level = G__19848;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.prototype.call = function() {
  var G__19852 = null;
  var G__19852__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__19852__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__19852 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19852__2.call(this, self__, k);
      case 3:
        return G__19852__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19852.cljs$core$IFn$_invoke$arity$2 = G__19852__2;
  G__19852.cljs$core$IFn$_invoke$arity$3 = G__19852__3;
  return G__19852;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args19849) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19849)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function cljs$core$go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, cljs$core$go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_(tcoll__$1, val);
      } else {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_(tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function cljs$core$__GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4525__auto__ = self__.__hash;
  if (!(h__4525__auto__ == null)) {
    return h__4525__auto__;
  } else {
    var h__4525__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4525__auto____$1;
    return h__4525__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next(self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty(coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function cljs$core$__GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next(self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4525__auto__ = self__.__hash;
  if (!(h__4525__auto__ == null)) {
    return h__4525__auto__;
  } else {
    var h__4525__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4525__auto____$1;
    return h__4525__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__4109__auto__ = self__.front;
    if (cljs.core.truth_(or__4109__auto__)) {
      return or__4109__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__4109__auto__ = self__.rear;
      if (cljs.core.truth_(or__4109__auto__)) {
        return or__4109__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function cljs$core$__GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function cljs$core$__GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function cljs$core$equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(cljs.core.identity, cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function cljs$core$scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__19853 = i + incr;
        i = G__19853;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function cljs$core$obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function cljs$core$obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__19854 = i + 1;
      var G__19855 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__19854;
      out = G__19855;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function cljs$core$obj_clone(obj, ks) {
  var new_obj = function() {
    var obj19859 = {};
    return obj19859;
  }();
  var l = ks.length;
  var i_19860 = 0;
  while (true) {
    if (i_19860 < l) {
      var k_19861 = ks[i_19860];
      new_obj[k_19861] = obj[k_19861];
      var G__19862 = i_19860 + 1;
      i_19860 = G__19862;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4097__auto__ = function() {
      var G__19866 = k;
      return goog.isString(G__19866);
    }();
    if (cljs.core.truth_(and__4097__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4097__auto__;
    }
  }())) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__19867 = init__$1;
        var G__19868 = k;
        var G__19869 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19867, G__19868, G__19869) : f.call(null, G__19867, G__19868, G__19869);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__19870 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19870) : cljs.core.deref.call(null, G__19870);
      } else {
        var G__19876 = cljs.core.rest(keys__$1);
        var G__19877 = init__$2;
        keys__$1 = G__19876;
        init__$1 = G__19877;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4525__auto__ = self__.__hash;
  if (!(h__4525__auto__ == null)) {
    return h__4525__auto__;
  } else {
    var h__4525__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4525__auto____$1;
    return h__4525__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4097__auto__ = function() {
      var G__19872 = k;
      return goog.isString(G__19872);
    }();
    if (cljs.core.truth_(and__4097__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4097__auto__;
    }
  }())) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var G__19873 = k;
    return goog.isString(G__19873);
  }())) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4097__auto__ = function() {
      var G__19875 = k;
      return goog.isString(G__19875);
    }();
    if (cljs.core.truth_(and__4097__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4097__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__19863_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__19863_SHARP_, self__.strobj[p1__19863_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__19878 = null;
  var G__19878__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__19878__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__19878 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19878__2.call(this, self__, k);
      case 3:
        return G__19878__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19878.cljs$core$IFn$_invoke$arity$2 = G__19878__2;
  G__19878.cljs$core$IFn$_invoke$arity$3 = G__19878__3;
  return G__19878;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args19864) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19864)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function cljs$core$__GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj19880 = {};
  return obj19880;
}(), 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__19881 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19881, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19881, 1, null);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function cljs$core$__GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function cljs$core$es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function cljs$core$__GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function cljs$core$es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_map_index_of_nil_QMARK_ = function cljs$core$array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__19882 = i + 2;
        i = G__19882;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function cljs$core$array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__19883 = i + 2;
        i = G__19883;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function cljs$core$array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__19884 = i + 2;
        i = G__19884;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function cljs$core$array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__19885 = i + 2;
        i = G__19885;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function cljs$core$array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__19886 = i + 2;
        i = G__19886;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function cljs$core$array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_(arr, m, k);
  } else {
    if (cljs.core.truth_(function() {
      var or__4109__auto__ = function() {
        var G__19890 = k;
        return goog.isString(G__19890);
      }();
      if (cljs.core.truth_(or__4109__auto__)) {
        return or__4109__auto__;
      } else {
        return typeof k === "number";
      }
    }())) {
      return cljs.core.array_map_index_of_identical_QMARK_(arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_(arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_(arr, m, k);
        } else {
          return cljs.core.array_map_index_of_equiv_QMARK_(arr, m, k);
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function cljs$core$array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_19891 = 0;
  while (true) {
    if (i_19891 < l) {
      narr[i_19891] = arr[i_19891];
      var G__19892 = i_19891 + 1;
      i_19891 = G__19892;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function cljs$core$__GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.persistent_array_map_seq = function cljs$core$persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function cljs$core$__GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__19894 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__19894) : cljs.core.keys.call(null, G__19894);
  }());
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__19895 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__19895) : cljs.core.vals.call(null, G__19895);
  }());
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__19896 = cljs.core.seq(coll);
  var chunk__19897 = null;
  var count__19898 = 0;
  var i__19899 = 0;
  while (true) {
    if (i__19899 < count__19898) {
      var vec__19900 = chunk__19897.cljs$core$IIndexed$_nth$arity$2(null, i__19899);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19900, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19900, 1, null);
      var G__19901_19914 = v;
      var G__19902_19915 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19901_19914, G__19902_19915) : f.call(null, G__19901_19914, G__19902_19915);
      var G__19916 = seq__19896;
      var G__19917 = chunk__19897;
      var G__19918 = count__19898;
      var G__19919 = i__19899 + 1;
      seq__19896 = G__19916;
      chunk__19897 = G__19917;
      count__19898 = G__19918;
      i__19899 = G__19919;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__19896);
      if (temp__4126__auto__) {
        var seq__19896__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__19896__$1)) {
          var c__4894__auto__ = cljs.core.chunk_first(seq__19896__$1);
          var G__19920 = cljs.core.chunk_rest(seq__19896__$1);
          var G__19921 = c__4894__auto__;
          var G__19922 = cljs.core.count(c__4894__auto__);
          var G__19923 = 0;
          seq__19896 = G__19920;
          chunk__19897 = G__19921;
          count__19898 = G__19922;
          i__19899 = G__19923;
          continue;
        } else {
          var vec__19903 = cljs.core.first(seq__19896__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19903, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19903, 1, null);
          var G__19904_19924 = v;
          var G__19905_19925 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19904_19924, G__19905_19925) : f.call(null, G__19904_19924, G__19905_19925);
          var G__19926 = cljs.core.next(seq__19896__$1);
          var G__19927 = null;
          var G__19928 = 0;
          var G__19929 = 0;
          seq__19896 = G__19926;
          chunk__19897 = G__19927;
          count__19898 = G__19928;
          i__19899 = G__19929;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__19906 = init__$1;
        var G__19907 = self__.arr[i];
        var G__19908 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19906, G__19907, G__19908) : f.call(null, G__19906, G__19907, G__19908);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__19909 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19909) : cljs.core.deref.call(null, G__19909);
      } else {
        var G__19930 = i + 2;
        var G__19931 = init__$2;
        i = G__19930;
        init__$1 = G__19931;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4525__auto__ = self__.__hash;
  if (!(h__4525__auto__ == null)) {
    return h__4525__auto__;
  } else {
    var h__4525__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4525__auto____$1;
    return h__4525__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__19910 = other;
    if (G__19910) {
      var bit__4776__auto__ = G__19910.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4776__auto__ || G__19910.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__19932 = i + 2;
              i = G__19932;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj19912 = {};
    return obj19912;
  }(), self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty(coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__19933 = s + 2;
            var G__19934 = d;
            s = G__19933;
            d = G__19934;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__19935 = s + 2;
            var G__19936 = d + 2;
            s = G__19935;
            d = G__19936;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__19913 = cljs.core.aclone(self__.arr);
        G__19913[idx + 1] = v;
        return G__19913;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__19937 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__19938 = cljs.core.next(es);
          ret = G__19937;
          es = G__19938;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__19939 = null;
  var G__19939__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__19939__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__19939 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19939__2.call(this, self__, k);
      case 3:
        return G__19939__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19939.cljs$core$IFn$_invoke$arity$2 = G__19939__2;
  G__19939.cljs$core$IFn$_invoke$arity$3 = G__19939__3;
  return G__19939;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args19893) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19893)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function cljs$core$__GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__19940 = i + 2;
        var G__19941 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
        i = G__19940;
        ret = G__19941;
        continue;
      } else {
        return cljs.core._persistent_BANG_(ret);
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__19942_19950 = self__.arr;
      G__19942_19950.pop();
      G__19942_19950.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(function() {
          var G__19943 = self__.len;
          var G__19944 = self__.arr;
          return cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(G__19943, G__19944) : cljs.core.array__GT_transient_hash_map.call(null, G__19943, G__19944);
        }(), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__19945 = o;
      if (G__19945) {
        var bit__4783__auto__ = G__19945.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4783__auto__ || G__19945.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__19945.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__19945);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__19945);
      }
    }()) {
      return cljs.core._assoc_BANG_(tcoll__$1, function() {
        var G__19946 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__19946) : cljs.core.key.call(null, G__19946);
      }(), function() {
        var G__19947 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__19947) : cljs.core.val.call(null, G__19947);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__19951 = cljs.core.next(es);
          var G__19952 = cljs.core._assoc_BANG_(tcoll__$2, function() {
            var G__19948 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__19948) : cljs.core.key.call(null, G__19948);
          }(), function() {
            var G__19949 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__19949) : cljs.core.val.call(null, G__19949);
          }());
          es = G__19951;
          tcoll__$2 = G__19952;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function cljs$core$__GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function cljs$core$array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__19953 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__19954 = i + 2;
      out = G__19953;
      i = G__19954;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function cljs$core$__GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function cljs$core$key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function cljs$core$mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var cljs$core$clone_and_set = null;
  var cljs$core$clone_and_set__3 = function(arr, i, a) {
    var G__19957 = cljs.core.aclone(arr);
    G__19957[i] = a;
    return G__19957;
  };
  var cljs$core$clone_and_set__5 = function(arr, i, a, j, b) {
    var G__19958 = cljs.core.aclone(arr);
    G__19958[i] = a;
    G__19958[j] = b;
    return G__19958;
  };
  cljs$core$clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return cljs$core$clone_and_set__3.call(this, arr, i, a);
      case 5:
        return cljs$core$clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$clone_and_set.cljs$core$IFn$_invoke$arity$3 = cljs$core$clone_and_set__3;
  cljs$core$clone_and_set.cljs$core$IFn$_invoke$arity$5 = cljs$core$clone_and_set__5;
  return cljs$core$clone_and_set;
}();
cljs.core.remove_pair = function cljs$core$remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function cljs$core$bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function cljs$core$bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var cljs$core$edit_and_set = null;
  var cljs$core$edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var cljs$core$edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  cljs$core$edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return cljs$core$edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return cljs$core$edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$edit_and_set.cljs$core$IFn$_invoke$arity$4 = cljs$core$edit_and_set__4;
  cljs$core$edit_and_set.cljs$core$IFn$_invoke$arity$6 = cljs$core$edit_and_set__6;
  return cljs$core$edit_and_set;
}();
cljs.core.inode_kv_reduce = function cljs$core$inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__19963 = init__$1;
          var G__19964 = k;
          var G__19965 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19963, G__19964, G__19965) : f.call(null, G__19963, G__19964, G__19965);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__19966 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19966) : cljs.core.deref.call(null, G__19966);
      } else {
        var G__19967 = i + 2;
        var G__19968 = init__$2;
        i = G__19967;
        init__$1 = G__19968;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__19969 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__19969) : cljs.core.create_inode_seq.call(null, G__19969);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_19983 = 0;
        var j_19984 = 0;
        while (true) {
          if (i_19983 < 32) {
            if ((self__.bitmap >>> i_19983 & 1) === 0) {
              var G__19985 = i_19983 + 1;
              var G__19986 = j_19984;
              i_19983 = G__19985;
              j_19984 = G__19986;
              continue;
            } else {
              nodes[i_19983] = !(self__.arr[j_19984] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_19984]), self__.arr[j_19984], self__.arr[j_19984 + 1], added_leaf_QMARK_) : self__.arr[j_19984 + 1];
              var G__19987 = i_19983 + 1;
              var G__19988 = j_19984 + 2;
              i_19983 = G__19987;
              j_19984 = G__19988;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__19970 = edit__$1;
          var G__19971 = shift + 5;
          var G__19972 = key_or_nil;
          var G__19973 = val_or_node;
          var G__19974 = hash;
          var G__19975 = key;
          var G__19976 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__19970, G__19971, G__19972, G__19973, G__19974, G__19975, G__19976) : cljs.core.create_node.call(null, G__19970, G__19971, G__19972, G__19973, G__19974, G__19975, G__19976);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_19989 = 0;
      var j_19990 = 0;
      while (true) {
        if (i_19989 < 32) {
          if ((self__.bitmap >>> i_19989 & 1) === 0) {
            var G__19991 = i_19989 + 1;
            var G__19992 = j_19990;
            i_19989 = G__19991;
            j_19990 = G__19992;
            continue;
          } else {
            nodes[i_19989] = !(self__.arr[j_19990] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_19990]), self__.arr[j_19990], self__.arr[j_19990 + 1], added_leaf_QMARK_) : self__.arr[j_19990 + 1];
            var G__19993 = i_19989 + 1;
            var G__19994 = j_19990 + 2;
            i_19989 = G__19993;
            j_19990 = G__19994;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__19977 = shift + 5;
          var G__19978 = key_or_nil;
          var G__19979 = val_or_node;
          var G__19980 = hash;
          var G__19981 = key;
          var G__19982 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__19977, G__19978, G__19979, G__19980, G__19981, G__19982) : cljs.core.create_node.call(null, G__19977, G__19978, G__19979, G__19980, G__19981, G__19982);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function cljs$core$__GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function cljs$core$pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__19995 = i + 1;
        var G__19996 = j + 2;
        var G__19997 = bitmap | 1 << i;
        i = G__19995;
        j = G__19996;
        bitmap = G__19997;
        continue;
      } else {
        var G__19998 = i + 1;
        var G__19999 = j;
        var G__20000 = bitmap;
        i = G__19998;
        j = G__19999;
        bitmap = G__20000;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__20001 = self__.arr;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(G__20001) : cljs.core.create_array_node_seq.call(null, G__20001);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          var G__20002 = init__$2;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20002) : cljs.core.deref.call(null, G__20002);
        } else {
          var G__20003 = i + 1;
          var G__20004 = init__$2;
          i = G__20003;
          init__$1 = G__20004;
          continue;
        }
      } else {
        var G__20005 = i + 1;
        var G__20006 = init__$1;
        i = G__20005;
        init__$1 = G__20006;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function cljs$core$__GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function cljs$core$hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__20007 = i + 2;
        i = G__20007;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__20008 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__20008) : cljs.core.create_inode_seq.call(null, G__20008);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function cljs$core$__GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var cljs$core$create_node = null;
  var cljs$core$create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash(key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var cljs$core$create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash(key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  cljs$core$create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return cljs$core$create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return cljs$core$create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$create_node.cljs$core$IFn$_invoke$arity$6 = cljs$core$create_node__6;
  cljs$core$create_node.cljs$core$IFn$_invoke$arity$7 = cljs$core$create_node__7;
  return cljs$core$create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4525__auto__ = self__.__hash;
  if (!(h__4525__auto__ == null)) {
    return h__4525__auto__;
  } else {
    var h__4525__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4525__auto____$1;
    return h__4525__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    var G__20009 = self__.nodes;
    var G__20010 = self__.i + 2;
    var G__20011 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__20009, G__20010, G__20011) : cljs.core.create_inode_seq.call(null, G__20009, G__20010, G__20011);
  } else {
    var G__20012 = self__.nodes;
    var G__20013 = self__.i;
    var G__20014 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__20012, G__20013, G__20014) : cljs.core.create_inode_seq.call(null, G__20012, G__20013, G__20014);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function cljs$core$__GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.create_inode_seq = function() {
  var cljs$core$create_inode_seq = null;
  var cljs$core$create_inode_seq__1 = function(nodes) {
    return cljs$core$create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
  };
  var cljs$core$create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__20018 = j + 2;
                j = G__20018;
                continue;
              }
            } else {
              var G__20019 = j + 2;
              j = G__20019;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  cljs$core$create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return cljs$core$create_inode_seq__1.call(this, nodes);
      case 3:
        return cljs$core$create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$create_inode_seq.cljs$core$IFn$_invoke$arity$1 = cljs$core$create_inode_seq__1;
  cljs$core$create_inode_seq.cljs$core$IFn$_invoke$arity$3 = cljs$core$create_inode_seq__3;
  return cljs$core$create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4525__auto__ = self__.__hash;
  if (!(h__4525__auto__ == null)) {
    return h__4525__auto__;
  } else {
    var h__4525__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4525__auto____$1;
    return h__4525__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__20020 = null;
  var G__20021 = self__.nodes;
  var G__20022 = self__.i;
  var G__20023 = cljs.core.next(self__.s);
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__20020, G__20021, G__20022, G__20023) : cljs.core.create_array_node_seq.call(null, G__20020, G__20021, G__20022, G__20023);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function cljs$core$__GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.create_array_node_seq = function() {
  var cljs$core$create_array_node_seq = null;
  var cljs$core$create_array_node_seq__1 = function(nodes) {
    return cljs$core$create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
  };
  var cljs$core$create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__20028 = j + 1;
              j = G__20028;
              continue;
            }
          } else {
            var G__20029 = j + 1;
            j = G__20029;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  cljs$core$create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return cljs$core$create_array_node_seq__1.call(this, meta);
      case 4:
        return cljs$core$create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = cljs$core$create_array_node_seq__1;
  cljs$core$create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = cljs$core$create_array_node_seq__4;
  return cljs$core$create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__20031 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__20031) : cljs.core.keys.call(null, G__20031);
  }());
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__20032 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__20032) : cljs.core.vals.call(null, G__20032);
  }());
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__20033 = cljs.core.seq(coll);
  var chunk__20034 = null;
  var count__20035 = 0;
  var i__20036 = 0;
  while (true) {
    if (i__20036 < count__20035) {
      var vec__20037 = chunk__20034.cljs$core$IIndexed$_nth$arity$2(null, i__20036);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20037, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20037, 1, null);
      var G__20038_20049 = v;
      var G__20039_20050 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20038_20049, G__20039_20050) : f.call(null, G__20038_20049, G__20039_20050);
      var G__20051 = seq__20033;
      var G__20052 = chunk__20034;
      var G__20053 = count__20035;
      var G__20054 = i__20036 + 1;
      seq__20033 = G__20051;
      chunk__20034 = G__20052;
      count__20035 = G__20053;
      i__20036 = G__20054;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__20033);
      if (temp__4126__auto__) {
        var seq__20033__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__20033__$1)) {
          var c__4894__auto__ = cljs.core.chunk_first(seq__20033__$1);
          var G__20055 = cljs.core.chunk_rest(seq__20033__$1);
          var G__20056 = c__4894__auto__;
          var G__20057 = cljs.core.count(c__4894__auto__);
          var G__20058 = 0;
          seq__20033 = G__20055;
          chunk__20034 = G__20056;
          count__20035 = G__20057;
          i__20036 = G__20058;
          continue;
        } else {
          var vec__20040 = cljs.core.first(seq__20033__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20040, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20040, 1, null);
          var G__20041_20059 = v;
          var G__20042_20060 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20041_20059, G__20042_20060) : f.call(null, G__20041_20059, G__20042_20060);
          var G__20061 = cljs.core.next(seq__20033__$1);
          var G__20062 = null;
          var G__20063 = 0;
          var G__20064 = 0;
          seq__20033 = G__20061;
          chunk__20034 = G__20062;
          count__20035 = G__20063;
          i__20036 = G__20064;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? function() {
    var G__20043 = init;
    var G__20044 = null;
    var G__20045 = self__.nil_val;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20043, G__20044, G__20045) : f.call(null, G__20043, G__20044, G__20045);
  }() : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__20046 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20046) : cljs.core.deref.call(null, G__20046);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4525__auto__ = self__.__hash;
  if (!(h__4525__auto__ == null)) {
    return h__4525__auto__;
  } else {
    var h__4525__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4525__auto____$1;
    return h__4525__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj20048 = {};
    return obj20048;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return!(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__20065 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__20066 = cljs.core.next(es);
          ret = G__20065;
          es = G__20066;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__20067 = null;
  var G__20067__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20067__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20067 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20067__2.call(this, self__, k);
      case 3:
        return G__20067__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20067.cljs$core$IFn$_invoke$arity$2 = G__20067__2;
  G__20067.cljs$core$IFn$_invoke$arity$3 = G__20067__3;
  return G__20067;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args20030) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20030)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function cljs$core$__GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__20068 = i + 2;
      var G__20069 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__20068;
      ret = G__20069;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__20070 = i + 1;
      var G__20071 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__20070;
      out = G__20071;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__20072 = o;
      if (G__20072) {
        var bit__4783__auto__ = G__20072.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4783__auto__ || G__20072.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__20072.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__20072);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__20072);
      }
    }()) {
      return tcoll.assoc_BANG_(function() {
        var G__20073 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__20073) : cljs.core.key.call(null, G__20073);
      }(), function() {
        var G__20074 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__20074) : cljs.core.val.call(null, G__20074);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__20077 = cljs.core.next(es);
          var G__20078 = tcoll__$1.assoc_BANG_(function() {
            var G__20075 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__20075) : cljs.core.key.call(null, G__20075);
          }(), function() {
            var G__20076 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__20076) : cljs.core.val.call(null, G__20076);
          }());
          es = G__20077;
          tcoll__$1 = G__20078;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function cljs$core$__GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function cljs$core$tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__20079 = ascending_QMARK_ ? t.left : t.right;
      var G__20080 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__20079;
      stack__$1 = G__20080;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4525__auto__ = self__.__hash;
  if (!(h__4525__auto__ == null)) {
    return h__4525__auto__;
  } else {
    var h__4525__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4525__auto____$1;
    return h__4525__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function cljs$core$__GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.create_tree_map_seq = function cljs$core$create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function cljs$core$balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function cljs$core$balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function cljs$core$balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function cljs$core$balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function cljs$core$tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? cljs$core$tree_map_kv_reduce(node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__20093 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20093) : cljs.core.deref.call(null, G__20093);
  } else {
    var init__$2 = function() {
      var G__20094 = init__$1;
      var G__20095 = node.key;
      var G__20096 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20094, G__20095, G__20096) : f.call(null, G__20094, G__20095, G__20096);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      var G__20097 = init__$2;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20097) : cljs.core.deref.call(null, G__20097);
    } else {
      var init__$3 = !(node.right == null) ? cljs$core$tree_map_kv_reduce(node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        var G__20098 = init__$3;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20098) : cljs.core.deref.call(null, G__20098);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4525__auto__ = self__.__hash;
  if (!(h__4525__auto__ == null)) {
    return h__4525__auto__;
  } else {
    var h__4525__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4525__auto____$1;
    return h__4525__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__20100 = null;
  var G__20100__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20100__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20100 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20100__2.call(this, self__, k);
      case 3:
        return G__20100__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20100.cljs$core$IFn$_invoke$arity$2 = G__20100__2;
  G__20100.cljs$core$IFn$_invoke$arity$3 = G__20100__3;
  return G__20100;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args20099) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20099)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function cljs$core$__GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4525__auto__ = self__.__hash;
  if (!(h__4525__auto__ == null)) {
    return h__4525__auto__;
  } else {
    var h__4525__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4525__auto____$1;
    return h__4525__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__20102 = null;
  var G__20102__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20102__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20102 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20102__2.call(this, self__, k);
      case 3:
        return G__20102__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20102.cljs$core$IFn$_invoke$arity$2 = G__20102__2;
  G__20102.cljs$core$IFn$_invoke$arity$3 = G__20102__3;
  return G__20102;
}();
cljs.core.RedNode.prototype.apply = function(self__, args20101) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20101)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function cljs$core$__GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.tree_map_add = function cljs$core$tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__20115 = k;
      var G__20116 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__20115, G__20116) : comp.call(null, G__20115, G__20116);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = cljs$core$tree_map_add(comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = cljs$core$tree_map_add(comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function cljs$core$tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, cljs$core$tree_map_append(left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, cljs$core$tree_map_append(left, right.left), right.right, null);
        } else {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function cljs$core$tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__20135 = k;
      var G__20136 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__20135, G__20136) : comp.call(null, G__20135, G__20136);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = cljs$core$tree_map_remove(comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = cljs$core$tree_map_remove(comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function cljs$core$tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = function() {
    var G__20147 = k;
    var G__20148 = tk;
    return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__20147, G__20148) : comp.call(null, G__20147, G__20148);
  }();
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, cljs$core$tree_map_replace(comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, cljs$core$tree_map_replace(comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__20150 = cljs.core.seq(coll);
  var chunk__20151 = null;
  var count__20152 = 0;
  var i__20153 = 0;
  while (true) {
    if (i__20153 < count__20152) {
      var vec__20154 = chunk__20151.cljs$core$IIndexed$_nth$arity$2(null, i__20153);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20154, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20154, 1, null);
      var G__20155_20167 = v;
      var G__20156_20168 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20155_20167, G__20156_20168) : f.call(null, G__20155_20167, G__20156_20168);
      var G__20169 = seq__20150;
      var G__20170 = chunk__20151;
      var G__20171 = count__20152;
      var G__20172 = i__20153 + 1;
      seq__20150 = G__20169;
      chunk__20151 = G__20170;
      count__20152 = G__20171;
      i__20153 = G__20172;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__20150);
      if (temp__4126__auto__) {
        var seq__20150__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__20150__$1)) {
          var c__4894__auto__ = cljs.core.chunk_first(seq__20150__$1);
          var G__20173 = cljs.core.chunk_rest(seq__20150__$1);
          var G__20174 = c__4894__auto__;
          var G__20175 = cljs.core.count(c__4894__auto__);
          var G__20176 = 0;
          seq__20150 = G__20173;
          chunk__20151 = G__20174;
          count__20152 = G__20175;
          i__20153 = G__20176;
          continue;
        } else {
          var vec__20157 = cljs.core.first(seq__20150__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20157, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20157, 1, null);
          var G__20158_20177 = v;
          var G__20159_20178 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20158_20177, G__20159_20178) : f.call(null, G__20158_20177, G__20159_20178);
          var G__20179 = cljs.core.next(seq__20150__$1);
          var G__20180 = null;
          var G__20181 = 0;
          var G__20182 = 0;
          seq__20150 = G__20179;
          chunk__20151 = G__20180;
          count__20152 = G__20181;
          i__20153 = G__20182;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__20160 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__20160) : cljs.core.keys.call(null, G__20160);
  }());
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__20161 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__20161) : cljs.core.vals.call(null, G__20161);
  }());
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__20162 = k;
        var G__20163 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__20162, G__20163) : self__.comp.call(null, G__20162, G__20163);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__20183 = t.left;
          t = G__20183;
          continue;
        } else {
          var G__20184 = t.right;
          t = G__20184;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4525__auto__ = self__.__hash;
  if (!(h__4525__auto__ == null)) {
    return h__4525__auto__;
  } else {
    var h__4525__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4525__auto____$1;
    return h__4525__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__20185 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__20186 = cljs.core.next(es);
          ret = G__20185;
          es = G__20186;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__20187 = null;
  var G__20187__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20187__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20187 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20187__2.call(this, self__, k);
      case 3:
        return G__20187__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20187.cljs$core$IFn$_invoke$arity$2 = G__20187__2;
  G__20187.cljs$core$IFn$_invoke$arity$3 = G__20187__3;
  return G__20187;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args20149) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20149)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__20164 = k;
          var G__20165 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__20164, G__20165) : self__.comp.call(null, G__20164, G__20165);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__20188 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__20189 = t.left;
              stack = G__20188;
              t = G__20189;
              continue;
            } else {
              var G__20190 = stack;
              var G__20191 = t.right;
              stack = G__20190;
              t = G__20191;
              continue;
            }
          } else {
            if (c > 0) {
              var G__20192 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__20193 = t.right;
              stack = G__20192;
              t = G__20193;
              continue;
            } else {
              var G__20194 = stack;
              var G__20195 = t.left;
              stack = G__20194;
              t = G__20195;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  var G__20166 = entry;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__20166) : cljs.core.key.call(null, G__20166);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function cljs$core$__GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.hash_map = function() {
  var cljs$core$hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__20196 = cljs.core.nnext(in$);
        var G__20197 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__20196;
        out = G__20197;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  };
  var cljs$core$hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__20198__i = 0, G__20198__a = new Array(arguments.length - 0);
      while (G__20198__i < G__20198__a.length) {
        G__20198__a[G__20198__i] = arguments[G__20198__i + 0];
        ++G__20198__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__20198__a, 0);
    }
    return cljs$core$hash_map__delegate.call(this, keyvals);
  };
  cljs$core$hash_map.cljs$lang$maxFixedArity = 0;
  cljs$core$hash_map.cljs$lang$applyTo = function(arglist__20199) {
    var keyvals = cljs.core.seq(arglist__20199);
    return cljs$core$hash_map__delegate(keyvals);
  };
  cljs$core$hash_map.cljs$core$IFn$_invoke$arity$variadic = cljs$core$hash_map__delegate;
  return cljs$core$hash_map;
}();
cljs.core.array_map = function() {
  var cljs$core$array_map__delegate = function(keyvals) {
    return cljs.core.PersistentArrayMap.fromArray(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array, keyvals), true, false);
  };
  var cljs$core$array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__20200__i = 0, G__20200__a = new Array(arguments.length - 0);
      while (G__20200__i < G__20200__a.length) {
        G__20200__a[G__20200__i] = arguments[G__20200__i + 0];
        ++G__20200__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__20200__a, 0);
    }
    return cljs$core$array_map__delegate.call(this, keyvals);
  };
  cljs$core$array_map.cljs$lang$maxFixedArity = 0;
  cljs$core$array_map.cljs$lang$applyTo = function(arglist__20201) {
    var keyvals = cljs.core.seq(arglist__20201);
    return cljs$core$array_map__delegate(keyvals);
  };
  cljs$core$array_map.cljs$core$IFn$_invoke$arity$variadic = cljs$core$array_map__delegate;
  return cljs$core$array_map;
}();
cljs.core.obj_map = function() {
  var cljs$core$obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj20205 = {};
      return obj20205;
    }();
    var kvs = cljs.core.seq(keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first(kvs));
        obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
        var G__20206 = cljs.core.nnext(kvs);
        kvs = G__20206;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject(ks, obj);
      }
      break;
    }
  };
  var cljs$core$obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__20207__i = 0, G__20207__a = new Array(arguments.length - 0);
      while (G__20207__i < G__20207__a.length) {
        G__20207__a[G__20207__i] = arguments[G__20207__i + 0];
        ++G__20207__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__20207__a, 0);
    }
    return cljs$core$obj_map__delegate.call(this, keyvals);
  };
  cljs$core$obj_map.cljs$lang$maxFixedArity = 0;
  cljs$core$obj_map.cljs$lang$applyTo = function(arglist__20208) {
    var keyvals = cljs.core.seq(arglist__20208);
    return cljs$core$obj_map__delegate(keyvals);
  };
  cljs$core$obj_map.cljs$core$IFn$_invoke$arity$variadic = cljs$core$obj_map__delegate;
  return cljs$core$obj_map;
}();
cljs.core.sorted_map = function() {
  var cljs$core$sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__20209 = cljs.core.nnext(in$);
        var G__20210 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__20209;
        out = G__20210;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var cljs$core$sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__20211__i = 0, G__20211__a = new Array(arguments.length - 0);
      while (G__20211__i < G__20211__a.length) {
        G__20211__a[G__20211__i] = arguments[G__20211__i + 0];
        ++G__20211__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__20211__a, 0);
    }
    return cljs$core$sorted_map__delegate.call(this, keyvals);
  };
  cljs$core$sorted_map.cljs$lang$maxFixedArity = 0;
  cljs$core$sorted_map.cljs$lang$applyTo = function(arglist__20212) {
    var keyvals = cljs.core.seq(arglist__20212);
    return cljs$core$sorted_map__delegate(keyvals);
  };
  cljs$core$sorted_map.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sorted_map__delegate;
  return cljs$core$sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var cljs$core$sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__20213 = cljs.core.nnext(in$);
        var G__20214 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__20213;
        out = G__20214;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var cljs$core$sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      var G__20215__i = 0, G__20215__a = new Array(arguments.length - 1);
      while (G__20215__i < G__20215__a.length) {
        G__20215__a[G__20215__i] = arguments[G__20215__i + 1];
        ++G__20215__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__20215__a, 0);
    }
    return cljs$core$sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  cljs$core$sorted_map_by.cljs$lang$maxFixedArity = 1;
  cljs$core$sorted_map_by.cljs$lang$applyTo = function(arglist__20216) {
    var comparator = cljs.core.first(arglist__20216);
    var keyvals = cljs.core.rest(arglist__20216);
    return cljs$core$sorted_map_by__delegate(comparator, keyvals);
  };
  cljs$core$sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sorted_map_by__delegate;
  return cljs$core$sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__20217 = self__.mseq;
    if (G__20217) {
      var bit__4783__auto__ = G__20217.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4783__auto__ || G__20217.cljs$core$INext$) {
        return true;
      } else {
        if (!G__20217.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__20217);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__20217);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__20218 = self__.mseq;
    if (G__20218) {
      var bit__4783__auto__ = G__20218.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4783__auto__ || G__20218.cljs$core$INext$) {
        return true;
      } else {
        if (!G__20218.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__20218);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__20218);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function cljs$core$__GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.keys = function cljs$core$keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq(hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function cljs$core$key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__20219 = self__.mseq;
    if (G__20219) {
      var bit__4783__auto__ = G__20219.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4783__auto__ || G__20219.cljs$core$INext$) {
        return true;
      } else {
        if (!G__20219.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__20219);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__20219);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__20220 = self__.mseq;
    if (G__20220) {
      var bit__4783__auto__ = G__20220.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4783__auto__ || G__20220.cljs$core$INext$) {
        return true;
      } else {
        if (!G__20220.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__20220);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__20220);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function cljs$core$__GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.vals = function cljs$core$vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq(hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function cljs$core$val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function() {
  var cljs$core$merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__20221_SHARP_, p2__20222_SHARP_) {
        return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
          var or__4109__auto__ = p1__20221_SHARP_;
          if (cljs.core.truth_(or__4109__auto__)) {
            return or__4109__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__20222_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var cljs$core$merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      var G__20223__i = 0, G__20223__a = new Array(arguments.length - 0);
      while (G__20223__i < G__20223__a.length) {
        G__20223__a[G__20223__i] = arguments[G__20223__i + 0];
        ++G__20223__i;
      }
      maps = new cljs.core.IndexedSeq(G__20223__a, 0);
    }
    return cljs$core$merge__delegate.call(this, maps);
  };
  cljs$core$merge.cljs$lang$maxFixedArity = 0;
  cljs$core$merge.cljs$lang$applyTo = function(arglist__20224) {
    var maps = cljs.core.seq(arglist__20224);
    return cljs$core$merge__delegate(maps);
  };
  cljs$core$merge.cljs$core$IFn$_invoke$arity$variadic = cljs$core$merge__delegate;
  return cljs$core$merge;
}();
cljs.core.merge_with = function() {
  var cljs$core$merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first(e);
        var v = cljs.core.second(e);
        if (cljs.core.contains_QMARK_(m, k)) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
            var G__20227 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
            var G__20228 = v;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20227, G__20228) : f.call(null, G__20227, G__20228);
          }());
        } else {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
            var or__4109__auto__ = m1;
            if (cljs.core.truth_(or__4109__auto__)) {
              return or__4109__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq(m2));
        };
      }(merge_entry);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
    } else {
      return null;
    }
  };
  var cljs$core$merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      var G__20229__i = 0, G__20229__a = new Array(arguments.length - 1);
      while (G__20229__i < G__20229__a.length) {
        G__20229__a[G__20229__i] = arguments[G__20229__i + 1];
        ++G__20229__i;
      }
      maps = new cljs.core.IndexedSeq(G__20229__a, 0);
    }
    return cljs$core$merge_with__delegate.call(this, f, maps);
  };
  cljs$core$merge_with.cljs$lang$maxFixedArity = 1;
  cljs$core$merge_with.cljs$lang$applyTo = function(arglist__20230) {
    var f = cljs.core.first(arglist__20230);
    var maps = cljs.core.rest(arglist__20230);
    return cljs$core$merge_with__delegate(f, maps);
  };
  cljs$core$merge_with.cljs$core$IFn$_invoke$arity$variadic = cljs$core$merge_with__delegate;
  return cljs$core$merge_with;
}();
cljs.core.select_keys = function cljs$core$select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__20231 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__20232 = cljs.core.next(keys);
      ret = G__20231;
      keys = G__20232;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__20235 = cljs.core.seq(coll);
  var chunk__20236 = null;
  var count__20237 = 0;
  var i__20238 = 0;
  while (true) {
    if (i__20238 < count__20237) {
      var vec__20239 = chunk__20236.cljs$core$IIndexed$_nth$arity$2(null, i__20238);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20239, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20239, 1, null);
      var G__20240_20245 = v;
      var G__20241_20246 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20240_20245, G__20241_20246) : f.call(null, G__20240_20245, G__20241_20246);
      var G__20247 = seq__20235;
      var G__20248 = chunk__20236;
      var G__20249 = count__20237;
      var G__20250 = i__20238 + 1;
      seq__20235 = G__20247;
      chunk__20236 = G__20248;
      count__20237 = G__20249;
      i__20238 = G__20250;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__20235);
      if (temp__4126__auto__) {
        var seq__20235__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__20235__$1)) {
          var c__4894__auto__ = cljs.core.chunk_first(seq__20235__$1);
          var G__20251 = cljs.core.chunk_rest(seq__20235__$1);
          var G__20252 = c__4894__auto__;
          var G__20253 = cljs.core.count(c__4894__auto__);
          var G__20254 = 0;
          seq__20235 = G__20251;
          chunk__20236 = G__20252;
          count__20237 = G__20253;
          i__20238 = G__20254;
          continue;
        } else {
          var vec__20242 = cljs.core.first(seq__20235__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20242, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20242, 1, null);
          var G__20243_20255 = v;
          var G__20244_20256 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20243_20255, G__20244_20256) : f.call(null, G__20243_20255, G__20244_20256);
          var G__20257 = cljs.core.next(seq__20235__$1);
          var G__20258 = null;
          var G__20259 = 0;
          var G__20260 = 0;
          seq__20235 = G__20257;
          chunk__20236 = G__20258;
          count__20237 = G__20259;
          i__20238 = G__20260;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4525__auto__ = self__.__hash;
  if (!(h__4525__auto__ == null)) {
    return h__4525__auto__;
  } else {
    var h__4525__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4525__auto____$1;
    return h__4525__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__20233_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__20233_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__20261 = null;
  var G__20261__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20261__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20261 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20261__2.call(this, self__, k);
      case 3:
        return G__20261__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20261.cljs$core$IFn$_invoke$arity$2 = G__20261__2;
  G__20261.cljs$core$IFn$_invoke$arity$3 = G__20261__3;
  return G__20261;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args20234) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20234)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function cljs$core$__GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__20262 = i + 1;
        var G__20263 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__20262;
        out = G__20263;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__20264 = i + 1;
        var G__20265 = cljs.core._conj_BANG_(out, items[i]);
        i = G__20264;
        out = G__20265;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__20267 = null;
  var G__20267__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__20267__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__20267 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20267__2.call(this, self__, k);
      case 3:
        return G__20267__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20267.cljs$core$IFn$_invoke$arity$2 = G__20267__2;
  G__20267.cljs$core$IFn$_invoke$arity$3 = G__20267__3;
  return G__20267;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args20266) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20266)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function cljs$core$__GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__20270 = cljs.core.seq(coll);
  var chunk__20271 = null;
  var count__20272 = 0;
  var i__20273 = 0;
  while (true) {
    if (i__20273 < count__20272) {
      var vec__20274 = chunk__20271.cljs$core$IIndexed$_nth$arity$2(null, i__20273);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20274, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20274, 1, null);
      var G__20275_20280 = v;
      var G__20276_20281 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20275_20280, G__20276_20281) : f.call(null, G__20275_20280, G__20276_20281);
      var G__20282 = seq__20270;
      var G__20283 = chunk__20271;
      var G__20284 = count__20272;
      var G__20285 = i__20273 + 1;
      seq__20270 = G__20282;
      chunk__20271 = G__20283;
      count__20272 = G__20284;
      i__20273 = G__20285;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__20270);
      if (temp__4126__auto__) {
        var seq__20270__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__20270__$1)) {
          var c__4894__auto__ = cljs.core.chunk_first(seq__20270__$1);
          var G__20286 = cljs.core.chunk_rest(seq__20270__$1);
          var G__20287 = c__4894__auto__;
          var G__20288 = cljs.core.count(c__4894__auto__);
          var G__20289 = 0;
          seq__20270 = G__20286;
          chunk__20271 = G__20287;
          count__20272 = G__20288;
          i__20273 = G__20289;
          continue;
        } else {
          var vec__20277 = cljs.core.first(seq__20270__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20277, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20277, 1, null);
          var G__20278_20290 = v;
          var G__20279_20291 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20278_20290, G__20279_20291) : f.call(null, G__20278_20290, G__20279_20291);
          var G__20292 = cljs.core.next(seq__20270__$1);
          var G__20293 = null;
          var G__20294 = 0;
          var G__20295 = 0;
          seq__20270 = G__20292;
          chunk__20271 = G__20293;
          count__20272 = G__20294;
          i__20273 = G__20295;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4525__auto__ = self__.__hash;
  if (!(h__4525__auto__ == null)) {
    return h__4525__auto__;
  } else {
    var h__4525__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4525__auto____$1;
    return h__4525__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__20268_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__20268_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__20296 = null;
  var G__20296__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20296__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20296 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20296__2.call(this, self__, k);
      case 3:
        return G__20296__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20296.cljs$core$IFn$_invoke$arity$2 = G__20296__2;
  G__20296.cljs$core$IFn$_invoke$arity$3 = G__20296__3;
  return G__20296;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args20269) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20269)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function cljs$core$__GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.set_from_indexed_seq = function cljs$core$set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4988__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4988__auto__.length) {
        var G__20297 = i + 1;
        var G__20298 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__20297;
        res = G__20298;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function cljs$core$set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq(in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__20299 = in$__$1.cljs$core$INext$_next$arity$1(null);
          var G__20300 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__20299;
          out = G__20300;
          continue;
        } else {
          return out.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var cljs$core$hash_set = null;
  var cljs$core$hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var cljs$core$hash_set__1 = function() {
    var G__20301__delegate = function(keys) {
      return cljs.core.set(keys);
    };
    var G__20301 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        var G__20302__i = 0, G__20302__a = new Array(arguments.length - 0);
        while (G__20302__i < G__20302__a.length) {
          G__20302__a[G__20302__i] = arguments[G__20302__i + 0];
          ++G__20302__i;
        }
        keys = new cljs.core.IndexedSeq(G__20302__a, 0);
      }
      return G__20301__delegate.call(this, keys);
    };
    G__20301.cljs$lang$maxFixedArity = 0;
    G__20301.cljs$lang$applyTo = function(arglist__20303) {
      var keys = cljs.core.seq(arglist__20303);
      return G__20301__delegate(keys);
    };
    G__20301.cljs$core$IFn$_invoke$arity$variadic = G__20301__delegate;
    return G__20301;
  }();
  cljs$core$hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$hash_set__0.call(this);
      default:
        var G__20304 = null;
        if (arguments.length > 0) {
          var G__20305__i = 0, G__20305__a = new Array(arguments.length - 0);
          while (G__20305__i < G__20305__a.length) {
            G__20305__a[G__20305__i] = arguments[G__20305__i + 0];
            ++G__20305__i;
          }
          G__20304 = new cljs.core.IndexedSeq(G__20305__a, 0);
        }
        return cljs$core$hash_set__1.cljs$core$IFn$_invoke$arity$variadic(G__20304);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$hash_set.cljs$lang$maxFixedArity = 0;
  cljs$core$hash_set.cljs$lang$applyTo = cljs$core$hash_set__1.cljs$lang$applyTo;
  cljs$core$hash_set.cljs$core$IFn$_invoke$arity$0 = cljs$core$hash_set__0;
  cljs$core$hash_set.cljs$core$IFn$_invoke$arity$variadic = cljs$core$hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$hash_set;
}();
cljs.core.sorted_set = function() {
  var cljs$core$sorted_set__delegate = function(keys) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var cljs$core$sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      var G__20306__i = 0, G__20306__a = new Array(arguments.length - 0);
      while (G__20306__i < G__20306__a.length) {
        G__20306__a[G__20306__i] = arguments[G__20306__i + 0];
        ++G__20306__i;
      }
      keys = new cljs.core.IndexedSeq(G__20306__a, 0);
    }
    return cljs$core$sorted_set__delegate.call(this, keys);
  };
  cljs$core$sorted_set.cljs$lang$maxFixedArity = 0;
  cljs$core$sorted_set.cljs$lang$applyTo = function(arglist__20307) {
    var keys = cljs.core.seq(arglist__20307);
    return cljs$core$sorted_set__delegate(keys);
  };
  cljs$core$sorted_set.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sorted_set__delegate;
  return cljs$core$sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var cljs$core$sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
  };
  var cljs$core$sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      var G__20308__i = 0, G__20308__a = new Array(arguments.length - 1);
      while (G__20308__i < G__20308__a.length) {
        G__20308__a[G__20308__i] = arguments[G__20308__i + 1];
        ++G__20308__i;
      }
      keys = new cljs.core.IndexedSeq(G__20308__a, 0);
    }
    return cljs$core$sorted_set_by__delegate.call(this, comparator, keys);
  };
  cljs$core$sorted_set_by.cljs$lang$maxFixedArity = 1;
  cljs$core$sorted_set_by.cljs$lang$applyTo = function(arglist__20309) {
    var comparator = cljs.core.first(arglist__20309);
    var keys = cljs.core.rest(arglist__20309);
    return cljs$core$sorted_set_by__delegate(comparator, keys);
  };
  cljs$core$sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sorted_set_by__delegate;
  return cljs$core$sorted_set_by;
}();
cljs.core.replace = function() {
  var cljs$core$replace = null;
  var cljs$core$replace__1 = function(smap) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__20310_SHARP_) {
      var temp__4124__auto__ = cljs.core.find(smap, p1__20310_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.val(e);
      } else {
        return p1__20310_SHARP_;
      }
    });
  };
  var cljs$core$replace__2 = function(smap, coll) {
    if (cljs.core.vector_QMARK_(coll)) {
      var n = cljs.core.count(coll);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
        return function(v, i) {
          var temp__4124__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
          if (cljs.core.truth_(temp__4124__auto__)) {
            var e = temp__4124__auto__;
            return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
          } else {
            return v;
          }
        };
      }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
    } else {
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__20311_SHARP_) {
        var temp__4124__auto__ = cljs.core.find(smap, p1__20311_SHARP_);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.second(e);
        } else {
          return p1__20311_SHARP_;
        }
      }, coll);
    }
  };
  cljs$core$replace = function(smap, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$replace__1.call(this, smap);
      case 2:
        return cljs$core$replace__2.call(this, smap, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$replace.cljs$core$IFn$_invoke$arity$1 = cljs$core$replace__1;
  cljs$core$replace.cljs$core$IFn$_invoke$arity$2 = cljs$core$replace__2;
  return cljs$core$replace;
}();
cljs.core.distinct = function() {
  var cljs$core$distinct = null;
  var cljs$core$distinct__0 = function() {
    return function(rf) {
      var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
      return function(seen) {
        return function() {
          var G__20332 = null;
          var G__20332__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__20332__1 = function(result) {
            var G__20322 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__20322) : rf.call(null, G__20322);
          };
          var G__20332__2 = function(result, input) {
            if (cljs.core.contains_QMARK_(function() {
              var G__20323 = seen;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20323) : cljs.core.deref.call(null, G__20323);
            }(), input)) {
              return result;
            } else {
              seen.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen.cljs$core$IDeref$_deref$arity$1(null), input));
              var G__20324 = result;
              var G__20325 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__20324, G__20325) : rf.call(null, G__20324, G__20325);
            }
          };
          G__20332 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__20332__0.call(this);
              case 1:
                return G__20332__1.call(this, result);
              case 2:
                return G__20332__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__20332.cljs$core$IFn$_invoke$arity$0 = G__20332__0;
          G__20332.cljs$core$IFn$_invoke$arity$1 = G__20332__1;
          G__20332.cljs$core$IFn$_invoke$arity$2 = G__20332__2;
          return G__20332;
        }();
      }(seen);
    };
  };
  var cljs$core$distinct__1 = function(coll) {
    var step = function cljs$core$distinct_$_step(xs, seen) {
      return new cljs.core.LazySeq(null, function() {
        return function(p__20330, seen__$1) {
          while (true) {
            var vec__20331 = p__20330;
            var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20331, 0, null);
            var xs__$1 = vec__20331;
            var temp__4126__auto__ = cljs.core.seq(xs__$1);
            if (temp__4126__auto__) {
              var s = temp__4126__auto__;
              if (cljs.core.contains_QMARK_(seen__$1, f)) {
                var G__20333 = cljs.core.rest(s);
                var G__20334 = seen__$1;
                p__20330 = G__20333;
                seen__$1 = G__20334;
                continue;
              } else {
                return cljs.core.cons(f, cljs$core$distinct_$_step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
              }
            } else {
              return null;
            }
            break;
          }
        }.call(null, xs, seen);
      }, null, null);
    };
    return step(coll, cljs.core.PersistentHashSet.EMPTY);
  };
  cljs$core$distinct = function(coll) {
    switch(arguments.length) {
      case 0:
        return cljs$core$distinct__0.call(this);
      case 1:
        return cljs$core$distinct__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$distinct.cljs$core$IFn$_invoke$arity$0 = cljs$core$distinct__0;
  cljs$core$distinct.cljs$core$IFn$_invoke$arity$1 = cljs$core$distinct__1;
  return cljs$core$distinct;
}();
cljs.core.butlast = function cljs$core$butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__20335 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__20336 = cljs.core.next(s__$1);
      ret = G__20335;
      s__$1 = G__20336;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function cljs$core$name(x) {
  if (function() {
    var G__20338 = x;
    if (G__20338) {
      var bit__4776__auto__ = G__20338.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4776__auto__ || G__20338.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function cljs$core$zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__20339 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__20340 = cljs.core.next(ks);
      var G__20341 = cljs.core.next(vs);
      map = G__20339;
      ks = G__20340;
      vs = G__20341;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var cljs$core$max_key = null;
  var cljs$core$max_key__2 = function(k, x) {
    return x;
  };
  var cljs$core$max_key__3 = function(k, x, y) {
    if (function() {
      var G__20352 = x;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__20352) : k.call(null, G__20352);
    }() > function() {
      var G__20353 = y;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__20353) : k.call(null, G__20353);
    }()) {
      return x;
    } else {
      return y;
    }
  };
  var cljs$core$max_key__4 = function() {
    var G__20354__delegate = function(k, x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__20342_SHARP_, p2__20343_SHARP_) {
        return cljs$core$max_key.cljs$core$IFn$_invoke$arity$3(k, p1__20342_SHARP_, p2__20343_SHARP_);
      }, cljs$core$max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
    };
    var G__20354 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        var G__20355__i = 0, G__20355__a = new Array(arguments.length - 3);
        while (G__20355__i < G__20355__a.length) {
          G__20355__a[G__20355__i] = arguments[G__20355__i + 3];
          ++G__20355__i;
        }
        more = new cljs.core.IndexedSeq(G__20355__a, 0);
      }
      return G__20354__delegate.call(this, k, x, y, more);
    };
    G__20354.cljs$lang$maxFixedArity = 3;
    G__20354.cljs$lang$applyTo = function(arglist__20356) {
      var k = cljs.core.first(arglist__20356);
      arglist__20356 = cljs.core.next(arglist__20356);
      var x = cljs.core.first(arglist__20356);
      arglist__20356 = cljs.core.next(arglist__20356);
      var y = cljs.core.first(arglist__20356);
      var more = cljs.core.rest(arglist__20356);
      return G__20354__delegate(k, x, y, more);
    };
    G__20354.cljs$core$IFn$_invoke$arity$variadic = G__20354__delegate;
    return G__20354;
  }();
  cljs$core$max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$max_key__2.call(this, k, x);
      case 3:
        return cljs$core$max_key__3.call(this, k, x, y);
      default:
        var G__20357 = null;
        if (arguments.length > 3) {
          var G__20358__i = 0, G__20358__a = new Array(arguments.length - 3);
          while (G__20358__i < G__20358__a.length) {
            G__20358__a[G__20358__i] = arguments[G__20358__i + 3];
            ++G__20358__i;
          }
          G__20357 = new cljs.core.IndexedSeq(G__20358__a, 0);
        }
        return cljs$core$max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, G__20357);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$max_key.cljs$lang$maxFixedArity = 3;
  cljs$core$max_key.cljs$lang$applyTo = cljs$core$max_key__4.cljs$lang$applyTo;
  cljs$core$max_key.cljs$core$IFn$_invoke$arity$2 = cljs$core$max_key__2;
  cljs$core$max_key.cljs$core$IFn$_invoke$arity$3 = cljs$core$max_key__3;
  cljs$core$max_key.cljs$core$IFn$_invoke$arity$variadic = cljs$core$max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$max_key;
}();
cljs.core.min_key = function() {
  var cljs$core$min_key = null;
  var cljs$core$min_key__2 = function(k, x) {
    return x;
  };
  var cljs$core$min_key__3 = function(k, x, y) {
    if (function() {
      var G__20369 = x;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__20369) : k.call(null, G__20369);
    }() < function() {
      var G__20370 = y;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__20370) : k.call(null, G__20370);
    }()) {
      return x;
    } else {
      return y;
    }
  };
  var cljs$core$min_key__4 = function() {
    var G__20371__delegate = function(k, x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__20359_SHARP_, p2__20360_SHARP_) {
        return cljs$core$min_key.cljs$core$IFn$_invoke$arity$3(k, p1__20359_SHARP_, p2__20360_SHARP_);
      }, cljs$core$min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
    };
    var G__20371 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        var G__20372__i = 0, G__20372__a = new Array(arguments.length - 3);
        while (G__20372__i < G__20372__a.length) {
          G__20372__a[G__20372__i] = arguments[G__20372__i + 3];
          ++G__20372__i;
        }
        more = new cljs.core.IndexedSeq(G__20372__a, 0);
      }
      return G__20371__delegate.call(this, k, x, y, more);
    };
    G__20371.cljs$lang$maxFixedArity = 3;
    G__20371.cljs$lang$applyTo = function(arglist__20373) {
      var k = cljs.core.first(arglist__20373);
      arglist__20373 = cljs.core.next(arglist__20373);
      var x = cljs.core.first(arglist__20373);
      arglist__20373 = cljs.core.next(arglist__20373);
      var y = cljs.core.first(arglist__20373);
      var more = cljs.core.rest(arglist__20373);
      return G__20371__delegate(k, x, y, more);
    };
    G__20371.cljs$core$IFn$_invoke$arity$variadic = G__20371__delegate;
    return G__20371;
  }();
  cljs$core$min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$min_key__2.call(this, k, x);
      case 3:
        return cljs$core$min_key__3.call(this, k, x, y);
      default:
        var G__20374 = null;
        if (arguments.length > 3) {
          var G__20375__i = 0, G__20375__a = new Array(arguments.length - 3);
          while (G__20375__i < G__20375__a.length) {
            G__20375__a[G__20375__i] = arguments[G__20375__i + 3];
            ++G__20375__i;
          }
          G__20374 = new cljs.core.IndexedSeq(G__20375__a, 0);
        }
        return cljs$core$min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, G__20374);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$min_key.cljs$lang$maxFixedArity = 3;
  cljs$core$min_key.cljs$lang$applyTo = cljs$core$min_key__4.cljs$lang$applyTo;
  cljs$core$min_key.cljs$core$IFn$_invoke$arity$2 = cljs$core$min_key__2;
  cljs$core$min_key.cljs$core$IFn$_invoke$arity$3 = cljs$core$min_key__3;
  cljs$core$min_key.cljs$core$IFn$_invoke$arity$variadic = cljs$core$min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$min_key;
}();
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function cljs$core$__GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function cljs$core$array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function() {
  var cljs$core$partition_all = null;
  var cljs$core$partition_all__1 = function(n) {
    return function(rf) {
      var a = cljs.core.array_list();
      return function(a) {
        return function() {
          var G__20392 = null;
          var G__20392__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__20392__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              return cljs.core.unreduced(function() {
                var G__20387 = result;
                var G__20388 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__20387, G__20388) : rf.call(null, G__20387, G__20388);
              }());
            }();
            var G__20389 = result__$1;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__20389) : rf.call(null, G__20389);
          };
          var G__20392__2 = function(result, input) {
            a.add(input);
            if (n === a.size()) {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              var G__20390 = result;
              var G__20391 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__20390, G__20391) : rf.call(null, G__20390, G__20391);
            } else {
              return result;
            }
          };
          G__20392 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__20392__0.call(this);
              case 1:
                return G__20392__1.call(this, result);
              case 2:
                return G__20392__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__20392.cljs$core$IFn$_invoke$arity$0 = G__20392__0;
          G__20392.cljs$core$IFn$_invoke$arity$1 = G__20392__1;
          G__20392.cljs$core$IFn$_invoke$arity$2 = G__20392__2;
          return G__20392;
        }();
      }(a);
    };
  };
  var cljs$core$partition_all__2 = function(n, coll) {
    return cljs$core$partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
  };
  var cljs$core$partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), cljs$core$partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$partition_all__1.call(this, n);
      case 2:
        return cljs$core$partition_all__2.call(this, n, step);
      case 3:
        return cljs$core$partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$partition_all.cljs$core$IFn$_invoke$arity$1 = cljs$core$partition_all__1;
  cljs$core$partition_all.cljs$core$IFn$_invoke$arity$2 = cljs$core$partition_all__2;
  cljs$core$partition_all.cljs$core$IFn$_invoke$arity$3 = cljs$core$partition_all__3;
  return cljs$core$partition_all;
}();
cljs.core.take_while = function() {
  var cljs$core$take_while = null;
  var cljs$core$take_while__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__20405 = null;
        var G__20405__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__20405__1 = function(result) {
          var G__20400 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__20400) : rf.call(null, G__20400);
        };
        var G__20405__2 = function(result, input) {
          if (cljs.core.truth_(function() {
            var G__20401 = input;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__20401) : pred.call(null, G__20401);
          }())) {
            var G__20402 = result;
            var G__20403 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__20402, G__20403) : rf.call(null, G__20402, G__20403);
          } else {
            return cljs.core.reduced(result);
          }
        };
        G__20405 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__20405__0.call(this);
            case 1:
              return G__20405__1.call(this, result);
            case 2:
              return G__20405__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__20405.cljs$core$IFn$_invoke$arity$0 = G__20405__0;
        G__20405.cljs$core$IFn$_invoke$arity$1 = G__20405__1;
        G__20405.cljs$core$IFn$_invoke$arity$2 = G__20405__2;
        return G__20405;
      }();
    };
  };
  var cljs$core$take_while__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.truth_(function() {
          var G__20404 = cljs.core.first(s);
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__20404) : pred.call(null, G__20404);
        }())) {
          return cljs.core.cons(cljs.core.first(s), cljs$core$take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$take_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$take_while__1.call(this, pred);
      case 2:
        return cljs$core$take_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$take_while.cljs$core$IFn$_invoke$arity$1 = cljs$core$take_while__1;
  cljs$core$take_while.cljs$core$IFn$_invoke$arity$2 = cljs$core$take_while__2;
  return cljs$core$take_while;
}();
cljs.core.mk_bound_fn = function cljs$core$mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__20410 = function() {
      var G__20412 = cljs.core._entry_key(sc, e);
      var G__20413 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__20412, G__20413) : comp.call(null, G__20412, G__20413);
    }();
    var G__20411 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__20410, G__20411) : test.call(null, G__20410, G__20411);
  };
};
cljs.core.subseq = function() {
  var cljs$core$subseq = null;
  var cljs$core$subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn(sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__20417 = temp__4126__auto__;
        var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20417, 0, null);
        var s = vec__20417;
        if (cljs.core.truth_(function() {
          var G__20418 = e;
          return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__20418) : include.call(null, G__20418);
        }())) {
          return s;
        } else {
          return cljs.core.next(s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
    }
  };
  var cljs$core$subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__20419 = temp__4126__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20419, 0, null);
      var s = vec__20419;
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
    } else {
      return null;
    }
  };
  cljs$core$subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return cljs$core$subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return cljs$core$subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$subseq.cljs$core$IFn$_invoke$arity$3 = cljs$core$subseq__3;
  cljs$core$subseq.cljs$core$IFn$_invoke$arity$5 = cljs$core$subseq__5;
  return cljs$core$subseq;
}();
cljs.core.rsubseq = function() {
  var cljs$core$rsubseq = null;
  var cljs$core$rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn(sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__20423 = temp__4126__auto__;
        var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20423, 0, null);
        var s = vec__20423;
        if (cljs.core.truth_(function() {
          var G__20424 = e;
          return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__20424) : include.call(null, G__20424);
        }())) {
          return s;
        } else {
          return cljs.core.next(s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
    }
  };
  var cljs$core$rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__20425 = temp__4126__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20425, 0, null);
      var s = vec__20425;
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
    } else {
      return null;
    }
  };
  cljs$core$rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return cljs$core$rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return cljs$core$rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$rsubseq.cljs$core$IFn$_invoke$arity$3 = cljs$core$rsubseq__3;
  cljs$core$rsubseq.cljs$core$IFn$_invoke$arity$5 = cljs$core$rsubseq__5;
  return cljs$core$rsubseq;
}();
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function cljs$core$__GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(cljs.core._seq(rng__$1))) {
    return 0;
  } else {
    var G__20426 = (self__.end - self__.start) / self__.step;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__20426) : Math.ceil.call(null, G__20426);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4525__auto__ = self__.__hash;
  if (!(h__4525__auto__ == null)) {
    return h__4525__auto__;
  } else {
    var h__4525__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__4525__auto____$1;
    return h__4525__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = function() {
        var G__20427 = ret;
        var G__20428 = i;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20427, G__20428) : f.call(null, G__20427, G__20428);
      }();
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        var G__20429 = ret__$1;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20429) : cljs.core.deref.call(null, G__20429);
      } else {
        var G__20430 = i + self__.step;
        var G__20431 = ret__$1;
        i = G__20430;
        ret = G__20431;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq(rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq(rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function cljs$core$__GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.range = function() {
  var cljs$core$range = null;
  var cljs$core$range__0 = function() {
    return cljs$core$range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
  };
  var cljs$core$range__1 = function(end) {
    return cljs$core$range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
  };
  var cljs$core$range__2 = function(start, end) {
    return cljs$core$range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
  };
  var cljs$core$range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  cljs$core$range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return cljs$core$range__0.call(this);
      case 1:
        return cljs$core$range__1.call(this, start);
      case 2:
        return cljs$core$range__2.call(this, start, end);
      case 3:
        return cljs$core$range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$range.cljs$core$IFn$_invoke$arity$0 = cljs$core$range__0;
  cljs$core$range.cljs$core$IFn$_invoke$arity$1 = cljs$core$range__1;
  cljs$core$range.cljs$core$IFn$_invoke$arity$2 = cljs$core$range__2;
  cljs$core$range.cljs$core$IFn$_invoke$arity$3 = cljs$core$range__3;
  return cljs$core$range;
}();
cljs.core.take_nth = function() {
  var cljs$core$take_nth = null;
  var cljs$core$take_nth__1 = function(n) {
    return function(rf) {
      var ia = cljs.core.volatile_BANG_(-1);
      return function(ia) {
        return function() {
          var G__20449 = null;
          var G__20449__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__20449__1 = function(result) {
            var G__20446 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__20446) : rf.call(null, G__20446);
          };
          var G__20449__2 = function(result, input) {
            var i = ia.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, ia.cljs$core$IDeref$_deref$arity$1(null) + 1);
            if (cljs.core.rem(i, n) === 0) {
              var G__20447 = result;
              var G__20448 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__20447, G__20448) : rf.call(null, G__20447, G__20448);
            } else {
              return result;
            }
          };
          G__20449 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__20449__0.call(this);
              case 1:
                return G__20449__1.call(this, result);
              case 2:
                return G__20449__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__20449.cljs$core$IFn$_invoke$arity$0 = G__20449__0;
          G__20449.cljs$core$IFn$_invoke$arity$1 = G__20449__1;
          G__20449.cljs$core$IFn$_invoke$arity$2 = G__20449__2;
          return G__20449;
        }();
      }(ia);
    };
  };
  var cljs$core$take_nth__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons(cljs.core.first(s), cljs$core$take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$take_nth = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$take_nth__1.call(this, n);
      case 2:
        return cljs$core$take_nth__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$take_nth.cljs$core$IFn$_invoke$arity$1 = cljs$core$take_nth__1;
  cljs$core$take_nth.cljs$core$IFn$_invoke$arity$2 = cljs$core$take_nth__2;
  return cljs$core$take_nth;
}();
cljs.core.split_with = function cljs$core$split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function() {
  var cljs$core$partition_by = null;
  var cljs$core$partition_by__1 = function(f) {
    return function(rf) {
      var a = cljs.core.array_list();
      var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(a, pa) {
        return function() {
          var G__20471 = null;
          var G__20471__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__20471__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              return cljs.core.unreduced(function() {
                var G__20462 = result;
                var G__20463 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__20462, G__20463) : rf.call(null, G__20462, G__20463);
              }());
            }();
            var G__20464 = result__$1;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__20464) : rf.call(null, G__20464);
          };
          var G__20471__2 = function(result, input) {
            var pval = function() {
              var G__20465 = pa;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20465) : cljs.core.deref.call(null, G__20465);
            }();
            var val = function() {
              var G__20466 = input;
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20466) : f.call(null, G__20466);
            }();
            cljs.core.vreset_BANG_(pa, val);
            if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
              a.add(input);
              return result;
            } else {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              var ret = function() {
                var G__20467 = result;
                var G__20468 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__20467, G__20468) : rf.call(null, G__20467, G__20468);
              }();
              if (cljs.core.reduced_QMARK_(ret)) {
              } else {
                a.add(input);
              }
              return ret;
            }
          };
          G__20471 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__20471__0.call(this);
              case 1:
                return G__20471__1.call(this, result);
              case 2:
                return G__20471__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__20471.cljs$core$IFn$_invoke$arity$0 = G__20471__0;
          G__20471.cljs$core$IFn$_invoke$arity$1 = G__20471__1;
          G__20471.cljs$core$IFn$_invoke$arity$2 = G__20471__2;
          return G__20471;
        }();
      }(a, pa);
    };
  };
  var cljs$core$partition_by__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var fst = cljs.core.first(s);
        var fv = function() {
          var G__20469 = fst;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20469) : f.call(null, G__20469);
        }();
        var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4126__auto__) {
          return function(p1__20450_SHARP_) {
            return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, function() {
              var G__20470 = p1__20450_SHARP_;
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20470) : f.call(null, G__20470);
            }());
          };
        }(fst, fv, s, temp__4126__auto__), cljs.core.next(s)));
        return cljs.core.cons(run, cljs$core$partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$partition_by = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$partition_by__1.call(this, f);
      case 2:
        return cljs$core$partition_by__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$partition_by.cljs$core$IFn$_invoke$arity$1 = cljs$core$partition_by__1;
  cljs$core$partition_by.cljs$core$IFn$_invoke$arity$2 = cljs$core$partition_by__2;
  return cljs$core$partition_by;
}();
cljs.core.frequencies = function cljs$core$frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var cljs$core$reductions = null;
  var cljs$core$reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq(coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return cljs$core$reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
      } else {
        return cljs.core._conj(cljs.core.List.EMPTY, function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }());
      }
    }, null, null);
  };
  var cljs$core$reductions__3 = function(f, init, coll) {
    return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs$core$reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
          var G__20480 = init;
          var G__20481 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20480, G__20481) : f.call(null, G__20480, G__20481);
        }(), cljs.core.rest(s));
      } else {
        return null;
      }
    }, null, null));
  };
  cljs$core$reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return cljs$core$reductions__2.call(this, f, init);
      case 3:
        return cljs$core$reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$reductions.cljs$core$IFn$_invoke$arity$2 = cljs$core$reductions__2;
  cljs$core$reductions.cljs$core$IFn$_invoke$arity$3 = cljs$core$reductions__3;
  return cljs$core$reductions;
}();
cljs.core.juxt = function() {
  var cljs$core$juxt = null;
  var cljs$core$juxt__1 = function(f) {
    return function() {
      var G__20576 = null;
      var G__20576__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }()], null);
      };
      var G__20576__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__20534 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20534) : f.call(null, G__20534);
        }()], null);
      };
      var G__20576__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__20535 = x;
          var G__20536 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20535, G__20536) : f.call(null, G__20535, G__20536);
        }()], null);
      };
      var G__20576__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__20537 = x;
          var G__20538 = y;
          var G__20539 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20537, G__20538, G__20539) : f.call(null, G__20537, G__20538, G__20539);
        }()], null);
      };
      var G__20576__4 = function() {
        var G__20577__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
        };
        var G__20577 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__20578__i = 0, G__20578__a = new Array(arguments.length - 3);
            while (G__20578__i < G__20578__a.length) {
              G__20578__a[G__20578__i] = arguments[G__20578__i + 3];
              ++G__20578__i;
            }
            args = new cljs.core.IndexedSeq(G__20578__a, 0);
          }
          return G__20577__delegate.call(this, x, y, z, args);
        };
        G__20577.cljs$lang$maxFixedArity = 3;
        G__20577.cljs$lang$applyTo = function(arglist__20579) {
          var x = cljs.core.first(arglist__20579);
          arglist__20579 = cljs.core.next(arglist__20579);
          var y = cljs.core.first(arglist__20579);
          arglist__20579 = cljs.core.next(arglist__20579);
          var z = cljs.core.first(arglist__20579);
          var args = cljs.core.rest(arglist__20579);
          return G__20577__delegate(x, y, z, args);
        };
        G__20577.cljs$core$IFn$_invoke$arity$variadic = G__20577__delegate;
        return G__20577;
      }();
      G__20576 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__20576__0.call(this);
          case 1:
            return G__20576__1.call(this, x);
          case 2:
            return G__20576__2.call(this, x, y);
          case 3:
            return G__20576__3.call(this, x, y, z);
          default:
            var G__20580 = null;
            if (arguments.length > 3) {
              var G__20581__i = 0, G__20581__a = new Array(arguments.length - 3);
              while (G__20581__i < G__20581__a.length) {
                G__20581__a[G__20581__i] = arguments[G__20581__i + 3];
                ++G__20581__i;
              }
              G__20580 = new cljs.core.IndexedSeq(G__20581__a, 0);
            }
            return G__20576__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__20580);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__20576.cljs$lang$maxFixedArity = 3;
      G__20576.cljs$lang$applyTo = G__20576__4.cljs$lang$applyTo;
      G__20576.cljs$core$IFn$_invoke$arity$0 = G__20576__0;
      G__20576.cljs$core$IFn$_invoke$arity$1 = G__20576__1;
      G__20576.cljs$core$IFn$_invoke$arity$2 = G__20576__2;
      G__20576.cljs$core$IFn$_invoke$arity$3 = G__20576__3;
      G__20576.cljs$core$IFn$_invoke$arity$variadic = G__20576__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__20576;
    }();
  };
  var cljs$core$juxt__2 = function(f, g) {
    return function() {
      var G__20582 = null;
      var G__20582__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }(), function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }()], null);
      };
      var G__20582__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__20540 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20540) : f.call(null, G__20540);
        }(), function() {
          var G__20541 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__20541) : g.call(null, G__20541);
        }()], null);
      };
      var G__20582__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__20542 = x;
          var G__20543 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20542, G__20543) : f.call(null, G__20542, G__20543);
        }(), function() {
          var G__20544 = x;
          var G__20545 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__20544, G__20545) : g.call(null, G__20544, G__20545);
        }()], null);
      };
      var G__20582__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__20546 = x;
          var G__20547 = y;
          var G__20548 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20546, G__20547, G__20548) : f.call(null, G__20546, G__20547, G__20548);
        }(), function() {
          var G__20549 = x;
          var G__20550 = y;
          var G__20551 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__20549, G__20550, G__20551) : g.call(null, G__20549, G__20550, G__20551);
        }()], null);
      };
      var G__20582__4 = function() {
        var G__20583__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
        };
        var G__20583 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__20584__i = 0, G__20584__a = new Array(arguments.length - 3);
            while (G__20584__i < G__20584__a.length) {
              G__20584__a[G__20584__i] = arguments[G__20584__i + 3];
              ++G__20584__i;
            }
            args = new cljs.core.IndexedSeq(G__20584__a, 0);
          }
          return G__20583__delegate.call(this, x, y, z, args);
        };
        G__20583.cljs$lang$maxFixedArity = 3;
        G__20583.cljs$lang$applyTo = function(arglist__20585) {
          var x = cljs.core.first(arglist__20585);
          arglist__20585 = cljs.core.next(arglist__20585);
          var y = cljs.core.first(arglist__20585);
          arglist__20585 = cljs.core.next(arglist__20585);
          var z = cljs.core.first(arglist__20585);
          var args = cljs.core.rest(arglist__20585);
          return G__20583__delegate(x, y, z, args);
        };
        G__20583.cljs$core$IFn$_invoke$arity$variadic = G__20583__delegate;
        return G__20583;
      }();
      G__20582 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__20582__0.call(this);
          case 1:
            return G__20582__1.call(this, x);
          case 2:
            return G__20582__2.call(this, x, y);
          case 3:
            return G__20582__3.call(this, x, y, z);
          default:
            var G__20586 = null;
            if (arguments.length > 3) {
              var G__20587__i = 0, G__20587__a = new Array(arguments.length - 3);
              while (G__20587__i < G__20587__a.length) {
                G__20587__a[G__20587__i] = arguments[G__20587__i + 3];
                ++G__20587__i;
              }
              G__20586 = new cljs.core.IndexedSeq(G__20587__a, 0);
            }
            return G__20582__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__20586);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__20582.cljs$lang$maxFixedArity = 3;
      G__20582.cljs$lang$applyTo = G__20582__4.cljs$lang$applyTo;
      G__20582.cljs$core$IFn$_invoke$arity$0 = G__20582__0;
      G__20582.cljs$core$IFn$_invoke$arity$1 = G__20582__1;
      G__20582.cljs$core$IFn$_invoke$arity$2 = G__20582__2;
      G__20582.cljs$core$IFn$_invoke$arity$3 = G__20582__3;
      G__20582.cljs$core$IFn$_invoke$arity$variadic = G__20582__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__20582;
    }();
  };
  var cljs$core$juxt__3 = function(f, g, h) {
    return function() {
      var G__20588 = null;
      var G__20588__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }(), function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }(), function() {
          return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        }()], null);
      };
      var G__20588__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__20552 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20552) : f.call(null, G__20552);
        }(), function() {
          var G__20553 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__20553) : g.call(null, G__20553);
        }(), function() {
          var G__20554 = x;
          return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__20554) : h.call(null, G__20554);
        }()], null);
      };
      var G__20588__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__20555 = x;
          var G__20556 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20555, G__20556) : f.call(null, G__20555, G__20556);
        }(), function() {
          var G__20557 = x;
          var G__20558 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__20557, G__20558) : g.call(null, G__20557, G__20558);
        }(), function() {
          var G__20559 = x;
          var G__20560 = y;
          return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__20559, G__20560) : h.call(null, G__20559, G__20560);
        }()], null);
      };
      var G__20588__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__20561 = x;
          var G__20562 = y;
          var G__20563 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20561, G__20562, G__20563) : f.call(null, G__20561, G__20562, G__20563);
        }(), function() {
          var G__20564 = x;
          var G__20565 = y;
          var G__20566 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__20564, G__20565, G__20566) : g.call(null, G__20564, G__20565, G__20566);
        }(), function() {
          var G__20567 = x;
          var G__20568 = y;
          var G__20569 = z;
          return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__20567, G__20568, G__20569) : h.call(null, G__20567, G__20568, G__20569);
        }()], null);
      };
      var G__20588__4 = function() {
        var G__20589__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
        };
        var G__20589 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__20590__i = 0, G__20590__a = new Array(arguments.length - 3);
            while (G__20590__i < G__20590__a.length) {
              G__20590__a[G__20590__i] = arguments[G__20590__i + 3];
              ++G__20590__i;
            }
            args = new cljs.core.IndexedSeq(G__20590__a, 0);
          }
          return G__20589__delegate.call(this, x, y, z, args);
        };
        G__20589.cljs$lang$maxFixedArity = 3;
        G__20589.cljs$lang$applyTo = function(arglist__20591) {
          var x = cljs.core.first(arglist__20591);
          arglist__20591 = cljs.core.next(arglist__20591);
          var y = cljs.core.first(arglist__20591);
          arglist__20591 = cljs.core.next(arglist__20591);
          var z = cljs.core.first(arglist__20591);
          var args = cljs.core.rest(arglist__20591);
          return G__20589__delegate(x, y, z, args);
        };
        G__20589.cljs$core$IFn$_invoke$arity$variadic = G__20589__delegate;
        return G__20589;
      }();
      G__20588 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__20588__0.call(this);
          case 1:
            return G__20588__1.call(this, x);
          case 2:
            return G__20588__2.call(this, x, y);
          case 3:
            return G__20588__3.call(this, x, y, z);
          default:
            var G__20592 = null;
            if (arguments.length > 3) {
              var G__20593__i = 0, G__20593__a = new Array(arguments.length - 3);
              while (G__20593__i < G__20593__a.length) {
                G__20593__a[G__20593__i] = arguments[G__20593__i + 3];
                ++G__20593__i;
              }
              G__20592 = new cljs.core.IndexedSeq(G__20593__a, 0);
            }
            return G__20588__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__20592);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__20588.cljs$lang$maxFixedArity = 3;
      G__20588.cljs$lang$applyTo = G__20588__4.cljs$lang$applyTo;
      G__20588.cljs$core$IFn$_invoke$arity$0 = G__20588__0;
      G__20588.cljs$core$IFn$_invoke$arity$1 = G__20588__1;
      G__20588.cljs$core$IFn$_invoke$arity$2 = G__20588__2;
      G__20588.cljs$core$IFn$_invoke$arity$3 = G__20588__3;
      G__20588.cljs$core$IFn$_invoke$arity$variadic = G__20588__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__20588;
    }();
  };
  var cljs$core$juxt__4 = function() {
    var G__20594__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__20595 = null;
          var G__20595__0 = function() {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__20482_SHARP_, p2__20483_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__20482_SHARP_, function() {
                  return p2__20483_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__20483_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__20483_SHARP_.call(null);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__20595__1 = function(x) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__20484_SHARP_, p2__20485_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__20484_SHARP_, function() {
                  var G__20570 = x;
                  return p2__20485_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__20485_SHARP_.cljs$core$IFn$_invoke$arity$1(G__20570) : p2__20485_SHARP_.call(null, G__20570);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__20595__2 = function(x, y) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__20486_SHARP_, p2__20487_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__20486_SHARP_, function() {
                  var G__20571 = x;
                  var G__20572 = y;
                  return p2__20487_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__20487_SHARP_.cljs$core$IFn$_invoke$arity$2(G__20571, G__20572) : p2__20487_SHARP_.call(null, G__20571, G__20572);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__20595__3 = function(x, y, z) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__20488_SHARP_, p2__20489_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__20488_SHARP_, function() {
                  var G__20573 = x;
                  var G__20574 = y;
                  var G__20575 = z;
                  return p2__20489_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__20489_SHARP_.cljs$core$IFn$_invoke$arity$3(G__20573, G__20574, G__20575) : p2__20489_SHARP_.call(null, G__20573, G__20574, G__20575);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__20595__4 = function() {
            var G__20596__delegate = function(x, y, z, args) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
                return function(p1__20490_SHARP_, p2__20491_SHARP_) {
                  return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__20490_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__20491_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__20596 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__20597__i = 0, G__20597__a = new Array(arguments.length - 3);
                while (G__20597__i < G__20597__a.length) {
                  G__20597__a[G__20597__i] = arguments[G__20597__i + 3];
                  ++G__20597__i;
                }
                args = new cljs.core.IndexedSeq(G__20597__a, 0);
              }
              return G__20596__delegate.call(this, x, y, z, args);
            };
            G__20596.cljs$lang$maxFixedArity = 3;
            G__20596.cljs$lang$applyTo = function(arglist__20598) {
              var x = cljs.core.first(arglist__20598);
              arglist__20598 = cljs.core.next(arglist__20598);
              var y = cljs.core.first(arglist__20598);
              arglist__20598 = cljs.core.next(arglist__20598);
              var z = cljs.core.first(arglist__20598);
              var args = cljs.core.rest(arglist__20598);
              return G__20596__delegate(x, y, z, args);
            };
            G__20596.cljs$core$IFn$_invoke$arity$variadic = G__20596__delegate;
            return G__20596;
          }();
          G__20595 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__20595__0.call(this);
              case 1:
                return G__20595__1.call(this, x);
              case 2:
                return G__20595__2.call(this, x, y);
              case 3:
                return G__20595__3.call(this, x, y, z);
              default:
                var G__20599 = null;
                if (arguments.length > 3) {
                  var G__20600__i = 0, G__20600__a = new Array(arguments.length - 3);
                  while (G__20600__i < G__20600__a.length) {
                    G__20600__a[G__20600__i] = arguments[G__20600__i + 3];
                    ++G__20600__i;
                  }
                  G__20599 = new cljs.core.IndexedSeq(G__20600__a, 0);
                }
                return G__20595__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__20599);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__20595.cljs$lang$maxFixedArity = 3;
          G__20595.cljs$lang$applyTo = G__20595__4.cljs$lang$applyTo;
          G__20595.cljs$core$IFn$_invoke$arity$0 = G__20595__0;
          G__20595.cljs$core$IFn$_invoke$arity$1 = G__20595__1;
          G__20595.cljs$core$IFn$_invoke$arity$2 = G__20595__2;
          G__20595.cljs$core$IFn$_invoke$arity$3 = G__20595__3;
          G__20595.cljs$core$IFn$_invoke$arity$variadic = G__20595__4.cljs$core$IFn$_invoke$arity$variadic;
          return G__20595;
        }();
      }(fs__$1);
    };
    var G__20594 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        var G__20601__i = 0, G__20601__a = new Array(arguments.length - 3);
        while (G__20601__i < G__20601__a.length) {
          G__20601__a[G__20601__i] = arguments[G__20601__i + 3];
          ++G__20601__i;
        }
        fs = new cljs.core.IndexedSeq(G__20601__a, 0);
      }
      return G__20594__delegate.call(this, f, g, h, fs);
    };
    G__20594.cljs$lang$maxFixedArity = 3;
    G__20594.cljs$lang$applyTo = function(arglist__20602) {
      var f = cljs.core.first(arglist__20602);
      arglist__20602 = cljs.core.next(arglist__20602);
      var g = cljs.core.first(arglist__20602);
      arglist__20602 = cljs.core.next(arglist__20602);
      var h = cljs.core.first(arglist__20602);
      var fs = cljs.core.rest(arglist__20602);
      return G__20594__delegate(f, g, h, fs);
    };
    G__20594.cljs$core$IFn$_invoke$arity$variadic = G__20594__delegate;
    return G__20594;
  }();
  cljs$core$juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$juxt__1.call(this, f);
      case 2:
        return cljs$core$juxt__2.call(this, f, g);
      case 3:
        return cljs$core$juxt__3.call(this, f, g, h);
      default:
        var G__20603 = null;
        if (arguments.length > 3) {
          var G__20604__i = 0, G__20604__a = new Array(arguments.length - 3);
          while (G__20604__i < G__20604__a.length) {
            G__20604__a[G__20604__i] = arguments[G__20604__i + 3];
            ++G__20604__i;
          }
          G__20603 = new cljs.core.IndexedSeq(G__20604__a, 0);
        }
        return cljs$core$juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, G__20603);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$juxt.cljs$lang$maxFixedArity = 3;
  cljs$core$juxt.cljs$lang$applyTo = cljs$core$juxt__4.cljs$lang$applyTo;
  cljs$core$juxt.cljs$core$IFn$_invoke$arity$1 = cljs$core$juxt__1;
  cljs$core$juxt.cljs$core$IFn$_invoke$arity$2 = cljs$core$juxt__2;
  cljs$core$juxt.cljs$core$IFn$_invoke$arity$3 = cljs$core$juxt__3;
  cljs$core$juxt.cljs$core$IFn$_invoke$arity$variadic = cljs$core$juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$juxt;
}();
cljs.core.dorun = function() {
  var cljs$core$dorun = null;
  var cljs$core$dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq(coll)) {
        var G__20605 = cljs.core.next(coll);
        coll = G__20605;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var cljs$core$dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq(coll) && n > 0) {
        var G__20606 = n - 1;
        var G__20607 = cljs.core.next(coll);
        n = G__20606;
        coll = G__20607;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  cljs$core$dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$dorun__1.call(this, n);
      case 2:
        return cljs$core$dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$dorun.cljs$core$IFn$_invoke$arity$1 = cljs$core$dorun__1;
  cljs$core$dorun.cljs$core$IFn$_invoke$arity$2 = cljs$core$dorun__2;
  return cljs$core$dorun;
}();
cljs.core.doall = function() {
  var cljs$core$doall = null;
  var cljs$core$doall__1 = function(coll) {
    cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
    return coll;
  };
  var cljs$core$doall__2 = function(n, coll) {
    cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
    return coll;
  };
  cljs$core$doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$doall__1.call(this, n);
      case 2:
        return cljs$core$doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$doall.cljs$core$IFn$_invoke$arity$1 = cljs$core$doall__1;
  cljs$core$doall.cljs$core$IFn$_invoke$arity$2 = cljs$core$doall__2;
  return cljs$core$doall;
}();
cljs.core.regexp_QMARK_ = function cljs$core$regexp_QMARK_(x) {
  return x instanceof RegExp;
};
cljs.core.re_matches = function cljs$core$re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function cljs$core$re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function cljs$core$re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? cljs$core$re_seq(re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function cljs$core$re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__20611 = cljs.core.re_find(/^\(\?([idmsux]*)\)/, s);
    var prefix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20611, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20611, 1, null);
    var pattern = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, cljs.core.count(prefix));
    return new RegExp(pattern, function() {
      var or__4109__auto__ = flags;
      if (cljs.core.truth_(or__4109__auto__)) {
        return or__4109__auto__;
      } else {
        return "";
      }
    }());
  }
};
cljs.core.pr_sequential_writer = function cljs$core$pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_20619 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__4109__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__4109__auto__)) {
              return or__4109__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__20620_20626 = cljs.core.first(coll);
          var G__20621_20627 = writer;
          var G__20622_20628 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__20620_20626, G__20621_20627, G__20622_20628) : print_one.call(null, G__20620_20626, G__20621_20627, G__20622_20628);
        } else {
        }
        var coll_20629__$1 = cljs.core.next(coll);
        var n_20630 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_20629__$1 && (n_20630 == null || !(n_20630 === 0))) {
            cljs.core._write(writer, sep);
            var G__20623_20631 = cljs.core.first(coll_20629__$1);
            var G__20624_20632 = writer;
            var G__20625_20633 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__20623_20631, G__20624_20632, G__20625_20633) : print_one.call(null, G__20623_20631, G__20624_20632, G__20625_20633);
            var G__20634 = cljs.core.next(coll_20629__$1);
            var G__20635 = n_20630 - 1;
            coll_20629__$1 = G__20634;
            n_20630 = G__20635;
            continue;
          } else {
            if (cljs.core.seq(coll_20629__$1) && n_20630 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__4109__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__4109__auto__)) {
                  return or__4109__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_20619;
  }
};
cljs.core.write_all = function() {
  var cljs$core$write_all__delegate = function(writer, ss) {
    var seq__20640 = cljs.core.seq(ss);
    var chunk__20641 = null;
    var count__20642 = 0;
    var i__20643 = 0;
    while (true) {
      if (i__20643 < count__20642) {
        var s = chunk__20641.cljs$core$IIndexed$_nth$arity$2(null, i__20643);
        cljs.core._write(writer, s);
        var G__20644 = seq__20640;
        var G__20645 = chunk__20641;
        var G__20646 = count__20642;
        var G__20647 = i__20643 + 1;
        seq__20640 = G__20644;
        chunk__20641 = G__20645;
        count__20642 = G__20646;
        i__20643 = G__20647;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq(seq__20640);
        if (temp__4126__auto__) {
          var seq__20640__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(seq__20640__$1)) {
            var c__4894__auto__ = cljs.core.chunk_first(seq__20640__$1);
            var G__20648 = cljs.core.chunk_rest(seq__20640__$1);
            var G__20649 = c__4894__auto__;
            var G__20650 = cljs.core.count(c__4894__auto__);
            var G__20651 = 0;
            seq__20640 = G__20648;
            chunk__20641 = G__20649;
            count__20642 = G__20650;
            i__20643 = G__20651;
            continue;
          } else {
            var s = cljs.core.first(seq__20640__$1);
            cljs.core._write(writer, s);
            var G__20652 = cljs.core.next(seq__20640__$1);
            var G__20653 = null;
            var G__20654 = 0;
            var G__20655 = 0;
            seq__20640 = G__20652;
            chunk__20641 = G__20653;
            count__20642 = G__20654;
            i__20643 = G__20655;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var cljs$core$write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      var G__20656__i = 0, G__20656__a = new Array(arguments.length - 1);
      while (G__20656__i < G__20656__a.length) {
        G__20656__a[G__20656__i] = arguments[G__20656__i + 1];
        ++G__20656__i;
      }
      ss = new cljs.core.IndexedSeq(G__20656__a, 0);
    }
    return cljs$core$write_all__delegate.call(this, writer, ss);
  };
  cljs$core$write_all.cljs$lang$maxFixedArity = 1;
  cljs$core$write_all.cljs$lang$applyTo = function(arglist__20657) {
    var writer = cljs.core.first(arglist__20657);
    var ss = cljs.core.rest(arglist__20657);
    return cljs$core$write_all__delegate(writer, ss);
  };
  cljs$core$write_all.cljs$core$IFn$_invoke$arity$variadic = cljs$core$write_all__delegate;
  return cljs$core$write_all;
}();
cljs.core.string_print = function cljs$core$string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function cljs$core$flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj20659 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj20659;
}();
cljs.core.quote_string = function cljs$core$quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(function() {
    var G__20662 = '[\\\\"\b\f\n\r\t]';
    var G__20663 = "g";
    return RegExp(G__20662, G__20663);
  }(), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer_impl = function cljs$core$pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write(writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__4097__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__4097__auto__)) {
          var and__4097__auto____$1 = function() {
            var G__20677 = obj;
            if (G__20677) {
              var bit__4783__auto__ = G__20677.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4783__auto__ || G__20677.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__20677.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__20677);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__20677);
            }
          }();
          if (and__4097__auto____$1) {
            return cljs.core.meta(obj);
          } else {
            return and__4097__auto____$1;
          }
        } else {
          return and__4097__auto__;
        }
      }())) {
        cljs.core._write(writer, "^");
        var G__20678_20688 = cljs.core.meta(obj);
        var G__20679_20689 = writer;
        var G__20680_20690 = opts;
        cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__20678_20688, G__20679_20689, G__20680_20690) : cljs.core.pr_writer.call(null, G__20678_20688, G__20679_20689, G__20680_20690);
        cljs.core._write(writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write(writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__20681 = obj;
            if (G__20681) {
              var bit__4776__auto__ = G__20681.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4776__auto__ || G__20681.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
          } else {
            if (cljs.core.type(obj) === Boolean || typeof obj === "number") {
              return cljs.core._write(writer, [cljs.core.str(obj)].join(""));
            } else {
              if (cljs.core.object_QMARK_(obj)) {
                cljs.core._write(writer, "#js ");
                var G__20682 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
                }, cljs.core.js_keys(obj));
                var G__20683 = cljs.core.pr_writer;
                var G__20684 = writer;
                var G__20685 = opts;
                return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__20682, G__20683, G__20684, G__20685) : cljs.core.print_map.call(null, G__20682, G__20683, G__20684, G__20685);
              } else {
                if (cljs.core.array_QMARK_(obj)) {
                  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (cljs.core.truth_(function() {
                    var G__20686 = obj;
                    return goog.isString(G__20686);
                  }())) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write(writer, cljs.core.quote_string(obj));
                    } else {
                      return cljs.core._write(writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = [cljs.core.str(n)].join("");
                          while (true) {
                            if (cljs.core.count(ns) < len) {
                              var G__20691 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                              ns = G__20691;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                      } else {
                        if (cljs.core.regexp_QMARK_(obj)) {
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                        } else {
                          if (function() {
                            var G__20687 = obj;
                            if (G__20687) {
                              var bit__4783__auto__ = G__20687.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4783__auto__ || G__20687.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__20687.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__20687);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__20687);
                            }
                          }()) {
                            return cljs.core._pr_writer(obj, writer, opts);
                          } else {
                            return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function cljs$core$pr_writer(obj, writer, opts) {
  var temp__4124__auto__ = (new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595)).cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var alt_impl = temp__4124__auto__;
    var G__20695 = obj;
    var G__20696 = writer;
    var G__20697 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__20695, G__20696, G__20697) : alt_impl.call(null, G__20695, G__20696, G__20697);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function cljs$core$pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__20702 = cljs.core.seq(cljs.core.next(objs));
  var chunk__20703 = null;
  var count__20704 = 0;
  var i__20705 = 0;
  while (true) {
    if (i__20705 < count__20704) {
      var obj = chunk__20703.cljs$core$IIndexed$_nth$arity$2(null, i__20705);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__20706 = seq__20702;
      var G__20707 = chunk__20703;
      var G__20708 = count__20704;
      var G__20709 = i__20705 + 1;
      seq__20702 = G__20706;
      chunk__20703 = G__20707;
      count__20704 = G__20708;
      i__20705 = G__20709;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__20702);
      if (temp__4126__auto__) {
        var seq__20702__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__20702__$1)) {
          var c__4894__auto__ = cljs.core.chunk_first(seq__20702__$1);
          var G__20710 = cljs.core.chunk_rest(seq__20702__$1);
          var G__20711 = c__4894__auto__;
          var G__20712 = cljs.core.count(c__4894__auto__);
          var G__20713 = 0;
          seq__20702 = G__20710;
          chunk__20703 = G__20711;
          count__20704 = G__20712;
          i__20705 = G__20713;
          continue;
        } else {
          var obj = cljs.core.first(seq__20702__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__20714 = cljs.core.next(seq__20702__$1);
          var G__20715 = null;
          var G__20716 = 0;
          var G__20717 = 0;
          seq__20702 = G__20714;
          chunk__20703 = G__20715;
          count__20704 = G__20716;
          i__20705 = G__20717;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function cljs$core$pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function cljs$core$pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function cljs$core$prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function cljs$core$pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function cljs$core$newline(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var cljs$core$pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
  };
  var cljs$core$pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__20718__i = 0, G__20718__a = new Array(arguments.length - 0);
      while (G__20718__i < G__20718__a.length) {
        G__20718__a[G__20718__i] = arguments[G__20718__i + 0];
        ++G__20718__i;
      }
      objs = new cljs.core.IndexedSeq(G__20718__a, 0);
    }
    return cljs$core$pr_str__delegate.call(this, objs);
  };
  cljs$core$pr_str.cljs$lang$maxFixedArity = 0;
  cljs$core$pr_str.cljs$lang$applyTo = function(arglist__20719) {
    var objs = cljs.core.seq(arglist__20719);
    return cljs$core$pr_str__delegate(objs);
  };
  cljs$core$pr_str.cljs$core$IFn$_invoke$arity$variadic = cljs$core$pr_str__delegate;
  return cljs$core$pr_str;
}();
cljs.core.prn_str = function() {
  var cljs$core$prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
  };
  var cljs$core$prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__20720__i = 0, G__20720__a = new Array(arguments.length - 0);
      while (G__20720__i < G__20720__a.length) {
        G__20720__a[G__20720__i] = arguments[G__20720__i + 0];
        ++G__20720__i;
      }
      objs = new cljs.core.IndexedSeq(G__20720__a, 0);
    }
    return cljs$core$prn_str__delegate.call(this, objs);
  };
  cljs$core$prn_str.cljs$lang$maxFixedArity = 0;
  cljs$core$prn_str.cljs$lang$applyTo = function(arglist__20721) {
    var objs = cljs.core.seq(arglist__20721);
    return cljs$core$prn_str__delegate(objs);
  };
  cljs$core$prn_str.cljs$core$IFn$_invoke$arity$variadic = cljs$core$prn_str__delegate;
  return cljs$core$prn_str;
}();
cljs.core.pr = function() {
  var cljs$core$pr__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  };
  var cljs$core$pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__20722__i = 0, G__20722__a = new Array(arguments.length - 0);
      while (G__20722__i < G__20722__a.length) {
        G__20722__a[G__20722__i] = arguments[G__20722__i + 0];
        ++G__20722__i;
      }
      objs = new cljs.core.IndexedSeq(G__20722__a, 0);
    }
    return cljs$core$pr__delegate.call(this, objs);
  };
  cljs$core$pr.cljs$lang$maxFixedArity = 0;
  cljs$core$pr.cljs$lang$applyTo = function(arglist__20723) {
    var objs = cljs.core.seq(arglist__20723);
    return cljs$core$pr__delegate(objs);
  };
  cljs$core$pr.cljs$core$IFn$_invoke$arity$variadic = cljs$core$pr__delegate;
  return cljs$core$pr;
}();
cljs.core.print = function() {
  var cljs$core$cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__20724__i = 0, G__20724__a = new Array(arguments.length - 0);
      while (G__20724__i < G__20724__a.length) {
        G__20724__a[G__20724__i] = arguments[G__20724__i + 0];
        ++G__20724__i;
      }
      objs = new cljs.core.IndexedSeq(G__20724__a, 0);
    }
    return cljs$core$cljs_core_print__delegate.call(this, objs);
  };
  cljs$core$cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs$core$cljs_core_print.cljs$lang$applyTo = function(arglist__20725) {
    var objs = cljs.core.seq(arglist__20725);
    return cljs$core$cljs_core_print__delegate(objs);
  };
  cljs$core$cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs$core$cljs_core_print__delegate;
  return cljs$core$cljs_core_print;
}();
cljs.core.print_str = function() {
  var cljs$core$print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__20726__i = 0, G__20726__a = new Array(arguments.length - 0);
      while (G__20726__i < G__20726__a.length) {
        G__20726__a[G__20726__i] = arguments[G__20726__i + 0];
        ++G__20726__i;
      }
      objs = new cljs.core.IndexedSeq(G__20726__a, 0);
    }
    return cljs$core$print_str__delegate.call(this, objs);
  };
  cljs$core$print_str.cljs$lang$maxFixedArity = 0;
  cljs$core$print_str.cljs$lang$applyTo = function(arglist__20727) {
    var objs = cljs.core.seq(arglist__20727);
    return cljs$core$print_str__delegate(objs);
  };
  cljs$core$print_str.cljs$core$IFn$_invoke$arity$variadic = cljs$core$print_str__delegate;
  return cljs$core$print_str;
}();
cljs.core.println = function() {
  var cljs$core$println__delegate = function(objs) {
    cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline(cljs.core.pr_opts());
    } else {
      return null;
    }
  };
  var cljs$core$println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__20728__i = 0, G__20728__a = new Array(arguments.length - 0);
      while (G__20728__i < G__20728__a.length) {
        G__20728__a[G__20728__i] = arguments[G__20728__i + 0];
        ++G__20728__i;
      }
      objs = new cljs.core.IndexedSeq(G__20728__a, 0);
    }
    return cljs$core$println__delegate.call(this, objs);
  };
  cljs$core$println.cljs$lang$maxFixedArity = 0;
  cljs$core$println.cljs$lang$applyTo = function(arglist__20729) {
    var objs = cljs.core.seq(arglist__20729);
    return cljs$core$println__delegate(objs);
  };
  cljs$core$println.cljs$core$IFn$_invoke$arity$variadic = cljs$core$println__delegate;
  return cljs$core$println;
}();
cljs.core.println_str = function() {
  var cljs$core$println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__20730__i = 0, G__20730__a = new Array(arguments.length - 0);
      while (G__20730__i < G__20730__a.length) {
        G__20730__a[G__20730__i] = arguments[G__20730__i + 0];
        ++G__20730__i;
      }
      objs = new cljs.core.IndexedSeq(G__20730__a, 0);
    }
    return cljs$core$println_str__delegate.call(this, objs);
  };
  cljs$core$println_str.cljs$lang$maxFixedArity = 0;
  cljs$core$println_str.cljs$lang$applyTo = function(arglist__20731) {
    var objs = cljs.core.seq(arglist__20731);
    return cljs$core$println_str__delegate(objs);
  };
  cljs$core$println_str.cljs$core$IFn$_invoke$arity$variadic = cljs$core$println_str__delegate;
  return cljs$core$println_str;
}();
cljs.core.prn = function() {
  var cljs$core$prn__delegate = function(objs) {
    cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline(cljs.core.pr_opts());
    } else {
      return null;
    }
  };
  var cljs$core$prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__20732__i = 0, G__20732__a = new Array(arguments.length - 0);
      while (G__20732__i < G__20732__a.length) {
        G__20732__a[G__20732__i] = arguments[G__20732__i + 0];
        ++G__20732__i;
      }
      objs = new cljs.core.IndexedSeq(G__20732__a, 0);
    }
    return cljs$core$prn__delegate.call(this, objs);
  };
  cljs$core$prn.cljs$lang$maxFixedArity = 0;
  cljs$core$prn.cljs$lang$applyTo = function(arglist__20733) {
    var objs = cljs.core.seq(arglist__20733);
    return cljs$core$prn__delegate(objs);
  };
  cljs$core$prn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$prn__delegate;
  return cljs$core$prn;
}();
cljs.core.print_map = function cljs$core$print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__20740_20746 = cljs.core.key(e);
    var G__20741_20747 = w;
    var G__20742_20748 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__20740_20746, G__20741_20747, G__20742_20748) : print_one.call(null, G__20740_20746, G__20741_20747, G__20742_20748);
    cljs.core._write(w, " ");
    var G__20743 = cljs.core.val(e);
    var G__20744 = w;
    var G__20745 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__20743, G__20744, G__20745) : print_one.call(null, G__20743, G__20744, G__20745);
  }, "{", ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cVolatile: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cAtom: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_keywords(x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols(x__$1, y);
};
cljs.core.alter_meta_BANG_ = function() {
  var cljs$core$alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
  };
  var cljs$core$alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__20749__i = 0, G__20749__a = new Array(arguments.length - 2);
      while (G__20749__i < G__20749__a.length) {
        G__20749__a[G__20749__i] = arguments[G__20749__i + 2];
        ++G__20749__i;
      }
      args = new cljs.core.IndexedSeq(G__20749__a, 0);
    }
    return cljs$core$alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  cljs$core$alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  cljs$core$alter_meta_BANG_.cljs$lang$applyTo = function(arglist__20750) {
    var iref = cljs.core.first(arglist__20750);
    arglist__20750 = cljs.core.next(arglist__20750);
    var f = cljs.core.first(arglist__20750);
    var args = cljs.core.rest(arglist__20750);
    return cljs$core$alter_meta_BANG___delegate(iref, f, args);
  };
  cljs$core$alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$alter_meta_BANG___delegate;
  return cljs$core$alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function cljs$core$reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function cljs$core$add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function cljs$core$remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var cljs$core$gensym = null;
  var cljs$core$gensym__0 = function() {
    return cljs$core$gensym.cljs$core$IFn$_invoke$arity$1("G__");
  };
  var cljs$core$gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = function() {
        var G__20753 = 0;
        return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__20753) : cljs.core.atom.call(null, G__20753);
      }();
    } else {
    }
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  cljs$core$gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return cljs$core$gensym__0.call(this);
      case 1:
        return cljs$core$gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$gensym.cljs$core$IFn$_invoke$arity$0 = cljs$core$gensym__0;
  cljs$core$gensym.cljs$core$IFn$_invoke$arity$1 = cljs$core$gensym__1;
  return cljs$core$gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = function() {
      return self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    }();
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function cljs$core$__GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function cljs$core$delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function cljs$core$force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    var G__20755 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20755) : cljs.core.deref.call(null, G__20755);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function cljs$core$realized_QMARK_(d) {
  return cljs.core._realized_QMARK_(d);
};
cljs.core.preserving_reduced = function cljs$core$preserving_reduced(rf) {
  return function(p1__20756_SHARP_, p2__20757_SHARP_) {
    var ret = function() {
      var G__20760 = p1__20756_SHARP_;
      var G__20761 = p2__20757_SHARP_;
      return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__20760, G__20761) : rf.call(null, G__20760, G__20761);
    }();
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cljs$core$cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__20764 = null;
      var G__20764__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__20764__1 = function(result) {
        var G__20763 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__20763) : rf.call(null, G__20763);
      };
      var G__20764__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__20764 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__20764__0.call(this);
          case 1:
            return G__20764__1.call(this, result);
          case 2:
            return G__20764__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__20764.cljs$core$IFn$_invoke$arity$0 = G__20764__0;
      G__20764.cljs$core$IFn$_invoke$arity$1 = G__20764__1;
      G__20764.cljs$core$IFn$_invoke$arity$2 = G__20764__2;
      return G__20764;
    }();
  }(rf1);
};
cljs.core.dedupe = function() {
  var cljs$core$dedupe = null;
  var cljs$core$dedupe__0 = function() {
    return function(rf) {
      var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(pa) {
        return function() {
          var G__20773 = null;
          var G__20773__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__20773__1 = function(result) {
            var G__20769 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__20769) : rf.call(null, G__20769);
          };
          var G__20773__2 = function(result, input) {
            var prior = function() {
              var G__20770 = pa;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20770) : cljs.core.deref.call(null, G__20770);
            }();
            cljs.core.vreset_BANG_(pa, input);
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
              return result;
            } else {
              var G__20771 = result;
              var G__20772 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__20771, G__20772) : rf.call(null, G__20771, G__20772);
            }
          };
          G__20773 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__20773__0.call(this);
              case 1:
                return G__20773__1.call(this, result);
              case 2:
                return G__20773__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__20773.cljs$core$IFn$_invoke$arity$0 = G__20773__0;
          G__20773.cljs$core$IFn$_invoke$arity$1 = G__20773__1;
          G__20773.cljs$core$IFn$_invoke$arity$2 = G__20773__2;
          return G__20773;
        }();
      }(pa);
    };
  };
  var cljs$core$dedupe__1 = function(coll) {
    return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(cljs$core$dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
  };
  cljs$core$dedupe = function(coll) {
    switch(arguments.length) {
      case 0:
        return cljs$core$dedupe__0.call(this);
      case 1:
        return cljs$core$dedupe__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$dedupe.cljs$core$IFn$_invoke$arity$0 = cljs$core$dedupe__0;
  cljs$core$dedupe.cljs$core$IFn$_invoke$arity$1 = cljs$core$dedupe__1;
  return cljs$core$dedupe;
}();
cljs.core.random_sample = function() {
  var cljs$core$random_sample = null;
  var cljs$core$random_sample__1 = function(prob) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
      return function() {
        return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
      }() < prob;
    });
  };
  var cljs$core$random_sample__2 = function(prob, coll) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
      return function() {
        return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
      }() < prob;
    }, coll);
  };
  cljs$core$random_sample = function(prob, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$random_sample__1.call(this, prob);
      case 2:
        return cljs$core$random_sample__2.call(this, prob, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$random_sample.cljs$core$IFn$_invoke$arity$1 = cljs$core$random_sample__1;
  cljs$core$random_sample.cljs$core$IFn$_invoke$arity$2 = cljs$core$random_sample__2;
  return cljs$core$random_sample;
}();
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, f, init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function cljs$core$__GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5085__auto__ = this;
  return cljs.core.es6_iterator(this__5085__auto__);
};
cljs.core.eduction = function cljs$core$eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.run_BANG_ = function cljs$core$run_BANG_(proc, coll) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__20775_SHARP_, p2__20774_SHARP_) {
    var G__20777 = p2__20774_SHARP_;
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(G__20777) : proc.call(null, G__20777);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj20779 = {};
  return obj20779;
}();
cljs.core._clj__GT_js = function cljs$core$_clj__GT_js(x) {
  if (function() {
    var and__4097__auto__ = x;
    if (and__4097__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4745__auto__ = x == null ? null : x;
    return function() {
      var or__4109__auto__ = cljs.core._clj__GT_js[function() {
        var G__20783 = x__4745__auto__;
        return goog.typeOf(G__20783);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function cljs$core$_key__GT_js(x) {
  if (function() {
    var and__4097__auto__ = x;
    if (and__4097__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4745__auto__ = x == null ? null : x;
    return function() {
      var or__4109__auto__ = cljs.core._key__GT_js[function() {
        var G__20787 = x__4745__auto__;
        return goog.typeOf(G__20787);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function cljs$core$key__GT_js(k) {
  if (function() {
    var G__20790 = k;
    if (G__20790) {
      var bit__4783__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4109__auto__ = bit__4783__auto__;
        if (cljs.core.truth_(or__4109__auto__)) {
          return or__4109__auto__;
        } else {
          return G__20790.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__20790.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__20790);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__20790);
    }
  }()) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      var G__20791 = k;
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(G__20791) : cljs.core.clj__GT_js.call(null, G__20791);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function cljs$core$clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__20807 = x;
      if (G__20807) {
        var bit__4783__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4109__auto__ = bit__4783__auto__;
          if (cljs.core.truth_(or__4109__auto__)) {
            return or__4109__auto__;
          } else {
            return G__20807.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__20807.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__20807);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__20807);
      }
    }()) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = function() {
              var obj20809 = {};
              return obj20809;
            }();
            var seq__20810_20820 = cljs.core.seq(x);
            var chunk__20811_20821 = null;
            var count__20812_20822 = 0;
            var i__20813_20823 = 0;
            while (true) {
              if (i__20813_20823 < count__20812_20822) {
                var vec__20814_20824 = chunk__20811_20821.cljs$core$IIndexed$_nth$arity$2(null, i__20813_20823);
                var k_20825 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20814_20824, 0, null);
                var v_20826 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20814_20824, 1, null);
                m[cljs.core.key__GT_js(k_20825)] = cljs$core$clj__GT_js(v_20826);
                var G__20827 = seq__20810_20820;
                var G__20828 = chunk__20811_20821;
                var G__20829 = count__20812_20822;
                var G__20830 = i__20813_20823 + 1;
                seq__20810_20820 = G__20827;
                chunk__20811_20821 = G__20828;
                count__20812_20822 = G__20829;
                i__20813_20823 = G__20830;
                continue;
              } else {
                var temp__4126__auto___20831 = cljs.core.seq(seq__20810_20820);
                if (temp__4126__auto___20831) {
                  var seq__20810_20832__$1 = temp__4126__auto___20831;
                  if (cljs.core.chunked_seq_QMARK_(seq__20810_20832__$1)) {
                    var c__4894__auto___20833 = cljs.core.chunk_first(seq__20810_20832__$1);
                    var G__20834 = cljs.core.chunk_rest(seq__20810_20832__$1);
                    var G__20835 = c__4894__auto___20833;
                    var G__20836 = cljs.core.count(c__4894__auto___20833);
                    var G__20837 = 0;
                    seq__20810_20820 = G__20834;
                    chunk__20811_20821 = G__20835;
                    count__20812_20822 = G__20836;
                    i__20813_20823 = G__20837;
                    continue;
                  } else {
                    var vec__20815_20838 = cljs.core.first(seq__20810_20832__$1);
                    var k_20839 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20815_20838, 0, null);
                    var v_20840 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20815_20838, 1, null);
                    m[cljs.core.key__GT_js(k_20839)] = cljs$core$clj__GT_js(v_20840);
                    var G__20841 = cljs.core.next(seq__20810_20832__$1);
                    var G__20842 = null;
                    var G__20843 = 0;
                    var G__20844 = 0;
                    seq__20810_20820 = G__20841;
                    chunk__20811_20821 = G__20842;
                    count__20812_20822 = G__20843;
                    i__20813_20823 = G__20844;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__20816_20845 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$clj__GT_js, x));
              var chunk__20817_20846 = null;
              var count__20818_20847 = 0;
              var i__20819_20848 = 0;
              while (true) {
                if (i__20819_20848 < count__20818_20847) {
                  var x_20849__$1 = chunk__20817_20846.cljs$core$IIndexed$_nth$arity$2(null, i__20819_20848);
                  arr.push(x_20849__$1);
                  var G__20850 = seq__20816_20845;
                  var G__20851 = chunk__20817_20846;
                  var G__20852 = count__20818_20847;
                  var G__20853 = i__20819_20848 + 1;
                  seq__20816_20845 = G__20850;
                  chunk__20817_20846 = G__20851;
                  count__20818_20847 = G__20852;
                  i__20819_20848 = G__20853;
                  continue;
                } else {
                  var temp__4126__auto___20854 = cljs.core.seq(seq__20816_20845);
                  if (temp__4126__auto___20854) {
                    var seq__20816_20855__$1 = temp__4126__auto___20854;
                    if (cljs.core.chunked_seq_QMARK_(seq__20816_20855__$1)) {
                      var c__4894__auto___20856 = cljs.core.chunk_first(seq__20816_20855__$1);
                      var G__20857 = cljs.core.chunk_rest(seq__20816_20855__$1);
                      var G__20858 = c__4894__auto___20856;
                      var G__20859 = cljs.core.count(c__4894__auto___20856);
                      var G__20860 = 0;
                      seq__20816_20845 = G__20857;
                      chunk__20817_20846 = G__20858;
                      count__20818_20847 = G__20859;
                      i__20819_20848 = G__20860;
                      continue;
                    } else {
                      var x_20861__$1 = cljs.core.first(seq__20816_20855__$1);
                      arr.push(x_20861__$1);
                      var G__20862 = cljs.core.next(seq__20816_20855__$1);
                      var G__20863 = null;
                      var G__20864 = 0;
                      var G__20865 = 0;
                      seq__20816_20845 = G__20862;
                      chunk__20817_20846 = G__20863;
                      count__20818_20847 = G__20864;
                      i__20819_20848 = G__20865;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj20867 = {};
  return obj20867;
}();
cljs.core._js__GT_clj = function cljs$core$_js__GT_clj(x, options) {
  if (function() {
    var and__4097__auto__ = x;
    if (and__4097__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4745__auto__ = x == null ? null : x;
    return function() {
      var or__4109__auto__ = cljs.core._js__GT_clj[function() {
        var G__20871 = x__4745__auto__;
        return goog.typeOf(G__20871);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var cljs$core$js__GT_clj = null;
  var cljs$core$js__GT_clj__1 = function(x) {
    return cljs$core$js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null)], 0));
  };
  var cljs$core$js__GT_clj__2 = function() {
    var G__20928__delegate = function(x, opts) {
      var map__20901 = opts;
      var map__20901__$1 = cljs.core.seq_QMARK_(map__20901) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__20901) : map__20901;
      var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20901__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
      var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
      var f = function(map__20901, map__20901__$1, keywordize_keys, keyfn) {
        return function cljs$core$js__GT_clj_$_thisfn(x__$1) {
          if (function() {
            var G__20917 = x__$1;
            if (G__20917) {
              var bit__4783__auto__ = null;
              if (cljs.core.truth_(function() {
                var or__4109__auto__ = bit__4783__auto__;
                if (cljs.core.truth_(or__4109__auto__)) {
                  return or__4109__auto__;
                } else {
                  return G__20917.cljs$core$IEncodeClojure$;
                }
              }())) {
                return true;
              } else {
                if (!G__20917.cljs$lang$protocol_mask$partition$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__20917);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__20917);
            }
          }()) {
            return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
          } else {
            if (cljs.core.seq_QMARK_(x__$1)) {
              return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$js__GT_clj_$_thisfn, x__$1));
            } else {
              if (cljs.core.coll_QMARK_(x__$1)) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$js__GT_clj_$_thisfn, x__$1));
              } else {
                if (cljs.core.array_QMARK_(x__$1)) {
                  return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$js__GT_clj_$_thisfn, x__$1));
                } else {
                  if (cljs.core.type(x__$1) === Object) {
                    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                      var iter__4863__auto__ = function(map__20901, map__20901__$1, keywordize_keys, keyfn) {
                        return function cljs$core$js__GT_clj_$_thisfn_$_iter__20918(s__20919) {
                          return new cljs.core.LazySeq(null, function(map__20901, map__20901__$1, keywordize_keys, keyfn) {
                            return function() {
                              var s__20919__$1 = s__20919;
                              while (true) {
                                var temp__4126__auto__ = cljs.core.seq(s__20919__$1);
                                if (temp__4126__auto__) {
                                  var s__20919__$2 = temp__4126__auto__;
                                  if (cljs.core.chunked_seq_QMARK_(s__20919__$2)) {
                                    var c__4861__auto__ = cljs.core.chunk_first(s__20919__$2);
                                    var size__4862__auto__ = cljs.core.count(c__4861__auto__);
                                    var b__20921 = cljs.core.chunk_buffer(size__4862__auto__);
                                    if (function() {
                                      var i__20920 = 0;
                                      while (true) {
                                        if (i__20920 < size__4862__auto__) {
                                          var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4861__auto__, i__20920);
                                          cljs.core.chunk_append(b__20921, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                            var G__20926 = k;
                                            return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__20926) : keyfn.call(null, G__20926);
                                          }(), cljs$core$js__GT_clj_$_thisfn(x__$1[k])], null));
                                          var G__20929 = i__20920 + 1;
                                          i__20920 = G__20929;
                                          continue;
                                        } else {
                                          return true;
                                        }
                                        break;
                                      }
                                    }()) {
                                      return cljs.core.chunk_cons(cljs.core.chunk(b__20921), cljs$core$js__GT_clj_$_thisfn_$_iter__20918(cljs.core.chunk_rest(s__20919__$2)));
                                    } else {
                                      return cljs.core.chunk_cons(cljs.core.chunk(b__20921), null);
                                    }
                                  } else {
                                    var k = cljs.core.first(s__20919__$2);
                                    return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                      var G__20927 = k;
                                      return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__20927) : keyfn.call(null, G__20927);
                                    }(), cljs$core$js__GT_clj_$_thisfn(x__$1[k])], null), cljs$core$js__GT_clj_$_thisfn_$_iter__20918(cljs.core.rest(s__20919__$2)));
                                  }
                                } else {
                                  return null;
                                }
                                break;
                              }
                            };
                          }(map__20901, map__20901__$1, keywordize_keys, keyfn), null, null);
                        };
                      }(map__20901, map__20901__$1, keywordize_keys, keyfn);
                      return iter__4863__auto__(cljs.core.js_keys(x__$1));
                    }());
                  } else {
                    return x__$1;
                  }
                }
              }
            }
          }
        };
      }(map__20901, map__20901__$1, keywordize_keys, keyfn);
      return f(x);
    };
    var G__20928 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        var G__20930__i = 0, G__20930__a = new Array(arguments.length - 1);
        while (G__20930__i < G__20930__a.length) {
          G__20930__a[G__20930__i] = arguments[G__20930__i + 1];
          ++G__20930__i;
        }
        opts = new cljs.core.IndexedSeq(G__20930__a, 0);
      }
      return G__20928__delegate.call(this, x, opts);
    };
    G__20928.cljs$lang$maxFixedArity = 1;
    G__20928.cljs$lang$applyTo = function(arglist__20931) {
      var x = cljs.core.first(arglist__20931);
      var opts = cljs.core.rest(arglist__20931);
      return G__20928__delegate(x, opts);
    };
    G__20928.cljs$core$IFn$_invoke$arity$variadic = G__20928__delegate;
    return G__20928;
  }();
  cljs$core$js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$js__GT_clj__1.call(this, x);
      default:
        var G__20932 = null;
        if (arguments.length > 1) {
          var G__20933__i = 0, G__20933__a = new Array(arguments.length - 1);
          while (G__20933__i < G__20933__a.length) {
            G__20933__a[G__20933__i] = arguments[G__20933__i + 1];
            ++G__20933__i;
          }
          G__20932 = new cljs.core.IndexedSeq(G__20933__a, 0);
        }
        return cljs$core$js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, G__20932);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$js__GT_clj.cljs$lang$maxFixedArity = 1;
  cljs$core$js__GT_clj.cljs$lang$applyTo = cljs$core$js__GT_clj__2.cljs$lang$applyTo;
  cljs$core$js__GT_clj.cljs$core$IFn$_invoke$arity$1 = cljs$core$js__GT_clj__1;
  cljs$core$js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = cljs$core$js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$js__GT_clj;
}();
cljs.core.memoize = function cljs$core$memoize(f) {
  var mem = function() {
    var G__20936 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__20936) : cljs.core.atom.call(null, G__20936);
  }();
  return function(mem) {
    return function() {
      var G__20938__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(function() {
          var G__20937 = mem;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20937) : cljs.core.deref.call(null, G__20937);
        }(), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__20938 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__20939__i = 0, G__20939__a = new Array(arguments.length - 0);
          while (G__20939__i < G__20939__a.length) {
            G__20939__a[G__20939__i] = arguments[G__20939__i + 0];
            ++G__20939__i;
          }
          args = new cljs.core.IndexedSeq(G__20939__a, 0);
        }
        return G__20938__delegate.call(this, args);
      };
      G__20938.cljs$lang$maxFixedArity = 0;
      G__20938.cljs$lang$applyTo = function(arglist__20940) {
        var args = cljs.core.seq(arglist__20940);
        return G__20938__delegate(args);
      };
      G__20938.cljs$core$IFn$_invoke$arity$variadic = G__20938__delegate;
      return G__20938;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var cljs$core$trampoline = null;
  var cljs$core$trampoline__1 = function(f) {
    while (true) {
      var ret = function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }();
      if (cljs.core.fn_QMARK_(ret)) {
        var G__20942 = ret;
        f = G__20942;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var cljs$core$trampoline__2 = function() {
    var G__20943__delegate = function(f, args) {
      return cljs$core$trampoline.cljs$core$IFn$_invoke$arity$1(function() {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
      });
    };
    var G__20943 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        var G__20944__i = 0, G__20944__a = new Array(arguments.length - 1);
        while (G__20944__i < G__20944__a.length) {
          G__20944__a[G__20944__i] = arguments[G__20944__i + 1];
          ++G__20944__i;
        }
        args = new cljs.core.IndexedSeq(G__20944__a, 0);
      }
      return G__20943__delegate.call(this, f, args);
    };
    G__20943.cljs$lang$maxFixedArity = 1;
    G__20943.cljs$lang$applyTo = function(arglist__20945) {
      var f = cljs.core.first(arglist__20945);
      var args = cljs.core.rest(arglist__20945);
      return G__20943__delegate(f, args);
    };
    G__20943.cljs$core$IFn$_invoke$arity$variadic = G__20943__delegate;
    return G__20943;
  }();
  cljs$core$trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$trampoline__1.call(this, f);
      default:
        var G__20946 = null;
        if (arguments.length > 1) {
          var G__20947__i = 0, G__20947__a = new Array(arguments.length - 1);
          while (G__20947__i < G__20947__a.length) {
            G__20947__a[G__20947__i] = arguments[G__20947__i + 1];
            ++G__20947__i;
          }
          G__20946 = new cljs.core.IndexedSeq(G__20947__a, 0);
        }
        return cljs$core$trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, G__20946);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$trampoline.cljs$lang$maxFixedArity = 1;
  cljs$core$trampoline.cljs$lang$applyTo = cljs$core$trampoline__2.cljs$lang$applyTo;
  cljs$core$trampoline.cljs$core$IFn$_invoke$arity$1 = cljs$core$trampoline__1;
  cljs$core$trampoline.cljs$core$IFn$_invoke$arity$variadic = cljs$core$trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$trampoline;
}();
cljs.core.rand = function() {
  var cljs$core$rand = null;
  var cljs$core$rand__0 = function() {
    return cljs$core$rand.cljs$core$IFn$_invoke$arity$1(1);
  };
  var cljs$core$rand__1 = function(n) {
    return function() {
      return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
    }() * n;
  };
  cljs$core$rand = function(n) {
    switch(arguments.length) {
      case 0:
        return cljs$core$rand__0.call(this);
      case 1:
        return cljs$core$rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$rand.cljs$core$IFn$_invoke$arity$0 = cljs$core$rand__0;
  cljs$core$rand.cljs$core$IFn$_invoke$arity$1 = cljs$core$rand__1;
  return cljs$core$rand;
}();
cljs.core.rand_int = function cljs$core$rand_int(n) {
  var G__20950 = function() {
    return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
  }() * n;
  return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__20950) : Math.floor.call(null, G__20950);
};
cljs.core.rand_nth = function cljs$core$rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function cljs$core$group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = function() {
      var G__20952 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20952) : f.call(null, G__20952);
    }();
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function cljs$core$make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function cljs$core$get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__20954 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__20954) : cljs.core.atom.call(null, G__20954);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var cljs$core$swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
  };
  var cljs$core$swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      var G__20955__i = 0, G__20955__a = new Array(arguments.length - 1);
      while (G__20955__i < G__20955__a.length) {
        G__20955__a[G__20955__i] = arguments[G__20955__i + 1];
        ++G__20955__i;
      }
      args = new cljs.core.IndexedSeq(G__20955__a, 0);
    }
    return cljs$core$swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  cljs$core$swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  cljs$core$swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__20956) {
    var f = cljs.core.first(arglist__20956);
    var args = cljs.core.rest(arglist__20956);
    return cljs$core$swap_global_hierarchy_BANG___delegate(f, args);
  };
  cljs$core$swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$swap_global_hierarchy_BANG___delegate;
  return cljs$core$swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var cljs$core$isa_QMARK_ = null;
  var cljs$core$isa_QMARK___2 = function(child, parent) {
    return cljs$core$isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__21021 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21021) : cljs.core.deref.call(null, G__21021);
    }(), child, parent);
  };
  var cljs$core$isa_QMARK___3 = function(h, child, parent) {
    var or__4109__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
    if (or__4109__auto__) {
      return or__4109__auto__;
    } else {
      var or__4109__auto____$1 = cljs.core.contains_QMARK_((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__4109__auto____$1) {
        return or__4109__auto____$1;
      } else {
        var and__4097__auto__ = cljs.core.vector_QMARK_(parent);
        if (and__4097__auto__) {
          var and__4097__auto____$1 = cljs.core.vector_QMARK_(child);
          if (and__4097__auto____$1) {
            var and__4097__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
            if (and__4097__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count(parent)) {
                  return ret;
                } else {
                  var G__21046 = cljs$core$isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, function() {
                    var G__21044 = i;
                    return child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(G__21044) : child.call(null, G__21044);
                  }(), function() {
                    var G__21045 = i;
                    return parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(G__21045) : parent.call(null, G__21045);
                  }());
                  var G__21047 = i + 1;
                  ret = G__21046;
                  i = G__21047;
                  continue;
                }
                break;
              }
            } else {
              return and__4097__auto____$2;
            }
          } else {
            return and__4097__auto____$1;
          }
        } else {
          return and__4097__auto__;
        }
      }
    }
  };
  cljs$core$isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return cljs$core$isa_QMARK___2.call(this, h, child);
      case 3:
        return cljs$core$isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = cljs$core$isa_QMARK___2;
  cljs$core$isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = cljs$core$isa_QMARK___3;
  return cljs$core$isa_QMARK_;
}();
cljs.core.parents = function() {
  var cljs$core$parents = null;
  var cljs$core$parents__1 = function(tag) {
    return cljs$core$parents.cljs$core$IFn$_invoke$arity$2(function() {
      var G__21051 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21051) : cljs.core.deref.call(null, G__21051);
    }(), tag);
  };
  var cljs$core$parents__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  cljs$core$parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return cljs$core$parents__1.call(this, h);
      case 2:
        return cljs$core$parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$parents.cljs$core$IFn$_invoke$arity$1 = cljs$core$parents__1;
  cljs$core$parents.cljs$core$IFn$_invoke$arity$2 = cljs$core$parents__2;
  return cljs$core$parents;
}();
cljs.core.ancestors = function() {
  var cljs$core$ancestors = null;
  var cljs$core$ancestors__1 = function(tag) {
    return cljs$core$ancestors.cljs$core$IFn$_invoke$arity$2(function() {
      var G__21055 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21055) : cljs.core.deref.call(null, G__21055);
    }(), tag);
  };
  var cljs$core$ancestors__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  cljs$core$ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return cljs$core$ancestors__1.call(this, h);
      case 2:
        return cljs$core$ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$ancestors.cljs$core$IFn$_invoke$arity$1 = cljs$core$ancestors__1;
  cljs$core$ancestors.cljs$core$IFn$_invoke$arity$2 = cljs$core$ancestors__2;
  return cljs$core$ancestors;
}();
cljs.core.descendants = function() {
  var cljs$core$descendants = null;
  var cljs$core$descendants__1 = function(tag) {
    return cljs$core$descendants.cljs$core$IFn$_invoke$arity$2(function() {
      var G__21059 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21059) : cljs.core.deref.call(null, G__21059);
    }(), tag);
  };
  var cljs$core$descendants__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  cljs$core$descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return cljs$core$descendants__1.call(this, h);
      case 2:
        return cljs$core$descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$descendants.cljs$core$IFn$_invoke$arity$1 = cljs$core$descendants__1;
  cljs$core$descendants.cljs$core$IFn$_invoke$arity$2 = cljs$core$descendants__2;
  return cljs$core$descendants;
}();
cljs.core.derive = function() {
  var cljs$core$derive = null;
  var cljs$core$derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace(parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs$core$derive, cljs.core.array_seq([tag, parent], 0));
    return null;
  };
  var cljs$core$derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, function() {
              var G__21068 = target;
              return targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(G__21068) : targets.call(null, G__21068);
            }())));
          };
        }(tp, td, ta), m, cljs.core.cons(source, function() {
          var G__21069 = source;
          return sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(G__21069) : sources.call(null, G__21069);
        }()));
      };
    }(tp, td, ta);
    var or__4109__auto__ = cljs.core.contains_QMARK_(function() {
      var G__21073 = tag;
      return tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(G__21073) : tp.call(null, G__21073);
    }(), parent) ? null : function() {
      if (cljs.core.contains_QMARK_(function() {
        var G__21074 = tag;
        return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__21074) : ta.call(null, G__21074);
      }(), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_(function() {
        var G__21075 = parent;
        return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__21075) : ta.call(null, G__21075);
      }(), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
      "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__4109__auto__)) {
      return or__4109__auto__;
    } else {
      return h;
    }
  };
  cljs$core$derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return cljs$core$derive__2.call(this, h, tag);
      case 3:
        return cljs$core$derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$derive.cljs$core$IFn$_invoke$arity$2 = cljs$core$derive__2;
  cljs$core$derive.cljs$core$IFn$_invoke$arity$3 = cljs$core$derive__3;
  return cljs$core$derive;
}();
cljs.core.underive = function() {
  var cljs$core$underive = null;
  var cljs$core$underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs$core$underive, cljs.core.array_seq([tag, parent], 0));
    return null;
  };
  var cljs$core$underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(function() {
      var G__21082 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__21082) : parentMap.call(null, G__21082);
    }()) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(function() {
      var G__21083 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__21083) : parentMap.call(null, G__21083);
    }(), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
    var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
      return function(p1__21076_SHARP_) {
        return cljs.core.cons(cljs.core.first(p1__21076_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__21076_SHARP_), cljs.core.second(p1__21076_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
    if (cljs.core.contains_QMARK_(function() {
      var G__21084 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__21084) : parentMap.call(null, G__21084);
    }(), parent)) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__21077_SHARP_, p2__21078_SHARP_) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__21077_SHARP_, p2__21078_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
    } else {
      return h;
    }
  };
  cljs$core$underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return cljs$core$underive__2.call(this, h, tag);
      case 3:
        return cljs$core$underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$underive.cljs$core$IFn$_invoke$arity$2 = cljs$core$underive__2;
  cljs$core$underive.cljs$core$IFn$_invoke$arity$3 = cljs$core$underive__3;
  return cljs$core$underive;
}();
cljs.core.reset_cache = function cljs$core$reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    var G__21087 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21087) : cljs.core.deref.call(null, G__21087);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    var G__21088 = hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21088) : cljs.core.deref.call(null, G__21088);
  });
};
cljs.core.prefers_STAR_ = function cljs$core$prefers_STAR_(x, y, prefer_table) {
  var xprefs = function() {
    var G__21104 = prefer_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21104) : cljs.core.deref.call(null, G__21104);
  }().call(null, x);
  var or__4109__auto__ = cljs.core.truth_(function() {
    var and__4097__auto__ = xprefs;
    if (cljs.core.truth_(and__4097__auto__)) {
      var G__21106 = y;
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(G__21106) : xprefs.call(null, G__21106);
    } else {
      return and__4097__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__4109__auto__)) {
    return or__4109__auto__;
  } else {
    var or__4109__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(cljs$core$prefers_STAR_(x, cljs.core.first(ps), prefer_table))) {
          } else {
          }
          var G__21107 = cljs.core.rest(ps);
          ps = G__21107;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__4109__auto____$1)) {
      return or__4109__auto____$1;
    } else {
      var or__4109__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(cljs$core$prefers_STAR_(cljs.core.first(ps), y, prefer_table))) {
            } else {
            }
            var G__21108 = cljs.core.rest(ps);
            ps = G__21108;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__4109__auto____$2)) {
        return or__4109__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function cljs$core$dominates(x, y, prefer_table) {
  var or__4109__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__4109__auto__)) {
    return or__4109__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(x, y);
  }
};
cljs.core.find_and_cache_best_method = function cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__21122) {
    var vec__21123 = p__21122;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21123, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21123, 1, null);
    var e = vec__21123;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__21124 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21124) : cljs.core.deref.call(null, G__21124);
    }(), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__4109__auto__ = be == null;
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first(be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, function() {
    var G__21125 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21125) : cljs.core.deref.call(null, G__21125);
  }());
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
      var G__21126 = cached_hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21126) : cljs.core.deref.call(null, G__21126);
    }(), function() {
      var G__21127 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21127) : cljs.core.deref.call(null, G__21127);
    }())) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj21129 = {};
  return obj21129;
}();
cljs.core._reset = function cljs$core$_reset(mf) {
  if (function() {
    var and__4097__auto__ = mf;
    if (and__4097__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4745__auto__ = mf == null ? null : mf;
    return function() {
      var or__4109__auto__ = cljs.core._reset[function() {
        var G__21133 = x__4745__auto__;
        return goog.typeOf(G__21133);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._reset["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function cljs$core$_add_method(mf, dispatch_val, method) {
  if (function() {
    var and__4097__auto__ = mf;
    if (and__4097__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4745__auto__ = mf == null ? null : mf;
    return function() {
      var or__4109__auto__ = cljs.core._add_method[function() {
        var G__21137 = x__4745__auto__;
        return goog.typeOf(G__21137);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._add_method["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function cljs$core$_remove_method(mf, dispatch_val) {
  if (function() {
    var and__4097__auto__ = mf;
    if (and__4097__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4745__auto__ = mf == null ? null : mf;
    return function() {
      var or__4109__auto__ = cljs.core._remove_method[function() {
        var G__21141 = x__4745__auto__;
        return goog.typeOf(G__21141);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._remove_method["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function cljs$core$_prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__4097__auto__ = mf;
    if (and__4097__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4745__auto__ = mf == null ? null : mf;
    return function() {
      var or__4109__auto__ = cljs.core._prefer_method[function() {
        var G__21145 = x__4745__auto__;
        return goog.typeOf(G__21145);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._prefer_method["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function cljs$core$_get_method(mf, dispatch_val) {
  if (function() {
    var and__4097__auto__ = mf;
    if (and__4097__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4745__auto__ = mf == null ? null : mf;
    return function() {
      var or__4109__auto__ = cljs.core._get_method[function() {
        var G__21149 = x__4745__auto__;
        return goog.typeOf(G__21149);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._get_method["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function cljs$core$_methods(mf) {
  if (function() {
    var and__4097__auto__ = mf;
    if (and__4097__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4745__auto__ = mf == null ? null : mf;
    return function() {
      var or__4109__auto__ = cljs.core._methods[function() {
        var G__21153 = x__4745__auto__;
        return goog.typeOf(G__21153);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._methods["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function cljs$core$_prefers(mf) {
  if (function() {
    var and__4097__auto__ = mf;
    if (and__4097__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4745__auto__ = mf == null ? null : mf;
    return function() {
      var or__4109__auto__ = cljs.core._prefers[function() {
        var G__21157 = x__4745__auto__;
        return goog.typeOf(G__21157);
      }()];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core._prefers["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function cljs$core$throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__21159 = this$__$1;
  return goog.getUid(G__21159);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
    var G__21160 = self__.cached_hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21160) : cljs.core.deref.call(null, G__21160);
  }(), function() {
    var G__21161 = self__.hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21161) : cljs.core.deref.call(null, G__21161);
  }())) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = function() {
    var G__21162 = self__.method_cache;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21162) : cljs.core.deref.call(null, G__21162);
  }().call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return function() {
        var G__21163 = self__.method_table;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21163) : cljs.core.deref.call(null, G__21163);
      }().call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__21164 = self__.method_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21164) : cljs.core.deref.call(null, G__21164);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__21165 = self__.prefer_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21165) : cljs.core.deref.call(null, G__21165);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__22006 = null;
  var G__22006__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__22006__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21166 = a;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__21166) : self__.dispatch_fn.call(null, G__21166);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21167 = a;
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__21167) : target_fn.call(null, G__21167);
  };
  var G__22006__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21168 = a;
      var G__21169 = b;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__21168, G__21169) : self__.dispatch_fn.call(null, G__21168, G__21169);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21170 = a;
    var G__21171 = b;
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__21170, G__21171) : target_fn.call(null, G__21170, G__21171);
  };
  var G__22006__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21172 = a;
      var G__21173 = b;
      var G__21174 = c;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__21172, G__21173, G__21174) : self__.dispatch_fn.call(null, G__21172, G__21173, G__21174);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21175 = a;
    var G__21176 = b;
    var G__21177 = c;
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__21175, G__21176, G__21177) : target_fn.call(null, G__21175, G__21176, G__21177);
  };
  var G__22006__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21178 = a;
      var G__21179 = b;
      var G__21180 = c;
      var G__21181 = d;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__21178, G__21179, G__21180, G__21181) : self__.dispatch_fn.call(null, G__21178, G__21179, G__21180, G__21181);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21182 = a;
    var G__21183 = b;
    var G__21184 = c;
    var G__21185 = d;
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__21182, G__21183, G__21184, G__21185) : target_fn.call(null, G__21182, G__21183, G__21184, G__21185);
  };
  var G__22006__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21186 = a;
      var G__21187 = b;
      var G__21188 = c;
      var G__21189 = d;
      var G__21190 = e;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__21186, G__21187, G__21188, G__21189, G__21190) : self__.dispatch_fn.call(null, G__21186, G__21187, G__21188, G__21189, G__21190);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21191 = a;
    var G__21192 = b;
    var G__21193 = c;
    var G__21194 = d;
    var G__21195 = e;
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__21191, G__21192, G__21193, G__21194, G__21195) : target_fn.call(null, G__21191, G__21192, G__21193, G__21194, G__21195);
  };
  var G__22006__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21196 = a;
      var G__21197 = b;
      var G__21198 = c;
      var G__21199 = d;
      var G__21200 = e;
      var G__21201 = f;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__21196, G__21197, G__21198, G__21199, G__21200, G__21201) : self__.dispatch_fn.call(null, G__21196, G__21197, G__21198, G__21199, G__21200, G__21201);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21202 = a;
    var G__21203 = b;
    var G__21204 = c;
    var G__21205 = d;
    var G__21206 = e;
    var G__21207 = f;
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__21202, G__21203, G__21204, G__21205, G__21206, G__21207) : target_fn.call(null, G__21202, G__21203, G__21204, G__21205, G__21206, G__21207);
  };
  var G__22006__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21208 = a;
      var G__21209 = b;
      var G__21210 = c;
      var G__21211 = d;
      var G__21212 = e;
      var G__21213 = f;
      var G__21214 = g;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__21208, G__21209, G__21210, G__21211, G__21212, G__21213, G__21214) : self__.dispatch_fn.call(null, G__21208, G__21209, G__21210, G__21211, G__21212, G__21213, G__21214);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21215 = a;
    var G__21216 = b;
    var G__21217 = c;
    var G__21218 = d;
    var G__21219 = e;
    var G__21220 = f;
    var G__21221 = g;
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__21215, G__21216, G__21217, G__21218, G__21219, G__21220, G__21221) : target_fn.call(null, G__21215, G__21216, G__21217, G__21218, G__21219, G__21220, G__21221);
  };
  var G__22006__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21222 = a;
      var G__21223 = b;
      var G__21224 = c;
      var G__21225 = d;
      var G__21226 = e;
      var G__21227 = f;
      var G__21228 = g;
      var G__21229 = h;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__21222, G__21223, G__21224, G__21225, G__21226, G__21227, G__21228, G__21229) : self__.dispatch_fn.call(null, G__21222, G__21223, G__21224, G__21225, G__21226, G__21227, G__21228, G__21229);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21230 = a;
    var G__21231 = b;
    var G__21232 = c;
    var G__21233 = d;
    var G__21234 = e;
    var G__21235 = f;
    var G__21236 = g;
    var G__21237 = h;
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__21230, G__21231, G__21232, G__21233, G__21234, G__21235, G__21236, G__21237) : target_fn.call(null, G__21230, G__21231, G__21232, G__21233, G__21234, G__21235, G__21236, G__21237);
  };
  var G__22006__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21238 = a;
      var G__21239 = b;
      var G__21240 = c;
      var G__21241 = d;
      var G__21242 = e;
      var G__21243 = f;
      var G__21244 = g;
      var G__21245 = h;
      var G__21246 = i;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__21238, G__21239, G__21240, G__21241, G__21242, G__21243, G__21244, G__21245, G__21246) : self__.dispatch_fn.call(null, G__21238, G__21239, G__21240, G__21241, G__21242, G__21243, G__21244, G__21245, G__21246);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21247 = a;
    var G__21248 = b;
    var G__21249 = c;
    var G__21250 = d;
    var G__21251 = e;
    var G__21252 = f;
    var G__21253 = g;
    var G__21254 = h;
    var G__21255 = i;
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__21247, G__21248, G__21249, G__21250, G__21251, G__21252, G__21253, G__21254, G__21255) : target_fn.call(null, G__21247, G__21248, G__21249, G__21250, G__21251, G__21252, G__21253, G__21254, G__21255);
  };
  var G__22006__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21256 = a;
      var G__21257 = b;
      var G__21258 = c;
      var G__21259 = d;
      var G__21260 = e;
      var G__21261 = f;
      var G__21262 = g;
      var G__21263 = h;
      var G__21264 = i;
      var G__21265 = j;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__21256, G__21257, G__21258, G__21259, G__21260, G__21261, G__21262, G__21263, G__21264, G__21265) : self__.dispatch_fn.call(null, G__21256, G__21257, G__21258, G__21259, G__21260, G__21261, G__21262, G__21263, G__21264, G__21265);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21266 = a;
    var G__21267 = b;
    var G__21268 = c;
    var G__21269 = d;
    var G__21270 = e;
    var G__21271 = f;
    var G__21272 = g;
    var G__21273 = h;
    var G__21274 = i;
    var G__21275 = j;
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__21266, G__21267, G__21268, G__21269, G__21270, G__21271, G__21272, G__21273, G__21274, G__21275) : target_fn.call(null, G__21266, G__21267, G__21268, G__21269, G__21270, G__21271, G__21272, G__21273, G__21274, G__21275);
  };
  var G__22006__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21276 = a;
      var G__21277 = b;
      var G__21278 = c;
      var G__21279 = d;
      var G__21280 = e;
      var G__21281 = f;
      var G__21282 = g;
      var G__21283 = h;
      var G__21284 = i;
      var G__21285 = j;
      var G__21286 = k;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__21276, G__21277, G__21278, G__21279, G__21280, G__21281, G__21282, G__21283, G__21284, G__21285, G__21286) : self__.dispatch_fn.call(null, G__21276, G__21277, G__21278, G__21279, G__21280, G__21281, G__21282, G__21283, G__21284, G__21285, G__21286);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21287 = a;
    var G__21288 = b;
    var G__21289 = c;
    var G__21290 = d;
    var G__21291 = e;
    var G__21292 = f;
    var G__21293 = g;
    var G__21294 = h;
    var G__21295 = i;
    var G__21296 = j;
    var G__21297 = k;
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__21287, G__21288, G__21289, G__21290, G__21291, G__21292, G__21293, G__21294, G__21295, G__21296, G__21297) : target_fn.call(null, G__21287, G__21288, G__21289, G__21290, G__21291, G__21292, G__21293, G__21294, G__21295, G__21296, G__21297);
  };
  var G__22006__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21298 = a;
      var G__21299 = b;
      var G__21300 = c;
      var G__21301 = d;
      var G__21302 = e;
      var G__21303 = f;
      var G__21304 = g;
      var G__21305 = h;
      var G__21306 = i;
      var G__21307 = j;
      var G__21308 = k;
      var G__21309 = l;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__21298, G__21299, G__21300, G__21301, G__21302, G__21303, G__21304, G__21305, G__21306, G__21307, G__21308, G__21309) : self__.dispatch_fn.call(null, G__21298, G__21299, G__21300, G__21301, G__21302, G__21303, G__21304, G__21305, G__21306, G__21307, G__21308, G__21309);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21310 = a;
    var G__21311 = b;
    var G__21312 = c;
    var G__21313 = d;
    var G__21314 = e;
    var G__21315 = f;
    var G__21316 = g;
    var G__21317 = h;
    var G__21318 = i;
    var G__21319 = j;
    var G__21320 = k;
    var G__21321 = l;
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__21310, G__21311, G__21312, G__21313, G__21314, G__21315, G__21316, G__21317, G__21318, G__21319, G__21320, G__21321) : target_fn.call(null, G__21310, G__21311, G__21312, G__21313, G__21314, G__21315, G__21316, G__21317, G__21318, G__21319, G__21320, G__21321);
  };
  var G__22006__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21322 = a;
      var G__21323 = b;
      var G__21324 = c;
      var G__21325 = d;
      var G__21326 = e;
      var G__21327 = f;
      var G__21328 = g;
      var G__21329 = h;
      var G__21330 = i;
      var G__21331 = j;
      var G__21332 = k;
      var G__21333 = l;
      var G__21334 = m;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__21322, G__21323, G__21324, G__21325, G__21326, G__21327, G__21328, G__21329, G__21330, G__21331, G__21332, G__21333, G__21334) : self__.dispatch_fn.call(null, G__21322, G__21323, G__21324, G__21325, G__21326, G__21327, G__21328, G__21329, G__21330, G__21331, G__21332, G__21333, G__21334);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21335 = a;
    var G__21336 = b;
    var G__21337 = c;
    var G__21338 = d;
    var G__21339 = e;
    var G__21340 = f;
    var G__21341 = g;
    var G__21342 = h;
    var G__21343 = i;
    var G__21344 = j;
    var G__21345 = k;
    var G__21346 = l;
    var G__21347 = m;
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__21335, G__21336, G__21337, G__21338, G__21339, G__21340, G__21341, G__21342, G__21343, G__21344, G__21345, G__21346, G__21347) : target_fn.call(null, G__21335, G__21336, G__21337, G__21338, G__21339, G__21340, G__21341, G__21342, G__21343, G__21344, G__21345, G__21346, G__21347);
  };
  var G__22006__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21348 = a;
      var G__21349 = b;
      var G__21350 = c;
      var G__21351 = d;
      var G__21352 = e;
      var G__21353 = f;
      var G__21354 = g;
      var G__21355 = h;
      var G__21356 = i;
      var G__21357 = j;
      var G__21358 = k;
      var G__21359 = l;
      var G__21360 = m;
      var G__21361 = n;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__21348, G__21349, G__21350, G__21351, G__21352, G__21353, G__21354, G__21355, G__21356, G__21357, G__21358, G__21359, G__21360, G__21361) : self__.dispatch_fn.call(null, G__21348, G__21349, G__21350, G__21351, G__21352, G__21353, G__21354, G__21355, G__21356, G__21357, G__21358, G__21359, G__21360, G__21361);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21362 = a;
    var G__21363 = b;
    var G__21364 = c;
    var G__21365 = d;
    var G__21366 = e;
    var G__21367 = f;
    var G__21368 = g;
    var G__21369 = h;
    var G__21370 = i;
    var G__21371 = j;
    var G__21372 = k;
    var G__21373 = l;
    var G__21374 = m;
    var G__21375 = n;
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__21362, G__21363, G__21364, G__21365, G__21366, G__21367, G__21368, G__21369, G__21370, G__21371, G__21372, G__21373, G__21374, G__21375) : target_fn.call(null, G__21362, G__21363, G__21364, G__21365, G__21366, G__21367, G__21368, G__21369, G__21370, G__21371, G__21372, G__21373, G__21374, G__21375);
  };
  var G__22006__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21376 = a;
      var G__21377 = b;
      var G__21378 = c;
      var G__21379 = d;
      var G__21380 = e;
      var G__21381 = f;
      var G__21382 = g;
      var G__21383 = h;
      var G__21384 = i;
      var G__21385 = j;
      var G__21386 = k;
      var G__21387 = l;
      var G__21388 = m;
      var G__21389 = n;
      var G__21390 = o;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__21376, G__21377, G__21378, G__21379, G__21380, G__21381, G__21382, G__21383, G__21384, G__21385, G__21386, G__21387, G__21388, G__21389, G__21390) : self__.dispatch_fn.call(null, G__21376, G__21377, G__21378, G__21379, G__21380, G__21381, G__21382, G__21383, G__21384, G__21385, G__21386, G__21387, G__21388, G__21389, G__21390);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21391 = a;
    var G__21392 = b;
    var G__21393 = c;
    var G__21394 = d;
    var G__21395 = e;
    var G__21396 = f;
    var G__21397 = g;
    var G__21398 = h;
    var G__21399 = i;
    var G__21400 = j;
    var G__21401 = k;
    var G__21402 = l;
    var G__21403 = m;
    var G__21404 = n;
    var G__21405 = o;
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__21391, G__21392, G__21393, G__21394, G__21395, G__21396, G__21397, G__21398, G__21399, G__21400, G__21401, G__21402, G__21403, G__21404, G__21405) : target_fn.call(null, G__21391, G__21392, G__21393, G__21394, G__21395, G__21396, G__21397, G__21398, G__21399, G__21400, G__21401, G__21402, G__21403, G__21404, G__21405);
  };
  var G__22006__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21406 = a;
      var G__21407 = b;
      var G__21408 = c;
      var G__21409 = d;
      var G__21410 = e;
      var G__21411 = f;
      var G__21412 = g;
      var G__21413 = h;
      var G__21414 = i;
      var G__21415 = j;
      var G__21416 = k;
      var G__21417 = l;
      var G__21418 = m;
      var G__21419 = n;
      var G__21420 = o;
      var G__21421 = p;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__21406, G__21407, G__21408, G__21409, G__21410, G__21411, G__21412, G__21413, G__21414, G__21415, G__21416, G__21417, G__21418, G__21419, G__21420, G__21421) : self__.dispatch_fn.call(null, G__21406, G__21407, G__21408, G__21409, G__21410, G__21411, G__21412, G__21413, G__21414, G__21415, G__21416, G__21417, G__21418, G__21419, G__21420, G__21421);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21422 = a;
    var G__21423 = b;
    var G__21424 = c;
    var G__21425 = d;
    var G__21426 = e;
    var G__21427 = f;
    var G__21428 = g;
    var G__21429 = h;
    var G__21430 = i;
    var G__21431 = j;
    var G__21432 = k;
    var G__21433 = l;
    var G__21434 = m;
    var G__21435 = n;
    var G__21436 = o;
    var G__21437 = p;
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__21422, G__21423, G__21424, G__21425, G__21426, G__21427, G__21428, G__21429, G__21430, G__21431, G__21432, G__21433, G__21434, G__21435, G__21436, G__21437) : target_fn.call(null, G__21422, G__21423, G__21424, G__21425, G__21426, G__21427, G__21428, G__21429, G__21430, G__21431, G__21432, G__21433, G__21434, G__21435, G__21436, G__21437);
  };
  var G__22006__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21438 = a;
      var G__21439 = b;
      var G__21440 = c;
      var G__21441 = d;
      var G__21442 = e;
      var G__21443 = f;
      var G__21444 = g;
      var G__21445 = h;
      var G__21446 = i;
      var G__21447 = j;
      var G__21448 = k;
      var G__21449 = l;
      var G__21450 = m;
      var G__21451 = n;
      var G__21452 = o;
      var G__21453 = p;
      var G__21454 = q;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__21438, G__21439, G__21440, G__21441, G__21442, G__21443, G__21444, G__21445, G__21446, G__21447, G__21448, G__21449, G__21450, G__21451, G__21452, G__21453, G__21454) : self__.dispatch_fn.call(null, G__21438, G__21439, G__21440, G__21441, G__21442, G__21443, G__21444, G__21445, G__21446, G__21447, G__21448, G__21449, G__21450, G__21451, G__21452, G__21453, G__21454);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21455 = a;
    var G__21456 = b;
    var G__21457 = c;
    var G__21458 = d;
    var G__21459 = e;
    var G__21460 = f;
    var G__21461 = g;
    var G__21462 = h;
    var G__21463 = i;
    var G__21464 = j;
    var G__21465 = k;
    var G__21466 = l;
    var G__21467 = m;
    var G__21468 = n;
    var G__21469 = o;
    var G__21470 = p;
    var G__21471 = q;
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__21455, G__21456, G__21457, G__21458, G__21459, G__21460, G__21461, G__21462, G__21463, G__21464, G__21465, G__21466, G__21467, G__21468, G__21469, G__21470, G__21471) : target_fn.call(null, G__21455, G__21456, G__21457, G__21458, G__21459, G__21460, G__21461, G__21462, G__21463, G__21464, G__21465, G__21466, G__21467, G__21468, G__21469, G__21470, G__21471);
  };
  var G__22006__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21472 = a;
      var G__21473 = b;
      var G__21474 = c;
      var G__21475 = d;
      var G__21476 = e;
      var G__21477 = f;
      var G__21478 = g;
      var G__21479 = h;
      var G__21480 = i;
      var G__21481 = j;
      var G__21482 = k;
      var G__21483 = l;
      var G__21484 = m;
      var G__21485 = n;
      var G__21486 = o;
      var G__21487 = p;
      var G__21488 = q;
      var G__21489 = r;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__21472, G__21473, G__21474, G__21475, G__21476, G__21477, G__21478, G__21479, G__21480, G__21481, G__21482, G__21483, G__21484, G__21485, G__21486, G__21487, G__21488, G__21489) : self__.dispatch_fn.call(null, G__21472, G__21473, G__21474, G__21475, G__21476, G__21477, G__21478, G__21479, G__21480, G__21481, G__21482, G__21483, G__21484, G__21485, G__21486, G__21487, G__21488, G__21489);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21490 = a;
    var G__21491 = b;
    var G__21492 = c;
    var G__21493 = d;
    var G__21494 = e;
    var G__21495 = f;
    var G__21496 = g;
    var G__21497 = h;
    var G__21498 = i;
    var G__21499 = j;
    var G__21500 = k;
    var G__21501 = l;
    var G__21502 = m;
    var G__21503 = n;
    var G__21504 = o;
    var G__21505 = p;
    var G__21506 = q;
    var G__21507 = r;
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__21490, G__21491, G__21492, G__21493, G__21494, G__21495, G__21496, G__21497, G__21498, G__21499, G__21500, G__21501, G__21502, G__21503, G__21504, G__21505, G__21506, G__21507) : target_fn.call(null, G__21490, G__21491, G__21492, G__21493, G__21494, G__21495, G__21496, G__21497, G__21498, G__21499, G__21500, G__21501, G__21502, G__21503, G__21504, G__21505, G__21506, G__21507);
  };
  var G__22006__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21508 = a;
      var G__21509 = b;
      var G__21510 = c;
      var G__21511 = d;
      var G__21512 = e;
      var G__21513 = f;
      var G__21514 = g;
      var G__21515 = h;
      var G__21516 = i;
      var G__21517 = j;
      var G__21518 = k;
      var G__21519 = l;
      var G__21520 = m;
      var G__21521 = n;
      var G__21522 = o;
      var G__21523 = p;
      var G__21524 = q;
      var G__21525 = r;
      var G__21526 = s;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__21508, G__21509, G__21510, G__21511, G__21512, G__21513, G__21514, G__21515, G__21516, G__21517, G__21518, G__21519, G__21520, G__21521, G__21522, G__21523, G__21524, G__21525, G__21526) : self__.dispatch_fn.call(null, G__21508, G__21509, G__21510, G__21511, G__21512, G__21513, G__21514, G__21515, G__21516, G__21517, G__21518, G__21519, G__21520, G__21521, G__21522, G__21523, G__21524, 
      G__21525, G__21526);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21527 = a;
    var G__21528 = b;
    var G__21529 = c;
    var G__21530 = d;
    var G__21531 = e;
    var G__21532 = f;
    var G__21533 = g;
    var G__21534 = h;
    var G__21535 = i;
    var G__21536 = j;
    var G__21537 = k;
    var G__21538 = l;
    var G__21539 = m;
    var G__21540 = n;
    var G__21541 = o;
    var G__21542 = p;
    var G__21543 = q;
    var G__21544 = r;
    var G__21545 = s;
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__21527, G__21528, G__21529, G__21530, G__21531, G__21532, G__21533, G__21534, G__21535, G__21536, G__21537, G__21538, G__21539, G__21540, G__21541, G__21542, G__21543, G__21544, G__21545) : target_fn.call(null, G__21527, G__21528, G__21529, G__21530, G__21531, G__21532, G__21533, G__21534, G__21535, G__21536, G__21537, G__21538, G__21539, G__21540, G__21541, G__21542, G__21543, G__21544, G__21545);
  };
  var G__22006__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21546 = a;
      var G__21547 = b;
      var G__21548 = c;
      var G__21549 = d;
      var G__21550 = e;
      var G__21551 = f;
      var G__21552 = g;
      var G__21553 = h;
      var G__21554 = i;
      var G__21555 = j;
      var G__21556 = k;
      var G__21557 = l;
      var G__21558 = m;
      var G__21559 = n;
      var G__21560 = o;
      var G__21561 = p;
      var G__21562 = q;
      var G__21563 = r;
      var G__21564 = s;
      var G__21565 = t;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__21546, G__21547, G__21548, G__21549, G__21550, G__21551, G__21552, G__21553, G__21554, G__21555, G__21556, G__21557, G__21558, G__21559, G__21560, G__21561, G__21562, G__21563, G__21564, G__21565) : self__.dispatch_fn.call(null, G__21546, G__21547, G__21548, G__21549, G__21550, G__21551, G__21552, G__21553, G__21554, G__21555, G__21556, G__21557, G__21558, G__21559, G__21560, G__21561, 
      G__21562, G__21563, G__21564, G__21565);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21566 = a;
    var G__21567 = b;
    var G__21568 = c;
    var G__21569 = d;
    var G__21570 = e;
    var G__21571 = f;
    var G__21572 = g;
    var G__21573 = h;
    var G__21574 = i;
    var G__21575 = j;
    var G__21576 = k;
    var G__21577 = l;
    var G__21578 = m;
    var G__21579 = n;
    var G__21580 = o;
    var G__21581 = p;
    var G__21582 = q;
    var G__21583 = r;
    var G__21584 = s;
    var G__21585 = t;
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__21566, G__21567, G__21568, G__21569, G__21570, G__21571, G__21572, G__21573, G__21574, G__21575, G__21576, G__21577, G__21578, G__21579, G__21580, G__21581, G__21582, G__21583, G__21584, G__21585) : target_fn.call(null, G__21566, G__21567, G__21568, G__21569, G__21570, G__21571, G__21572, G__21573, G__21574, G__21575, G__21576, G__21577, G__21578, G__21579, G__21580, G__21581, G__21582, G__21583, G__21584, 
    G__21585);
  };
  var G__22006__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__22006 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__22006__1.call(this, self__);
      case 2:
        return G__22006__2.call(this, self__, a);
      case 3:
        return G__22006__3.call(this, self__, a, b);
      case 4:
        return G__22006__4.call(this, self__, a, b, c);
      case 5:
        return G__22006__5.call(this, self__, a, b, c, d);
      case 6:
        return G__22006__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__22006__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__22006__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__22006__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__22006__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__22006__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__22006__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__22006__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__22006__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__22006__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__22006__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__22006__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__22006__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__22006__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__22006__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__22006__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__22006__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__22006.cljs$core$IFn$_invoke$arity$1 = G__22006__1;
  G__22006.cljs$core$IFn$_invoke$arity$2 = G__22006__2;
  G__22006.cljs$core$IFn$_invoke$arity$3 = G__22006__3;
  G__22006.cljs$core$IFn$_invoke$arity$4 = G__22006__4;
  G__22006.cljs$core$IFn$_invoke$arity$5 = G__22006__5;
  G__22006.cljs$core$IFn$_invoke$arity$6 = G__22006__6;
  G__22006.cljs$core$IFn$_invoke$arity$7 = G__22006__7;
  G__22006.cljs$core$IFn$_invoke$arity$8 = G__22006__8;
  G__22006.cljs$core$IFn$_invoke$arity$9 = G__22006__9;
  G__22006.cljs$core$IFn$_invoke$arity$10 = G__22006__10;
  G__22006.cljs$core$IFn$_invoke$arity$11 = G__22006__11;
  G__22006.cljs$core$IFn$_invoke$arity$12 = G__22006__12;
  G__22006.cljs$core$IFn$_invoke$arity$13 = G__22006__13;
  G__22006.cljs$core$IFn$_invoke$arity$14 = G__22006__14;
  G__22006.cljs$core$IFn$_invoke$arity$15 = G__22006__15;
  G__22006.cljs$core$IFn$_invoke$arity$16 = G__22006__16;
  G__22006.cljs$core$IFn$_invoke$arity$17 = G__22006__17;
  G__22006.cljs$core$IFn$_invoke$arity$18 = G__22006__18;
  G__22006.cljs$core$IFn$_invoke$arity$19 = G__22006__19;
  G__22006.cljs$core$IFn$_invoke$arity$20 = G__22006__20;
  G__22006.cljs$core$IFn$_invoke$arity$21 = G__22006__21;
  G__22006.cljs$core$IFn$_invoke$arity$22 = G__22006__22;
  return G__22006;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args21158) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args21158)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__21586 = a;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__21586) : self__.dispatch_fn.call(null, G__21586);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__21587 = a;
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__21587) : target_fn.call(null, G__21587);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__21588 = a;
    var G__21589 = b;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__21588, G__21589) : self__.dispatch_fn.call(null, G__21588, G__21589);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__21590 = a;
  var G__21591 = b;
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__21590, G__21591) : target_fn.call(null, G__21590, G__21591);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__21592 = a;
    var G__21593 = b;
    var G__21594 = c;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__21592, G__21593, G__21594) : self__.dispatch_fn.call(null, G__21592, G__21593, G__21594);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__21595 = a;
  var G__21596 = b;
  var G__21597 = c;
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__21595, G__21596, G__21597) : target_fn.call(null, G__21595, G__21596, G__21597);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__21598 = a;
    var G__21599 = b;
    var G__21600 = c;
    var G__21601 = d;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__21598, G__21599, G__21600, G__21601) : self__.dispatch_fn.call(null, G__21598, G__21599, G__21600, G__21601);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__21602 = a;
  var G__21603 = b;
  var G__21604 = c;
  var G__21605 = d;
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__21602, G__21603, G__21604, G__21605) : target_fn.call(null, G__21602, G__21603, G__21604, G__21605);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__21606 = a;
    var G__21607 = b;
    var G__21608 = c;
    var G__21609 = d;
    var G__21610 = e;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__21606, G__21607, G__21608, G__21609, G__21610) : self__.dispatch_fn.call(null, G__21606, G__21607, G__21608, G__21609, G__21610);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__21611 = a;
  var G__21612 = b;
  var G__21613 = c;
  var G__21614 = d;
  var G__21615 = e;
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__21611, G__21612, G__21613, G__21614, G__21615) : target_fn.call(null, G__21611, G__21612, G__21613, G__21614, G__21615);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__21616 = a;
    var G__21617 = b;
    var G__21618 = c;
    var G__21619 = d;
    var G__21620 = e;
    var G__21621 = f;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__21616, G__21617, G__21618, G__21619, G__21620, G__21621) : self__.dispatch_fn.call(null, G__21616, G__21617, G__21618, G__21619, G__21620, G__21621);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__21622 = a;
  var G__21623 = b;
  var G__21624 = c;
  var G__21625 = d;
  var G__21626 = e;
  var G__21627 = f;
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__21622, G__21623, G__21624, G__21625, G__21626, G__21627) : target_fn.call(null, G__21622, G__21623, G__21624, G__21625, G__21626, G__21627);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__21628 = a;
    var G__21629 = b;
    var G__21630 = c;
    var G__21631 = d;
    var G__21632 = e;
    var G__21633 = f;
    var G__21634 = g;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__21628, G__21629, G__21630, G__21631, G__21632, G__21633, G__21634) : self__.dispatch_fn.call(null, G__21628, G__21629, G__21630, G__21631, G__21632, G__21633, G__21634);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__21635 = a;
  var G__21636 = b;
  var G__21637 = c;
  var G__21638 = d;
  var G__21639 = e;
  var G__21640 = f;
  var G__21641 = g;
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__21635, G__21636, G__21637, G__21638, G__21639, G__21640, G__21641) : target_fn.call(null, G__21635, G__21636, G__21637, G__21638, G__21639, G__21640, G__21641);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__21642 = a;
    var G__21643 = b;
    var G__21644 = c;
    var G__21645 = d;
    var G__21646 = e;
    var G__21647 = f;
    var G__21648 = g;
    var G__21649 = h;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__21642, G__21643, G__21644, G__21645, G__21646, G__21647, G__21648, G__21649) : self__.dispatch_fn.call(null, G__21642, G__21643, G__21644, G__21645, G__21646, G__21647, G__21648, G__21649);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__21650 = a;
  var G__21651 = b;
  var G__21652 = c;
  var G__21653 = d;
  var G__21654 = e;
  var G__21655 = f;
  var G__21656 = g;
  var G__21657 = h;
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__21650, G__21651, G__21652, G__21653, G__21654, G__21655, G__21656, G__21657) : target_fn.call(null, G__21650, G__21651, G__21652, G__21653, G__21654, G__21655, G__21656, G__21657);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__21658 = a;
    var G__21659 = b;
    var G__21660 = c;
    var G__21661 = d;
    var G__21662 = e;
    var G__21663 = f;
    var G__21664 = g;
    var G__21665 = h;
    var G__21666 = i;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__21658, G__21659, G__21660, G__21661, G__21662, G__21663, G__21664, G__21665, G__21666) : self__.dispatch_fn.call(null, G__21658, G__21659, G__21660, G__21661, G__21662, G__21663, G__21664, G__21665, G__21666);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__21667 = a;
  var G__21668 = b;
  var G__21669 = c;
  var G__21670 = d;
  var G__21671 = e;
  var G__21672 = f;
  var G__21673 = g;
  var G__21674 = h;
  var G__21675 = i;
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__21667, G__21668, G__21669, G__21670, G__21671, G__21672, G__21673, G__21674, G__21675) : target_fn.call(null, G__21667, G__21668, G__21669, G__21670, G__21671, G__21672, G__21673, G__21674, G__21675);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__21676 = a;
    var G__21677 = b;
    var G__21678 = c;
    var G__21679 = d;
    var G__21680 = e;
    var G__21681 = f;
    var G__21682 = g;
    var G__21683 = h;
    var G__21684 = i;
    var G__21685 = j;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__21676, G__21677, G__21678, G__21679, G__21680, G__21681, G__21682, G__21683, G__21684, G__21685) : self__.dispatch_fn.call(null, G__21676, G__21677, G__21678, G__21679, G__21680, G__21681, G__21682, G__21683, G__21684, G__21685);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__21686 = a;
  var G__21687 = b;
  var G__21688 = c;
  var G__21689 = d;
  var G__21690 = e;
  var G__21691 = f;
  var G__21692 = g;
  var G__21693 = h;
  var G__21694 = i;
  var G__21695 = j;
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__21686, G__21687, G__21688, G__21689, G__21690, G__21691, G__21692, G__21693, G__21694, G__21695) : target_fn.call(null, G__21686, G__21687, G__21688, G__21689, G__21690, G__21691, G__21692, G__21693, G__21694, G__21695);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__21696 = a;
    var G__21697 = b;
    var G__21698 = c;
    var G__21699 = d;
    var G__21700 = e;
    var G__21701 = f;
    var G__21702 = g;
    var G__21703 = h;
    var G__21704 = i;
    var G__21705 = j;
    var G__21706 = k;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__21696, G__21697, G__21698, G__21699, G__21700, G__21701, G__21702, G__21703, G__21704, G__21705, G__21706) : self__.dispatch_fn.call(null, G__21696, G__21697, G__21698, G__21699, G__21700, G__21701, G__21702, G__21703, G__21704, G__21705, G__21706);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__21707 = a;
  var G__21708 = b;
  var G__21709 = c;
  var G__21710 = d;
  var G__21711 = e;
  var G__21712 = f;
  var G__21713 = g;
  var G__21714 = h;
  var G__21715 = i;
  var G__21716 = j;
  var G__21717 = k;
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__21707, G__21708, G__21709, G__21710, G__21711, G__21712, G__21713, G__21714, G__21715, G__21716, G__21717) : target_fn.call(null, G__21707, G__21708, G__21709, G__21710, G__21711, G__21712, G__21713, G__21714, G__21715, G__21716, G__21717);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__21718 = a;
    var G__21719 = b;
    var G__21720 = c;
    var G__21721 = d;
    var G__21722 = e;
    var G__21723 = f;
    var G__21724 = g;
    var G__21725 = h;
    var G__21726 = i;
    var G__21727 = j;
    var G__21728 = k;
    var G__21729 = l;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__21718, G__21719, G__21720, G__21721, G__21722, G__21723, G__21724, G__21725, G__21726, G__21727, G__21728, G__21729) : self__.dispatch_fn.call(null, G__21718, G__21719, G__21720, G__21721, G__21722, G__21723, G__21724, G__21725, G__21726, G__21727, G__21728, G__21729);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__21730 = a;
  var G__21731 = b;
  var G__21732 = c;
  var G__21733 = d;
  var G__21734 = e;
  var G__21735 = f;
  var G__21736 = g;
  var G__21737 = h;
  var G__21738 = i;
  var G__21739 = j;
  var G__21740 = k;
  var G__21741 = l;
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__21730, G__21731, G__21732, G__21733, G__21734, G__21735, G__21736, G__21737, G__21738, G__21739, G__21740, G__21741) : target_fn.call(null, G__21730, G__21731, G__21732, G__21733, G__21734, G__21735, G__21736, G__21737, G__21738, G__21739, G__21740, G__21741);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__21742 = a;
    var G__21743 = b;
    var G__21744 = c;
    var G__21745 = d;
    var G__21746 = e;
    var G__21747 = f;
    var G__21748 = g;
    var G__21749 = h;
    var G__21750 = i;
    var G__21751 = j;
    var G__21752 = k;
    var G__21753 = l;
    var G__21754 = m;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__21742, G__21743, G__21744, G__21745, G__21746, G__21747, G__21748, G__21749, G__21750, G__21751, G__21752, G__21753, G__21754) : self__.dispatch_fn.call(null, G__21742, G__21743, G__21744, G__21745, G__21746, G__21747, G__21748, G__21749, G__21750, G__21751, G__21752, G__21753, G__21754);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__21755 = a;
  var G__21756 = b;
  var G__21757 = c;
  var G__21758 = d;
  var G__21759 = e;
  var G__21760 = f;
  var G__21761 = g;
  var G__21762 = h;
  var G__21763 = i;
  var G__21764 = j;
  var G__21765 = k;
  var G__21766 = l;
  var G__21767 = m;
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__21755, G__21756, G__21757, G__21758, G__21759, G__21760, G__21761, G__21762, G__21763, G__21764, G__21765, G__21766, G__21767) : target_fn.call(null, G__21755, G__21756, G__21757, G__21758, G__21759, G__21760, G__21761, G__21762, G__21763, G__21764, G__21765, G__21766, G__21767);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__21768 = a;
    var G__21769 = b;
    var G__21770 = c;
    var G__21771 = d;
    var G__21772 = e;
    var G__21773 = f;
    var G__21774 = g;
    var G__21775 = h;
    var G__21776 = i;
    var G__21777 = j;
    var G__21778 = k;
    var G__21779 = l;
    var G__21780 = m;
    var G__21781 = n;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__21768, G__21769, G__21770, G__21771, G__21772, G__21773, G__21774, G__21775, G__21776, G__21777, G__21778, G__21779, G__21780, G__21781) : self__.dispatch_fn.call(null, G__21768, G__21769, G__21770, G__21771, G__21772, G__21773, G__21774, G__21775, G__21776, G__21777, G__21778, G__21779, G__21780, G__21781);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__21782 = a;
  var G__21783 = b;
  var G__21784 = c;
  var G__21785 = d;
  var G__21786 = e;
  var G__21787 = f;
  var G__21788 = g;
  var G__21789 = h;
  var G__21790 = i;
  var G__21791 = j;
  var G__21792 = k;
  var G__21793 = l;
  var G__21794 = m;
  var G__21795 = n;
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__21782, G__21783, G__21784, G__21785, G__21786, G__21787, G__21788, G__21789, G__21790, G__21791, G__21792, G__21793, G__21794, G__21795) : target_fn.call(null, G__21782, G__21783, G__21784, G__21785, G__21786, G__21787, G__21788, G__21789, G__21790, G__21791, G__21792, G__21793, G__21794, G__21795);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__21796 = a;
    var G__21797 = b;
    var G__21798 = c;
    var G__21799 = d;
    var G__21800 = e;
    var G__21801 = f;
    var G__21802 = g;
    var G__21803 = h;
    var G__21804 = i;
    var G__21805 = j;
    var G__21806 = k;
    var G__21807 = l;
    var G__21808 = m;
    var G__21809 = n;
    var G__21810 = o;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__21796, G__21797, G__21798, G__21799, G__21800, G__21801, G__21802, G__21803, G__21804, G__21805, G__21806, G__21807, G__21808, G__21809, G__21810) : self__.dispatch_fn.call(null, G__21796, G__21797, G__21798, G__21799, G__21800, G__21801, G__21802, G__21803, G__21804, G__21805, G__21806, G__21807, G__21808, G__21809, G__21810);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__21811 = a;
  var G__21812 = b;
  var G__21813 = c;
  var G__21814 = d;
  var G__21815 = e;
  var G__21816 = f;
  var G__21817 = g;
  var G__21818 = h;
  var G__21819 = i;
  var G__21820 = j;
  var G__21821 = k;
  var G__21822 = l;
  var G__21823 = m;
  var G__21824 = n;
  var G__21825 = o;
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__21811, G__21812, G__21813, G__21814, G__21815, G__21816, G__21817, G__21818, G__21819, G__21820, G__21821, G__21822, G__21823, G__21824, G__21825) : target_fn.call(null, G__21811, G__21812, G__21813, G__21814, G__21815, G__21816, G__21817, G__21818, G__21819, G__21820, G__21821, G__21822, G__21823, G__21824, G__21825);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__21826 = a;
    var G__21827 = b;
    var G__21828 = c;
    var G__21829 = d;
    var G__21830 = e;
    var G__21831 = f;
    var G__21832 = g;
    var G__21833 = h;
    var G__21834 = i;
    var G__21835 = j;
    var G__21836 = k;
    var G__21837 = l;
    var G__21838 = m;
    var G__21839 = n;
    var G__21840 = o;
    var G__21841 = p;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__21826, G__21827, G__21828, G__21829, G__21830, G__21831, G__21832, G__21833, G__21834, G__21835, G__21836, G__21837, G__21838, G__21839, G__21840, G__21841) : self__.dispatch_fn.call(null, G__21826, G__21827, G__21828, G__21829, G__21830, G__21831, G__21832, G__21833, G__21834, G__21835, G__21836, G__21837, G__21838, G__21839, G__21840, G__21841);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__21842 = a;
  var G__21843 = b;
  var G__21844 = c;
  var G__21845 = d;
  var G__21846 = e;
  var G__21847 = f;
  var G__21848 = g;
  var G__21849 = h;
  var G__21850 = i;
  var G__21851 = j;
  var G__21852 = k;
  var G__21853 = l;
  var G__21854 = m;
  var G__21855 = n;
  var G__21856 = o;
  var G__21857 = p;
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__21842, G__21843, G__21844, G__21845, G__21846, G__21847, G__21848, G__21849, G__21850, G__21851, G__21852, G__21853, G__21854, G__21855, G__21856, G__21857) : target_fn.call(null, G__21842, G__21843, G__21844, G__21845, G__21846, G__21847, G__21848, G__21849, G__21850, G__21851, G__21852, G__21853, G__21854, G__21855, G__21856, G__21857);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__21858 = a;
    var G__21859 = b;
    var G__21860 = c;
    var G__21861 = d;
    var G__21862 = e;
    var G__21863 = f;
    var G__21864 = g;
    var G__21865 = h;
    var G__21866 = i;
    var G__21867 = j;
    var G__21868 = k;
    var G__21869 = l;
    var G__21870 = m;
    var G__21871 = n;
    var G__21872 = o;
    var G__21873 = p;
    var G__21874 = q;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__21858, G__21859, G__21860, G__21861, G__21862, G__21863, G__21864, G__21865, G__21866, G__21867, G__21868, G__21869, G__21870, G__21871, G__21872, G__21873, G__21874) : self__.dispatch_fn.call(null, G__21858, G__21859, G__21860, G__21861, G__21862, G__21863, G__21864, G__21865, G__21866, G__21867, G__21868, G__21869, G__21870, G__21871, G__21872, G__21873, G__21874);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__21875 = a;
  var G__21876 = b;
  var G__21877 = c;
  var G__21878 = d;
  var G__21879 = e;
  var G__21880 = f;
  var G__21881 = g;
  var G__21882 = h;
  var G__21883 = i;
  var G__21884 = j;
  var G__21885 = k;
  var G__21886 = l;
  var G__21887 = m;
  var G__21888 = n;
  var G__21889 = o;
  var G__21890 = p;
  var G__21891 = q;
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__21875, G__21876, G__21877, G__21878, G__21879, G__21880, G__21881, G__21882, G__21883, G__21884, G__21885, G__21886, G__21887, G__21888, G__21889, G__21890, G__21891) : target_fn.call(null, G__21875, G__21876, G__21877, G__21878, G__21879, G__21880, G__21881, G__21882, G__21883, G__21884, G__21885, G__21886, G__21887, G__21888, G__21889, G__21890, G__21891);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__21892 = a;
    var G__21893 = b;
    var G__21894 = c;
    var G__21895 = d;
    var G__21896 = e;
    var G__21897 = f;
    var G__21898 = g;
    var G__21899 = h;
    var G__21900 = i;
    var G__21901 = j;
    var G__21902 = k;
    var G__21903 = l;
    var G__21904 = m;
    var G__21905 = n;
    var G__21906 = o;
    var G__21907 = p;
    var G__21908 = q;
    var G__21909 = r;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__21892, G__21893, G__21894, G__21895, G__21896, G__21897, G__21898, G__21899, G__21900, G__21901, G__21902, G__21903, G__21904, G__21905, G__21906, G__21907, G__21908, G__21909) : self__.dispatch_fn.call(null, G__21892, G__21893, G__21894, G__21895, G__21896, G__21897, G__21898, G__21899, G__21900, G__21901, G__21902, G__21903, G__21904, G__21905, G__21906, G__21907, G__21908, G__21909);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__21910 = a;
  var G__21911 = b;
  var G__21912 = c;
  var G__21913 = d;
  var G__21914 = e;
  var G__21915 = f;
  var G__21916 = g;
  var G__21917 = h;
  var G__21918 = i;
  var G__21919 = j;
  var G__21920 = k;
  var G__21921 = l;
  var G__21922 = m;
  var G__21923 = n;
  var G__21924 = o;
  var G__21925 = p;
  var G__21926 = q;
  var G__21927 = r;
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__21910, G__21911, G__21912, G__21913, G__21914, G__21915, G__21916, G__21917, G__21918, G__21919, G__21920, G__21921, G__21922, G__21923, G__21924, G__21925, G__21926, G__21927) : target_fn.call(null, G__21910, G__21911, G__21912, G__21913, G__21914, G__21915, G__21916, G__21917, G__21918, G__21919, G__21920, G__21921, G__21922, G__21923, G__21924, G__21925, G__21926, G__21927);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__21928 = a;
    var G__21929 = b;
    var G__21930 = c;
    var G__21931 = d;
    var G__21932 = e;
    var G__21933 = f;
    var G__21934 = g;
    var G__21935 = h;
    var G__21936 = i;
    var G__21937 = j;
    var G__21938 = k;
    var G__21939 = l;
    var G__21940 = m;
    var G__21941 = n;
    var G__21942 = o;
    var G__21943 = p;
    var G__21944 = q;
    var G__21945 = r;
    var G__21946 = s;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__21928, G__21929, G__21930, G__21931, G__21932, G__21933, G__21934, G__21935, G__21936, G__21937, G__21938, G__21939, G__21940, G__21941, G__21942, G__21943, G__21944, G__21945, G__21946) : self__.dispatch_fn.call(null, G__21928, G__21929, G__21930, G__21931, G__21932, G__21933, G__21934, G__21935, G__21936, G__21937, G__21938, G__21939, G__21940, G__21941, G__21942, G__21943, G__21944, 
    G__21945, G__21946);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__21947 = a;
  var G__21948 = b;
  var G__21949 = c;
  var G__21950 = d;
  var G__21951 = e;
  var G__21952 = f;
  var G__21953 = g;
  var G__21954 = h;
  var G__21955 = i;
  var G__21956 = j;
  var G__21957 = k;
  var G__21958 = l;
  var G__21959 = m;
  var G__21960 = n;
  var G__21961 = o;
  var G__21962 = p;
  var G__21963 = q;
  var G__21964 = r;
  var G__21965 = s;
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__21947, G__21948, G__21949, G__21950, G__21951, G__21952, G__21953, G__21954, G__21955, G__21956, G__21957, G__21958, G__21959, G__21960, G__21961, G__21962, G__21963, G__21964, G__21965) : target_fn.call(null, G__21947, G__21948, G__21949, G__21950, G__21951, G__21952, G__21953, G__21954, G__21955, G__21956, G__21957, G__21958, G__21959, G__21960, G__21961, G__21962, G__21963, G__21964, G__21965);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__21966 = a;
    var G__21967 = b;
    var G__21968 = c;
    var G__21969 = d;
    var G__21970 = e;
    var G__21971 = f;
    var G__21972 = g;
    var G__21973 = h;
    var G__21974 = i;
    var G__21975 = j;
    var G__21976 = k;
    var G__21977 = l;
    var G__21978 = m;
    var G__21979 = n;
    var G__21980 = o;
    var G__21981 = p;
    var G__21982 = q;
    var G__21983 = r;
    var G__21984 = s;
    var G__21985 = t;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__21966, G__21967, G__21968, G__21969, G__21970, G__21971, G__21972, G__21973, G__21974, G__21975, G__21976, G__21977, G__21978, G__21979, G__21980, G__21981, G__21982, G__21983, G__21984, G__21985) : self__.dispatch_fn.call(null, G__21966, G__21967, G__21968, G__21969, G__21970, G__21971, G__21972, G__21973, G__21974, G__21975, G__21976, G__21977, G__21978, G__21979, G__21980, G__21981, 
    G__21982, G__21983, G__21984, G__21985);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__21986 = a;
  var G__21987 = b;
  var G__21988 = c;
  var G__21989 = d;
  var G__21990 = e;
  var G__21991 = f;
  var G__21992 = g;
  var G__21993 = h;
  var G__21994 = i;
  var G__21995 = j;
  var G__21996 = k;
  var G__21997 = l;
  var G__21998 = m;
  var G__21999 = n;
  var G__22000 = o;
  var G__22001 = p;
  var G__22002 = q;
  var G__22003 = r;
  var G__22004 = s;
  var G__22005 = t;
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__21986, G__21987, G__21988, G__21989, G__21990, G__21991, G__21992, G__21993, G__21994, G__21995, G__21996, G__21997, G__21998, G__21999, G__22000, G__22001, G__22002, G__22003, G__22004, G__22005) : target_fn.call(null, G__21986, G__21987, G__21988, G__21989, G__21990, G__21991, G__21992, G__21993, G__21994, G__21995, G__21996, G__21997, G__21998, G__21999, G__22000, G__22001, G__22002, G__22003, G__22004, 
  G__22005);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function cljs$core$__GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function cljs$core$remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function cljs$core$remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function cljs$core$prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function cljs$core$methods(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function cljs$core$get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function cljs$core$prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 2048;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  var G__22007 = self__.uuid;
  var G__22008 = other.uuid;
  return goog.array.defaultCompare(G__22007, G__22008);
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__22009 = cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([this$__$1], 0));
  return goog.string.hashCode(G__22009);
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write(writer__4689__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function cljs$core$__GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.pr_writer_ex_info = function cljs$core$pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#ExceptionInfo{:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ExceptionInfo = function cljs$core$ExceptionInfo(message, data, cause) {
  var e = new Error;
  var this$ = this;
  this$.message = message;
  this$.data = data;
  this$.cause = cause;
  this$.name = e.name;
  this$.description = e.description;
  this$.number = e.number;
  this$.fileName = e.fileName;
  this$.lineNumber = e.lineNumber;
  this$.columnNumber = e.columnNumber;
  this$.stack = e.stack;
  return this$;
};
cljs.core.ExceptionInfo.prototype.__proto__ = Error.prototype;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
  var obj__$1 = this;
  return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
};
cljs.core.ExceptionInfo.prototype.toString = function() {
  var this$ = this;
  return cljs.core.pr_str_STAR_(this$);
};
cljs.core.ex_info = function() {
  var cljs$core$ex_info = null;
  var cljs$core$ex_info__2 = function(msg, data) {
    return cljs$core$ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
  };
  var cljs$core$ex_info__3 = function(msg, data, cause) {
    return new cljs.core.ExceptionInfo(msg, data, cause);
  };
  cljs$core$ex_info = function(msg, data, cause) {
    switch(arguments.length) {
      case 2:
        return cljs$core$ex_info__2.call(this, msg, data);
      case 3:
        return cljs$core$ex_info__3.call(this, msg, data, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$ex_info.cljs$core$IFn$_invoke$arity$2 = cljs$core$ex_info__2;
  cljs$core$ex_info.cljs$core$IFn$_invoke$arity$3 = cljs$core$ex_info__3;
  return cljs$core$ex_info;
}();
cljs.core.ex_data = function cljs$core$ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function cljs$core$ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function cljs$core$ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function cljs$core$comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(function() {
      var G__22017 = x;
      var G__22018 = y;
      return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__22017, G__22018) : pred.call(null, G__22017, G__22018);
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(function() {
        var G__22019 = y;
        var G__22020 = x;
        return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__22019, G__22020) : pred.call(null, G__22019, G__22020);
      }())) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function cljs$core$special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", 
  "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), 
  null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
cljs.core.test = function cljs$core$test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
goog.provide("reagent.interop");
goog.require("cljs.core");
goog.provide("reagent.debug");
goog.require("cljs.core");
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
clojure.string.seq_reverse = function clojure$string$seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.re_surrogate_pair = new RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])", "g");
clojure.string.reverse = function clojure$string$reverse(s) {
  return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
};
clojure.string.replace = function clojure$string$replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (match instanceof RegExp) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
    }
  }
};
clojure.string.replace_first = function clojure$string$replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var clojure$string$join = null;
  var clojure$string$join__1 = function(coll) {
    var sb = new goog.string.StringBuffer;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var G__12226 = sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
        var G__12227 = cljs.core.next.call(null, coll__$1);
        sb = G__12226;
        coll__$1 = G__12227;
        continue;
      } else {
        return sb.toString();
      }
      break;
    }
  };
  var clojure$string$join__2 = function(separator, coll) {
    var sb = new goog.string.StringBuffer;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
        var coll__$2 = cljs.core.next.call(null, coll__$1);
        if (coll__$2 == null) {
        } else {
          sb.append(separator);
        }
        var G__12228 = sb;
        var G__12229 = coll__$2;
        sb = G__12228;
        coll__$1 = G__12229;
        continue;
      } else {
        return sb.toString();
      }
      break;
    }
  };
  clojure$string$join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return clojure$string$join__1.call(this, separator);
      case 2:
        return clojure$string$join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clojure$string$join.cljs$core$IFn$_invoke$arity$1 = clojure$string$join__1;
  clojure$string$join.cljs$core$IFn$_invoke$arity$2 = clojure$string$join__2;
  return clojure$string$join;
}();
clojure.string.upper_case = function clojure$string$upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function clojure$string$lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function clojure$string$capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function clojure$string$pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__12230 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__12230;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function clojure$string$discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function clojure$string$split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__12234 = cljs.core._EQ_;
    var expr__12235 = limit;
    if (cljs.core.truth_(pred__12234.call(null, 1, expr__12235))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__12234.call(null, 2, expr__12235))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var clojure$string$split = null;
  var clojure$string$split__2 = function(s, re) {
    return clojure$string$split.call(null, s, re, 0);
  };
  var clojure$string$split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var m = temp__4124__auto__;
            var index = s__$1.indexOf(m);
            var G__12237 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__12238 = limit__$1 - 1;
            var G__12239 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__12237;
            limit__$1 = G__12238;
            parts = G__12239;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  clojure$string$split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return clojure$string$split__2.call(this, s, re);
      case 3:
        return clojure$string$split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clojure$string$split.cljs$core$IFn$_invoke$arity$2 = clojure$string$split__2;
  clojure$string$split.cljs$core$IFn$_invoke$arity$3 = clojure$string$split__3;
  return clojure$string$split;
}();
clojure.string.split_lines = function clojure$string$split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function clojure$string$trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function clojure$string$triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function clojure$string$trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function clojure$string$trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__12240 = index - 1;
        index = G__12240;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function clojure$string$blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function clojure$string$escape(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___12241 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___12241)) {
        var replacement_12242 = temp__4124__auto___12241;
        buffer.append([cljs.core.str(replacement_12242)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__12243 = index + 1;
      index = G__12243;
      continue;
    }
    break;
  }
};
goog.provide("reagent.impl.util");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("reagent.interop");
goog.require("reagent.debug");
reagent.impl.util.is_client = typeof window !== "undefined" && !(window["document"] == null);
reagent.impl.util.extract_props = function reagent$impl$util$extract_props(v) {
  var p = cljs.core.nth.call(null, v, 1, null);
  if (cljs.core.map_QMARK_.call(null, p)) {
    return p;
  } else {
    return null;
  }
};
reagent.impl.util.extract_children = function reagent$impl$util$extract_children(v) {
  var p = cljs.core.nth.call(null, v, 1, null);
  var first_child = p == null || cljs.core.map_QMARK_.call(null, p) ? 2 : 1;
  if (cljs.core.count.call(null, v) > first_child) {
    return cljs.core.subvec.call(null, v, first_child);
  } else {
    return null;
  }
};
reagent.impl.util.get_argv = function reagent$impl$util$get_argv(c) {
  return c["props"]["argv"];
};
reagent.impl.util.get_props = function reagent$impl$util$get_props(c) {
  return reagent.impl.util.extract_props.call(null, c["props"]["argv"]);
};
reagent.impl.util.get_children = function reagent$impl$util$get_children(c) {
  return reagent.impl.util.extract_children.call(null, c["props"]["argv"]);
};
reagent.impl.util.reagent_component_QMARK_ = function reagent$impl$util$reagent_component_QMARK_(c) {
  return!(c["props"]["argv"] == null);
};
reagent.impl.util.cached_react_class = function reagent$impl$util$cached_react_class(c) {
  return c["cljsReactClass"];
};
reagent.impl.util.cache_react_class = function reagent$impl$util$cache_react_class(c, constructor) {
  return c["cljsReactClass"] = constructor;
};
reagent.impl.util.memoize_1 = function reagent$impl$util$memoize_1(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function(arg) {
      var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), arg);
      if (!(v == null)) {
        return v;
      } else {
        var ret = f.call(null, arg);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, arg, ret);
        return ret;
      }
    };
  }(mem);
};
reagent.impl.util.dont_camel_case = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["aria", null, "data", null], null), null);
reagent.impl.util.capitalize = function reagent$impl$util$capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(cljs.core.subs.call(null, s, 1))].join("");
  }
};
reagent.impl.util.dash_to_camel = function reagent$impl$util$dash_to_camel(dashed) {
  if (typeof dashed === "string") {
    return dashed;
  } else {
    var name_str = cljs.core.name.call(null, dashed);
    var vec__12617 = clojure.string.split.call(null, name_str, /-/);
    var start = cljs.core.nth.call(null, vec__12617, 0, null);
    var parts = cljs.core.nthnext.call(null, vec__12617, 1);
    if (cljs.core.truth_(reagent.impl.util.dont_camel_case.call(null, start))) {
      return name_str;
    } else {
      return cljs.core.apply.call(null, cljs.core.str, start, cljs.core.map.call(null, reagent.impl.util.capitalize, parts));
    }
  }
};
reagent.impl.util.partial_ifn = function(f, args, p) {
  this.f = f;
  this.args = args;
  this.p = p;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 6291457;
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.f, self__.args], null));
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._EQ_.call(null, self__.f, other.f) && cljs.core._EQ_.call(null, self__.args, other.args);
};
reagent.impl.util.partial_ifn.prototype.call = function() {
  var G__12619__delegate = function(self__, a) {
    var self____$1 = this;
    var _ = self____$1;
    var or__4109__auto___12620 = self__.p;
    if (cljs.core.truth_(or__4109__auto___12620)) {
    } else {
      self__.p = cljs.core.apply.call(null, cljs.core.partial, self__.f, self__.args);
    }
    return cljs.core.apply.call(null, self__.p, a);
  };
  var G__12619 = function(self__, var_args) {
    var self__ = this;
    var a = null;
    if (arguments.length > 1) {
      var G__12621__i = 0, G__12621__a = new Array(arguments.length - 1);
      while (G__12621__i < G__12621__a.length) {
        G__12621__a[G__12621__i] = arguments[G__12621__i + 1];
        ++G__12621__i;
      }
      a = new cljs.core.IndexedSeq(G__12621__a, 0);
    }
    return G__12619__delegate.call(this, self__, a);
  };
  G__12619.cljs$lang$maxFixedArity = 1;
  G__12619.cljs$lang$applyTo = function(arglist__12622) {
    var self__ = cljs.core.first(arglist__12622);
    var a = cljs.core.rest(arglist__12622);
    return G__12619__delegate(self__, a);
  };
  G__12619.cljs$core$IFn$_invoke$arity$variadic = G__12619__delegate;
  return G__12619;
}();
reagent.impl.util.partial_ifn.prototype.apply = function(self__, args12618) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12618)));
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
  var G__12623__delegate = function(a) {
    var _ = this;
    var or__4109__auto___12624 = self__.p;
    if (cljs.core.truth_(or__4109__auto___12624)) {
    } else {
      self__.p = cljs.core.apply.call(null, cljs.core.partial, self__.f, self__.args);
    }
    return cljs.core.apply.call(null, self__.p, a);
  };
  var G__12623 = function(var_args) {
    var self__ = this;
    var a = null;
    if (arguments.length > 0) {
      var G__12625__i = 0, G__12625__a = new Array(arguments.length - 0);
      while (G__12625__i < G__12625__a.length) {
        G__12625__a[G__12625__i] = arguments[G__12625__i + 0];
        ++G__12625__i;
      }
      a = new cljs.core.IndexedSeq(G__12625__a, 0);
    }
    return G__12623__delegate.call(this, a);
  };
  G__12623.cljs$lang$maxFixedArity = 0;
  G__12623.cljs$lang$applyTo = function(arglist__12626) {
    var a = cljs.core.seq(arglist__12626);
    return G__12623__delegate(a);
  };
  G__12623.cljs$core$IFn$_invoke$arity$variadic = G__12623__delegate;
  return G__12623;
}();
reagent.impl.util.partial_ifn.cljs$lang$type = true;
reagent.impl.util.partial_ifn.cljs$lang$ctorStr = "reagent.impl.util/partial-ifn";
reagent.impl.util.partial_ifn.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write.call(null, writer__4689__auto__, "reagent.impl.util/partial-ifn");
};
reagent.impl.util.__GT_partial_ifn = function reagent$impl$util$__GT_partial_ifn(f, args, p) {
  return new reagent.impl.util.partial_ifn(f, args, p);
};
reagent.impl.util.merge_class = function reagent$impl$util$merge_class(p1, p2) {
  var class$ = function() {
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "class", "class", -2030961996)).cljs$core$IFn$_invoke$arity$1(p1);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var c1 = temp__4126__auto__;
      var temp__4126__auto____$1 = (new cljs.core.Keyword(null, "class", "class", -2030961996)).cljs$core$IFn$_invoke$arity$1(p2);
      if (cljs.core.truth_(temp__4126__auto____$1)) {
        var c2 = temp__4126__auto____$1;
        return[cljs.core.str(c1), cljs.core.str(" "), cljs.core.str(c2)].join("");
      } else {
        return null;
      }
    } else {
      return null;
    }
  }();
  if (class$ == null) {
    return p2;
  } else {
    return cljs.core.assoc.call(null, p2, new cljs.core.Keyword(null, "class", "class", -2030961996), class$);
  }
};
reagent.impl.util.merge_style = function reagent$impl$util$merge_style(p1, p2) {
  var style = function() {
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "style", "style", -496642736)).cljs$core$IFn$_invoke$arity$1(p1);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var s1 = temp__4126__auto__;
      var temp__4126__auto____$1 = (new cljs.core.Keyword(null, "style", "style", -496642736)).cljs$core$IFn$_invoke$arity$1(p2);
      if (cljs.core.truth_(temp__4126__auto____$1)) {
        var s2 = temp__4126__auto____$1;
        return cljs.core.merge.call(null, s1, s2);
      } else {
        return null;
      }
    } else {
      return null;
    }
  }();
  if (style == null) {
    return p2;
  } else {
    return cljs.core.assoc.call(null, p2, new cljs.core.Keyword(null, "style", "style", -496642736), style);
  }
};
reagent.impl.util.merge_props = function reagent$impl$util$merge_props(p1, p2) {
  if (p1 == null) {
    return p2;
  } else {
    if (cljs.core.map_QMARK_.call(null, p1)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "p1", "p1", 703771573, null))))].join(""));
    }
    return reagent.impl.util.merge_style.call(null, p1, reagent.impl.util.merge_class.call(null, p1, cljs.core.merge.call(null, p1, p2)));
  }
};
reagent.impl.util._STAR_always_update_STAR_ = false;
if (typeof reagent.impl.util.roots !== "undefined") {
} else {
  reagent.impl.util.roots = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
}
reagent.impl.util.clear_container = function reagent$impl$util$clear_container(node) {
  try {
    return React["unmountComponentAtNode"](node);
  } catch (e12628) {
    if (e12628 instanceof Object) {
      var e = e12628;
      if (typeof console !== "undefined") {
        console.warn([cljs.core.str("Warning: "), cljs.core.str("Error unmounting:")].join(""));
      } else {
      }
      if (typeof console !== "undefined") {
        return console.log(e);
      } else {
        return null;
      }
    } else {
      throw e12628;
    }
  }
};
reagent.impl.util.render_component = function reagent$impl$util$render_component(comp, container, callback) {
  try {
    var _STAR_always_update_STAR_12633 = reagent.impl.util._STAR_always_update_STAR_;
    reagent.impl.util._STAR_always_update_STAR_ = true;
    try {
      return React["render"](comp.call(null), container, function(_STAR_always_update_STAR_12633) {
        return function() {
          var _STAR_always_update_STAR_12634 = reagent.impl.util._STAR_always_update_STAR_;
          reagent.impl.util._STAR_always_update_STAR_ = false;
          try {
            cljs.core.swap_BANG_.call(null, reagent.impl.util.roots, cljs.core.assoc, container, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [comp, container], null));
            if (cljs.core.some_QMARK_.call(null, callback)) {
              return callback.call(null);
            } else {
              return null;
            }
          } finally {
            reagent.impl.util._STAR_always_update_STAR_ = _STAR_always_update_STAR_12634;
          }
        };
      }(_STAR_always_update_STAR_12633));
    } finally {
      reagent.impl.util._STAR_always_update_STAR_ = _STAR_always_update_STAR_12633;
    }
  } catch (e12632) {
    if (e12632 instanceof Object) {
      var e = e12632;
      reagent.impl.util.clear_container.call(null, container);
      throw e;
    } else {
      throw e12632;
    }
  }
};
reagent.impl.util.re_render_component = function reagent$impl$util$re_render_component(comp, container) {
  return reagent.impl.util.render_component.call(null, comp, container, null);
};
reagent.impl.util.unmount_component_at_node = function reagent$impl$util$unmount_component_at_node(container) {
  cljs.core.swap_BANG_.call(null, reagent.impl.util.roots, cljs.core.dissoc, container);
  return React["unmountComponentAtNode"](container);
};
reagent.impl.util.force_update_all = function reagent$impl$util$force_update_all() {
  var seq__12639_12643 = cljs.core.seq.call(null, cljs.core.vals.call(null, cljs.core.deref.call(null, reagent.impl.util.roots)));
  var chunk__12640_12644 = null;
  var count__12641_12645 = 0;
  var i__12642_12646 = 0;
  while (true) {
    if (i__12642_12646 < count__12641_12645) {
      var v_12647 = cljs.core._nth.call(null, chunk__12640_12644, i__12642_12646);
      cljs.core.apply.call(null, reagent.impl.util.re_render_component, v_12647);
      var G__12648 = seq__12639_12643;
      var G__12649 = chunk__12640_12644;
      var G__12650 = count__12641_12645;
      var G__12651 = i__12642_12646 + 1;
      seq__12639_12643 = G__12648;
      chunk__12640_12644 = G__12649;
      count__12641_12645 = G__12650;
      i__12642_12646 = G__12651;
      continue;
    } else {
      var temp__4126__auto___12652 = cljs.core.seq.call(null, seq__12639_12643);
      if (temp__4126__auto___12652) {
        var seq__12639_12653__$1 = temp__4126__auto___12652;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12639_12653__$1)) {
          var c__4894__auto___12654 = cljs.core.chunk_first.call(null, seq__12639_12653__$1);
          var G__12655 = cljs.core.chunk_rest.call(null, seq__12639_12653__$1);
          var G__12656 = c__4894__auto___12654;
          var G__12657 = cljs.core.count.call(null, c__4894__auto___12654);
          var G__12658 = 0;
          seq__12639_12643 = G__12655;
          chunk__12640_12644 = G__12656;
          count__12641_12645 = G__12657;
          i__12642_12646 = G__12658;
          continue;
        } else {
          var v_12659 = cljs.core.first.call(null, seq__12639_12653__$1);
          cljs.core.apply.call(null, reagent.impl.util.re_render_component, v_12659);
          var G__12660 = cljs.core.next.call(null, seq__12639_12653__$1);
          var G__12661 = null;
          var G__12662 = 0;
          var G__12663 = 0;
          seq__12639_12643 = G__12660;
          chunk__12640_12644 = G__12661;
          count__12641_12645 = G__12662;
          i__12642_12646 = G__12663;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return "Updated";
};
goog.provide("reagent.ratom");
goog.require("cljs.core");
goog.require("reagent.impl.util");
if (typeof reagent.ratom.debug !== "undefined") {
} else {
  reagent.ratom.debug = false;
}
if (typeof reagent.ratom._running !== "undefined") {
} else {
  reagent.ratom._running = cljs.core.atom.call(null, 0);
}
reagent.ratom.running = function reagent$ratom$running() {
  return cljs.core.deref.call(null, reagent.ratom._running);
};
reagent.ratom.capture_derefed = function reagent$ratom$capture_derefed(f, obj) {
  obj.cljsCaptured = null;
  var _STAR_ratom_context_STAR_12497 = reagent.ratom._STAR_ratom_context_STAR_;
  reagent.ratom._STAR_ratom_context_STAR_ = obj;
  try {
    return f.call(null);
  } finally {
    reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_12497;
  }
};
reagent.ratom.captured = function reagent$ratom$captured(obj) {
  var c = obj.cljsCaptured;
  obj.cljsCaptured = null;
  return c;
};
reagent.ratom.notify_deref_watcher_BANG_ = function reagent$ratom$notify_deref_watcher_BANG_(derefable) {
  var obj = reagent.ratom._STAR_ratom_context_STAR_;
  if (obj == null) {
    return null;
  } else {
    var captured = obj.cljsCaptured;
    return obj.cljsCaptured = cljs.core.conj.call(null, captured == null ? cljs.core.PersistentHashSet.EMPTY : captured, derefable);
  }
};
reagent.ratom.IReactiveAtom = function() {
  var obj12499 = {};
  return obj12499;
}();
reagent.ratom.RAtom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.RAtom.prototype.reagent$ratom$IReactiveAtom$ = true;
reagent.ratom.RAtom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.RAtom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
reagent.ratom.RAtom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
reagent.ratom.RAtom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
reagent.ratom.RAtom.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, new_value) {
  var self__ = this;
  var a__$1 = this;
  if (self__.validator == null) {
  } else {
    if (cljs.core.truth_(self__.validator.call(null, new_value))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validator", "validator", -325659154, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null))))].join(""));
    }
  }
  var old_value = self__.state;
  self__.state = new_value;
  if (self__.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, a__$1, old_value, new_value);
  }
  return new_value;
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x, y));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f, self__.state, x, y, more));
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.reduce_kv.call(null, function(this$__$1) {
    return function(_, key, f) {
      f.call(null, key, this$__$1, oldval, newval);
      return null;
    };
  }(this$__$1), null, self__.watches);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
reagent.ratom.RAtom.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  reagent.ratom.notify_deref_watcher_BANG_.call(null, this$__$1);
  return self__.state;
};
reagent.ratom.RAtom.cljs$lang$type = true;
reagent.ratom.RAtom.cljs$lang$ctorStr = "reagent.ratom/RAtom";
reagent.ratom.RAtom.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write.call(null, writer__4689__auto__, "reagent.ratom/RAtom");
};
reagent.ratom.__GT_RAtom = function reagent$ratom$__GT_RAtom(state, meta, validator, watches) {
  return new reagent.ratom.RAtom(state, meta, validator, watches);
};
reagent.ratom.atom = function() {
  var reagent$ratom$atom = null;
  var reagent$ratom$atom__1 = function(x) {
    return new reagent.ratom.RAtom(x, null, null, null);
  };
  var reagent$ratom$atom__2 = function() {
    var G__12503__delegate = function(x, p__12500) {
      var map__12502 = p__12500;
      var map__12502__$1 = cljs.core.seq_QMARK_.call(null, map__12502) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12502) : map__12502;
      var validator = cljs.core.get.call(null, map__12502__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.call(null, map__12502__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new reagent.ratom.RAtom(x, meta, validator, null);
    };
    var G__12503 = function(x, var_args) {
      var p__12500 = null;
      if (arguments.length > 1) {
        var G__12504__i = 0, G__12504__a = new Array(arguments.length - 1);
        while (G__12504__i < G__12504__a.length) {
          G__12504__a[G__12504__i] = arguments[G__12504__i + 1];
          ++G__12504__i;
        }
        p__12500 = new cljs.core.IndexedSeq(G__12504__a, 0);
      }
      return G__12503__delegate.call(this, x, p__12500);
    };
    G__12503.cljs$lang$maxFixedArity = 1;
    G__12503.cljs$lang$applyTo = function(arglist__12505) {
      var x = cljs.core.first(arglist__12505);
      var p__12500 = cljs.core.rest(arglist__12505);
      return G__12503__delegate(x, p__12500);
    };
    G__12503.cljs$core$IFn$_invoke$arity$variadic = G__12503__delegate;
    return G__12503;
  }();
  reagent$ratom$atom = function(x, var_args) {
    var p__12500 = var_args;
    switch(arguments.length) {
      case 1:
        return reagent$ratom$atom__1.call(this, x);
      default:
        var G__12506 = null;
        if (arguments.length > 1) {
          var G__12507__i = 0, G__12507__a = new Array(arguments.length - 1);
          while (G__12507__i < G__12507__a.length) {
            G__12507__a[G__12507__i] = arguments[G__12507__i + 1];
            ++G__12507__i;
          }
          G__12506 = new cljs.core.IndexedSeq(G__12507__a, 0);
        }
        return reagent$ratom$atom__2.cljs$core$IFn$_invoke$arity$variadic(x, G__12506);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reagent$ratom$atom.cljs$lang$maxFixedArity = 1;
  reagent$ratom$atom.cljs$lang$applyTo = reagent$ratom$atom__2.cljs$lang$applyTo;
  reagent$ratom$atom.cljs$core$IFn$_invoke$arity$1 = reagent$ratom$atom__1;
  reagent$ratom$atom.cljs$core$IFn$_invoke$arity$variadic = reagent$ratom$atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return reagent$ratom$atom;
}();
reagent.ratom.RCursor = function(ratom, path, reaction) {
  this.ratom = ratom;
  this.path = path;
  this.reaction = reaction;
  this.cljs$lang$protocol_mask$partition0$ = 2153807872;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.RCursor.prototype._reaction = function() {
  var self__ = this;
  var this$ = this;
  if (self__.reaction == null) {
    return self__.reaction = function() {
      var G__12514 = self__.ratom;
      if (G__12514) {
        var bit__4783__auto__ = G__12514.cljs$lang$protocol_mask$partition0$ & 32768;
        if (bit__4783__auto__ || G__12514.cljs$core$IDeref$) {
          return true;
        } else {
          if (!G__12514.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__12514);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__12514);
      }
    }() ? reagent.ratom.make_reaction.call(null, function(this$) {
      return function() {
        return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.ratom), self__.path);
      };
    }(this$), new cljs.core.Keyword(null, "on-set", "on-set", -140953470), cljs.core._EQ_.call(null, self__.path, cljs.core.PersistentVector.EMPTY) ? function(this$) {
      return function(p1__12509_SHARP_, p2__12508_SHARP_) {
        return cljs.core.reset_BANG_.call(null, self__.ratom, p2__12508_SHARP_);
      };
    }(this$) : function(this$) {
      return function(p1__12511_SHARP_, p2__12510_SHARP_) {
        return cljs.core.swap_BANG_.call(null, self__.ratom, cljs.core.assoc_in, self__.path, p2__12510_SHARP_);
      };
    }(this$)) : reagent.ratom.make_reaction.call(null, function(this$) {
      return function() {
        return self__.ratom.call(null, self__.path);
      };
    }(this$), new cljs.core.Keyword(null, "on-set", "on-set", -140953470), function(this$) {
      return function(p1__12513_SHARP_, p2__12512_SHARP_) {
        return self__.ratom.call(null, self__.path, p2__12512_SHARP_);
      };
    }(this$));
  } else {
    return self__.reaction;
  }
};
reagent.ratom.RCursor.prototype._peek = function() {
  var self__ = this;
  var this$ = this;
  var _STAR_ratom_context_STAR_12515 = reagent.ratom._STAR_ratom_context_STAR_;
  reagent.ratom._STAR_ratom_context_STAR_ = null;
  try {
    return cljs.core._deref.call(null, this$._reaction());
  } finally {
    reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_12515;
  }
};
reagent.ratom.RCursor.prototype.reagent$ratom$IReactiveAtom$ = true;
reagent.ratom.RCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, [cljs.core.str("#\x3cCursor: "), cljs.core.str(self__.path), cljs.core.str(" ")].join(""));
  cljs.core.pr_writer.call(null, a__$1._peek(), writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.RCursor.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.ratom, self__.path], null));
};
reagent.ratom.RCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return other instanceof reagent.ratom.RCursor && cljs.core._EQ_.call(null, self__.path, other.path) && cljs.core._EQ_.call(null, self__.ratom, other.ratom);
};
reagent.ratom.RCursor.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(this$, new_value) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._reset_BANG_.call(null, this$__$1._reaction(), new_value);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._swap_BANG_.call(null, a__$1._reaction(), f);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._swap_BANG_.call(null, a__$1._reaction(), f, x);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._swap_BANG_.call(null, a__$1._reaction(), f, x, y);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._swap_BANG_.call(null, a__$1._reaction(), f, x, y, more);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._notify_watches.call(null, this$__$1._reaction(), oldval, newval);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._add_watch.call(null, this$__$1._reaction(), key, f);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._remove_watch.call(null, this$__$1._reaction(), key);
};
reagent.ratom.RCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._deref.call(null, this$__$1._reaction());
};
reagent.ratom.RCursor.cljs$lang$type = true;
reagent.ratom.RCursor.cljs$lang$ctorStr = "reagent.ratom/RCursor";
reagent.ratom.RCursor.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write.call(null, writer__4689__auto__, "reagent.ratom/RCursor");
};
reagent.ratom.__GT_RCursor = function reagent$ratom$__GT_RCursor(ratom, path, reaction) {
  return new reagent.ratom.RCursor(ratom, path, reaction);
};
reagent.ratom.cursor = function reagent$ratom$cursor(src, path) {
  if (function() {
    var G__12520 = path;
    if (G__12520) {
      var bit__4783__auto__ = G__12520.cljs$lang$protocol_mask$partition0$ & 32768;
      if (bit__4783__auto__ || G__12520.cljs$core$IDeref$) {
        return true;
      } else {
        if (!G__12520.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__12520);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__12520);
    }
  }()) {
    if (typeof console !== "undefined") {
      console.warn([cljs.core.str("Warning: "), cljs.core.str("Calling cursor with an atom as the second arg is "), cljs.core.str("deprecated, in (cursor "), cljs.core.str(src), cljs.core.str(" "), cljs.core.str(cljs.core.pr_str.call(null, path)), cljs.core.str(")")].join(""));
    } else {
    }
    if (function() {
      var G__12521 = path;
      if (G__12521) {
        var bit__4783__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4109__auto__ = bit__4783__auto__;
          if (cljs.core.truth_(or__4109__auto__)) {
            return or__4109__auto__;
          } else {
            return G__12521.reagent$ratom$IReactiveAtom$;
          }
        }())) {
          return true;
        } else {
          if (!G__12521.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, G__12521);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, G__12521);
      }
    }()) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("src must be a reactive atom, not "), cljs.core.str(cljs.core.pr_str.call(null, path))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IReactiveAtom", "IReactiveAtom", -991158427, null), new cljs.core.Symbol(null, "path", "path", 1452340359, null))))].join(""));
    }
    return new reagent.ratom.RCursor(path, src, null);
  } else {
    if (function() {
      var or__4109__auto__ = function() {
        var G__12523 = src;
        if (G__12523) {
          var bit__4783__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__4109__auto__ = bit__4783__auto__;
            if (cljs.core.truth_(or__4109__auto__)) {
              return or__4109__auto__;
            } else {
              return G__12523.reagent$ratom$IReactiveAtom$;
            }
          }())) {
            return true;
          } else {
            if (!G__12523.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, G__12523);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, G__12523);
        }
      }();
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        return cljs.core.ifn_QMARK_.call(null, src) && !cljs.core.vector_QMARK_.call(null, src);
      }
    }()) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("src must be a reactive atom or a function, not "), cljs.core.str(cljs.core.pr_str.call(null, src))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IReactiveAtom", "IReactiveAtom", -991158427, null), 
      new cljs.core.Symbol(null, "src", "src", -10544524, null)), cljs.core.list(new cljs.core.Symbol(null, "and", "and", 668631710, null), cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "src", "src", -10544524, null)), cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "vector?", "vector?", -61367869, null), new cljs.core.Symbol(null, "src", "src", -10544524, null)))))))].join(""));
    }
    return new reagent.ratom.RCursor(src, path, null);
  }
};
reagent.ratom.IDisposable = function() {
  var obj12525 = {};
  return obj12525;
}();
reagent.ratom.dispose_BANG_ = function reagent$ratom$dispose_BANG_(this$) {
  if (function() {
    var and__4097__auto__ = this$;
    if (and__4097__auto__) {
      return this$.reagent$ratom$IDisposable$dispose_BANG_$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return this$.reagent$ratom$IDisposable$dispose_BANG_$arity$1(this$);
  } else {
    var x__4745__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4109__auto__ = reagent.ratom.dispose_BANG_[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = reagent.ratom.dispose_BANG_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDisposable.dispose!", this$);
        }
      }
    }().call(null, this$);
  }
};
reagent.ratom.IRunnable = function() {
  var obj12527 = {};
  return obj12527;
}();
reagent.ratom.run = function reagent$ratom$run(this$) {
  if (function() {
    var and__4097__auto__ = this$;
    if (and__4097__auto__) {
      return this$.reagent$ratom$IRunnable$run$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return this$.reagent$ratom$IRunnable$run$arity$1(this$);
  } else {
    var x__4745__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4109__auto__ = reagent.ratom.run[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = reagent.ratom.run["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRunnable.run", this$);
        }
      }
    }().call(null, this$);
  }
};
reagent.ratom.IComputedImpl = function() {
  var obj12529 = {};
  return obj12529;
}();
reagent.ratom._update_watching = function reagent$ratom$_update_watching(this$, derefed) {
  if (function() {
    var and__4097__auto__ = this$;
    if (and__4097__auto__) {
      return this$.reagent$ratom$IComputedImpl$_update_watching$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return this$.reagent$ratom$IComputedImpl$_update_watching$arity$2(this$, derefed);
  } else {
    var x__4745__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4109__auto__ = reagent.ratom._update_watching[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = reagent.ratom._update_watching["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComputedImpl.-update-watching", this$);
        }
      }
    }().call(null, this$, derefed);
  }
};
reagent.ratom._handle_change = function reagent$ratom$_handle_change(k, sender, oldval, newval) {
  if (function() {
    var and__4097__auto__ = k;
    if (and__4097__auto__) {
      return k.reagent$ratom$IComputedImpl$_handle_change$arity$4;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return k.reagent$ratom$IComputedImpl$_handle_change$arity$4(k, sender, oldval, newval);
  } else {
    var x__4745__auto__ = k == null ? null : k;
    return function() {
      var or__4109__auto__ = reagent.ratom._handle_change[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = reagent.ratom._handle_change["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComputedImpl.-handle-change", k);
        }
      }
    }().call(null, k, sender, oldval, newval);
  }
};
reagent.ratom._peek_at = function reagent$ratom$_peek_at(this$) {
  if (function() {
    var and__4097__auto__ = this$;
    if (and__4097__auto__) {
      return this$.reagent$ratom$IComputedImpl$_peek_at$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return this$.reagent$ratom$IComputedImpl$_peek_at$arity$1(this$);
  } else {
    var x__4745__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4109__auto__ = reagent.ratom._peek_at[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = reagent.ratom._peek_at["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComputedImpl.-peek-at", this$);
        }
      }
    }().call(null, this$);
  }
};
reagent.ratom.Reaction = function(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose) {
  this.f = f;
  this.state = state;
  this.dirty_QMARK_ = dirty_QMARK_;
  this.active_QMARK_ = active_QMARK_;
  this.watching = watching;
  this.watches = watches;
  this.auto_run = auto_run;
  this.on_set = on_set;
  this.on_dispose = on_dispose;
  this.cljs$lang$protocol_mask$partition0$ = 2153807872;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_handle_change$arity$4 = function(this$, sender, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4097__auto__ = self__.active_QMARK_;
    if (cljs.core.truth_(and__4097__auto__)) {
      return cljs.core.not.call(null, self__.dirty_QMARK_) && !(oldval === newval);
    } else {
      return and__4097__auto__;
    }
  }())) {
    self__.dirty_QMARK_ = true;
    return function() {
      var or__4109__auto__ = self__.auto_run;
      if (cljs.core.truth_(or__4109__auto__)) {
        return or__4109__auto__;
      } else {
        return reagent.ratom.run;
      }
    }().call(null, this$__$1);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_update_watching$arity$2 = function(this$, derefed) {
  var self__ = this;
  var this$__$1 = this;
  var seq__12530_12543 = cljs.core.seq.call(null, derefed);
  var chunk__12531_12544 = null;
  var count__12532_12545 = 0;
  var i__12533_12546 = 0;
  while (true) {
    if (i__12533_12546 < count__12532_12545) {
      var w_12547 = cljs.core._nth.call(null, chunk__12531_12544, i__12533_12546);
      if (cljs.core.contains_QMARK_.call(null, self__.watching, w_12547)) {
      } else {
        cljs.core.add_watch.call(null, w_12547, this$__$1, reagent.ratom._handle_change);
      }
      var G__12548 = seq__12530_12543;
      var G__12549 = chunk__12531_12544;
      var G__12550 = count__12532_12545;
      var G__12551 = i__12533_12546 + 1;
      seq__12530_12543 = G__12548;
      chunk__12531_12544 = G__12549;
      count__12532_12545 = G__12550;
      i__12533_12546 = G__12551;
      continue;
    } else {
      var temp__4126__auto___12552 = cljs.core.seq.call(null, seq__12530_12543);
      if (temp__4126__auto___12552) {
        var seq__12530_12553__$1 = temp__4126__auto___12552;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12530_12553__$1)) {
          var c__4894__auto___12554 = cljs.core.chunk_first.call(null, seq__12530_12553__$1);
          var G__12555 = cljs.core.chunk_rest.call(null, seq__12530_12553__$1);
          var G__12556 = c__4894__auto___12554;
          var G__12557 = cljs.core.count.call(null, c__4894__auto___12554);
          var G__12558 = 0;
          seq__12530_12543 = G__12555;
          chunk__12531_12544 = G__12556;
          count__12532_12545 = G__12557;
          i__12533_12546 = G__12558;
          continue;
        } else {
          var w_12559 = cljs.core.first.call(null, seq__12530_12553__$1);
          if (cljs.core.contains_QMARK_.call(null, self__.watching, w_12559)) {
          } else {
            cljs.core.add_watch.call(null, w_12559, this$__$1, reagent.ratom._handle_change);
          }
          var G__12560 = cljs.core.next.call(null, seq__12530_12553__$1);
          var G__12561 = null;
          var G__12562 = 0;
          var G__12563 = 0;
          seq__12530_12543 = G__12560;
          chunk__12531_12544 = G__12561;
          count__12532_12545 = G__12562;
          i__12533_12546 = G__12563;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__12534_12564 = cljs.core.seq.call(null, self__.watching);
  var chunk__12535_12565 = null;
  var count__12536_12566 = 0;
  var i__12537_12567 = 0;
  while (true) {
    if (i__12537_12567 < count__12536_12566) {
      var w_12568 = cljs.core._nth.call(null, chunk__12535_12565, i__12537_12567);
      if (cljs.core.contains_QMARK_.call(null, derefed, w_12568)) {
      } else {
        cljs.core.remove_watch.call(null, w_12568, this$__$1);
      }
      var G__12569 = seq__12534_12564;
      var G__12570 = chunk__12535_12565;
      var G__12571 = count__12536_12566;
      var G__12572 = i__12537_12567 + 1;
      seq__12534_12564 = G__12569;
      chunk__12535_12565 = G__12570;
      count__12536_12566 = G__12571;
      i__12537_12567 = G__12572;
      continue;
    } else {
      var temp__4126__auto___12573 = cljs.core.seq.call(null, seq__12534_12564);
      if (temp__4126__auto___12573) {
        var seq__12534_12574__$1 = temp__4126__auto___12573;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12534_12574__$1)) {
          var c__4894__auto___12575 = cljs.core.chunk_first.call(null, seq__12534_12574__$1);
          var G__12576 = cljs.core.chunk_rest.call(null, seq__12534_12574__$1);
          var G__12577 = c__4894__auto___12575;
          var G__12578 = cljs.core.count.call(null, c__4894__auto___12575);
          var G__12579 = 0;
          seq__12534_12564 = G__12576;
          chunk__12535_12565 = G__12577;
          count__12536_12566 = G__12578;
          i__12537_12567 = G__12579;
          continue;
        } else {
          var w_12580 = cljs.core.first.call(null, seq__12534_12574__$1);
          if (cljs.core.contains_QMARK_.call(null, derefed, w_12580)) {
          } else {
            cljs.core.remove_watch.call(null, w_12580, this$__$1);
          }
          var G__12581 = cljs.core.next.call(null, seq__12534_12574__$1);
          var G__12582 = null;
          var G__12583 = 0;
          var G__12584 = 0;
          seq__12534_12564 = G__12581;
          chunk__12535_12565 = G__12582;
          count__12536_12566 = G__12583;
          i__12537_12567 = G__12584;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return self__.watching = derefed;
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_peek_at$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, self__.dirty_QMARK_)) {
    return self__.state;
  } else {
    var _STAR_ratom_context_STAR_12538 = reagent.ratom._STAR_ratom_context_STAR_;
    reagent.ratom._STAR_ratom_context_STAR_ = null;
    try {
      return cljs.core._deref.call(null, this$__$1);
    } finally {
      reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_12538;
    }
  }
};
reagent.ratom.Reaction.prototype.reagent$ratom$IReactiveAtom$ = true;
reagent.ratom.Reaction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this$, writer, opts) {
  var self__ = this;
  var this$__$1 = this;
  cljs.core._write.call(null, writer, [cljs.core.str("#\x3cReaction "), cljs.core.str(cljs.core.hash.call(null, this$__$1)), cljs.core.str(": ")].join(""));
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.Reaction.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
reagent.ratom.Reaction.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
reagent.ratom.Reaction.prototype.reagent$ratom$IDisposable$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IDisposable$dispose_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var seq__12539_12585 = cljs.core.seq.call(null, self__.watching);
  var chunk__12540_12586 = null;
  var count__12541_12587 = 0;
  var i__12542_12588 = 0;
  while (true) {
    if (i__12542_12588 < count__12541_12587) {
      var w_12589 = cljs.core._nth.call(null, chunk__12540_12586, i__12542_12588);
      cljs.core.remove_watch.call(null, w_12589, this$__$1);
      var G__12590 = seq__12539_12585;
      var G__12591 = chunk__12540_12586;
      var G__12592 = count__12541_12587;
      var G__12593 = i__12542_12588 + 1;
      seq__12539_12585 = G__12590;
      chunk__12540_12586 = G__12591;
      count__12541_12587 = G__12592;
      i__12542_12588 = G__12593;
      continue;
    } else {
      var temp__4126__auto___12594 = cljs.core.seq.call(null, seq__12539_12585);
      if (temp__4126__auto___12594) {
        var seq__12539_12595__$1 = temp__4126__auto___12594;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12539_12595__$1)) {
          var c__4894__auto___12596 = cljs.core.chunk_first.call(null, seq__12539_12595__$1);
          var G__12597 = cljs.core.chunk_rest.call(null, seq__12539_12595__$1);
          var G__12598 = c__4894__auto___12596;
          var G__12599 = cljs.core.count.call(null, c__4894__auto___12596);
          var G__12600 = 0;
          seq__12539_12585 = G__12597;
          chunk__12540_12586 = G__12598;
          count__12541_12587 = G__12599;
          i__12542_12588 = G__12600;
          continue;
        } else {
          var w_12601 = cljs.core.first.call(null, seq__12539_12595__$1);
          cljs.core.remove_watch.call(null, w_12601, this$__$1);
          var G__12602 = cljs.core.next.call(null, seq__12539_12595__$1);
          var G__12603 = null;
          var G__12604 = 0;
          var G__12605 = 0;
          seq__12539_12585 = G__12602;
          chunk__12540_12586 = G__12603;
          count__12541_12587 = G__12604;
          i__12542_12588 = G__12605;
          continue;
        }
      } else {
      }
    }
    break;
  }
  self__.watching = null;
  self__.state = null;
  self__.dirty_QMARK_ = true;
  if (cljs.core.truth_(self__.active_QMARK_)) {
    if (cljs.core.truth_(reagent.ratom.debug)) {
      cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.dec);
    } else {
    }
    self__.active_QMARK_ = false;
  } else {
  }
  if (cljs.core.truth_(self__.on_dispose)) {
    return self__.on_dispose.call(null);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, newval) {
  var self__ = this;
  var a__$1 = this;
  var oldval = self__.state;
  self__.state = newval;
  if (cljs.core.truth_(self__.on_set)) {
    self__.dirty_QMARK_ = true;
    self__.on_set.call(null, oldval, newval);
  } else {
  }
  cljs.core._notify_watches.call(null, a__$1, oldval, newval);
  return newval;
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f__$1) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, reagent.ratom._peek_at.call(null, a__$1)));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f__$1, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, reagent.ratom._peek_at.call(null, a__$1), x));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f__$1, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, reagent.ratom._peek_at.call(null, a__$1), x, y));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f__$1, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f__$1, reagent.ratom._peek_at.call(null, a__$1), x, y, more));
};
reagent.ratom.Reaction.prototype.reagent$ratom$IRunnable$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IRunnable$run$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var oldstate = self__.state;
  var res = reagent.ratom.capture_derefed.call(null, self__.f, this$__$1);
  var derefed = reagent.ratom.captured.call(null, this$__$1);
  if (cljs.core.not_EQ_.call(null, derefed, self__.watching)) {
    reagent.ratom._update_watching.call(null, this$__$1, derefed);
  } else {
  }
  if (cljs.core.truth_(self__.active_QMARK_)) {
  } else {
    if (cljs.core.truth_(reagent.ratom.debug)) {
      cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.inc);
    } else {
    }
    self__.active_QMARK_ = true;
  }
  self__.dirty_QMARK_ = false;
  self__.state = res;
  cljs.core._notify_watches.call(null, this$__$1, oldstate, self__.state);
  return res;
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.reduce_kv.call(null, function(this$__$1) {
    return function(_, key, f__$1) {
      f__$1.call(null, key, this$__$1, oldval, newval);
      return null;
    };
  }(this$__$1), null, self__.watches);
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, k, wf) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, k, wf);
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, k) {
  var self__ = this;
  var this$__$1 = this;
  self__.watches = cljs.core.dissoc.call(null, self__.watches, k);
  if (cljs.core.empty_QMARK_.call(null, self__.watches) && cljs.core.not.call(null, self__.auto_run)) {
    return reagent.ratom.dispose_BANG_.call(null, this$__$1);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(function() {
    var or__4109__auto__ = self__.auto_run;
    if (cljs.core.truth_(or__4109__auto__)) {
      return or__4109__auto__;
    } else {
      return cljs.core.some_QMARK_.call(null, reagent.ratom._STAR_ratom_context_STAR_);
    }
  }())) {
    reagent.ratom.notify_deref_watcher_BANG_.call(null, this$__$1);
    if (cljs.core.truth_(self__.dirty_QMARK_)) {
      return reagent.ratom.run.call(null, this$__$1);
    } else {
      return self__.state;
    }
  } else {
    if (cljs.core.truth_(self__.dirty_QMARK_)) {
      var oldstate_12606 = self__.state;
      self__.state = self__.f.call(null);
      if (oldstate_12606 === self__.state) {
      } else {
        cljs.core._notify_watches.call(null, this$__$1, oldstate_12606, self__.state);
      }
    } else {
    }
    return self__.state;
  }
};
reagent.ratom.Reaction.cljs$lang$type = true;
reagent.ratom.Reaction.cljs$lang$ctorStr = "reagent.ratom/Reaction";
reagent.ratom.Reaction.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write.call(null, writer__4689__auto__, "reagent.ratom/Reaction");
};
reagent.ratom.__GT_Reaction = function reagent$ratom$__GT_Reaction(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose) {
  return new reagent.ratom.Reaction(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose);
};
reagent.ratom.make_reaction = function() {
  var reagent$ratom$make_reaction__delegate = function(f, p__12607) {
    var map__12609 = p__12607;
    var map__12609__$1 = cljs.core.seq_QMARK_.call(null, map__12609) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12609) : map__12609;
    var derefed = cljs.core.get.call(null, map__12609__$1, new cljs.core.Keyword(null, "derefed", "derefed", 590684583));
    var on_dispose = cljs.core.get.call(null, map__12609__$1, new cljs.core.Keyword(null, "on-dispose", "on-dispose", 2105306360));
    var on_set = cljs.core.get.call(null, map__12609__$1, new cljs.core.Keyword(null, "on-set", "on-set", -140953470));
    var auto_run = cljs.core.get.call(null, map__12609__$1, new cljs.core.Keyword(null, "auto-run", "auto-run", 1958400437));
    var runner = cljs.core._EQ_.call(null, auto_run, true) ? reagent.ratom.run : auto_run;
    var active = !(derefed == null);
    var dirty = !active;
    var reaction = new reagent.ratom.Reaction(f, null, dirty, active, null, null, runner, on_set, on_dispose);
    if (derefed == null) {
    } else {
      if (cljs.core.truth_(reagent.ratom.debug)) {
        cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.inc);
      } else {
      }
      reagent.ratom._update_watching.call(null, reaction, derefed);
    }
    return reaction;
  };
  var reagent$ratom$make_reaction = function(f, var_args) {
    var p__12607 = null;
    if (arguments.length > 1) {
      var G__12610__i = 0, G__12610__a = new Array(arguments.length - 1);
      while (G__12610__i < G__12610__a.length) {
        G__12610__a[G__12610__i] = arguments[G__12610__i + 1];
        ++G__12610__i;
      }
      p__12607 = new cljs.core.IndexedSeq(G__12610__a, 0);
    }
    return reagent$ratom$make_reaction__delegate.call(this, f, p__12607);
  };
  reagent$ratom$make_reaction.cljs$lang$maxFixedArity = 1;
  reagent$ratom$make_reaction.cljs$lang$applyTo = function(arglist__12611) {
    var f = cljs.core.first(arglist__12611);
    var p__12607 = cljs.core.rest(arglist__12611);
    return reagent$ratom$make_reaction__delegate(f, p__12607);
  };
  reagent$ratom$make_reaction.cljs$core$IFn$_invoke$arity$variadic = reagent$ratom$make_reaction__delegate;
  return reagent$ratom$make_reaction;
}();
reagent.ratom.Wrapper = function(state, callback, changed, watches) {
  this.state = state;
  this.callback = callback;
  this.changed = changed;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2149613568;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.Wrapper.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  cljs.core._write.call(null, writer, "#\x3cwrap: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.Wrapper.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.reduce_kv.call(null, function(this$__$1) {
    return function(_, key, f) {
      f.call(null, key, this$__$1, oldval, newval);
      return null;
    };
  }(this$__$1), null, self__.watches);
};
reagent.ratom.Wrapper.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
reagent.ratom.Wrapper.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
reagent.ratom.Wrapper.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof reagent.ratom.Wrapper && cljs.core.not.call(null, self__.changed) && cljs.core.not.call(null, other.changed) && cljs.core._EQ_.call(null, self__.state, other.state) && cljs.core._EQ_.call(null, self__.callback, other.callback);
};
reagent.ratom.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state));
};
reagent.ratom.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x));
};
reagent.ratom.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x, y));
};
reagent.ratom.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f, self__.state, x, y, more));
};
reagent.ratom.Wrapper.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(this$, newval) {
  var self__ = this;
  var this$__$1 = this;
  var oldval = self__.state;
  self__.changed = true;
  self__.state = newval;
  if (self__.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, this$__$1, oldval, newval);
  }
  self__.callback.call(null, newval);
  return newval;
};
reagent.ratom.Wrapper.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4097__auto__ = self__.changed;
    if (cljs.core.truth_(and__4097__auto__)) {
      return cljs.core.some_QMARK_.call(null, reagent.ratom._STAR_ratom_context_STAR_);
    } else {
      return and__4097__auto__;
    }
  }())) {
    if (typeof console !== "undefined") {
      console.warn([cljs.core.str("Warning: "), cljs.core.str("derefing stale wrap: "), cljs.core.str(cljs.core.pr_str.call(null, this$__$1))].join(""));
    } else {
    }
  } else {
  }
  return self__.state;
};
reagent.ratom.Wrapper.cljs$lang$type = true;
reagent.ratom.Wrapper.cljs$lang$ctorStr = "reagent.ratom/Wrapper";
reagent.ratom.Wrapper.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write.call(null, writer__4689__auto__, "reagent.ratom/Wrapper");
};
reagent.ratom.__GT_Wrapper = function reagent$ratom$__GT_Wrapper(state, callback, changed, watches) {
  return new reagent.ratom.Wrapper(state, callback, changed, watches);
};
reagent.ratom.make_wrapper = function reagent$ratom$make_wrapper(value, callback_fn, args) {
  return new reagent.ratom.Wrapper(value, new reagent.impl.util.partial_ifn(callback_fn, args, null), false, null);
};
goog.provide("reagent.impl.batching");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("reagent.impl.util");
goog.require("reagent.ratom");
goog.require("reagent.interop");
goog.require("reagent.debug");
if (typeof reagent.impl.batching.mount_count !== "undefined") {
} else {
  reagent.impl.batching.mount_count = 0;
}
reagent.impl.batching.next_mount_count = function reagent$impl$batching$next_mount_count() {
  return reagent.impl.batching.mount_count = reagent.impl.batching.mount_count + 1;
};
reagent.impl.batching.fake_raf = function reagent$impl$batching$fake_raf(f) {
  return setTimeout(f, 16);
};
reagent.impl.batching.next_tick = cljs.core.not.call(null, reagent.impl.util.is_client) ? reagent.impl.batching.fake_raf : function() {
  var w = window;
  var or__4109__auto__ = w["requestAnimationFrame"];
  if (cljs.core.truth_(or__4109__auto__)) {
    return or__4109__auto__;
  } else {
    var or__4109__auto____$1 = w["webkitRequestAnimationFrame"];
    if (cljs.core.truth_(or__4109__auto____$1)) {
      return or__4109__auto____$1;
    } else {
      var or__4109__auto____$2 = w["mozRequestAnimationFrame"];
      if (cljs.core.truth_(or__4109__auto____$2)) {
        return or__4109__auto____$2;
      } else {
        var or__4109__auto____$3 = w["msRequestAnimationFrame"];
        if (cljs.core.truth_(or__4109__auto____$3)) {
          return or__4109__auto____$3;
        } else {
          return reagent.impl.batching.fake_raf;
        }
      }
    }
  }
}();
reagent.impl.batching.compare_mount_order = function reagent$impl$batching$compare_mount_order(c1, c2) {
  return c1["cljsMountOrder"] - c2["cljsMountOrder"];
};
reagent.impl.batching.run_queue = function reagent$impl$batching$run_queue(a) {
  a.sort(reagent.impl.batching.compare_mount_order);
  var n__4994__auto__ = a.length;
  var i = 0;
  while (true) {
    if (i < n__4994__auto__) {
      var c_12451 = a[i];
      if (cljs.core.truth_(c_12451["cljsIsDirty"])) {
        c_12451["forceUpdate"]();
      } else {
      }
      var G__12452 = i + 1;
      i = G__12452;
      continue;
    } else {
      return null;
    }
    break;
  }
};
reagent.impl.batching.run_funs = function reagent$impl$batching$run_funs(a) {
  var n__4994__auto__ = a.length;
  var i = 0;
  while (true) {
    if (i < n__4994__auto__) {
      a[i].call(null);
      var G__12453 = i + 1;
      i = G__12453;
      continue;
    } else {
      return null;
    }
    break;
  }
};
reagent.impl.batching.RenderQueue = function(queue, scheduled_QMARK_, after_render) {
  this.queue = queue;
  this.scheduled_QMARK_ = scheduled_QMARK_;
  this.after_render = after_render;
};
reagent.impl.batching.RenderQueue.prototype.queue_render = function(c) {
  var self__ = this;
  var this$ = this;
  self__.queue.push(c);
  return this$.schedule();
};
reagent.impl.batching.RenderQueue.prototype.add_after_render = function(f) {
  var self__ = this;
  var _ = this;
  return self__.after_render.push(f);
};
reagent.impl.batching.RenderQueue.prototype.schedule = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.truth_(self__.scheduled_QMARK_)) {
    return null;
  } else {
    self__.scheduled_QMARK_ = true;
    return reagent.impl.batching.next_tick.call(null, function(this$) {
      return function() {
        return this$.run_queue();
      };
    }(this$));
  }
};
reagent.impl.batching.RenderQueue.prototype.run_queue = function() {
  var self__ = this;
  var _ = this;
  var q = self__.queue;
  var aq = self__.after_render;
  self__.queue = [];
  self__.after_render = [];
  self__.scheduled_QMARK_ = false;
  reagent.impl.batching.run_queue.call(null, q);
  return reagent.impl.batching.run_funs.call(null, aq);
};
reagent.impl.batching.RenderQueue.cljs$lang$type = true;
reagent.impl.batching.RenderQueue.cljs$lang$ctorStr = "reagent.impl.batching/RenderQueue";
reagent.impl.batching.RenderQueue.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write.call(null, writer__4689__auto__, "reagent.impl.batching/RenderQueue");
};
reagent.impl.batching.__GT_RenderQueue = function reagent$impl$batching$__GT_RenderQueue(queue, scheduled_QMARK_, after_render) {
  return new reagent.impl.batching.RenderQueue(queue, scheduled_QMARK_, after_render);
};
reagent.impl.batching.render_queue = new reagent.impl.batching.RenderQueue([], false, []);
reagent.impl.batching.flush = function reagent$impl$batching$flush() {
  return reagent.impl.batching.render_queue.run_queue();
};
reagent.impl.batching.queue_render = function reagent$impl$batching$queue_render(c) {
  c["cljsIsDirty"] = true;
  return reagent.impl.batching.render_queue.queue_render(c);
};
reagent.impl.batching.mark_rendered = function reagent$impl$batching$mark_rendered(c) {
  return c["cljsIsDirty"] = false;
};
reagent.impl.batching.do_after_flush = function reagent$impl$batching$do_after_flush(f) {
  return reagent.impl.batching.render_queue.add_after_render(f);
};
reagent.impl.batching.do_later = function reagent$impl$batching$do_later(f) {
  reagent.impl.batching.do_after_flush.call(null, f);
  return reagent.impl.batching.render_queue.schedule();
};
reagent.impl.batching.is_reagent_component = function reagent$impl$batching$is_reagent_component(c) {
  var G__12455 = c;
  var G__12455__$1 = G__12455 == null ? null : G__12455["props"];
  var G__12455__$2 = G__12455__$1 == null ? null : G__12455__$1["argv"];
  return G__12455__$2;
};
reagent.impl.batching.run_reactively = function reagent$impl$batching$run_reactively(c, run) {
  if (cljs.core.truth_(reagent.impl.batching.is_reagent_component.call(null, c))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "is-reagent-component", "is-reagent-component", -1856228005, null), new cljs.core.Symbol(null, "c", "c", -122660552, null))))].join(""));
  }
  reagent.impl.batching.mark_rendered.call(null, c);
  var rat = c["cljsRatom"];
  if (rat == null) {
    var res = reagent.ratom.capture_derefed.call(null, run, c);
    var derefed = reagent.ratom.captured.call(null, c);
    if (!(derefed == null)) {
      c["cljsRatom"] = reagent.ratom.make_reaction.call(null, run, new cljs.core.Keyword(null, "auto-run", "auto-run", 1958400437), function(res, derefed, rat) {
        return function() {
          return reagent.impl.batching.queue_render.call(null, c);
        };
      }(res, derefed, rat), new cljs.core.Keyword(null, "derefed", "derefed", 590684583), derefed);
    } else {
    }
    return res;
  } else {
    return reagent.ratom.run.call(null, rat);
  }
};
reagent.impl.batching.dispose = function reagent$impl$batching$dispose(c) {
  var G__12457_12458 = c["cljsRatom"];
  var G__12457_12459__$1 = G__12457_12458 == null ? null : reagent.ratom.dispose_BANG_.call(null, G__12457_12458);
  return reagent.impl.batching.mark_rendered.call(null, c);
};
goog.provide("reagent.impl.component");
goog.require("cljs.core");
goog.require("reagent.debug");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.batching");
goog.require("reagent.impl.util");
reagent.impl.component.state_atom = function reagent$impl$component$state_atom(this$) {
  var sa = this$["cljsState"];
  if (!(sa == null)) {
    return sa;
  } else {
    return this$["cljsState"] = reagent.ratom.atom.call(null, null);
  }
};
reagent.impl.component.as_element = function reagent$impl$component$as_element(x) {
  return reagent.impl.template.as_element(x);
};
reagent.impl.component.do_render = function reagent$impl$component$do_render(c) {
  var _STAR_current_component_STAR_12414 = reagent.impl.component._STAR_current_component_STAR_;
  reagent.impl.component._STAR_current_component_STAR_ = c;
  try {
    var f = c["cljsRender"];
    var _ = cljs.core.ifn_QMARK_.call(null, f) ? null : function() {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }();
    var p = c["props"];
    var res = c["reagentRender"] == null ? f.call(null, c) : function() {
      var argv = p["argv"];
      var n = cljs.core.count.call(null, argv);
      var G__12415 = n;
      switch(G__12415) {
        case 1:
          return f.call(null);
          break;
        case 2:
          return f.call(null, cljs.core.nth.call(null, argv, 1));
          break;
        case 3:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2));
          break;
        case 4:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2), cljs.core.nth.call(null, argv, 3));
          break;
        case 5:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2), cljs.core.nth.call(null, argv, 3), cljs.core.nth.call(null, argv, 4));
          break;
        default:
          return cljs.core.apply.call(null, f, cljs.core.subvec.call(null, argv, 1));
      }
    }();
    if (cljs.core.vector_QMARK_.call(null, res)) {
      return reagent.impl.component.as_element.call(null, res);
    } else {
      if (cljs.core.ifn_QMARK_.call(null, res)) {
        c["cljsRender"] = res;
        return reagent$impl$component$do_render.call(null, c);
      } else {
        return res;
      }
    }
  } finally {
    reagent.impl.component._STAR_current_component_STAR_ = _STAR_current_component_STAR_12414;
  }
};
reagent.impl.component.static_fns = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "render", "render", -1408033454), function() {
  var c = this;
  if (cljs.core.not.call(null, reagent.impl.component._STAR_non_reactive_STAR_)) {
    return reagent.impl.batching.run_reactively.call(null, c, function(c) {
      return function() {
        return reagent.impl.component.do_render.call(null, c);
      };
    }(c));
  } else {
    return reagent.impl.component.do_render.call(null, c);
  }
}], null);
reagent.impl.component.custom_wrapper = function reagent$impl$component$custom_wrapper(key, f) {
  var G__12418 = key instanceof cljs.core.Keyword ? key.fqn : null;
  switch(G__12418) {
    case "componentWillUnmount":
      return function(G__12418) {
        return function() {
          var c = this;
          reagent.impl.batching.dispose.call(null, c);
          if (f == null) {
            return null;
          } else {
            return f.call(null, c);
          }
        };
      }(G__12418);
      break;
    case "componentWillMount":
      return function(G__12418) {
        return function() {
          var c = this;
          c["cljsMountOrder"] = reagent.impl.batching.next_mount_count.call(null);
          if (f == null) {
            return null;
          } else {
            return f.call(null, c);
          }
        };
      }(G__12418);
      break;
    case "componentDidUpdate":
      return function(G__12418) {
        return function(oldprops) {
          var c = this;
          return f.call(null, c, oldprops["argv"]);
        };
      }(G__12418);
      break;
    case "componentWillUpdate":
      return function(G__12418) {
        return function(nextprops) {
          var c = this;
          return f.call(null, c, nextprops["argv"]);
        };
      }(G__12418);
      break;
    case "shouldComponentUpdate":
      return function(G__12418) {
        return function(nextprops, nextstate) {
          var or__4109__auto__ = reagent.impl.util._STAR_always_update_STAR_;
          if (cljs.core.truth_(or__4109__auto__)) {
            return or__4109__auto__;
          } else {
            var c = this;
            var old_argv = c["props"]["argv"];
            var new_argv = nextprops["argv"];
            if (f == null) {
              return old_argv == null || new_argv == null || cljs.core.not_EQ_.call(null, old_argv, new_argv);
            } else {
              return f.call(null, c, old_argv, new_argv);
            }
          }
        };
      }(G__12418);
      break;
    case "componentWillReceiveProps":
      return function(G__12418) {
        return function(props) {
          var c = this;
          return f.call(null, c, props["argv"]);
        };
      }(G__12418);
      break;
    case "getInitialState":
      return function(G__12418) {
        return function() {
          var c = this;
          return cljs.core.reset_BANG_.call(null, reagent.impl.component.state_atom.call(null, c), f.call(null, c));
        };
      }(G__12418);
      break;
    case "getDefaultProps":
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("getDefaultProps not supported yet"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, false))].join(""));break;
    default:
      return null;
  }
};
reagent.impl.component.default_wrapper = function reagent$impl$component$default_wrapper(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
    return function() {
      var G__12420__delegate = function(args) {
        var c = this;
        return cljs.core.apply.call(null, f, c, args);
      };
      var G__12420 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__12421__i = 0, G__12421__a = new Array(arguments.length - 0);
          while (G__12421__i < G__12421__a.length) {
            G__12421__a[G__12421__i] = arguments[G__12421__i + 0];
            ++G__12421__i;
          }
          args = new cljs.core.IndexedSeq(G__12421__a, 0);
        }
        return G__12420__delegate.call(this, args);
      };
      G__12420.cljs$lang$maxFixedArity = 0;
      G__12420.cljs$lang$applyTo = function(arglist__12422) {
        var args = cljs.core.seq(arglist__12422);
        return G__12420__delegate(args);
      };
      G__12420.cljs$core$IFn$_invoke$arity$variadic = G__12420__delegate;
      return G__12420;
    }();
  } else {
    return f;
  }
};
reagent.impl.component.dont_wrap = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "cljsRender", "cljsRender", 247449928), null, new cljs.core.Keyword(null, "reagentRender", "reagentRender", -358306383), null, new cljs.core.Keyword(null, "render", "render", -1408033454), null, new cljs.core.Keyword(null, "cljsName", "cljsName", 999824949), null], null), null);
reagent.impl.component.dont_bind = function reagent$impl$component$dont_bind(f) {
  if (cljs.core.fn_QMARK_.call(null, f)) {
    var G__12424 = f;
    G__12424["__reactDontBind"] = true;
    return G__12424;
  } else {
    return f;
  }
};
reagent.impl.component.get_wrapper = function reagent$impl$component$get_wrapper(key, f, name) {
  if (cljs.core.truth_(reagent.impl.component.dont_wrap.call(null, key))) {
    return reagent.impl.component.dont_bind.call(null, f);
  } else {
    var wrap = reagent.impl.component.custom_wrapper.call(null, key, f);
    if (cljs.core.truth_(function() {
      var and__4097__auto__ = wrap;
      if (cljs.core.truth_(and__4097__auto__)) {
        return f;
      } else {
        return and__4097__auto__;
      }
    }())) {
      if (cljs.core.ifn_QMARK_.call(null, f)) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Expected function in "), cljs.core.str(name), cljs.core.str(key), cljs.core.str(" but got "), cljs.core.str(f)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
      }
    } else {
    }
    var or__4109__auto__ = wrap;
    if (cljs.core.truth_(or__4109__auto__)) {
      return or__4109__auto__;
    } else {
      return reagent.impl.component.default_wrapper.call(null, f);
    }
  }
};
reagent.impl.component.obligatory = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "shouldComponentUpdate", "shouldComponentUpdate", 1795750960), null, new cljs.core.Keyword(null, "componentWillMount", "componentWillMount", -285327619), null, new cljs.core.Keyword(null, "componentWillUnmount", "componentWillUnmount", 1573788814), null], null);
reagent.impl.component.dash_to_camel = reagent.impl.util.memoize_1.call(null, reagent.impl.util.dash_to_camel);
reagent.impl.component.camelify_map_keys = function reagent$impl$component$camelify_map_keys(fun_map) {
  return cljs.core.reduce_kv.call(null, function(m, k, v) {
    return cljs.core.assoc.call(null, m, cljs.core.keyword.call(null, reagent.impl.component.dash_to_camel.call(null, k)), v);
  }, cljs.core.PersistentArrayMap.EMPTY, fun_map);
};
reagent.impl.component.add_obligatory = function reagent$impl$component$add_obligatory(fun_map) {
  return cljs.core.merge.call(null, reagent.impl.component.obligatory, fun_map);
};
reagent.impl.component.add_render = function reagent$impl$component$add_render(fun_map, render_f, name) {
  var fm = cljs.core.assoc.call(null, fun_map, new cljs.core.Keyword(null, "cljsRender", "cljsRender", 247449928), render_f, new cljs.core.Keyword(null, "render", "render", -1408033454), (new cljs.core.Keyword(null, "render", "render", -1408033454)).cljs$core$IFn$_invoke$arity$1(reagent.impl.component.static_fns));
  return cljs.core.assoc.call(null, fm, new cljs.core.Keyword(null, "cljsName", "cljsName", 999824949), function(fm) {
    return function() {
      return name;
    };
  }(fm));
};
reagent.impl.component.fun_name = function reagent$impl$component$fun_name(f) {
  var or__4109__auto__ = function() {
    var and__4097__auto__ = cljs.core.fn_QMARK_.call(null, f);
    if (and__4097__auto__) {
      var or__4109__auto__ = f["displayName"];
      if (cljs.core.truth_(or__4109__auto__)) {
        return or__4109__auto__;
      } else {
        return f["name"];
      }
    } else {
      return and__4097__auto__;
    }
  }();
  if (cljs.core.truth_(or__4109__auto__)) {
    return or__4109__auto__;
  } else {
    var or__4109__auto____$1 = function() {
      var and__4097__auto__ = function() {
        var G__12432 = f;
        if (G__12432) {
          var bit__4776__auto__ = G__12432.cljs$lang$protocol_mask$partition1$ & 4096;
          if (bit__4776__auto__ || G__12432.cljs$core$INamed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }();
      if (and__4097__auto__) {
        return cljs.core.name.call(null, f);
      } else {
        return and__4097__auto__;
      }
    }();
    if (cljs.core.truth_(or__4109__auto____$1)) {
      return or__4109__auto____$1;
    } else {
      var m = cljs.core.meta.call(null, f);
      if (cljs.core.map_QMARK_.call(null, m)) {
        return(new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(m);
      } else {
        return null;
      }
    }
  }
};
reagent.impl.component.wrap_funs = function reagent$impl$component$wrap_funs(fmap) {
  var fun_map = function() {
    var temp__4128__auto__ = (new cljs.core.Keyword(null, "componentFunction", "componentFunction", 825866104)).cljs$core$IFn$_invoke$arity$1(fmap);
    if (temp__4128__auto__ == null) {
      return fmap;
    } else {
      var cf = temp__4128__auto__;
      return cljs.core.dissoc.call(null, cljs.core.assoc.call(null, fmap, new cljs.core.Keyword(null, "reagentRender", "reagentRender", -358306383), cf), new cljs.core.Keyword(null, "componentFunction", "componentFunction", 825866104));
    }
  }();
  var render_fun = function() {
    var or__4109__auto__ = (new cljs.core.Keyword(null, "reagentRender", "reagentRender", -358306383)).cljs$core$IFn$_invoke$arity$1(fun_map);
    if (cljs.core.truth_(or__4109__auto__)) {
      return or__4109__auto__;
    } else {
      return(new cljs.core.Keyword(null, "render", "render", -1408033454)).cljs$core$IFn$_invoke$arity$1(fun_map);
    }
  }();
  var _ = cljs.core.ifn_QMARK_.call(null, render_fun) ? null : function() {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Render must be a function, not "), cljs.core.str(cljs.core.pr_str.call(null, render_fun))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "render-fun", "render-fun", -1209513086, null))))].join(""));
  }();
  var name = [cljs.core.str(function() {
    var or__4109__auto__ = (new cljs.core.Keyword(null, "displayName", "displayName", -809144601)).cljs$core$IFn$_invoke$arity$1(fun_map);
    if (cljs.core.truth_(or__4109__auto__)) {
      return or__4109__auto__;
    } else {
      return reagent.impl.component.fun_name.call(null, render_fun);
    }
  }())].join("");
  var name_SINGLEQUOTE_ = cljs.core.empty_QMARK_.call(null, name) ? [cljs.core.str(cljs.core.gensym.call(null, "reagent"))].join("") : name;
  var fmap__$1 = reagent.impl.component.add_render.call(null, cljs.core.assoc.call(null, fun_map, new cljs.core.Keyword(null, "displayName", "displayName", -809144601), name_SINGLEQUOTE_), render_fun, name_SINGLEQUOTE_);
  return cljs.core.reduce_kv.call(null, function(fun_map, render_fun, _, name, name_SINGLEQUOTE_, fmap__$1) {
    return function(m, k, v) {
      return cljs.core.assoc.call(null, m, k, reagent.impl.component.get_wrapper.call(null, k, v, name_SINGLEQUOTE_));
    };
  }(fun_map, render_fun, _, name, name_SINGLEQUOTE_, fmap__$1), cljs.core.PersistentArrayMap.EMPTY, fmap__$1);
};
reagent.impl.component.map_to_js = function reagent$impl$component$map_to_js(m) {
  return cljs.core.reduce_kv.call(null, function(o, k, v) {
    var G__12434 = o;
    G__12434[cljs.core.name.call(null, k)] = v;
    return G__12434;
  }, {}, m);
};
reagent.impl.component.cljsify = function reagent$impl$component$cljsify(body) {
  return reagent.impl.component.map_to_js.call(null, reagent.impl.component.wrap_funs.call(null, reagent.impl.component.add_obligatory.call(null, reagent.impl.component.camelify_map_keys.call(null, body))));
};
reagent.impl.component.create_class = function reagent$impl$component$create_class(body) {
  if (cljs.core.map_QMARK_.call(null, body)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "body", "body", -408674142, null))))].join(""));
  }
  var spec = reagent.impl.component.cljsify.call(null, body);
  var res = React["createClass"](spec);
  var f = function(spec, res) {
    return function() {
      var G__12435__delegate = function(args) {
        return reagent.impl.component.as_element.call(null, cljs.core.apply.call(null, cljs.core.vector, res, args));
      };
      var G__12435 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__12436__i = 0, G__12436__a = new Array(arguments.length - 0);
          while (G__12436__i < G__12436__a.length) {
            G__12436__a[G__12436__i] = arguments[G__12436__i + 0];
            ++G__12436__i;
          }
          args = new cljs.core.IndexedSeq(G__12436__a, 0);
        }
        return G__12435__delegate.call(this, args);
      };
      G__12435.cljs$lang$maxFixedArity = 0;
      G__12435.cljs$lang$applyTo = function(arglist__12437) {
        var args = cljs.core.seq(arglist__12437);
        return G__12435__delegate(args);
      };
      G__12435.cljs$core$IFn$_invoke$arity$variadic = G__12435__delegate;
      return G__12435;
    }();
  }(spec, res);
  reagent.impl.util.cache_react_class.call(null, f, res);
  reagent.impl.util.cache_react_class.call(null, res, res);
  return f;
};
reagent.impl.component.comp_name = function reagent$impl$component$comp_name() {
  var n = function() {
    var G__12439 = reagent.impl.component._STAR_current_component_STAR_;
    var G__12439__$1 = G__12439 == null ? null : G__12439["cljsName"]();
    return G__12439__$1;
  }();
  if (!cljs.core.empty_QMARK_.call(null, n)) {
    return[cljs.core.str(" (in "), cljs.core.str(n), cljs.core.str(")")].join("");
  } else {
    return "";
  }
};
reagent.impl.component.shallow_obj_to_map = function reagent$impl$component$shallow_obj_to_map(o) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__4863__auto__ = function reagent$impl$component$shallow_obj_to_map_$_iter__12444(s__12445) {
      return new cljs.core.LazySeq(null, function() {
        var s__12445__$1 = s__12445;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__12445__$1);
          if (temp__4126__auto__) {
            var s__12445__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__12445__$2)) {
              var c__4861__auto__ = cljs.core.chunk_first.call(null, s__12445__$2);
              var size__4862__auto__ = cljs.core.count.call(null, c__4861__auto__);
              var b__12447 = cljs.core.chunk_buffer.call(null, size__4862__auto__);
              if (function() {
                var i__12446 = 0;
                while (true) {
                  if (i__12446 < size__4862__auto__) {
                    var k = cljs.core._nth.call(null, c__4861__auto__, i__12446);
                    cljs.core.chunk_append.call(null, b__12447, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), o[k]], null));
                    var G__12448 = i__12446 + 1;
                    i__12446 = G__12448;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__12447), reagent$impl$component$shallow_obj_to_map_$_iter__12444.call(null, cljs.core.chunk_rest.call(null, s__12445__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__12447), null);
              }
            } else {
              var k = cljs.core.first.call(null, s__12445__$2);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), o[k]], null), reagent$impl$component$shallow_obj_to_map_$_iter__12444.call(null, cljs.core.rest.call(null, s__12445__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4863__auto__.call(null, cljs.core.js_keys.call(null, o));
  }());
};
reagent.impl.component.elem_counter = 0;
reagent.impl.component.reactify_component = function reagent$impl$component$reactify_component(comp) {
  return React["createClass"]({"render":function() {
    var this$ = this;
    return reagent.impl.component.as_element.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [comp, cljs.core.assoc.call(null, reagent.impl.component.shallow_obj_to_map.call(null, this$["props"]), new cljs.core.Keyword(null, "-elem-count", "-elem-count", 663797079), reagent.impl.component.elem_counter = reagent.impl.component.elem_counter + 1)], null));
  }, "displayName":"react-wrapper"});
};
goog.provide("reagent.impl.template");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.component");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.batching");
goog.require("clojure.string");
goog.require("reagent.debug");
reagent.impl.template.re_tag = /([^\s\.#]+)(?:#([^\s\.#]+))?(?:\.([^\s#]+))?/;
reagent.impl.template.NativeWrapper = function(comp) {
  this.comp = comp;
};
reagent.impl.template.NativeWrapper.cljs$lang$type = true;
reagent.impl.template.NativeWrapper.cljs$lang$ctorStr = "reagent.impl.template/NativeWrapper";
reagent.impl.template.NativeWrapper.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write.call(null, writer__4689__auto__, "reagent.impl.template/NativeWrapper");
};
reagent.impl.template.__GT_NativeWrapper = function reagent$impl$template$__GT_NativeWrapper(comp) {
  return new reagent.impl.template.NativeWrapper(comp);
};
reagent.impl.template.named_QMARK_ = function reagent$impl$template$named_QMARK_(x) {
  return x instanceof cljs.core.Keyword || x instanceof cljs.core.Symbol;
};
reagent.impl.template.hiccup_tag_QMARK_ = function reagent$impl$template$hiccup_tag_QMARK_(x) {
  return reagent.impl.template.named_QMARK_.call(null, x) || typeof x === "string";
};
reagent.impl.template.valid_tag_QMARK_ = function reagent$impl$template$valid_tag_QMARK_(x) {
  return reagent.impl.template.hiccup_tag_QMARK_.call(null, x) || cljs.core.ifn_QMARK_.call(null, x) || x instanceof reagent.impl.template.NativeWrapper;
};
reagent.impl.template.prop_name_cache = {"charset":"charSet", "for":"htmlFor", "class":"className"};
reagent.impl.template.obj_get = function reagent$impl$template$obj_get(o, k) {
  if (cljs.core.truth_(o.hasOwnProperty(k))) {
    return o[k];
  } else {
    return null;
  }
};
reagent.impl.template.cached_prop_name = function reagent$impl$template$cached_prop_name(k) {
  if (reagent.impl.template.named_QMARK_.call(null, k)) {
    var temp__4128__auto__ = reagent.impl.template.obj_get.call(null, reagent.impl.template.prop_name_cache, cljs.core.name.call(null, k));
    if (temp__4128__auto__ == null) {
      return reagent.impl.template.prop_name_cache[cljs.core.name.call(null, k)] = reagent.impl.util.dash_to_camel.call(null, k);
    } else {
      var k_SINGLEQUOTE_ = temp__4128__auto__;
      return k_SINGLEQUOTE_;
    }
  } else {
    return k;
  }
};
reagent.impl.template.convert_prop_value = function reagent$impl$template$convert_prop_value(x) {
  if (typeof x === "string" || typeof x === "number" || cljs.core.fn_QMARK_.call(null, x)) {
    return x;
  } else {
    if (reagent.impl.template.named_QMARK_.call(null, x)) {
      return cljs.core.name.call(null, x);
    } else {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.reduce_kv.call(null, function(o, k, v) {
          var G__12463 = o;
          G__12463[reagent.impl.template.cached_prop_name.call(null, k)] = reagent$impl$template$convert_prop_value.call(null, v);
          return G__12463;
        }, {}, x);
      } else {
        if (cljs.core.coll_QMARK_.call(null, x)) {
          return cljs.core.clj__GT_js.call(null, x);
        } else {
          if (cljs.core.ifn_QMARK_.call(null, x)) {
            return function() {
              var G__12464__delegate = function(args) {
                return cljs.core.apply.call(null, x, args);
              };
              var G__12464 = function(var_args) {
                var args = null;
                if (arguments.length > 0) {
                  var G__12465__i = 0, G__12465__a = new Array(arguments.length - 0);
                  while (G__12465__i < G__12465__a.length) {
                    G__12465__a[G__12465__i] = arguments[G__12465__i + 0];
                    ++G__12465__i;
                  }
                  args = new cljs.core.IndexedSeq(G__12465__a, 0);
                }
                return G__12464__delegate.call(this, args);
              };
              G__12464.cljs$lang$maxFixedArity = 0;
              G__12464.cljs$lang$applyTo = function(arglist__12466) {
                var args = cljs.core.seq(arglist__12466);
                return G__12464__delegate(args);
              };
              G__12464.cljs$core$IFn$_invoke$arity$variadic = G__12464__delegate;
              return G__12464;
            }();
          } else {
            return cljs.core.clj__GT_js.call(null, x);
          }
        }
      }
    }
  }
};
reagent.impl.template.set_id_class = function reagent$impl$template$set_id_class(props, id, class$) {
  var p = props == null ? {} : props;
  if (cljs.core.some_QMARK_.call(null, id) && p["id"] == null) {
    p["id"] = id;
  } else {
  }
  if (cljs.core.some_QMARK_.call(null, class$)) {
    var old_12467 = p["className"];
    p["className"] = cljs.core.some_QMARK_.call(null, old_12467) ? [cljs.core.str(class$), cljs.core.str(" "), cljs.core.str(old_12467)].join("") : class$;
  } else {
  }
  return p;
};
reagent.impl.template.convert_props = function reagent$impl$template$convert_props(props, id_class) {
  var id = id_class["id"];
  var class$ = id_class["className"];
  var no_id_class = id == null && class$ == null;
  if (no_id_class && cljs.core.empty_QMARK_.call(null, props)) {
    return null;
  } else {
    var objprops = reagent.impl.template.convert_prop_value.call(null, props);
    if (no_id_class) {
      return objprops;
    } else {
      return reagent.impl.template.set_id_class.call(null, objprops, id, class$);
    }
  }
};
reagent.impl.template.input_unmount = function reagent$impl$template$input_unmount(this$) {
  return this$["cljsInputValue"] = null;
};
reagent.impl.template.input_set_value = function reagent$impl$template$input_set_value(this$) {
  var temp__4130__auto__ = this$["cljsInputValue"];
  if (temp__4130__auto__ == null) {
    return null;
  } else {
    var value = temp__4130__auto__;
    this$["cljsInputDirty"] = false;
    var node = this$["getDOMNode"]();
    if (cljs.core.not_EQ_.call(null, value, node["value"])) {
      return node["value"] = value;
    } else {
      return null;
    }
  }
};
reagent.impl.template.input_handle_change = function reagent$impl$template$input_handle_change(this$, on_change, e) {
  var res = on_change.call(null, e);
  if (cljs.core.truth_(this$["cljsInputDirty"])) {
  } else {
    this$["cljsInputDirty"] = true;
    reagent.impl.batching.do_later.call(null, function(res) {
      return function() {
        return reagent.impl.template.input_set_value.call(null, this$);
      };
    }(res));
  }
  return res;
};
reagent.impl.template.input_render_setup = function reagent$impl$template$input_render_setup(this$, jsprops) {
  if (cljs.core.truth_(function() {
    var and__4097__auto__ = jsprops["hasOwnProperty"]("onChange");
    if (cljs.core.truth_(and__4097__auto__)) {
      return jsprops["hasOwnProperty"]("value");
    } else {
      return and__4097__auto__;
    }
  }())) {
    var v = jsprops["value"];
    var value = v == null ? "" : v;
    var on_change = jsprops["onChange"];
    this$["cljsInputValue"] = value;
    delete jsprops["value"];
    var G__12470 = jsprops;
    G__12470["defaultValue"] = value;
    G__12470["onChange"] = function(G__12470, v, value, on_change) {
      return function(p1__12468_SHARP_) {
        return reagent.impl.template.input_handle_change.call(null, this$, on_change, p1__12468_SHARP_);
      };
    }(G__12470, v, value, on_change);
    return G__12470;
  } else {
    return this$["cljsInputValue"] = null;
  }
};
reagent.impl.template.input_component_QMARK_ = function reagent$impl$template$input_component_QMARK_(x) {
  return x === "input" || x === "textarea";
};
reagent.impl.template.reagent_input_class = null;
reagent.impl.template.input_spec = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "display-name", "display-name", 694513143), "ReagentInput", new cljs.core.Keyword(null, "component-did-update", "component-did-update", -1468549173), reagent.impl.template.input_set_value, new cljs.core.Keyword(null, "component-will-unmount", "component-will-unmount", -2058314698), reagent.impl.template.input_unmount, new cljs.core.Keyword(null, "reagent-render", "reagent-render", -985383853), 
function(argv, comp, jsprops, first_child) {
  var this$ = reagent.impl.component._STAR_current_component_STAR_;
  reagent.impl.template.input_render_setup.call(null, this$, jsprops);
  return reagent.impl.template.make_element.call(null, argv, comp, jsprops, first_child);
}], null);
reagent.impl.template.reagent_input = function reagent$impl$template$reagent_input(argv, comp, jsprops, first_child) {
  if (reagent.impl.template.reagent_input_class == null) {
    reagent.impl.template.reagent_input_class = reagent.impl.component.create_class.call(null, reagent.impl.template.input_spec);
  } else {
  }
  return reagent.impl.template.reagent_input_class.call(null, argv, comp, jsprops, first_child);
};
reagent.impl.template.parse_tag = function reagent$impl$template$parse_tag(hiccup_tag) {
  var vec__12472 = cljs.core.next.call(null, cljs.core.re_matches.call(null, reagent.impl.template.re_tag, cljs.core.name.call(null, hiccup_tag)));
  var tag = cljs.core.nth.call(null, vec__12472, 0, null);
  var id = cljs.core.nth.call(null, vec__12472, 1, null);
  var class$ = cljs.core.nth.call(null, vec__12472, 2, null);
  var class_SINGLEQUOTE_ = cljs.core.truth_(class$) ? clojure.string.replace.call(null, class$, /\./, " ") : null;
  if (cljs.core.truth_(tag)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Invalid tag: '"), cljs.core.str(hiccup_tag), cljs.core.str("'"), cljs.core.str(reagent.impl.component.comp_name.call(null))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "tag", "tag", 350170304, null)))].join(""));
  }
  return{"className":class_SINGLEQUOTE_, "id":id, "name":tag};
};
reagent.impl.template.fn_to_class = function reagent$impl$template$fn_to_class(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Expected a function, not "), cljs.core.str(cljs.core.pr_str.call(null, f))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  if (!!(cljs.core.fn_QMARK_.call(null, f) && cljs.core.some_QMARK_.call(null, f["type"])) && typeof console !== "undefined") {
    console.warn([cljs.core.str("Warning: "), cljs.core.str("Using native React classes directly in Hiccup forms "), cljs.core.str("is not supported. Use create-element or "), cljs.core.str("adapt-react-class instead: "), cljs.core.str(f["type"]), cljs.core.str(reagent.impl.component.comp_name.call(null))].join(""));
  } else {
  }
  var spec = cljs.core.meta.call(null, f);
  var withrender = cljs.core.assoc.call(null, spec, new cljs.core.Keyword(null, "reagent-render", "reagent-render", -985383853), f);
  var res = reagent.impl.component.create_class.call(null, withrender);
  var wrapf = reagent.impl.util.cached_react_class.call(null, res);
  reagent.impl.util.cache_react_class.call(null, f, wrapf);
  return wrapf;
};
reagent.impl.template.as_class = function reagent$impl$template$as_class(tag) {
  var temp__4128__auto__ = reagent.impl.util.cached_react_class.call(null, tag);
  if (temp__4128__auto__ == null) {
    return reagent.impl.template.fn_to_class.call(null, tag);
  } else {
    var cached_class = temp__4128__auto__;
    return cached_class;
  }
};
reagent.impl.template.get_key = function reagent$impl$template$get_key(x) {
  if (cljs.core.map_QMARK_.call(null, x)) {
    return cljs.core.get.call(null, x, new cljs.core.Keyword(null, "key", "key", -1516042587));
  } else {
    return null;
  }
};
reagent.impl.template.key_from_vec = function reagent$impl$template$key_from_vec(v) {
  var temp__4128__auto__ = function() {
    var G__12474 = cljs.core.meta.call(null, v);
    var G__12474__$1 = G__12474 == null ? null : reagent.impl.template.get_key.call(null, G__12474);
    return G__12474__$1;
  }();
  if (temp__4128__auto__ == null) {
    return reagent.impl.template.get_key.call(null, cljs.core.nth.call(null, v, 1, null));
  } else {
    var k = temp__4128__auto__;
    return k;
  }
};
reagent.impl.template.reag_element = function reagent$impl$template$reag_element(tag, v) {
  var c = reagent.impl.template.as_class.call(null, tag);
  var jsprops = {"argv":v};
  var G__12476_12477 = v;
  var G__12476_12478__$1 = G__12476_12477 == null ? null : reagent.impl.template.key_from_vec.call(null, G__12476_12477);
  var G__12476_12479__$2 = G__12476_12478__$1 == null ? null : jsprops["key"] = G__12476_12478__$1;
  return React["createElement"](c, jsprops);
};
reagent.impl.template.adapt_react_class = function reagent$impl$template$adapt_react_class(c) {
  return new reagent.impl.template.NativeWrapper({"class":null, "id":null, "name":c});
};
reagent.impl.template.tag_name_cache = {};
reagent.impl.template.cached_parse = function reagent$impl$template$cached_parse(x) {
  if (reagent.impl.template.hiccup_tag_QMARK_.call(null, x)) {
    var temp__4128__auto__ = reagent.impl.template.obj_get.call(null, reagent.impl.template.tag_name_cache, cljs.core.name.call(null, x));
    if (temp__4128__auto__ == null) {
      return reagent.impl.template.tag_name_cache[cljs.core.name.call(null, x)] = reagent.impl.template.parse_tag.call(null, x);
    } else {
      var s = temp__4128__auto__;
      return s;
    }
  } else {
    if (x instanceof reagent.impl.template.NativeWrapper) {
      return x.comp;
    } else {
      return null;
    }
  }
};
reagent.impl.template.native_element = function reagent$impl$template$native_element(tag, argv) {
  var temp__4126__auto__ = reagent.impl.template.cached_parse.call(null, tag);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var parsed = temp__4126__auto__;
    var comp = parsed["name"];
    var props = cljs.core.nth.call(null, argv, 1, null);
    var hasprops = props == null || cljs.core.map_QMARK_.call(null, props);
    var jsprops = reagent.impl.template.convert_props.call(null, hasprops ? props : null, parsed);
    var first_child = hasprops ? 2 : 1;
    if (reagent.impl.template.input_component_QMARK_.call(null, comp)) {
      return reagent.impl.template.as_element.call(null, cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagent.impl.template.reagent_input, argv, comp, jsprops, first_child], null), cljs.core.meta.call(null, argv)));
    } else {
      var p = function() {
        var temp__4128__auto__ = function() {
          var G__12482 = cljs.core.meta.call(null, argv);
          var G__12482__$1 = G__12482 == null ? null : reagent.impl.template.get_key.call(null, G__12482);
          return G__12482__$1;
        }();
        if (temp__4128__auto__ == null) {
          return jsprops;
        } else {
          var key = temp__4128__auto__;
          var G__12483 = jsprops == null ? {} : jsprops;
          G__12483["key"] = key;
          return G__12483;
        }
      }();
      return reagent.impl.template.make_element.call(null, argv, comp, p, first_child);
    }
  } else {
    return null;
  }
};
reagent.impl.template.vec_to_elem = function reagent$impl$template$vec_to_elem(v) {
  if (cljs.core.count.call(null, v) > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Hiccup form should not be empty: "), cljs.core.str(cljs.core.pr_str.call(null, v)), cljs.core.str(reagent.impl.component.comp_name.call(null))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "v", "v", 1661996586, 
    null)))))].join(""));
  }
  var tag = cljs.core.nth.call(null, v, 0);
  if (reagent.impl.template.valid_tag_QMARK_.call(null, tag)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Invalid Hiccup form: "), cljs.core.str(cljs.core.pr_str.call(null, v)), cljs.core.str(reagent.impl.component.comp_name.call(null))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid-tag?", "valid-tag?", 1243064160, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null))))].join(""));
  }
  var temp__4128__auto__ = reagent.impl.template.native_element.call(null, tag, v);
  if (temp__4128__auto__ == null) {
    return reagent.impl.template.reag_element.call(null, tag, v);
  } else {
    var ne = temp__4128__auto__;
    return ne;
  }
};
reagent.impl.template.as_element = function reagent$impl$template$as_element(x) {
  if (typeof x === "string") {
    return x;
  } else {
    if (cljs.core.vector_QMARK_.call(null, x)) {
      return reagent.impl.template.vec_to_elem.call(null, x);
    } else {
      if (cljs.core.seq_QMARK_.call(null, x)) {
        return reagent.impl.template.expand_seq_check.call(null, x);
      } else {
        return x;
      }
    }
  }
};
reagent.impl.template.expand_seq = function reagent$impl$template$expand_seq(s) {
  var a = cljs.core.into_array.call(null, s);
  var n__4994__auto___12484 = a.length;
  var i_12485 = 0;
  while (true) {
    if (i_12485 < n__4994__auto___12484) {
      a[i_12485] = reagent.impl.template.as_element.call(null, a[i_12485]);
      var G__12486 = i_12485 + 1;
      i_12485 = G__12486;
      continue;
    } else {
    }
    break;
  }
  return a;
};
reagent.impl.template.expand_seq_dev = function reagent$impl$template$expand_seq_dev(s, o) {
  var a = cljs.core.into_array.call(null, s);
  var n__4994__auto___12487 = a.length;
  var i_12488 = 0;
  while (true) {
    if (i_12488 < n__4994__auto___12487) {
      var val_12489 = a[i_12488];
      if (cljs.core.vector_QMARK_.call(null, val_12489) && reagent.impl.template.key_from_vec.call(null, val_12489) == null) {
        o["no-key"] = true;
      } else {
      }
      a[i_12488] = reagent.impl.template.as_element.call(null, val_12489);
      var G__12490 = i_12488 + 1;
      i_12488 = G__12490;
      continue;
    } else {
    }
    break;
  }
  return a;
};
reagent.impl.template.expand_seq_check = function reagent$impl$template$expand_seq_check(x) {
  var ctx = {};
  var res = reagent.ratom._STAR_ratom_context_STAR_ == null ? reagent.impl.template.expand_seq_dev.call(null, x, ctx) : reagent.ratom.capture_derefed.call(null, function(ctx) {
    return function() {
      return reagent.impl.template.expand_seq_dev.call(null, x, ctx);
    };
  }(ctx), ctx);
  if (cljs.core.truth_(reagent.ratom.captured.call(null, ctx))) {
    if (typeof console !== "undefined") {
      console.warn([cljs.core.str("Warning: "), cljs.core.str("Reactive deref not supported in lazy seq, "), cljs.core.str("it should be wrapped in doall"), cljs.core.str(reagent.impl.component.comp_name.call(null)), cljs.core.str(". Value:\n"), cljs.core.str(cljs.core.pr_str.call(null, x))].join(""));
    } else {
    }
  } else {
  }
  if (cljs.core.truth_(ctx["no-key"])) {
    if (typeof console !== "undefined") {
      console.warn([cljs.core.str("Warning: "), cljs.core.str("Every element in a seq should have a unique "), cljs.core.str(":key"), cljs.core.str(reagent.impl.component.comp_name.call(null)), cljs.core.str(". Value: "), cljs.core.str(cljs.core.pr_str.call(null, x))].join(""));
    } else {
    }
  } else {
  }
  return res;
};
reagent.impl.template.make_element = function reagent$impl$template$make_element(argv, comp, jsprops, first_child) {
  var G__12492 = cljs.core.count.call(null, argv) - first_child;
  switch(G__12492) {
    case 0:
      return React["createElement"](comp, jsprops);
      break;
    case 1:
      return React["createElement"](comp, jsprops, reagent.impl.template.as_element.call(null, cljs.core.nth.call(null, argv, first_child)));
      break;
    default:
      return React["createElement"].apply(null, cljs.core.reduce_kv.call(null, function(G__12492) {
        return function(a, k, v) {
          if (k >= first_child) {
            a.push(reagent.impl.template.as_element.call(null, v));
          } else {
          }
          return a;
        };
      }(G__12492), [comp, jsprops], argv));
  }
};
goog.provide("reagent.core");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.component");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.template");
goog.require("reagent.impl.batching");
goog.require("reagent.debug");
reagent.core.is_client = reagent.impl.util.is_client;
reagent.core.create_element = function() {
  var reagent$core$create_element = null;
  var reagent$core$create_element__1 = function(type) {
    return reagent$core$create_element.call(null, type, null);
  };
  var reagent$core$create_element__2 = function(type, props) {
    if (!cljs.core.map_QMARK_.call(null, props)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null)))))].join(""));
    }
    return React.createElement(type, props);
  };
  var reagent$core$create_element__3 = function(type, props, child) {
    if (!cljs.core.map_QMARK_.call(null, props)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null)))))].join(""));
    }
    return React.createElement(type, props, child);
  };
  var reagent$core$create_element__4 = function() {
    var G__12390__delegate = function(type, props, child, children) {
      if (!cljs.core.map_QMARK_.call(null, props)) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null)))))].join(""));
      }
      return cljs.core.apply.call(null, React.createElement, type, props, child, children);
    };
    var G__12390 = function(type, props, child, var_args) {
      var children = null;
      if (arguments.length > 3) {
        var G__12391__i = 0, G__12391__a = new Array(arguments.length - 3);
        while (G__12391__i < G__12391__a.length) {
          G__12391__a[G__12391__i] = arguments[G__12391__i + 3];
          ++G__12391__i;
        }
        children = new cljs.core.IndexedSeq(G__12391__a, 0);
      }
      return G__12390__delegate.call(this, type, props, child, children);
    };
    G__12390.cljs$lang$maxFixedArity = 3;
    G__12390.cljs$lang$applyTo = function(arglist__12392) {
      var type = cljs.core.first(arglist__12392);
      arglist__12392 = cljs.core.next(arglist__12392);
      var props = cljs.core.first(arglist__12392);
      arglist__12392 = cljs.core.next(arglist__12392);
      var child = cljs.core.first(arglist__12392);
      var children = cljs.core.rest(arglist__12392);
      return G__12390__delegate(type, props, child, children);
    };
    G__12390.cljs$core$IFn$_invoke$arity$variadic = G__12390__delegate;
    return G__12390;
  }();
  reagent$core$create_element = function(type, props, child, var_args) {
    var children = var_args;
    switch(arguments.length) {
      case 1:
        return reagent$core$create_element__1.call(this, type);
      case 2:
        return reagent$core$create_element__2.call(this, type, props);
      case 3:
        return reagent$core$create_element__3.call(this, type, props, child);
      default:
        var G__12393 = null;
        if (arguments.length > 3) {
          var G__12394__i = 0, G__12394__a = new Array(arguments.length - 3);
          while (G__12394__i < G__12394__a.length) {
            G__12394__a[G__12394__i] = arguments[G__12394__i + 3];
            ++G__12394__i;
          }
          G__12393 = new cljs.core.IndexedSeq(G__12394__a, 0);
        }
        return reagent$core$create_element__4.cljs$core$IFn$_invoke$arity$variadic(type, props, child, G__12393);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reagent$core$create_element.cljs$lang$maxFixedArity = 3;
  reagent$core$create_element.cljs$lang$applyTo = reagent$core$create_element__4.cljs$lang$applyTo;
  reagent$core$create_element.cljs$core$IFn$_invoke$arity$1 = reagent$core$create_element__1;
  reagent$core$create_element.cljs$core$IFn$_invoke$arity$2 = reagent$core$create_element__2;
  reagent$core$create_element.cljs$core$IFn$_invoke$arity$3 = reagent$core$create_element__3;
  reagent$core$create_element.cljs$core$IFn$_invoke$arity$variadic = reagent$core$create_element__4.cljs$core$IFn$_invoke$arity$variadic;
  return reagent$core$create_element;
}();
reagent.core.as_element = function reagent$core$as_element(form) {
  return reagent.impl.template.as_element.call(null, form);
};
reagent.core.adapt_react_class = function reagent$core$adapt_react_class(c) {
  return reagent.impl.template.adapt_react_class.call(null, c);
};
reagent.core.reactify_component = function reagent$core$reactify_component(c) {
  return reagent.impl.component.reactify_component.call(null, c);
};
reagent.core.render = function() {
  var reagent$core$render = null;
  var reagent$core$render__2 = function(comp, container) {
    return reagent$core$render.call(null, comp, container, null);
  };
  var reagent$core$render__3 = function(comp, container, callback) {
    var f = function() {
      return reagent.core.as_element.call(null, cljs.core.fn_QMARK_.call(null, comp) ? comp.call(null) : comp);
    };
    return reagent.impl.util.render_component.call(null, f, container, callback);
  };
  reagent$core$render = function(comp, container, callback) {
    switch(arguments.length) {
      case 2:
        return reagent$core$render__2.call(this, comp, container);
      case 3:
        return reagent$core$render__3.call(this, comp, container, callback);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reagent$core$render.cljs$core$IFn$_invoke$arity$2 = reagent$core$render__2;
  reagent$core$render.cljs$core$IFn$_invoke$arity$3 = reagent$core$render__3;
  return reagent$core$render;
}();
reagent.core.unmount_component_at_node = function reagent$core$unmount_component_at_node(container) {
  return reagent.impl.util.unmount_component_at_node.call(null, container);
};
reagent.core.render_to_string = function reagent$core$render_to_string(component) {
  var _STAR_non_reactive_STAR_12396 = reagent.impl.component._STAR_non_reactive_STAR_;
  reagent.impl.component._STAR_non_reactive_STAR_ = true;
  try {
    return React["renderToString"](reagent.core.as_element.call(null, component));
  } finally {
    reagent.impl.component._STAR_non_reactive_STAR_ = _STAR_non_reactive_STAR_12396;
  }
};
reagent.core.as_component = reagent.core.as_element;
reagent.core.render_component = reagent.core.render;
reagent.core.render_component_to_string = reagent.core.render_to_string;
reagent.core.render_to_static_markup = function reagent$core$render_to_static_markup(component) {
  var _STAR_non_reactive_STAR_12398 = reagent.impl.component._STAR_non_reactive_STAR_;
  reagent.impl.component._STAR_non_reactive_STAR_ = true;
  try {
    return React["renderToStaticMarkup"](reagent.core.as_element.call(null, component));
  } finally {
    reagent.impl.component._STAR_non_reactive_STAR_ = _STAR_non_reactive_STAR_12398;
  }
};
reagent.core.force_update_all = function reagent$core$force_update_all() {
  return reagent.impl.util.force_update_all.call(null);
};
goog.exportSymbol("reagent.core.force_update_all", reagent.core.force_update_all);
reagent.core.create_class = function reagent$core$create_class(spec) {
  return reagent.impl.component.create_class.call(null, spec);
};
reagent.core.current_component = function reagent$core$current_component() {
  return reagent.impl.component._STAR_current_component_STAR_;
};
reagent.core.state_atom = function reagent$core$state_atom(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.component.state_atom.call(null, this$);
};
reagent.core.state = function reagent$core$state(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return cljs.core.deref.call(null, reagent.core.state_atom.call(null, this$));
};
reagent.core.replace_state = function reagent$core$replace_state(this$, new_state) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  if (new_state == null || cljs.core.map_QMARK_.call(null, new_state)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)))))].join(""));
  }
  return cljs.core.reset_BANG_.call(null, reagent.core.state_atom.call(null, this$), new_state);
};
reagent.core.set_state = function reagent$core$set_state(this$, new_state) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  if (new_state == null || cljs.core.map_QMARK_.call(null, new_state)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)))))].join(""));
  }
  return cljs.core.swap_BANG_.call(null, reagent.core.state_atom.call(null, this$), cljs.core.merge, new_state);
};
reagent.core.props = function reagent$core$props(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.util.get_props.call(null, this$);
};
reagent.core.children = function reagent$core$children(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.util.get_children.call(null, this$);
};
reagent.core.argv = function reagent$core$argv(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.util.get_argv.call(null, this$);
};
reagent.core.dom_node = function reagent$core$dom_node(this$) {
  return this$["getDOMNode"]();
};
reagent.core.merge_props = function reagent$core$merge_props(defaults, props) {
  return reagent.impl.util.merge_props.call(null, defaults, props);
};
reagent.core.flush = function reagent$core$flush() {
  return reagent.impl.batching.flush.call(null);
};
reagent.core.atom = function() {
  var reagent$core$atom = null;
  var reagent$core$atom__1 = function(x) {
    return reagent.ratom.atom.call(null, x);
  };
  var reagent$core$atom__2 = function() {
    var G__12399__delegate = function(x, rest) {
      return cljs.core.apply.call(null, reagent.ratom.atom, x, rest);
    };
    var G__12399 = function(x, var_args) {
      var rest = null;
      if (arguments.length > 1) {
        var G__12400__i = 0, G__12400__a = new Array(arguments.length - 1);
        while (G__12400__i < G__12400__a.length) {
          G__12400__a[G__12400__i] = arguments[G__12400__i + 1];
          ++G__12400__i;
        }
        rest = new cljs.core.IndexedSeq(G__12400__a, 0);
      }
      return G__12399__delegate.call(this, x, rest);
    };
    G__12399.cljs$lang$maxFixedArity = 1;
    G__12399.cljs$lang$applyTo = function(arglist__12401) {
      var x = cljs.core.first(arglist__12401);
      var rest = cljs.core.rest(arglist__12401);
      return G__12399__delegate(x, rest);
    };
    G__12399.cljs$core$IFn$_invoke$arity$variadic = G__12399__delegate;
    return G__12399;
  }();
  reagent$core$atom = function(x, var_args) {
    var rest = var_args;
    switch(arguments.length) {
      case 1:
        return reagent$core$atom__1.call(this, x);
      default:
        var G__12402 = null;
        if (arguments.length > 1) {
          var G__12403__i = 0, G__12403__a = new Array(arguments.length - 1);
          while (G__12403__i < G__12403__a.length) {
            G__12403__a[G__12403__i] = arguments[G__12403__i + 1];
            ++G__12403__i;
          }
          G__12402 = new cljs.core.IndexedSeq(G__12403__a, 0);
        }
        return reagent$core$atom__2.cljs$core$IFn$_invoke$arity$variadic(x, G__12402);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reagent$core$atom.cljs$lang$maxFixedArity = 1;
  reagent$core$atom.cljs$lang$applyTo = reagent$core$atom__2.cljs$lang$applyTo;
  reagent$core$atom.cljs$core$IFn$_invoke$arity$1 = reagent$core$atom__1;
  reagent$core$atom.cljs$core$IFn$_invoke$arity$variadic = reagent$core$atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return reagent$core$atom;
}();
reagent.core.wrap = function() {
  var reagent$core$wrap__delegate = function(value, reset_fn, args) {
    if (cljs.core.ifn_QMARK_.call(null, reset_fn)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "reset-fn", "reset-fn", 949643977, null))))].join(""));
    }
    return reagent.ratom.make_wrapper.call(null, value, reset_fn, args);
  };
  var reagent$core$wrap = function(value, reset_fn, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__12404__i = 0, G__12404__a = new Array(arguments.length - 2);
      while (G__12404__i < G__12404__a.length) {
        G__12404__a[G__12404__i] = arguments[G__12404__i + 2];
        ++G__12404__i;
      }
      args = new cljs.core.IndexedSeq(G__12404__a, 0);
    }
    return reagent$core$wrap__delegate.call(this, value, reset_fn, args);
  };
  reagent$core$wrap.cljs$lang$maxFixedArity = 2;
  reagent$core$wrap.cljs$lang$applyTo = function(arglist__12405) {
    var value = cljs.core.first(arglist__12405);
    arglist__12405 = cljs.core.next(arglist__12405);
    var reset_fn = cljs.core.first(arglist__12405);
    var args = cljs.core.rest(arglist__12405);
    return reagent$core$wrap__delegate(value, reset_fn, args);
  };
  reagent$core$wrap.cljs$core$IFn$_invoke$arity$variadic = reagent$core$wrap__delegate;
  return reagent$core$wrap;
}();
reagent.core.cursor = function reagent$core$cursor(src, path) {
  return reagent.ratom.cursor.call(null, src, path);
};
reagent.core.next_tick = function reagent$core$next_tick(f) {
  return reagent.impl.batching.next_tick.call(null, f);
};
reagent.core.partial = function() {
  var reagent$core$partial__delegate = function(f, args) {
    return new reagent.impl.util.partial_ifn(f, args, null);
  };
  var reagent$core$partial = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      var G__12406__i = 0, G__12406__a = new Array(arguments.length - 1);
      while (G__12406__i < G__12406__a.length) {
        G__12406__a[G__12406__i] = arguments[G__12406__i + 1];
        ++G__12406__i;
      }
      args = new cljs.core.IndexedSeq(G__12406__a, 0);
    }
    return reagent$core$partial__delegate.call(this, f, args);
  };
  reagent$core$partial.cljs$lang$maxFixedArity = 1;
  reagent$core$partial.cljs$lang$applyTo = function(arglist__12407) {
    var f = cljs.core.first(arglist__12407);
    var args = cljs.core.rest(arglist__12407);
    return reagent$core$partial__delegate(f, args);
  };
  reagent$core$partial.cljs$core$IFn$_invoke$arity$variadic = reagent$core$partial__delegate;
  return reagent$core$partial;
}();
goog.provide("centipair.core.components.notifier");
goog.require("cljs.core");
goog.require("reagent.core");
centipair.core.components.notifier.notifier_state = reagent.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "notify", new cljs.core.Keyword(null, "text", "text", -1790561697), ""], null));
centipair.core.components.notifier.notifier_component = function centipair$core$components$notifier$notifier_component() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), (new cljs.core.Keyword(null, "class", "class", -2030961996)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, centipair.core.components.notifier.notifier_state))], null), (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  centipair.core.components.notifier.notifier_state))], null);
};
centipair.core.components.notifier.render_notifier_component = function centipair$core$components$notifier$render_notifier_component() {
  return reagent.core.render.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [centipair.core.components.notifier.notifier_component], null), document.getElementById("notifier"));
};
centipair.core.components.notifier.notify = function() {
  var centipair$core$components$notifier$notify__delegate = function(code, p__11904) {
    var vec__11907 = p__11904;
    var message = cljs.core.nth.call(null, vec__11907, 0, null);
    var G__11908 = code;
    switch(G__11908) {
      case 200:
        return cljs.core.reset_BANG_.call(null, centipair.core.components.notifier.notifier_state, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "notify", new cljs.core.Keyword(null, "text", "text", -1790561697), ""], null));
        break;
      case 102:
        return cljs.core.reset_BANG_.call(null, centipair.core.components.notifier.notifier_state, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "notify notify-loading", new cljs.core.Keyword(null, "text", "text", -1790561697), message == null ? "Loading" : message], null));
        break;
      case 404:
        return cljs.core.reset_BANG_.call(null, centipair.core.components.notifier.notifier_state, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "notify notify-error", new cljs.core.Keyword(null, "text", "text", -1790561697), message == null ? "Resource unavailable" : message], null));
        break;
      case 500:
        return cljs.core.reset_BANG_.call(null, centipair.core.components.notifier.notifier_state, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "notify notify-error", new cljs.core.Keyword(null, "text", "text", -1790561697), message == null ? "Internal Server Error" : message], null));
        break;
      case 422:
        return cljs.core.reset_BANG_.call(null, centipair.core.components.notifier.notifier_state, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "notify notify-error", new cljs.core.Keyword(null, "text", "text", -1790561697), message == null ? "Unprocessable entity" : message], null));
        break;
      case 403:
        return cljs.core.reset_BANG_.call(null, centipair.core.components.notifier.notifier_state, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "notify notify-error", new cljs.core.Keyword(null, "text", "text", -1790561697), message == null ? "Access Denied" : message], null));
        break;
      case 405:
        return cljs.core.reset_BANG_.call(null, centipair.core.components.notifier.notifier_state, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "notify notify-error", new cljs.core.Keyword(null, "text", "text", -1790561697), message == null ? "Method not allowed" : message], null));
        break;
      default:
        return cljs.core.reset_BANG_.call(null, centipair.core.components.notifier.notifier_state, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "notify", new cljs.core.Keyword(null, "text", "text", -1790561697), ""], null));
    }
  };
  var centipair$core$components$notifier$notify = function(code, var_args) {
    var p__11904 = null;
    if (arguments.length > 1) {
      var G__11910__i = 0, G__11910__a = new Array(arguments.length - 1);
      while (G__11910__i < G__11910__a.length) {
        G__11910__a[G__11910__i] = arguments[G__11910__i + 1];
        ++G__11910__i;
      }
      p__11904 = new cljs.core.IndexedSeq(G__11910__a, 0);
    }
    return centipair$core$components$notifier$notify__delegate.call(this, code, p__11904);
  };
  centipair$core$components$notifier$notify.cljs$lang$maxFixedArity = 1;
  centipair$core$components$notifier$notify.cljs$lang$applyTo = function(arglist__11911) {
    var code = cljs.core.first(arglist__11911);
    var p__11904 = cljs.core.rest(arglist__11911);
    return centipair$core$components$notifier$notify__delegate(code, p__11904);
  };
  centipair$core$components$notifier$notify.cljs$core$IFn$_invoke$arity$variadic = centipair$core$components$notifier$notify__delegate;
  return centipair$core$components$notifier$notify;
}();
centipair.core.components.notifier.message = function centipair$core$components$notifier$message(message__$1, type) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), [cljs.core.str("alert alert-"), cljs.core.str(type)].join(""), new cljs.core.Keyword(null, "role", "role", -736691072), "alert"], null), message__$1], null);
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS") && !goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return goog.labs.userAgent.browser.getOperaVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.labs.userAgent.browser.getOperaVersion_ = function(userAgent) {
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgent);
  var lastTuple = goog.array.peek(versionTuples);
  if (lastTuple[0] == "OPR" && lastTuple[1]) {
    return lastTuple[1];
  }
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.getVersionFromTuples_ = function(versionTuples) {
  goog.asserts.assert(versionTuples.length > 2, "Couldn't extract version tuple from user agent string");
  return versionTuples[2] && versionTuples[2][1] ? versionTuples[2][1] : "";
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit");
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = tuples[1];
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && goog.string.contains(ua, "Android");
  goog.userAgent.detectedIPhone_ = !!ua && goog.string.contains(ua, "iPhone");
  goog.userAgent.detectedIPad_ = !!ua && goog.string.contains(ua, "iPad");
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    return goog.isFunction(operaVersion) ? operaVersion() : operaVersion;
  }
  if (goog.userAgent.GECKO) {
    re = /rv\:([^\);]+)(\)|;)/;
  } else {
    if (goog.userAgent.IE) {
      re = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.WEBKIT) {
        re = /WebKit\/(\S+)/;
      }
    }
  }
  if (re) {
    var arr = re.exec(goog.userAgent.getUserAgentString());
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || goog.userAgent.IE && goog.userAgent.isDocumentModeOrHigher(9) || goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9.1"), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT, 
INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE, LEGACY_IE_RANGES:goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.math.Coordinate.prototype.rotateRadians = function(radians, opt_center) {
  var center = opt_center || new goog.math.Coordinate(0, 0);
  var x = this.x;
  var y = this.y;
  var cos = Math.cos(radians);
  var sin = Math.sin(radians);
  this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;
  this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;
};
goog.math.Coordinate.prototype.rotateDegrees = function(degrees, opt_center) {
  this.rotateRadians(goog.math.toRadians(degrees), opt_center);
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return(this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return!this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.Appendable");
goog.provide("goog.dom.DomHelper");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.functions");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.define("goog.dom.ASSUME_QUIRKS_MODE", false);
goog.define("goog.dom.ASSUME_STANDARDS_MODE", false);
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.dom.getElementHelper_(document, element);
};
goog.dom.getElementHelper_ = function(doc, element) {
  return goog.isString(element) ? doc.getElementById(element) : element;
};
goog.dom.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(document, id);
};
goog.dom.getRequiredElementHelper_ = function(doc, id) {
  goog.asserts.assertString(id);
  var element = goog.dom.getElementHelper_(doc, id);
  element = goog.asserts.assertElement(element, "No element found with id: " + id);
  return element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (goog.dom.canUseQuerySelector_(parent)) {
    retVal = parent.querySelector("." + className);
  } else {
    retVal = goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el)[0];
  }
  return retVal || null;
};
goog.dom.getRequiredElementByClass = function(className, opt_root) {
  var retValue = goog.dom.getElementByClass(className, opt_root);
  return goog.asserts.assert(retValue, "No element found with className: " + className);
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return!!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (key in goog.dom.DIRECT_ATTRIBUTE_MAP_) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var body = doc.body;
    var docEl = doc.documentElement;
    if (!body && !docEl) {
      return 0;
    }
    var vh = goog.dom.getViewportSize_(win).height;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || goog.global || window;
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  if (goog.userAgent.IE && goog.userAgent.isVersionOrHigher("10") && win.pageYOffset != el.scrollTop) {
    return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);
  }
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  if (!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc)) {
    return doc.documentElement;
  }
  return doc.body || doc.documentElement;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes && (attributes.name || attributes.type)) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        element.className = attributes.join(" ");
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var rowHtml = ["\x3ctr\x3e"];
  for (var i = 0;i < columns;i++) {
    rowHtml.push(fillWithNbsp ? "\x3ctd\x3e\x26nbsp;\x3c/td\x3e" : "\x3ctd\x3e\x3c/td\x3e");
  }
  rowHtml.push("\x3c/tr\x3e");
  rowHtml = rowHtml.join("");
  var totalHtml = ["\x3ctable\x3e"];
  for (i = 0;i < rows;i++) {
    totalHtml.push(rowHtml);
  }
  totalHtml.push("\x3c/table\x3e");
  var elem = doc.createElement(goog.dom.TagName.DIV);
  elem.innerHTML = totalHtml.join("");
  return(elem.removeChild(elem.firstChild));
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement("div");
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  if (tempDiv.childNodes.length == 1) {
    return(tempDiv.removeChild(tempDiv.firstChild));
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch(node.tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return(element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return(goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (node.firstElementChild != undefined) {
    return(node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (node.lastElementChild != undefined) {
    return(node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (node.nextElementSibling != undefined) {
    return(node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (node.previousElementSibling != undefined) {
    return(node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return(node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  var parent;
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    var isIe9 = goog.userAgent.IE && goog.userAgent.isVersionOrHigher("9") && !goog.userAgent.isVersionOrHigher("10");
    if (!(isIe9 && goog.global["SVGElement"] && element instanceof goog.global["SVGElement"])) {
      parent = element.parentElement;
      if (parent) {
        return parent;
      }
    }
  }
  parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return-1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return-1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return(isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return-1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return-1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  goog.asserts.assert(node, "Node cannot be null or undefined.");
  return(node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(node, text) {
  goog.asserts.assert(node != null, "goog.dom.setTextContent expects a non-null value for node");
  if ("textContent" in node) {
    node.textContent = text;
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      node.data = text;
    } else {
      if (node.firstChild && node.firstChild.nodeType == goog.dom.NodeType.TEXT) {
        while (node.lastChild != node.firstChild) {
          node.removeChild(node.lastChild);
        }
        node.firstChild.data = text;
      } else {
        goog.dom.removeChildren(node);
        var doc = goog.dom.getOwnerDocument(node);
        node.appendChild(doc.createTextNode(String(text)));
      }
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement("div");
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  return goog.dom.hasSpecifiedTabIndex_(element) && goog.dom.isTabIndexFocusable_(element);
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.isFocusable = function(element) {
  var focusable;
  if (goog.dom.nativelySupportsFocus_(element)) {
    focusable = !element.disabled && (!goog.dom.hasSpecifiedTabIndex_(element) || goog.dom.isTabIndexFocusable_(element));
  } else {
    focusable = goog.dom.isFocusableTabIndex(element);
  }
  return focusable && goog.userAgent.IE ? goog.dom.hasNonZeroBoundingRect_(element) : focusable;
};
goog.dom.hasSpecifiedTabIndex_ = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  return goog.isDefAndNotNull(attrNode) && attrNode.specified;
};
goog.dom.isTabIndexFocusable_ = function(element) {
  var index = element.tabIndex;
  return goog.isNumber(index) && index >= 0 && index < 32768;
};
goog.dom.nativelySupportsFocus_ = function(element) {
  return element.tagName == goog.dom.TagName.A || element.tagName == goog.dom.TagName.INPUT || element.tagName == goog.dom.TagName.TEXTAREA || element.tagName == goog.dom.TagName.SELECT || element.tagName == goog.dom.TagName.BUTTON;
};
goog.dom.hasNonZeroBoundingRect_ = function(element) {
  var rect = goog.isFunction(element["getBoundingClientRect"]) ? element.getBoundingClientRect() : {"height":element.offsetHeight, "width":element.offsetWidth};
  return goog.isDefAndNotNull(rect) && rect.height > 0 && rect.width > 0;
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return(goog.dom.getAncestor(element, function(node) {
    return(!tagName || node.nodeName == tagName) && (!opt_class || goog.isString(node.className) && goog.array.contains(node.className.split(/\s+/), opt_class));
  }, true));
};
goog.dom.getAncestorByClass = function(element, className) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.devicePixelRatio_;
goog.dom.getPixelRatio = goog.functions.cacheReturnValue(function() {
  var win = goog.dom.getWindow();
  var isFirefoxMobile = goog.userAgent.GECKO && goog.userAgent.MOBILE;
  if (goog.isDef(win.devicePixelRatio) && !isFirefoxMobile) {
    return win.devicePixelRatio;
  } else {
    if (win.matchMedia) {
      return goog.dom.matchesPixelRatio_(.75) || goog.dom.matchesPixelRatio_(1.5) || goog.dom.matchesPixelRatio_(2) || goog.dom.matchesPixelRatio_(3) || 1;
    }
  }
  return 1;
});
goog.dom.matchesPixelRatio_ = function(pixelRatio) {
  var win = goog.dom.getWindow();
  var query = "(-webkit-min-device-pixel-ratio: " + pixelRatio + ")," + "(min--moz-device-pixel-ratio: " + pixelRatio + ")," + "(min-resolution: " + pixelRatio + "dppx)";
  return win.matchMedia(query).matches ? pixelRatio : 0;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || goog.global.document || document;
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  return goog.dom.getElementHelper_(this.document_, element);
};
goog.dom.DomHelper.prototype.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(this.document_, id);
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.getRequiredElementByClass = function(className, opt_root) {
  var root = opt_root || this.document_;
  return goog.dom.getRequiredElementByClass(className, root);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.isFocusable = goog.dom.isFocusable;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.filterFalse = function(iterable, f, opt_obj) {
  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var iterator = goog.iter.toIterator(arguments);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.chainFromIterable = function(iterable) {
  return goog.iter.chain.apply(undefined, iterable);
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  return goog.iter.every(pairs, function(pair) {
    return pair[0] == pair[1];
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return!!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return[this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.starMap = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var args = goog.iter.toArray(iterator.next());
    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
  };
  return iter;
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return[];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt((opt_end)) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return!goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.forEach = function(f, opt_obj) {
  var keys = this.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = this.get(key);
    f.call(opt_obj, value, key, this);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.define("goog.debug.LOGGING_ENABLED", goog.DEBUG);
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line, opt_col, opt_error) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line, opt_col, opt_error);
    }
    logFunc({message:message, fileName:url, line:line, col:opt_col, error:opt_error});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var str = [];
  var helper = function(obj, space, parentSeen) {
    var nestspace = space + "  ";
    var seen = new goog.structs.Set(parentSeen);
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (seen.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  seen.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace, seen);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "", new goog.structs.Set);
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: \x3ca href\x3d"view-source:' + e.fileName + '" target\x3d"_new"\x3e' + e.fileName + "\x3c/a\x3e\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-\x3e ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-\x3e ");
    return error;
  } catch (e2) {
    return "Exception trying to expose exception! You win, we lose. " + e2;
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || err.line || "Not available";
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || err.filename || err.sourceURL || goog.global["$googDebugFname"] || href;
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || !err.lineNumber || !err.fileName || !err.stack || !err.message || !err.name) {
    return{"message":err.message || "Not available", "name":err.name || "UnknownError", "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error;
  if (typeof err == "string") {
    error = Error(err);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(error, goog.debug.enhanceError);
    }
  } else {
    error = err;
  }
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(goog.debug.enhanceError);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  if (goog.STRICT_MODE_COMPATIBLE) {
    var stack = goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);
    if (stack) {
      return stack;
    }
  }
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getNativeStackTrace_ = function(fn) {
  var tempErr = new Error;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(tempErr, fn);
    return String(tempErr.stack);
  } else {
    try {
      throw tempErr;
    } catch (e) {
      tempErr = e;
    }
    var stack = tempErr.stack;
    if (stack) {
      return String(stack);
    }
  }
  return null;
};
goog.debug.getStacktrace = function(opt_fn) {
  var stack;
  if (goog.STRICT_MODE_COMPATIBLE) {
    var contextFn = opt_fn || goog.debug.getStacktrace;
    stack = goog.debug.getNativeStackTrace_(contextFn);
  }
  if (!stack) {
    stack = goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
  }
  return stack;
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;args && i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.define("goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS", true);
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_;
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.define("goog.debug.LogBuffer.CAPACITY", 0);
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Loggable");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Loggable;
goog.debug.Logger = function(name) {
  this.name_ = name;
  this.parent_ = null;
  this.level_ = null;
  this.children_ = null;
  this.handlers_ = null;
};
goog.debug.Logger.ROOT_LOGGER_NAME = "";
goog.define("goog.debug.Logger.ENABLE_HIERARCHY", true);
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      if (!this.handlers_) {
        this.handlers_ = [];
      }
      this.handlers_.push(handler);
    } else {
      goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootHandlers_.push(handler);
    }
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
    return!!handlers && goog.array.remove(handlers, handler);
  } else {
    return false;
  }
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      this.level_ = level;
    } else {
      goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootLevel_ = level;
    }
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.LOGGING_ENABLED) {
    return goog.debug.Logger.Level.OFF;
  }
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return goog.debug.LOGGING_ENABLED && level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {
    if (goog.isFunction(msg)) {
      msg = msg();
    }
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception, goog.debug.Logger.prototype.log));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception, opt_fnStackContext) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    var context;
    if (goog.STRICT_MODE_COMPATIBLE) {
      context = opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord;
    } else {
      context = opt_fnStackContext || arguments.callee.caller;
    }
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord));
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);
    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return(goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.log");
goog.provide("goog.log.Level");
goog.provide("goog.log.LogRecord");
goog.provide("goog.log.Logger");
goog.require("goog.debug");
goog.require("goog.debug.LogManager");
goog.require("goog.debug.LogRecord");
goog.require("goog.debug.Logger");
goog.define("goog.log.ENABLED", goog.debug.LOGGING_ENABLED);
goog.log.ROOT_LOGGER_NAME = goog.debug.Logger.ROOT_LOGGER_NAME;
goog.log.Logger = goog.debug.Logger;
goog.log.Level = goog.debug.Logger.Level;
goog.log.LogRecord = goog.debug.LogRecord;
goog.log.getLogger = function(name, opt_level) {
  if (goog.log.ENABLED) {
    var logger = goog.debug.LogManager.getLogger(name);
    if (opt_level && logger) {
      logger.setLevel(opt_level);
    }
    return logger;
  } else {
    return null;
  }
};
goog.log.addHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    logger.addHandler(handler);
  }
};
goog.log.removeHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    return logger.removeHandler(handler);
  } else {
    return false;
  }
};
goog.log.log = function(logger, level, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.log(level, msg, opt_exception);
  }
};
goog.log.error = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.severe(msg, opt_exception);
  }
};
goog.log.warning = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.warning(msg, opt_exception);
  }
};
goog.log.info = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.info(msg, opt_exception);
  }
};
goog.log.fine = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.fine(msg, opt_exception);
  }
};
goog.provide("goog.net.xpc");
goog.provide("goog.net.xpc.CfgFields");
goog.provide("goog.net.xpc.ChannelStates");
goog.provide("goog.net.xpc.TransportNames");
goog.provide("goog.net.xpc.TransportTypes");
goog.provide("goog.net.xpc.UriCfgFields");
goog.require("goog.log");
goog.net.xpc.TransportTypes = {NATIVE_MESSAGING:1, FRAME_ELEMENT_METHOD:2, IFRAME_RELAY:3, IFRAME_POLLING:4, FLASH:5, NIX:6, DIRECT:7};
goog.net.xpc.TransportNames = {1:"NativeMessagingTransport", 2:"FrameElementMethodTransport", 3:"IframeRelayTransport", 4:"IframePollingTransport", 5:"FlashTransport", 6:"NixTransport", 7:"DirectTransport"};
goog.net.xpc.CfgFields = {CHANNEL_NAME:"cn", AUTH_TOKEN:"at", REMOTE_AUTH_TOKEN:"rat", PEER_URI:"pu", IFRAME_ID:"ifrid", TRANSPORT:"tp", LOCAL_RELAY_URI:"lru", PEER_RELAY_URI:"pru", LOCAL_POLL_URI:"lpu", PEER_POLL_URI:"ppu", PEER_HOSTNAME:"ph", ONE_SIDED_HANDSHAKE:"osh", ROLE:"role", NATIVE_TRANSPORT_PROTOCOL_VERSION:"nativeProtocolVersion", DIRECT_TRANSPORT_SYNC_MODE:"directSyncMode"};
goog.net.xpc.UriCfgFields = [goog.net.xpc.CfgFields.PEER_URI, goog.net.xpc.CfgFields.LOCAL_RELAY_URI, goog.net.xpc.CfgFields.PEER_RELAY_URI, goog.net.xpc.CfgFields.LOCAL_POLL_URI, goog.net.xpc.CfgFields.PEER_POLL_URI];
goog.net.xpc.ChannelStates = {NOT_CONNECTED:1, CONNECTED:2, CLOSED:3};
goog.net.xpc.TRANSPORT_SERVICE_ = "tp";
goog.net.xpc.SETUP = "SETUP";
goog.net.xpc.SETUP_NTPV2 = "SETUP_NTPV2";
goog.net.xpc.SETUP_ACK_ = "SETUP_ACK";
goog.net.xpc.SETUP_ACK_NTPV2 = "SETUP_ACK_NTPV2";
goog.net.xpc.channels = {};
goog.net.xpc.getRandomString = function(length, opt_characters) {
  var chars = opt_characters || goog.net.xpc.randomStringCharacters_;
  var charsLength = chars.length;
  var s = "";
  while (length-- > 0) {
    s += chars.charAt(Math.floor(Math.random() * charsLength));
  }
  return s;
};
goog.net.xpc.randomStringCharacters_ = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
goog.net.xpc.logger = goog.log.getLogger("goog.net.xpc");
goog.provide("goog.net.xpc.CrossPageChannelRole");
goog.net.xpc.CrossPageChannelRole = {OUTER:0, INNER:1};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.net.xpc.Transport");
goog.require("goog.Disposable");
goog.require("goog.dom");
goog.require("goog.net.xpc.TransportNames");
goog.net.xpc.Transport = function(opt_domHelper) {
  goog.Disposable.call(this);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
};
goog.inherits(goog.net.xpc.Transport, goog.Disposable);
goog.net.xpc.Transport.prototype.transportType = 0;
goog.net.xpc.Transport.prototype.getType = function() {
  return this.transportType;
};
goog.net.xpc.Transport.prototype.getWindow = function() {
  return this.domHelper_.getWindow();
};
goog.net.xpc.Transport.prototype.getName = function() {
  return goog.net.xpc.TransportNames[this.transportType] || "";
};
goog.net.xpc.Transport.prototype.transportServiceHandler = goog.abstractMethod;
goog.net.xpc.Transport.prototype.connect = goog.abstractMethod;
goog.net.xpc.Transport.prototype.send = goog.abstractMethod;
goog.provide("goog.net.xpc.IframePollingTransport");
goog.provide("goog.net.xpc.IframePollingTransport.Receiver");
goog.provide("goog.net.xpc.IframePollingTransport.Sender");
goog.require("goog.array");
goog.require("goog.dom");
goog.require("goog.log");
goog.require("goog.log.Level");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.userAgent");
goog.net.xpc.IframePollingTransport = function(channel, opt_domHelper) {
  goog.net.xpc.IframePollingTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.sendUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.PEER_POLL_URI];
  this.rcvUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.LOCAL_POLL_URI];
  this.sendQueue_ = [];
};
goog.inherits(goog.net.xpc.IframePollingTransport, goog.net.xpc.Transport);
goog.net.xpc.IframePollingTransport.prototype.pollsBeforeReconnect_ = 5;
goog.net.xpc.IframePollingTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING;
goog.net.xpc.IframePollingTransport.prototype.sequence_ = 0;
goog.net.xpc.IframePollingTransport.prototype.waitForAck_ = false;
goog.net.xpc.IframePollingTransport.prototype.initialized_ = false;
goog.net.xpc.IframePollingTransport.prototype.reconnectFrame_ = null;
goog.net.xpc.IframePollingTransport.IFRAME_PREFIX = "googlexpc";
goog.net.xpc.IframePollingTransport.prototype.getMsgFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_msg";
};
goog.net.xpc.IframePollingTransport.prototype.getAckFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_ack";
};
goog.net.xpc.IframePollingTransport.prototype.isChannelAvailable = function() {
  return!this.isDisposed() && this.channel_.isPeerAvailable();
};
goog.net.xpc.IframePollingTransport.prototype.getPeerFrames_ = function() {
  try {
    if (this.isChannelAvailable()) {
      return this.channel_.getPeerWindowObject().frames || {};
    }
  } catch (e) {
    goog.log.fine(goog.net.xpc.logger, "error retrieving peer frames");
  }
  return{};
};
goog.net.xpc.IframePollingTransport.prototype.getPeerFrame_ = function(frameName) {
  return this.getPeerFrames_()[frameName];
};
goog.net.xpc.IframePollingTransport.prototype.connect = function() {
  if (!this.isChannelAvailable()) {
    return;
  }
  goog.log.fine(goog.net.xpc.logger, "transport connect called");
  if (!this.initialized_) {
    goog.log.fine(goog.net.xpc.logger, "initializing...");
    this.constructSenderFrames_();
    this.initialized_ = true;
  }
  this.checkForeignFramesReady_();
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrames_ = function() {
  var name = this.getMsgFrameName_();
  this.msgIframeElm_ = this.constructSenderFrame_(name);
  this.msgWinObj_ = this.getWindow().frames[name];
  name = this.getAckFrameName_();
  this.ackIframeElm_ = this.constructSenderFrame_(name);
  this.ackWinObj_ = this.getWindow().frames[name];
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrame_ = function(id) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "constructing sender frame: " + id);
  var ifr = goog.dom.createElement("iframe");
  var s = ifr.style;
  s.position = "absolute";
  s.top = "-10px";
  s.left = "10px";
  s.width = "1px";
  s.height = "1px";
  ifr.id = ifr.name = id;
  ifr.src = this.sendUri_ + "#INITIAL";
  this.getWindow().document.body.appendChild(ifr);
  return ifr;
};
goog.net.xpc.IframePollingTransport.prototype.maybeInnerPeerReconnect_ = function() {
  if (this.reconnectFrame_ || this.pollsBeforeReconnect_-- > 0) {
    return;
  }
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "Inner peer reconnect triggered.");
  this.channel_.updateChannelNameAndCatalog(goog.net.xpc.getRandomString(10));
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "switching channels: " + this.channel_.name);
  this.deconstructSenderFrames_();
  this.initialized_ = false;
  this.reconnectFrame_ = this.constructSenderFrame_(goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_reconnect_" + this.channel_.name);
};
goog.net.xpc.IframePollingTransport.prototype.outerPeerReconnect_ = function() {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "outerPeerReconnect called");
  var frames = this.getPeerFrames_();
  var length = frames.length;
  for (var i = 0;i < length;i++) {
    var frameName;
    try {
      if (frames[i] && frames[i].name) {
        frameName = frames[i].name;
      }
    } catch (e) {
    }
    if (!frameName) {
      continue;
    }
    var message = frameName.split("_");
    if (message.length == 3 && message[0] == goog.net.xpc.IframePollingTransport.IFRAME_PREFIX && message[1] == "reconnect") {
      this.channel_.name = message[2];
      this.deconstructSenderFrames_();
      this.initialized_ = false;
      break;
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.deconstructSenderFrames_ = function() {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "deconstructSenderFrames called");
  if (this.msgIframeElm_) {
    this.msgIframeElm_.parentNode.removeChild(this.msgIframeElm_);
    this.msgIframeElm_ = null;
    this.msgWinObj_ = null;
  }
  if (this.ackIframeElm_) {
    this.ackIframeElm_.parentNode.removeChild(this.ackIframeElm_);
    this.ackIframeElm_ = null;
    this.ackWinObj_ = null;
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkForeignFramesReady_ = function() {
  if (!(this.isRcvFrameReady_(this.getMsgFrameName_()) && this.isRcvFrameReady_(this.getAckFrameName_()))) {
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "foreign frames not (yet) present");
    if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER) {
      this.maybeInnerPeerReconnect_();
    } else {
      if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
        this.outerPeerReconnect_();
      }
    }
    this.getWindow().setTimeout(goog.bind(this.connect, this), 100);
  } else {
    goog.log.fine(goog.net.xpc.logger, "foreign frames present");
    this.msgReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.getPeerFrame_(this.getMsgFrameName_()), goog.bind(this.processIncomingMsg, this));
    this.ackReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.getPeerFrame_(this.getAckFrameName_()), goog.bind(this.processIncomingAck, this));
    this.checkLocalFramesPresent_();
  }
};
goog.net.xpc.IframePollingTransport.prototype.isRcvFrameReady_ = function(frameName) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "checking for receive frame: " + frameName);
  try {
    var winObj = this.getPeerFrame_(frameName);
    if (!winObj || winObj.location.href.indexOf(this.rcvUri_) != 0) {
      return false;
    }
  } catch (e) {
    return false;
  }
  return true;
};
goog.net.xpc.IframePollingTransport.prototype.checkLocalFramesPresent_ = function() {
  var frames = this.getPeerFrames_();
  if (!(frames[this.getAckFrameName_()] && frames[this.getMsgFrameName_()])) {
    if (!this.checkLocalFramesPresentCb_) {
      this.checkLocalFramesPresentCb_ = goog.bind(this.checkLocalFramesPresent_, this);
    }
    this.getWindow().setTimeout(this.checkLocalFramesPresentCb_, 100);
    goog.log.fine(goog.net.xpc.logger, "local frames not (yet) present");
  } else {
    this.msgSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.msgWinObj_);
    this.ackSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.ackWinObj_);
    goog.log.fine(goog.net.xpc.logger, "local frames ready");
    this.getWindow().setTimeout(goog.bind(function() {
      this.msgSender_.send(goog.net.xpc.SETUP);
      this.sentConnectionSetup_ = true;
      this.waitForAck_ = true;
      goog.log.fine(goog.net.xpc.logger, "SETUP sent");
    }, this), 100);
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkIfConnected_ = function() {
  if (this.sentConnectionSetupAck_ && this.rcvdConnectionSetupAck_) {
    this.channel_.notifyConnected();
    if (this.deliveryQueue_) {
      goog.log.fine(goog.net.xpc.logger, "delivering queued messages " + "(" + this.deliveryQueue_.length + ")");
      for (var i = 0, m;i < this.deliveryQueue_.length;i++) {
        m = this.deliveryQueue_[i];
        this.channel_.xpcDeliver(m.service, m.payload);
      }
      delete this.deliveryQueue_;
    }
  } else {
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "checking if connected: " + "ack sent:" + this.sentConnectionSetupAck_ + ", ack rcvd: " + this.rcvdConnectionSetupAck_);
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingMsg = function(raw) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "msg received: " + raw);
  if (raw == goog.net.xpc.SETUP) {
    if (!this.ackSender_) {
      return;
    }
    this.ackSender_.send(goog.net.xpc.SETUP_ACK_);
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "SETUP_ACK sent");
    this.sentConnectionSetupAck_ = true;
    this.checkIfConnected_();
  } else {
    if (this.channel_.isConnected() || this.sentConnectionSetupAck_) {
      var pos = raw.indexOf("|");
      var head = raw.substring(0, pos);
      var frame = raw.substring(pos + 1);
      pos = head.indexOf(",");
      if (pos == -1) {
        var seq = head;
        this.ackSender_.send("ACK:" + seq);
        this.deliverPayload_(frame);
      } else {
        var seq = head.substring(0, pos);
        this.ackSender_.send("ACK:" + seq);
        var partInfo = head.substring(pos + 1).split("/");
        var part0 = parseInt(partInfo[0], 10);
        var part1 = parseInt(partInfo[1], 10);
        if (part0 == 1) {
          this.parts_ = [];
        }
        this.parts_.push(frame);
        if (part0 == part1) {
          this.deliverPayload_(this.parts_.join(""));
          delete this.parts_;
        }
      }
    } else {
      goog.log.warning(goog.net.xpc.logger, "received msg, but channel is not connected");
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingAck = function(msgStr) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "ack received: " + msgStr);
  if (msgStr == goog.net.xpc.SETUP_ACK_) {
    this.waitForAck_ = false;
    this.rcvdConnectionSetupAck_ = true;
    this.checkIfConnected_();
  } else {
    if (this.channel_.isConnected()) {
      if (!this.waitForAck_) {
        goog.log.warning(goog.net.xpc.logger, "got unexpected ack");
        return;
      }
      var seq = parseInt(msgStr.split(":")[1], 10);
      if (seq == this.sequence_) {
        this.waitForAck_ = false;
        this.sendNextFrame_();
      } else {
        goog.log.warning(goog.net.xpc.logger, "got ack with wrong sequence");
      }
    } else {
      goog.log.warning(goog.net.xpc.logger, "received ack, but channel not connected");
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.sendNextFrame_ = function() {
  if (this.waitForAck_ || !this.sendQueue_.length) {
    return;
  }
  var s = this.sendQueue_.shift();
  ++this.sequence_;
  this.msgSender_.send(this.sequence_ + s);
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "msg sent: " + this.sequence_ + s);
  this.waitForAck_ = true;
};
goog.net.xpc.IframePollingTransport.prototype.deliverPayload_ = function(s) {
  var pos = s.indexOf(":");
  var service = s.substr(0, pos);
  var payload = s.substring(pos + 1);
  if (!this.channel_.isConnected()) {
    (this.deliveryQueue_ || (this.deliveryQueue_ = [])).push({service:service, payload:payload});
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "queued delivery");
  } else {
    this.channel_.xpcDeliver(service, payload);
  }
};
goog.net.xpc.IframePollingTransport.prototype.MAX_FRAME_LENGTH_ = 3800;
goog.net.xpc.IframePollingTransport.prototype.send = function(service, payload) {
  var frame = service + ":" + payload;
  if (!goog.userAgent.IE || payload.length <= this.MAX_FRAME_LENGTH_) {
    this.sendQueue_.push("|" + frame);
  } else {
    var l = payload.length;
    var num = Math.ceil(l / this.MAX_FRAME_LENGTH_);
    var pos = 0;
    var i = 1;
    while (pos < l) {
      this.sendQueue_.push("," + i + "/" + num + "|" + frame.substr(pos, this.MAX_FRAME_LENGTH_));
      i++;
      pos += this.MAX_FRAME_LENGTH_;
    }
  }
  this.sendNextFrame_();
};
goog.net.xpc.IframePollingTransport.prototype.disposeInternal = function() {
  goog.net.xpc.IframePollingTransport.base(this, "disposeInternal");
  var receivers = goog.net.xpc.IframePollingTransport.receivers_;
  goog.array.remove(receivers, this.msgReceiver_);
  goog.array.remove(receivers, this.ackReceiver_);
  this.msgReceiver_ = this.ackReceiver_ = null;
  goog.dom.removeNode(this.msgIframeElm_);
  goog.dom.removeNode(this.ackIframeElm_);
  this.msgIframeElm_ = this.ackIframeElm_ = null;
  this.msgWinObj_ = this.ackWinObj_ = null;
};
goog.net.xpc.IframePollingTransport.receivers_ = [];
goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ = 10;
goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_ = 100;
goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ = 1E3;
goog.net.xpc.IframePollingTransport.receive_ = function() {
  var receivers = goog.net.xpc.IframePollingTransport.receivers_;
  var receiver;
  var rcvd = false;
  try {
    for (var i = 0;receiver = receivers[i];i++) {
      rcvd = rcvd || receiver.receive();
    }
  } catch (e) {
    goog.log.info(goog.net.xpc.logger, "receive_() failed: " + e);
    receiver.transport_.channel_.notifyTransportError();
    if (!receivers.length) {
      return;
    }
  }
  var now = goog.now();
  if (rcvd) {
    goog.net.xpc.IframePollingTransport.lastActivity_ = now;
  }
  var t = now - goog.net.xpc.IframePollingTransport.lastActivity_ < goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ ? goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ : goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_;
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, t);
};
goog.net.xpc.IframePollingTransport.receiveCb_ = goog.bind(goog.net.xpc.IframePollingTransport.receive_, goog.net.xpc.IframePollingTransport);
goog.net.xpc.IframePollingTransport.startRcvTimer_ = function() {
  goog.log.fine(goog.net.xpc.logger, "starting receive-timer");
  goog.net.xpc.IframePollingTransport.lastActivity_ = goog.now();
  if (goog.net.xpc.IframePollingTransport.rcvTimer_) {
    window.clearTimeout(goog.net.xpc.IframePollingTransport.rcvTimer_);
  }
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_);
};
goog.net.xpc.IframePollingTransport.Sender = function(url, windowObj) {
  this.sendUri_ = url;
  this.sendFrame_ = windowObj;
  this.cycle_ = 0;
};
goog.net.xpc.IframePollingTransport.Sender.prototype.send = function(payload) {
  this.cycle_ = ++this.cycle_ % 2;
  var url = this.sendUri_ + "#" + this.cycle_ + encodeURIComponent(payload);
  try {
    if (goog.userAgent.WEBKIT) {
      this.sendFrame_.location.href = url;
    } else {
      this.sendFrame_.location.replace(url);
    }
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "sending failed", e);
  }
  goog.net.xpc.IframePollingTransport.startRcvTimer_();
};
goog.net.xpc.IframePollingTransport.Receiver = function(transport, windowObj, callback) {
  this.transport_ = transport;
  this.rcvFrame_ = windowObj;
  this.cb_ = callback;
  this.currentLoc_ = this.rcvFrame_.location.href.split("#")[0] + "#INITIAL";
  goog.net.xpc.IframePollingTransport.receivers_.push(this);
  goog.net.xpc.IframePollingTransport.startRcvTimer_();
};
goog.net.xpc.IframePollingTransport.Receiver.prototype.receive = function() {
  var loc = this.rcvFrame_.location.href;
  if (loc != this.currentLoc_) {
    this.currentLoc_ = loc;
    var payload = loc.split("#")[1];
    if (payload) {
      payload = payload.substr(1);
      this.cb_(decodeURIComponent(payload));
    }
    return true;
  } else {
    return false;
  }
};
goog.provide("centipair.core.utilities.dom");
goog.require("cljs.core");
goog.require("goog.dom");
centipair.core.utilities.dom.get_value = function centipair$core$utilities$dom$get_value(id) {
  return goog.dom.getElement(id).value;
};
centipair.core.utilities.dom.set_value = function centipair$core$utilities$dom$set_value(id, value) {
  return goog.dom.getElement(id).value = value;
};
centipair.core.utilities.dom.innerHtml = function centipair$core$utilities$dom$innerHtml(id, value) {
  return goog.dom.getElement(id).innerHTML = value;
};
goog.provide("centipair.core.utilities.validators");
goog.require("cljs.core");
centipair.core.utilities.validators.matches_regex_QMARK_ = function centipair$core$utilities$validators$matches_regex_QMARK_(v, regex) {
  return cljs.core.boolean$.call(null, cljs.core.re_matches.call(null, regex, v));
};
centipair.core.utilities.validators.has_value_QMARK_ = function centipair$core$utilities$validators$has_value_QMARK_(v) {
  var and__4097__auto__ = v;
  if (cljs.core.truth_(and__4097__auto__)) {
    return cljs.core.not_EQ_.call(null, v, "");
  } else {
    return and__4097__auto__;
  }
};
centipair.core.utilities.validators.not_nil_QMARK_ = function centipair$core$utilities$validators$not_nil_QMARK_(v) {
  return cljs.core.boolean$.call(null, function() {
    var or__4109__auto__ = v;
    if (cljs.core.truth_(or__4109__auto__)) {
      return or__4109__auto__;
    } else {
      return v === false;
    }
  }());
};
centipair.core.utilities.validators.is_email_QMARK_ = function centipair$core$utilities$validators$is_email_QMARK_(v) {
  if (v == null) {
    return false;
  } else {
    return centipair.core.utilities.validators.matches_regex_QMARK_.call(null, v, /[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/i);
  }
};
centipair.core.utilities.validators.min_length_QMARK_ = function centipair$core$utilities$validators$min_length_QMARK_(v, len) {
  return cljs.core.count.call(null, v) >= len;
};
centipair.core.utilities.validators.required_field_error = "This field is required";
centipair.core.utilities.validators.email_field_error = "Not a valid email address";
centipair.core.utilities.validators.password_length_error = "Minimum 6 characters required";
centipair.core.utilities.validators.integer_error = "The value should be an integer";
centipair.core.utilities.validators.validation_error = function centipair$core$utilities$validators$validation_error(message) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "message", "message", -406056002), message, new cljs.core.Keyword(null, "valid", "valid", 155614240), false], null);
};
centipair.core.utilities.validators.validation_success = function centipair$core$utilities$validators$validation_success() {
  return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "valid", "valid", 155614240), true], null);
};
centipair.core.utilities.validators.required = function centipair$core$utilities$validators$required(field) {
  if (cljs.core.truth_(centipair.core.utilities.validators.has_value_QMARK_.call(null, (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(field)))) {
    return centipair.core.utilities.validators.validation_success.call(null);
  } else {
    return centipair.core.utilities.validators.validation_error.call(null, centipair.core.utilities.validators.required_field_error);
  }
};
centipair.core.utilities.validators.checkbox_required = function centipair$core$utilities$validators$checkbox_required(field) {
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "checked", "checked", -50955819)).cljs$core$IFn$_invoke$arity$1(field), "checked")) {
    return centipair.core.utilities.validators.validation_success.call(null);
  } else {
    return centipair.core.utilities.validators.validation_error.call(null, centipair.core.utilities.validators.required_field_error);
  }
};
centipair.core.utilities.validators.agree_terms = function centipair$core$utilities$validators$agree_terms(field) {
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "checked", "checked", -50955819)).cljs$core$IFn$_invoke$arity$1(field), "checked")) {
    return centipair.core.utilities.validators.validation_success.call(null);
  } else {
    return centipair.core.utilities.validators.validation_error.call(null, "You have to agree to the terms and conditions");
  }
};
centipair.core.utilities.validators.email_required = function centipair$core$utilities$validators$email_required(field) {
  if (cljs.core.truth_(centipair.core.utilities.validators.has_value_QMARK_.call(null, (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(field)))) {
    if (centipair.core.utilities.validators.is_email_QMARK_.call(null, (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(field))) {
      return centipair.core.utilities.validators.validation_success.call(null);
    } else {
      return centipair.core.utilities.validators.validation_error.call(null, centipair.core.utilities.validators.email_field_error);
    }
  } else {
    return centipair.core.utilities.validators.validation_error.call(null, centipair.core.utilities.validators.required_field_error);
  }
};
centipair.core.utilities.validators.integer_required = function centipair$core$utilities$validators$integer_required(field) {
  if (cljs.core.truth_(centipair.core.utilities.validators.has_value_QMARK_.call(null, (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(field)))) {
    if (cljs.core.integer_QMARK_.call(null, parseInt((new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(field)))) {
      return centipair.core.utilities.validators.validation_success.call(null);
    } else {
      return centipair.core.utilities.validators.validation_error.call(null, centipair.core.utilities.validators.integer_error);
    }
  } else {
    return centipair.core.utilities.validators.validation_error.call(null, centipair.core.utilities.validators.required_field_error);
  }
};
goog.provide("markdown.transformers");
goog.require("cljs.core");
goog.require("clojure.string");
markdown.transformers.heading_QMARK_ = function markdown$transformers$heading_QMARK_(text, type) {
  if (cljs.core.every_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [" ", null], null), null), cljs.core.take.call(null, 4, text))) {
    return null;
  } else {
    var trimmed = cljs.core.truth_(text) ? clojure.string.trim.call(null, text) : null;
    var and__4097__auto__ = cljs.core.not_empty.call(null, trimmed);
    if (cljs.core.truth_(and__4097__auto__)) {
      return cljs.core.every_QMARK_.call(null, cljs.core.PersistentHashSet.fromArray([type], true), trimmed);
    } else {
      return and__4097__auto__;
    }
  }
};
markdown.transformers.h1_QMARK_ = function markdown$transformers$h1_QMARK_(text) {
  return markdown.transformers.heading_QMARK_.call(null, text, "\x3d");
};
markdown.transformers.h2_QMARK_ = function markdown$transformers$h2_QMARK_(text) {
  return markdown.transformers.heading_QMARK_.call(null, text, "-");
};
markdown.transformers.empty_line = function markdown$transformers$empty_line(text, state) {
  if (cljs.core.truth_(function() {
    var or__4109__auto__ = (new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(state);
    if (cljs.core.truth_(or__4109__auto__)) {
      return or__4109__auto__;
    } else {
      return(new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855)).cljs$core$IFn$_invoke$arity$1(state);
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_(function() {
      var or__4109__auto__ = markdown.transformers.h1_QMARK_.call(null, text);
      if (cljs.core.truth_(or__4109__auto__)) {
        return or__4109__auto__;
      } else {
        return markdown.transformers.h2_QMARK_.call(null, text);
      }
    }()) ? "" : text, cljs.core.truth_(clojure.string.blank_QMARK_.call(null, text)) ? cljs.core.dissoc.call(null, state, new cljs.core.Keyword(null, "hr", "hr", 1377740067), new cljs.core.Keyword(null, "heading", "heading", -1312171873)) : state], null);
  }
};
markdown.transformers.escape_code = function markdown$transformers$escape_code(s) {
  return clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, s, /&/, "\x26amp;"), /\*/, "\x26#42;"), /\^/, "\x26#94;"), /\_/, "\x26#95;"), /\~/, 
  "\x26#126;"), /\</, "\x26lt;"), /\>/, "\x26gt;"), /\[/, "\x26#91;"), /\]/, "\x26#93;"), /\(/, "\x26#40;"), /\)/, "\x26#41;"), /\"/, "\x26quot;");
};
markdown.transformers.escape_link = function() {
  var markdown$transformers$escape_link__delegate = function(xs) {
    return cljs.core.seq.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.join.call(null, cljs.core.apply.call(null, cljs.core.concat, xs)), /\*/, "\x26#42;"), /\^/, "\x26#94;"), /\_/, "\x26#95;"), /\~/, "\x26#126;"));
  };
  var markdown$transformers$escape_link = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      var G__22097__i = 0, G__22097__a = new Array(arguments.length - 0);
      while (G__22097__i < G__22097__a.length) {
        G__22097__a[G__22097__i] = arguments[G__22097__i + 0];
        ++G__22097__i;
      }
      xs = new cljs.core.IndexedSeq(G__22097__a, 0);
    }
    return markdown$transformers$escape_link__delegate.call(this, xs);
  };
  markdown$transformers$escape_link.cljs$lang$maxFixedArity = 0;
  markdown$transformers$escape_link.cljs$lang$applyTo = function(arglist__22098) {
    var xs = cljs.core.seq(arglist__22098);
    return markdown$transformers$escape_link__delegate(xs);
  };
  markdown$transformers$escape_link.cljs$core$IFn$_invoke$arity$variadic = markdown$transformers$escape_link__delegate;
  return markdown$transformers$escape_link;
}();
markdown.transformers.escaped_chars = function markdown$transformers$escaped_chars(text, state) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_(function() {
    var or__4109__auto__ = (new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(state);
    if (cljs.core.truth_(or__4109__auto__)) {
      return or__4109__auto__;
    } else {
      return(new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855)).cljs$core$IFn$_invoke$arity$1(state);
    }
  }()) ? text : clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, 
  text, /\\\\/, "\x26#92;"), /\\`/, "\x26#8216;"), /\\\*/, "\x26#42;"), /\\_/, "\x26#95;"), /\\\{/, "\x26#123;"), /\\\}/, "\x26#125;"), /\\\[/, "\x26#91;"), /\\\]/, "\x26#93;"), /\\\(/, "\x26#40;"), /\\\)/, "\x26#41;"), /\\#/, "\x26#35;"), /\\\+/, "\x26#43;"), /\\-/, "\x26#45;"), /\\\./, "\x26#46;"), /\\!/, "\x26#33;"), state], null);
};
markdown.transformers.separator = function markdown$transformers$separator(escape_QMARK_, text, open, close, separator__$1, state) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(state))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    var out = cljs.core.PersistentVector.EMPTY;
    var buf = cljs.core.PersistentVector.EMPTY;
    var tokens = cljs.core.partition_by.call(null, cljs.core.partial.call(null, cljs.core._EQ_, cljs.core.first.call(null, separator__$1)), cljs.core.seq.call(null, text));
    var cur_state = cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "found-token", "found-token", 113525576), false);
    while (true) {
      if (cljs.core.empty_QMARK_.call(null, tokens)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.join.call(null, cljs.core.into.call(null, cljs.core.truth_((new cljs.core.Keyword(null, "found-token", "found-token", 113525576)).cljs$core$IFn$_invoke$arity$1(cur_state)) ? cljs.core.into.call(null, out, separator__$1) : out, buf)), cljs.core.dissoc.call(null, cur_state, new cljs.core.Keyword(null, "found-token", "found-token", 113525576))], null);
      } else {
        if (cljs.core.truth_((new cljs.core.Keyword(null, "found-token", "found-token", 113525576)).cljs$core$IFn$_invoke$arity$1(cur_state))) {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, tokens), separator__$1)) {
            var G__22099 = cljs.core.vec.call(null, cljs.core.concat.call(null, out, cljs.core.seq.call(null, open), cljs.core.truth_(escape_QMARK_) ? cljs.core.seq.call(null, markdown.transformers.escape_code.call(null, clojure.string.join.call(null, buf))) : buf, cljs.core.seq.call(null, close)));
            var G__22100 = cljs.core.PersistentVector.EMPTY;
            var G__22101 = cljs.core.rest.call(null, tokens);
            var G__22102 = cljs.core.assoc.call(null, cur_state, new cljs.core.Keyword(null, "found-token", "found-token", 113525576), false);
            out = G__22099;
            buf = G__22100;
            tokens = G__22101;
            cur_state = G__22102;
            continue;
          } else {
            var G__22103 = out;
            var G__22104 = cljs.core.into.call(null, buf, cljs.core.first.call(null, tokens));
            var G__22105 = cljs.core.rest.call(null, tokens);
            var G__22106 = cur_state;
            out = G__22103;
            buf = G__22104;
            tokens = G__22105;
            cur_state = G__22106;
            continue;
          }
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, tokens), separator__$1)) {
            var G__22107 = out;
            var G__22108 = buf;
            var G__22109 = cljs.core.rest.call(null, tokens);
            var G__22110 = cljs.core.assoc.call(null, cur_state, new cljs.core.Keyword(null, "found-token", "found-token", 113525576), true);
            out = G__22107;
            buf = G__22108;
            tokens = G__22109;
            cur_state = G__22110;
            continue;
          } else {
            var G__22111 = cljs.core.into.call(null, out, cljs.core.first.call(null, tokens));
            var G__22112 = buf;
            var G__22113 = cljs.core.rest.call(null, tokens);
            var G__22114 = cur_state;
            out = G__22111;
            buf = G__22112;
            tokens = G__22113;
            cur_state = G__22114;
            continue;
          }
        }
      }
      break;
    }
  }
};
markdown.transformers.strong = function markdown$transformers$strong(text, state) {
  return markdown.transformers.separator.call(null, false, text, "\x3cstrong\x3e", "\x3c/strong\x3e", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["*", "*"], null), state);
};
markdown.transformers.bold = function markdown$transformers$bold(text, state) {
  return markdown.transformers.separator.call(null, false, text, "\x3cb\x3e", "\x3c/b\x3e", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["_", "_"], null), state);
};
markdown.transformers.em = function markdown$transformers$em(text, state) {
  return markdown.transformers.separator.call(null, false, text, "\x3cem\x3e", "\x3c/em\x3e", new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["*"], null), state);
};
markdown.transformers.italics = function markdown$transformers$italics(text, state) {
  return markdown.transformers.separator.call(null, false, text, "\x3ci\x3e", "\x3c/i\x3e", new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["_"], null), state);
};
markdown.transformers.inline_code = function markdown$transformers$inline_code(text, state) {
  return markdown.transformers.separator.call(null, true, text, "\x3ccode\x3e", "\x3c/code\x3e", new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`"], null), state);
};
markdown.transformers.strikethrough = function markdown$transformers$strikethrough(text, state) {
  return markdown.transformers.separator.call(null, false, text, "\x3cdel\x3e", "\x3c/del\x3e", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["~", "~"], null), state);
};
markdown.transformers.superscript = function markdown$transformers$superscript(text, state) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(state))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    var tokens = cljs.core.partition_by.call(null, cljs.core.partial.call(null, cljs.core.contains_QMARK_, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [" ", null, "^", null], null), null)), text);
    var buf = cljs.core.PersistentVector.EMPTY;
    var remaining = tokens;
    while (true) {
      if (cljs.core.empty_QMARK_.call(null, remaining)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.join.call(null, buf), state], null);
      } else {
        if (cljs.core._EQ_.call(null, cljs.core.first.call(null, remaining), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["^"], null))) {
          var G__22115 = cljs.core.into.call(null, buf, cljs.core.concat.call(null, cljs.core.seq.call(null, "\x3csup\x3e"), cljs.core.second.call(null, remaining), cljs.core.seq.call(null, "\x3c/sup\x3e")));
          var G__22116 = cljs.core.drop.call(null, 2, remaining);
          buf = G__22115;
          remaining = G__22116;
          continue;
        } else {
          var G__22117 = cljs.core.into.call(null, buf, cljs.core.first.call(null, remaining));
          var G__22118 = cljs.core.rest.call(null, remaining);
          buf = G__22117;
          remaining = G__22118;
          continue;
        }
      }
      break;
    }
  }
};
markdown.transformers.heading_text = function markdown$transformers$heading_text(text) {
  return clojure.string.trim.call(null, clojure.string.join.call(null, cljs.core.drop_while.call(null, function(p1__22119_SHARP_) {
    return cljs.core._EQ_.call(null, "#", p1__22119_SHARP_) || cljs.core._EQ_.call(null, " ", p1__22119_SHARP_);
  }, text)));
};
markdown.transformers.heading_level = function markdown$transformers$heading_level(text) {
  var num_hashes = cljs.core.count.call(null, cljs.core.filter.call(null, function(p1__22120_SHARP_) {
    return cljs.core.not_EQ_.call(null, " ", p1__22120_SHARP_);
  }, cljs.core.take_while.call(null, function(p1__22121_SHARP_) {
    return cljs.core._EQ_.call(null, "#", p1__22121_SHARP_) || cljs.core._EQ_.call(null, " ", p1__22121_SHARP_);
  }, cljs.core.seq.call(null, text))));
  if (num_hashes > 0) {
    return num_hashes;
  } else {
    return null;
  }
};
markdown.transformers.make_heading = function markdown$transformers$make_heading(text, heading_anchors) {
  var temp__4124__auto__ = markdown.transformers.heading_level.call(null, text);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var heading = temp__4124__auto__;
    var text__$1 = markdown.transformers.heading_text.call(null, text);
    return[cljs.core.str("\x3ch"), cljs.core.str(heading), cljs.core.str("\x3e"), cljs.core.str(cljs.core.truth_(heading_anchors) ? [cljs.core.str('\x3ca name\x3d"'), cljs.core.str(clojure.string.replace.call(null, clojure.string.lower_case.call(null, text__$1), " ", "\x26#95;")), cljs.core.str('"\x3e\x3c/a\x3e')].join("") : null), cljs.core.str(text__$1), cljs.core.str("\x3c/h"), cljs.core.str(heading), cljs.core.str("\x3e")].join("");
  } else {
    return null;
  }
};
markdown.transformers.heading = function markdown$transformers$heading(text, state) {
  if (cljs.core.truth_(function() {
    var or__4109__auto__ = (new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855)).cljs$core$IFn$_invoke$arity$1(state);
    if (cljs.core.truth_(or__4109__auto__)) {
      return or__4109__auto__;
    } else {
      return(new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(state);
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    if (cljs.core.truth_(markdown.transformers.h1_QMARK_.call(null, markdown.transformers._STAR_next_line_STAR_))) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3ch1\x3e"), cljs.core.str(text), cljs.core.str("\x3c/h1\x3e")].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "heading", "heading", -1312171873), true)], null);
    } else {
      if (cljs.core.truth_(markdown.transformers.h2_QMARK_.call(null, markdown.transformers._STAR_next_line_STAR_))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3ch2\x3e"), cljs.core.str(text), cljs.core.str("\x3c/h2\x3e")].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "heading", "heading", -1312171873), true)], null);
      } else {
        var temp__4124__auto__ = markdown.transformers.make_heading.call(null, text, (new cljs.core.Keyword(null, "heading-anchors", "heading-anchors", 1713527866)).cljs$core$IFn$_invoke$arity$1(state));
        if (cljs.core.truth_(temp__4124__auto__)) {
          var heading__$1 = temp__4124__auto__;
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [heading__$1, cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "heading", "heading", -1312171873), true)], null);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
        }
      }
    }
  }
};
markdown.transformers.br = function markdown$transformers$br(text, p__22122) {
  var map__22124 = p__22122;
  var map__22124__$1 = cljs.core.seq_QMARK_.call(null, map__22124) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22124) : map__22124;
  var state = map__22124__$1;
  var lists = cljs.core.get.call(null, map__22124__$1, new cljs.core.Keyword(null, "lists", "lists", -884730684));
  var code = cljs.core.get.call(null, map__22124__$1, new cljs.core.Keyword(null, "code", "code", 1586293142));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ", " "], null), cljs.core.take_last.call(null, 2, text)) && cljs.core.not.call(null, function() {
    var or__4109__auto__ = code;
    if (cljs.core.truth_(or__4109__auto__)) {
      return or__4109__auto__;
    } else {
      return lists;
    }
  }()) ? [cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.drop_last.call(null, 2, text))), cljs.core.str("\x3cbr /\x3e")].join("") : text, state], null);
};
markdown.transformers.autourl_transformer = function markdown$transformers$autourl_transformer(text, state) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_((new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(state)) ? text : clojure.string.replace.call(null, text, /<https?:\/\/[-A-Za-z0-9+&@#\/%?=~_()|!:,.;]*[-A-Za-z0-9+&@#\/%=~_()|]>/, function(p1__22125_SHARP_) {
    var url = cljs.core.subs.call(null, p1__22125_SHARP_, 1, cljs.core.count.call(null, p1__22125_SHARP_) - 1);
    return[cljs.core.str('\x3ca href\x3d"'), cljs.core.str(url), cljs.core.str('"\x3e'), cljs.core.str(url), cljs.core.str("\x3c/a\x3e")].join("");
  }), state], null);
};
markdown.transformers.autoemail_transformer = function markdown$transformers$autoemail_transformer(text, state) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_(function() {
    var or__4109__auto__ = (new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(state);
    if (cljs.core.truth_(or__4109__auto__)) {
      return or__4109__auto__;
    } else {
      return(new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855)).cljs$core$IFn$_invoke$arity$1(state);
    }
  }()) ? text : clojure.string.replace.call(null, text, /<[\w._%+-]+@[\w.-]+\.[\w]{2,4}>/, function(p1__22126_SHARP_) {
    var encoded = cljs.core.truth_((new cljs.core.Keyword(null, "clojurescript", "clojurescript", -299769403)).cljs$core$IFn$_invoke$arity$1(state)) ? cljs.core.subs.call(null, p1__22126_SHARP_, 1, cljs.core.count.call(null, p1__22126_SHARP_) - 1) : cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, function(c) {
      if (cljs.core.rand.call(null) > .5) {
        return markdown.transformers.formatter.call(null, "\x26#x%02x;", c | 0);
      } else {
        return c;
      }
    }, cljs.core.subs.call(null, p1__22126_SHARP_, 1, cljs.core.count.call(null, p1__22126_SHARP_) - 1)));
    return[cljs.core.str('\x3ca href\x3d"mailto:'), cljs.core.str(encoded), cljs.core.str('"\x3e'), cljs.core.str(encoded), cljs.core.str("\x3c/a\x3e")].join("");
  }), state], null);
};
markdown.transformers.paragraph_text = function markdown$transformers$paragraph_text(last_line_empty_QMARK_, text) {
  if (cljs.core.truth_(function() {
    var and__4097__auto__ = cljs.core.not.call(null, last_line_empty_QMARK_);
    if (and__4097__auto__) {
      return cljs.core.not_empty.call(null, text);
    } else {
      return and__4097__auto__;
    }
  }())) {
    return[cljs.core.str(" "), cljs.core.str(text)].join("");
  } else {
    return text;
  }
};
markdown.transformers.paragraph = function markdown$transformers$paragraph(text, p__22127) {
  var map__22129 = p__22127;
  var map__22129__$1 = cljs.core.seq_QMARK_.call(null, map__22129) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22129) : map__22129;
  var state = map__22129__$1;
  var last_line_empty_QMARK_ = cljs.core.get.call(null, map__22129__$1, new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527));
  var paragraph__$1 = cljs.core.get.call(null, map__22129__$1, new cljs.core.Keyword(null, "paragraph", "paragraph", 296707709));
  var blockquote = cljs.core.get.call(null, map__22129__$1, new cljs.core.Keyword(null, "blockquote", "blockquote", 372264190));
  var lists = cljs.core.get.call(null, map__22129__$1, new cljs.core.Keyword(null, "lists", "lists", -884730684));
  var code = cljs.core.get.call(null, map__22129__$1, new cljs.core.Keyword(null, "code", "code", 1586293142));
  var hr = cljs.core.get.call(null, map__22129__$1, new cljs.core.Keyword(null, "hr", "hr", 1377740067));
  var heading = cljs.core.get.call(null, map__22129__$1, new cljs.core.Keyword(null, "heading", "heading", -1312171873));
  var eof = cljs.core.get.call(null, map__22129__$1, new cljs.core.Keyword(null, "eof", "eof", -489063237));
  if (cljs.core.truth_(function() {
    var or__4109__auto__ = heading;
    if (cljs.core.truth_(or__4109__auto__)) {
      return or__4109__auto__;
    } else {
      var or__4109__auto____$1 = hr;
      if (cljs.core.truth_(or__4109__auto____$1)) {
        return or__4109__auto____$1;
      } else {
        var or__4109__auto____$2 = code;
        if (cljs.core.truth_(or__4109__auto____$2)) {
          return or__4109__auto____$2;
        } else {
          var or__4109__auto____$3 = lists;
          if (cljs.core.truth_(or__4109__auto____$3)) {
            return or__4109__auto____$3;
          } else {
            return blockquote;
          }
        }
      }
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    if (cljs.core.truth_(paragraph__$1)) {
      if (cljs.core.truth_(function() {
        var or__4109__auto__ = eof;
        if (cljs.core.truth_(or__4109__auto__)) {
          return or__4109__auto__;
        } else {
          return cljs.core.empty_QMARK_.call(null, clojure.string.trim.call(null, text));
        }
      }())) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str(markdown.transformers.paragraph_text.call(null, last_line_empty_QMARK_, text)), cljs.core.str("\x3c/p\x3e")].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "paragraph", "paragraph", 296707709), false)], null);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.transformers.paragraph_text.call(null, last_line_empty_QMARK_, text), state], null);
      }
    } else {
      if (cljs.core.truth_(function() {
        var and__4097__auto__ = cljs.core.not.call(null, eof);
        if (and__4097__auto__) {
          return last_line_empty_QMARK_;
        } else {
          return and__4097__auto__;
        }
      }())) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3cp\x3e"), cljs.core.str(text)].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "paragraph", "paragraph", 296707709), true, new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), false)], null);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
      }
    }
  }
};
markdown.transformers.code = function markdown$transformers$code(text, p__22130) {
  var map__22132 = p__22130;
  var map__22132__$1 = cljs.core.seq_QMARK_.call(null, map__22132) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22132) : map__22132;
  var state = map__22132__$1;
  var codeblock = cljs.core.get.call(null, map__22132__$1, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855));
  var code__$1 = cljs.core.get.call(null, map__22132__$1, new cljs.core.Keyword(null, "code", "code", 1586293142));
  var lists = cljs.core.get.call(null, map__22132__$1, new cljs.core.Keyword(null, "lists", "lists", -884730684));
  var eof = cljs.core.get.call(null, map__22132__$1, new cljs.core.Keyword(null, "eof", "eof", -489063237));
  if (cljs.core.truth_(function() {
    var or__4109__auto__ = lists;
    if (cljs.core.truth_(or__4109__auto__)) {
      return or__4109__auto__;
    } else {
      return codeblock;
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    if (cljs.core.truth_(code__$1)) {
      if (cljs.core.truth_(function() {
        var or__4109__auto__ = eof;
        if (cljs.core.truth_(or__4109__auto__)) {
          return or__4109__auto__;
        } else {
          return cljs.core.not_EQ_.call(null, "    ", clojure.string.join.call(null, cljs.core.take.call(null, 4, text)));
        }
      }())) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\n\x3c/code\x3e\x3c/pre\x3e"), cljs.core.str(text)].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "code", "code", 1586293142), false, new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), false)], null);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\n"), cljs.core.str(markdown.transformers.escape_code.call(null, clojure.string.replace_first.call(null, text, /    /, "")))].join(""), state], null);
      }
    } else {
      if (cljs.core.empty_QMARK_.call(null, clojure.string.trim.call(null, text))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
      } else {
        var num_spaces = cljs.core.count.call(null, cljs.core.take_while.call(null, cljs.core.partial.call(null, cljs.core._EQ_, " "), text));
        if (num_spaces > 3) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3cpre\x3e\x3ccode\x3e"), cljs.core.str(markdown.transformers.escape_code.call(null, clojure.string.replace_first.call(null, text, /    /, "")))].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "code", "code", 1586293142), true)], null);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
        }
      }
    }
  }
};
markdown.transformers.codeblock = function markdown$transformers$codeblock(text, state) {
  var trimmed = clojure.string.trim.call(null, text);
  if (cljs.core.truth_(function() {
    var and__4097__auto__ = cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`", "`", "`"], null), cljs.core.take.call(null, 3, trimmed));
    if (and__4097__auto__) {
      return(new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855)).cljs$core$IFn$_invoke$arity$1(state);
    } else {
      return and__4097__auto__;
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3c/code\x3e\x3c/pre\x3e"), cljs.core.str(clojure.string.join.call(null, cljs.core.drop.call(null, 3, trimmed)))].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "code", "code", 1586293142), false, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855), false, new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), false)], null)
    ;
  } else {
    if (cljs.core.truth_(function() {
      var and__4097__auto__ = cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`", "`", "`"], null), cljs.core.take_last.call(null, 3, trimmed));
      if (and__4097__auto__) {
        return(new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855)).cljs$core$IFn$_invoke$arity$1(state);
      } else {
        return and__4097__auto__;
      }
    }())) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3c/code\x3e\x3c/pre\x3e"), cljs.core.str(clojure.string.join.call(null, cljs.core.drop_last.call(null, 3, trimmed)))].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "code", "code", 1586293142), false, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855), false, new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), false)], 
      null);
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`", "`", "`"], null), cljs.core.take.call(null, 3, trimmed))) {
        var vec__22134 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, " "), cljs.core.drop.call(null, 3, trimmed));
        var lang = cljs.core.nth.call(null, vec__22134, 0, null);
        var code = cljs.core.nth.call(null, vec__22134, 1, null);
        var s = cljs.core.apply.call(null, cljs.core.str, cljs.core.rest.call(null, code));
        var formatter = (new cljs.core.Keyword(null, "code-style", "code-style", -2144009586)).cljs$core$IFn$_invoke$arity$1(state);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3cpre\x3e\x3ccode"), cljs.core.str(cljs.core.truth_(cljs.core.not_empty.call(null, lang)) ? [cljs.core.str(" "), cljs.core.str(cljs.core.truth_(formatter) ? formatter.call(null, clojure.string.join.call(null, lang)) : [cljs.core.str('class\x3d"'), cljs.core.str(clojure.string.join.call(null, lang)), cljs.core.str('"')].join(""))].join("") : null), cljs.core.str("\x3e"), cljs.core.str(markdown.transformers.escape_code.call(null, 
        cljs.core.empty_QMARK_.call(null, s) ? s : [cljs.core.str(s), cljs.core.str("\n")].join("")))].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "code", "code", 1586293142), true, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855), true)], null);
      } else {
        if (cljs.core.truth_((new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855)).cljs$core$IFn$_invoke$arity$1(state))) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str(markdown.transformers.escape_code.call(null, text)), cljs.core.str("\n")].join(""), state], null);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
        }
      }
    }
  }
};
markdown.transformers.hr = function markdown$transformers$hr(text, state) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(state))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    if ((cljs.core.empty_QMARK_.call(null, cljs.core.drop_while.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [" ", null, "*", null], null), null), text)) || cljs.core.empty_QMARK_.call(null, cljs.core.drop_while.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [" ", null, "-", null], null), null), text)) || cljs.core.empty_QMARK_.call(null, cljs.core.drop_while.call(null, new cljs.core.PersistentHashSet(null, 
    new cljs.core.PersistentArrayMap(null, 2, [" ", null, "_", null], null), null), text))) && cljs.core.count.call(null, cljs.core.remove.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [" ", null], null), null), text)) > 2) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3chr/\x3e")].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "hr", "hr", 1377740067), true)], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
    }
  }
};
markdown.transformers.blockquote = function markdown$transformers$blockquote(text, p__22135) {
  var map__22137 = p__22135;
  var map__22137__$1 = cljs.core.seq_QMARK_.call(null, map__22137) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22137) : map__22137;
  var state = map__22137__$1;
  var lists = cljs.core.get.call(null, map__22137__$1, new cljs.core.Keyword(null, "lists", "lists", -884730684));
  var codeblock = cljs.core.get.call(null, map__22137__$1, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855));
  var code = cljs.core.get.call(null, map__22137__$1, new cljs.core.Keyword(null, "code", "code", 1586293142));
  var eof = cljs.core.get.call(null, map__22137__$1, new cljs.core.Keyword(null, "eof", "eof", -489063237));
  var trimmed = clojure.string.trim.call(null, text);
  if (cljs.core.truth_(function() {
    var or__4109__auto__ = code;
    if (cljs.core.truth_(or__4109__auto__)) {
      return or__4109__auto__;
    } else {
      var or__4109__auto____$1 = codeblock;
      if (cljs.core.truth_(or__4109__auto____$1)) {
        return or__4109__auto____$1;
      } else {
        return lists;
      }
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "blockquote", "blockquote", 372264190)).cljs$core$IFn$_invoke$arity$1(state))) {
      if (cljs.core.truth_(function() {
        var or__4109__auto__ = eof;
        if (cljs.core.truth_(or__4109__auto__)) {
          return or__4109__auto__;
        } else {
          return cljs.core.empty_QMARK_.call(null, trimmed);
        }
      }())) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["\x3c/p\x3e\x3c/blockquote\x3e", cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "blockquote", "blockquote", 372264190), false)], null);
      } else {
        if (cljs.core._EQ_.call(null, "\x3e-", cljs.core.subs.call(null, trimmed, 0, 2))) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3c/p\x3e\x3cfooter\x3e"), cljs.core.str(cljs.core.subs.call(null, text, 2)), cljs.core.str("\x3c/footer\x3e\x3cp\x3e")].join(""), state], null);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str(text), cljs.core.str(" ")].join(""), state], null);
        }
      }
    } else {
      if (cljs.core._EQ_.call(null, "\x3e", cljs.core.first.call(null, text))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3cblockquote\x3e\x3cp\x3e"), cljs.core.str(clojure.string.join.call(null, cljs.core.rest.call(null, text))), cljs.core.str(" ")].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "blockquote", "blockquote", 372264190), true)], null);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
      }
    }
  }
};
markdown.transformers.href = function markdown$transformers$href(title, link) {
  return markdown.transformers.escape_link.call(null, cljs.core.seq.call(null, "\x3ca href\x3d'"), link, cljs.core.seq.call(null, "'\x3e"), title, cljs.core.seq.call(null, "\x3c/a\x3e"));
};
markdown.transformers.img = function() {
  var markdown$transformers$img__delegate = function(alt, url, p__22138) {
    var vec__22140 = p__22138;
    var title = cljs.core.nth.call(null, vec__22140, 0, null);
    return markdown.transformers.escape_link.call(null, cljs.core.seq.call(null, '\x3cimg src\x3d"'), url, cljs.core.seq.call(null, '" alt\x3d"'), alt, cljs.core.truth_(cljs.core.not_empty.call(null, title)) ? cljs.core.seq.call(null, cljs.core.apply.call(null, cljs.core.str, '" title\x3d', clojure.string.join.call(null, title), " /\x3e")) : cljs.core.seq.call(null, '" /\x3e'));
  };
  var markdown$transformers$img = function(alt, url, var_args) {
    var p__22138 = null;
    if (arguments.length > 2) {
      var G__22141__i = 0, G__22141__a = new Array(arguments.length - 2);
      while (G__22141__i < G__22141__a.length) {
        G__22141__a[G__22141__i] = arguments[G__22141__i + 2];
        ++G__22141__i;
      }
      p__22138 = new cljs.core.IndexedSeq(G__22141__a, 0);
    }
    return markdown$transformers$img__delegate.call(this, alt, url, p__22138);
  };
  markdown$transformers$img.cljs$lang$maxFixedArity = 2;
  markdown$transformers$img.cljs$lang$applyTo = function(arglist__22142) {
    var alt = cljs.core.first(arglist__22142);
    arglist__22142 = cljs.core.next(arglist__22142);
    var url = cljs.core.first(arglist__22142);
    var p__22138 = cljs.core.rest(arglist__22142);
    return markdown$transformers$img__delegate(alt, url, p__22138);
  };
  markdown$transformers$img.cljs$core$IFn$_invoke$arity$variadic = markdown$transformers$img__delegate;
  return markdown$transformers$img;
}();
markdown.transformers.handle_img_link = function markdown$transformers$handle_img_link(xs) {
  if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["[", "!", "["], null), cljs.core.take.call(null, 3, xs))) {
    var xs__$1 = cljs.core.drop.call(null, 3, xs);
    var vec__22146 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, "]"), xs__$1);
    var alt = cljs.core.nth.call(null, vec__22146, 0, null);
    var xy = cljs.core.nth.call(null, vec__22146, 1, null);
    var vec__22147 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, ")"), cljs.core.drop.call(null, 2, xy));
    var url_title = cljs.core.nth.call(null, vec__22147, 0, null);
    var zy = cljs.core.nth.call(null, vec__22147, 1, null);
    var vec__22148 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, " "), url_title);
    var url = cljs.core.nth.call(null, vec__22148, 0, null);
    var title = cljs.core.nth.call(null, vec__22148, 1, null);
    return cljs.core.concat.call(null, "[", markdown.transformers.img.call(null, alt, url, cljs.core.not_empty.call(null, title)), cljs.core.rest.call(null, zy));
  } else {
    return xs;
  }
};
markdown.transformers.link = function markdown$transformers$link(text, p__22149) {
  var map__22156 = p__22149;
  var map__22156__$1 = cljs.core.seq_QMARK_.call(null, map__22156) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22156) : map__22156;
  var state = map__22156__$1;
  var codeblock = cljs.core.get.call(null, map__22156__$1, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855));
  var code = cljs.core.get.call(null, map__22156__$1, new cljs.core.Keyword(null, "code", "code", 1586293142));
  if (cljs.core.truth_(function() {
    var or__4109__auto__ = code;
    if (cljs.core.truth_(or__4109__auto__)) {
      return or__4109__auto__;
    } else {
      return codeblock;
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    var out = cljs.core.PersistentVector.EMPTY;
    var tokens = cljs.core.seq.call(null, text);
    while (true) {
      if (cljs.core.empty_QMARK_.call(null, tokens)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.join.call(null, out), state], null);
      } else {
        var vec__22157 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, "["), tokens);
        var head = cljs.core.nth.call(null, vec__22157, 0, null);
        var xs = cljs.core.nth.call(null, vec__22157, 1, null);
        var xs__$1 = markdown.transformers.handle_img_link.call(null, xs);
        var vec__22158 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, "]"), xs__$1);
        var title = cljs.core.nth.call(null, vec__22158, 0, null);
        var ys = cljs.core.nth.call(null, vec__22158, 1, null);
        var vec__22159 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, "("), ys);
        var dud = cljs.core.nth.call(null, vec__22159, 0, null);
        var zs = cljs.core.nth.call(null, vec__22159, 1, null);
        var vec__22160 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, ")"), zs);
        var link__$1 = cljs.core.nth.call(null, vec__22160, 0, null);
        var tail = cljs.core.nth.call(null, vec__22160, 1, null);
        if (cljs.core.count.call(null, link__$1) < 2 || cljs.core.count.call(null, tail) < 1 || cljs.core.count.call(null, dud) > 1) {
          var G__22162 = cljs.core.concat.call(null, out, head, title, dud, link__$1);
          var G__22163 = tail;
          out = G__22162;
          tokens = G__22163;
          continue;
        } else {
          var G__22164 = cljs.core.into.call(null, out, cljs.core._EQ_.call(null, cljs.core.last.call(null, head), "!") ? function() {
            var alt = cljs.core.rest.call(null, title);
            var vec__22161 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, " "), cljs.core.rest.call(null, link__$1));
            var url = cljs.core.nth.call(null, vec__22161, 0, null);
            var title__$1 = cljs.core.nth.call(null, vec__22161, 1, null);
            var title__$2 = clojure.string.join.call(null, cljs.core.rest.call(null, title__$1));
            return cljs.core.concat.call(null, cljs.core.butlast.call(null, head), markdown.transformers.img.call(null, alt, url, title__$2));
          }() : cljs.core.concat.call(null, head, markdown.transformers.href.call(null, cljs.core.rest.call(null, title), cljs.core.rest.call(null, link__$1))));
          var G__22165 = cljs.core.rest.call(null, tail);
          out = G__22164;
          tokens = G__22165;
          continue;
        }
      }
      break;
    }
  }
};
markdown.transformers.reference = function markdown$transformers$reference(text) {
  return cljs.core.re_find.call(null, /^\[[a-zA-Z0-9 ]+\]:/, text);
};
markdown.transformers.parse_reference = function markdown$transformers$parse_reference(reference, start) {
  return clojure.string.split.call(null, clojure.string.trim.call(null, cljs.core.subs.call(null, reference, start)), /\s+/, 2);
};
markdown.transformers.parse_reference_link = function markdown$transformers$parse_reference_link(line, references) {
  var trimmed = clojure.string.trim.call(null, line);
  var temp__4126__auto__ = markdown.transformers.reference.call(null, trimmed);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var link = temp__4126__auto__;
    return cljs.core.swap_BANG_.call(null, references, cljs.core.assoc, cljs.core.subs.call(null, link, 0, cljs.core.count.call(null, link) - 1), markdown.transformers.parse_reference.call(null, trimmed, cljs.core.count.call(null, link) + 1));
  } else {
    return null;
  }
};
markdown.transformers.replace_reference_link = function markdown$transformers$replace_reference_link(references, reference) {
  var vec__22168 = clojure.string.split.call(null, reference, /\]\s*/, 2);
  var title = cljs.core.nth.call(null, vec__22168, 0, null);
  var id = cljs.core.nth.call(null, vec__22168, 1, null);
  var vec__22169 = cljs.core.get.call(null, references, id);
  var link = cljs.core.nth.call(null, vec__22169, 0, null);
  var alt = cljs.core.nth.call(null, vec__22169, 1, null);
  return[cljs.core.str("\x3ca href\x3d'"), cljs.core.str(link), cljs.core.str("'"), cljs.core.str(cljs.core.truth_(alt) ? [cljs.core.str(" title\x3d'"), cljs.core.str(cljs.core.subs.call(null, alt, 1, cljs.core.count.call(null, alt) - 1)), cljs.core.str("'")].join("") : null), cljs.core.str("\x3e"), cljs.core.str(cljs.core.subs.call(null, title, 1)), cljs.core.str("\x3c/a\x3e")].join("");
};
markdown.transformers.reference_link = function markdown$transformers$reference_link(text, p__22170) {
  var map__22172 = p__22170;
  var map__22172__$1 = cljs.core.seq_QMARK_.call(null, map__22172) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22172) : map__22172;
  var state = map__22172__$1;
  var references = cljs.core.get.call(null, map__22172__$1, new cljs.core.Keyword(null, "references", "references", 882562509));
  var codeblock = cljs.core.get.call(null, map__22172__$1, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855));
  var code = cljs.core.get.call(null, map__22172__$1, new cljs.core.Keyword(null, "code", "code", 1586293142));
  if (references == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    if (cljs.core.truth_(markdown.transformers.reference.call(null, clojure.string.trim.call(null, text)))) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", state], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_(function() {
        var or__4109__auto__ = code;
        if (cljs.core.truth_(or__4109__auto__)) {
          return or__4109__auto__;
        } else {
          return codeblock;
        }
      }()) ? text : clojure.string.replace.call(null, text, /\[[a-zA-Z0-9 ]+\]\s*\[[a-zA-Z0-9 ]+\]/, cljs.core.partial.call(null, markdown.transformers.replace_reference_link, references)), state], null);
    }
  }
};
markdown.transformers.close_lists = function markdown$transformers$close_lists(lists) {
  return clojure.string.join.call(null, function() {
    var iter__4863__auto__ = function markdown$transformers$close_lists_$_iter__22181(s__22182) {
      return new cljs.core.LazySeq(null, function() {
        var s__22182__$1 = s__22182;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__22182__$1);
          if (temp__4126__auto__) {
            var s__22182__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__22182__$2)) {
              var c__4861__auto__ = cljs.core.chunk_first.call(null, s__22182__$2);
              var size__4862__auto__ = cljs.core.count.call(null, c__4861__auto__);
              var b__22184 = cljs.core.chunk_buffer.call(null, size__4862__auto__);
              if (function() {
                var i__22183 = 0;
                while (true) {
                  if (i__22183 < size__4862__auto__) {
                    var vec__22187 = cljs.core._nth.call(null, c__4861__auto__, i__22183);
                    var list_type = cljs.core.nth.call(null, vec__22187, 0, null);
                    cljs.core.chunk_append.call(null, b__22184, [cljs.core.str("\x3c/li\x3e\x3c/"), cljs.core.str(cljs.core.name.call(null, list_type)), cljs.core.str("\x3e")].join(""));
                    var G__22189 = i__22183 + 1;
                    i__22183 = G__22189;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__22184), markdown$transformers$close_lists_$_iter__22181.call(null, cljs.core.chunk_rest.call(null, s__22182__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__22184), null);
              }
            } else {
              var vec__22188 = cljs.core.first.call(null, s__22182__$2);
              var list_type = cljs.core.nth.call(null, vec__22188, 0, null);
              return cljs.core.cons.call(null, [cljs.core.str("\x3c/li\x3e\x3c/"), cljs.core.str(cljs.core.name.call(null, list_type)), cljs.core.str("\x3e")].join(""), markdown$transformers$close_lists_$_iter__22181.call(null, cljs.core.rest.call(null, s__22182__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4863__auto__.call(null, lists);
  }());
};
markdown.transformers.add_row = function markdown$transformers$add_row(row_type, list_type, num_indents, indents, content, state) {
  if (cljs.core.truth_(list_type)) {
    if (num_indents < indents) {
      var lists_to_close = cljs.core.take_while.call(null, function(p1__22190_SHARP_) {
        return cljs.core.second.call(null, p1__22190_SHARP_) > num_indents;
      }, cljs.core.reverse.call(null, (new cljs.core.Keyword(null, "lists", "lists", -884730684)).cljs$core$IFn$_invoke$arity$1(state)));
      var remaining_lists = cljs.core.vec.call(null, cljs.core.drop_last.call(null, cljs.core.count.call(null, lists_to_close), (new cljs.core.Keyword(null, "lists", "lists", -884730684)).cljs$core$IFn$_invoke$arity$1(state)));
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, cljs.core.str, markdown.transformers.close_lists.call(null, lists_to_close), "\x3c/li\x3e\x3cli\x3e", content), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "lists", "lists", -884730684), num_indents > cljs.core.second.call(null, cljs.core.last.call(null, remaining_lists)) ? cljs.core.conj.call(null, remaining_lists, new cljs.core.PersistentVector(null, 2, 5, 
      cljs.core.PersistentVector.EMPTY_NODE, [row_type, num_indents], null)) : remaining_lists)], null);
    } else {
      if (num_indents > indents) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3c"), cljs.core.str(cljs.core.name.call(null, row_type)), cljs.core.str("\x3e\x3cli\x3e"), cljs.core.str(content)].join(""), cljs.core.update_in.call(null, state, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "lists", "lists", -884730684)], null), cljs.core.conj, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
        [row_type, num_indents], null))], null);
      } else {
        if (cljs.core._EQ_.call(null, num_indents, indents)) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3c/li\x3e\x3cli\x3e"), cljs.core.str(content)].join(""), state], null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3c"), cljs.core.str(cljs.core.name.call(null, row_type)), cljs.core.str("\x3e\x3cli\x3e"), cljs.core.str(content)].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "lists", "lists", -884730684), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [row_type, 
    num_indents], null)], null))], null);
  }
};
markdown.transformers.ul = function markdown$transformers$ul(text, state) {
  var vec__22192 = cljs.core.last.call(null, (new cljs.core.Keyword(null, "lists", "lists", -884730684)).cljs$core$IFn$_invoke$arity$1(state));
  var list_type = cljs.core.nth.call(null, vec__22192, 0, null);
  var indents = cljs.core.nth.call(null, vec__22192, 1, null);
  var num_indents = cljs.core.count.call(null, cljs.core.take_while.call(null, cljs.core.partial.call(null, cljs.core._EQ_, " "), text));
  var content = clojure.string.trim.call(null, markdown.transformers._STAR_substring_STAR_.call(null, text, num_indents + 1));
  return markdown.transformers.add_row.call(null, new cljs.core.Keyword(null, "ul", "ul", -1349521403), list_type, num_indents, indents, function() {
    var or__4109__auto__ = markdown.transformers.make_heading.call(null, content, false);
    if (cljs.core.truth_(or__4109__auto__)) {
      return or__4109__auto__;
    } else {
      return content;
    }
  }(), state);
};
markdown.transformers.ol = function markdown$transformers$ol(text, state) {
  var vec__22194 = cljs.core.last.call(null, (new cljs.core.Keyword(null, "lists", "lists", -884730684)).cljs$core$IFn$_invoke$arity$1(state));
  var list_type = cljs.core.nth.call(null, vec__22194, 0, null);
  var indents = cljs.core.nth.call(null, vec__22194, 1, null);
  var num_indents = cljs.core.count.call(null, cljs.core.take_while.call(null, cljs.core.partial.call(null, cljs.core._EQ_, " "), text));
  var content = clojure.string.trim.call(null, clojure.string.join.call(null, cljs.core.drop_while.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, " "), clojure.string.trim.call(null, text))));
  return markdown.transformers.add_row.call(null, new cljs.core.Keyword(null, "ol", "ol", 932524051), list_type, num_indents, indents, function() {
    var or__4109__auto__ = markdown.transformers.make_heading.call(null, content, false);
    if (cljs.core.truth_(or__4109__auto__)) {
      return or__4109__auto__;
    } else {
      return content;
    }
  }(), state);
};
markdown.transformers.li = function markdown$transformers$li(text, p__22195) {
  var map__22197 = p__22195;
  var map__22197__$1 = cljs.core.seq_QMARK_.call(null, map__22197) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22197) : map__22197;
  var state = map__22197__$1;
  var lists = cljs.core.get.call(null, map__22197__$1, new cljs.core.Keyword(null, "lists", "lists", -884730684));
  var eof = cljs.core.get.call(null, map__22197__$1, new cljs.core.Keyword(null, "eof", "eof", -489063237));
  var last_line_empty_QMARK_ = cljs.core.get.call(null, map__22197__$1, new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527));
  var codeblock = cljs.core.get.call(null, map__22197__$1, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855));
  var code = cljs.core.get.call(null, map__22197__$1, new cljs.core.Keyword(null, "code", "code", 1586293142));
  if (cljs.core.truth_(function() {
    var and__4097__auto__ = last_line_empty_QMARK_;
    if (cljs.core.truth_(and__4097__auto__)) {
      return clojure.string.blank_QMARK_.call(null, text);
    } else {
      return and__4097__auto__;
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str(markdown.transformers.close_lists.call(null, cljs.core.reverse.call(null, lists))), cljs.core.str(text)].join(""), cljs.core.assoc.call(null, cljs.core.dissoc.call(null, state, new cljs.core.Keyword(null, "lists", "lists", -884730684)), new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), false)], null);
  } else {
    if (cljs.core.truth_(function() {
      var or__4109__auto__ = code;
      if (cljs.core.truth_(or__4109__auto__)) {
        return or__4109__auto__;
      } else {
        return codeblock;
      }
    }())) {
      if (cljs.core.truth_(function() {
        var and__4097__auto__ = lists;
        if (cljs.core.truth_(and__4097__auto__)) {
          var or__4109__auto__ = last_line_empty_QMARK_;
          if (cljs.core.truth_(or__4109__auto__)) {
            return or__4109__auto__;
          } else {
            return eof;
          }
        } else {
          return and__4097__auto__;
        }
      }())) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str(markdown.transformers.close_lists.call(null, cljs.core.reverse.call(null, lists))), cljs.core.str(text)].join(""), cljs.core.assoc.call(null, cljs.core.dissoc.call(null, state, new cljs.core.Keyword(null, "lists", "lists", -884730684)), new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), false)], null);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
      }
    } else {
      if (cljs.core.truth_(function() {
        var and__4097__auto__ = cljs.core.not.call(null, eof);
        if (and__4097__auto__) {
          var and__4097__auto____$1 = lists;
          if (cljs.core.truth_(and__4097__auto____$1)) {
            return clojure.string.blank_QMARK_.call(null, text);
          } else {
            return and__4097__auto____$1;
          }
        } else {
          return and__4097__auto__;
        }
      }())) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), true)], null);
      } else {
        var indents = cljs.core.count.call(null, cljs.core.take_while.call(null, cljs.core.partial.call(null, cljs.core._EQ_, " "), text));
        var trimmed = clojure.string.trim.call(null, text);
        if (cljs.core.truth_(cljs.core.re_find.call(null, /^[\*\+-] /, trimmed))) {
          return markdown.transformers.ul.call(null, text, state);
        } else {
          if (cljs.core.truth_(cljs.core.re_find.call(null, /^[0-9]+\. /, trimmed))) {
            return markdown.transformers.ol.call(null, text, state);
          } else {
            if (indents > 0) {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
            } else {
              if (cljs.core.truth_(function() {
                var and__4097__auto__ = function() {
                  var or__4109__auto__ = eof;
                  if (cljs.core.truth_(or__4109__auto__)) {
                    return or__4109__auto__;
                  } else {
                    return last_line_empty_QMARK_;
                  }
                }();
                if (cljs.core.truth_(and__4097__auto__)) {
                  return cljs.core.not_empty.call(null, lists);
                } else {
                  return and__4097__auto__;
                }
              }())) {
                return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.transformers.close_lists.call(null, cljs.core.reverse.call(null, lists)), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "lists", "lists", -884730684), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "buf", "buf", -213913340), text)], null);
              } else {
                return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
              }
            }
          }
        }
      }
    }
  }
};
markdown.transformers.transformer_vector = new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.transformers.empty_line, markdown.transformers.codeblock, markdown.transformers.code, markdown.transformers.escaped_chars, markdown.transformers.inline_code, markdown.transformers.autoemail_transformer, markdown.transformers.autourl_transformer, markdown.transformers.link, markdown.transformers.reference_link, markdown.transformers.hr, markdown.transformers.li, markdown.transformers.heading, 
markdown.transformers.italics, markdown.transformers.em, markdown.transformers.strong, markdown.transformers.bold, markdown.transformers.strikethrough, markdown.transformers.superscript, markdown.transformers.blockquote, markdown.transformers.paragraph, markdown.transformers.br], null);
goog.provide("markdown.core");
goog.require("cljs.core");
goog.require("markdown.transformers");
markdown.core.init_transformer = function markdown$core$init_transformer(p__22023) {
  var map__22029 = p__22023;
  var map__22029__$1 = cljs.core.seq_QMARK_.call(null, map__22029) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22029) : map__22029;
  var custom_transformers = cljs.core.get.call(null, map__22029__$1, new cljs.core.Keyword(null, "custom-transformers", "custom-transformers", 1440601790));
  var replacement_transformers = cljs.core.get.call(null, map__22029__$1, new cljs.core.Keyword(null, "replacement-transformers", "replacement-transformers", -2028552897));
  return function(map__22029, map__22029__$1, custom_transformers, replacement_transformers) {
    return function(html, line, next_line, state) {
      var _STAR_next_line_STAR_22030 = markdown.transformers._STAR_next_line_STAR_;
      markdown.transformers._STAR_next_line_STAR_ = next_line;
      try {
        var vec__22031 = cljs.core.reduce.call(null, function(_STAR_next_line_STAR_22030, map__22029, map__22029__$1, custom_transformers, replacement_transformers) {
          return function(p__22032, transformer) {
            var vec__22033 = p__22032;
            var text = cljs.core.nth.call(null, vec__22033, 0, null);
            var state__$1 = cljs.core.nth.call(null, vec__22033, 1, null);
            return transformer.call(null, text, state__$1);
          };
        }(_STAR_next_line_STAR_22030, map__22029, map__22029__$1, custom_transformers, replacement_transformers), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [line, state], null), function() {
          var or__4109__auto__ = replacement_transformers;
          if (cljs.core.truth_(or__4109__auto__)) {
            return or__4109__auto__;
          } else {
            return cljs.core.into.call(null, markdown.transformers.transformer_vector, custom_transformers);
          }
        }());
        var text = cljs.core.nth.call(null, vec__22031, 0, null);
        var new_state = cljs.core.nth.call(null, vec__22031, 1, null);
        html.append(text);
        return new_state;
      } finally {
        markdown.transformers._STAR_next_line_STAR_ = _STAR_next_line_STAR_22030;
      }
    };
  }(map__22029, map__22029__$1, custom_transformers, replacement_transformers);
};
markdown.core.format = function() {
  var markdown$core$format__delegate = function(fmt, args) {
    return cljs.core.apply.call(null, goog.string.format, fmt, args);
  };
  var markdown$core$format = function(fmt, var_args) {
    var args = null;
    if (arguments.length > 1) {
      var G__22034__i = 0, G__22034__a = new Array(arguments.length - 1);
      while (G__22034__i < G__22034__a.length) {
        G__22034__a[G__22034__i] = arguments[G__22034__i + 1];
        ++G__22034__i;
      }
      args = new cljs.core.IndexedSeq(G__22034__a, 0);
    }
    return markdown$core$format__delegate.call(this, fmt, args);
  };
  markdown$core$format.cljs$lang$maxFixedArity = 1;
  markdown$core$format.cljs$lang$applyTo = function(arglist__22035) {
    var fmt = cljs.core.first(arglist__22035);
    var args = cljs.core.rest(arglist__22035);
    return markdown$core$format__delegate(fmt, args);
  };
  markdown$core$format.cljs$core$IFn$_invoke$arity$variadic = markdown$core$format__delegate;
  return markdown$core$format;
}();
markdown.core.parse_referenes = function markdown$core$parse_referenes(lines) {
  var references = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var seq__22040_22044 = cljs.core.seq.call(null, lines);
  var chunk__22041_22045 = null;
  var count__22042_22046 = 0;
  var i__22043_22047 = 0;
  while (true) {
    if (i__22043_22047 < count__22042_22046) {
      var line_22048 = cljs.core._nth.call(null, chunk__22041_22045, i__22043_22047);
      markdown.transformers.parse_reference_link.call(null, line_22048, references);
      var G__22049 = seq__22040_22044;
      var G__22050 = chunk__22041_22045;
      var G__22051 = count__22042_22046;
      var G__22052 = i__22043_22047 + 1;
      seq__22040_22044 = G__22049;
      chunk__22041_22045 = G__22050;
      count__22042_22046 = G__22051;
      i__22043_22047 = G__22052;
      continue;
    } else {
      var temp__4126__auto___22053 = cljs.core.seq.call(null, seq__22040_22044);
      if (temp__4126__auto___22053) {
        var seq__22040_22054__$1 = temp__4126__auto___22053;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__22040_22054__$1)) {
          var c__4894__auto___22055 = cljs.core.chunk_first.call(null, seq__22040_22054__$1);
          var G__22056 = cljs.core.chunk_rest.call(null, seq__22040_22054__$1);
          var G__22057 = c__4894__auto___22055;
          var G__22058 = cljs.core.count.call(null, c__4894__auto___22055);
          var G__22059 = 0;
          seq__22040_22044 = G__22056;
          chunk__22041_22045 = G__22057;
          count__22042_22046 = G__22058;
          i__22043_22047 = G__22059;
          continue;
        } else {
          var line_22060 = cljs.core.first.call(null, seq__22040_22054__$1);
          markdown.transformers.parse_reference_link.call(null, line_22060, references);
          var G__22061 = cljs.core.next.call(null, seq__22040_22054__$1);
          var G__22062 = null;
          var G__22063 = 0;
          var G__22064 = 0;
          seq__22040_22044 = G__22061;
          chunk__22041_22045 = G__22062;
          count__22042_22046 = G__22063;
          i__22043_22047 = G__22064;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return cljs.core.deref.call(null, references);
};
markdown.core.md__GT_html = function() {
  var markdown$core$md__GT_html__delegate = function(text, params) {
    var _STAR_substring_STAR_22071 = markdown.transformers._STAR_substring_STAR_;
    var formatter22072 = markdown.transformers.formatter;
    markdown.transformers._STAR_substring_STAR_ = function(_STAR_substring_STAR_22071, formatter22072) {
      return function(s, n) {
        return cljs.core.apply.call(null, cljs.core.str, cljs.core.drop.call(null, n, s));
      };
    }(_STAR_substring_STAR_22071, formatter22072);
    markdown.transformers.formatter = markdown.core.format;
    try {
      var params__$1 = cljs.core.truth_(params) ? cljs.core.apply.call(null, cljs.core.partial.call(null, cljs.core.assoc, cljs.core.PersistentArrayMap.EMPTY), params) : null;
      var lines = text.split("\n");
      var html = new goog.string.StringBuffer("");
      var references = cljs.core.truth_((new cljs.core.Keyword(null, "reference-links?", "reference-links?", -2003778981)).cljs$core$IFn$_invoke$arity$1(params__$1)) ? markdown.core.parse_referenes.call(null, lines) : null;
      var transformer = markdown.core.init_transformer.call(null, params__$1);
      var G__22074_22077 = lines;
      var vec__22075_22078 = G__22074_22077;
      var line_22079 = cljs.core.nth.call(null, vec__22075_22078, 0, null);
      var more_22080 = cljs.core.nthnext.call(null, vec__22075_22078, 1);
      var state_22081 = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "clojurescript", "clojurescript", -299769403), true, new cljs.core.Keyword(null, "references", "references", 882562509), references, new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), true], null), params__$1);
      var G__22074_22082__$1 = G__22074_22077;
      var state_22083__$1 = state_22081;
      while (true) {
        var vec__22076_22084 = G__22074_22082__$1;
        var line_22085__$1 = cljs.core.nth.call(null, vec__22076_22084, 0, null);
        var more_22086__$1 = cljs.core.nthnext.call(null, vec__22076_22084, 1);
        var state_22087__$2 = state_22083__$1;
        var state_22088__$3 = cljs.core.truth_((new cljs.core.Keyword(null, "buf", "buf", -213913340)).cljs$core$IFn$_invoke$arity$1(state_22087__$2)) ? transformer.call(null, html, (new cljs.core.Keyword(null, "buf", "buf", -213913340)).cljs$core$IFn$_invoke$arity$1(state_22087__$2), cljs.core.first.call(null, more_22086__$1), cljs.core.assoc.call(null, cljs.core.dissoc.call(null, state_22087__$2, new cljs.core.Keyword(null, "buf", "buf", -213913340), new cljs.core.Keyword(null, "lists", "lists", 
        -884730684)), new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), true)) : state_22087__$2;
        if (cljs.core.truth_(cljs.core.first.call(null, more_22086__$1))) {
          var G__22089 = more_22086__$1;
          var G__22090 = cljs.core.assoc.call(null, transformer.call(null, html, line_22085__$1, cljs.core.first.call(null, more_22086__$1), state_22088__$3), new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), cljs.core.empty_QMARK_.call(null, line_22085__$1));
          G__22074_22082__$1 = G__22089;
          state_22083__$1 = G__22090;
          continue;
        } else {
          transformer.call(null, html, line_22085__$1, "", cljs.core.assoc.call(null, state_22088__$3, new cljs.core.Keyword(null, "eof", "eof", -489063237), true));
        }
        break;
      }
      return html.toString();
    } finally {
      markdown.transformers.formatter = formatter22072;
      markdown.transformers._STAR_substring_STAR_ = _STAR_substring_STAR_22071;
    }
  };
  var markdown$core$md__GT_html = function(text, var_args) {
    var params = null;
    if (arguments.length > 1) {
      var G__22091__i = 0, G__22091__a = new Array(arguments.length - 1);
      while (G__22091__i < G__22091__a.length) {
        G__22091__a[G__22091__i] = arguments[G__22091__i + 1];
        ++G__22091__i;
      }
      params = new cljs.core.IndexedSeq(G__22091__a, 0);
    }
    return markdown$core$md__GT_html__delegate.call(this, text, params);
  };
  markdown$core$md__GT_html.cljs$lang$maxFixedArity = 1;
  markdown$core$md__GT_html.cljs$lang$applyTo = function(arglist__22092) {
    var text = cljs.core.first(arglist__22092);
    var params = cljs.core.rest(arglist__22092);
    return markdown$core$md__GT_html__delegate(text, params);
  };
  markdown$core$md__GT_html.cljs$core$IFn$_invoke$arity$variadic = markdown$core$md__GT_html__delegate;
  return markdown$core$md__GT_html;
}();
markdown.core.mdToHtml = function() {
  var markdown$core$mdToHtml__delegate = function(params) {
    return cljs.core.apply.call(null, markdown.core.md__GT_html, params);
  };
  var markdown$core$mdToHtml = function(var_args) {
    var params = null;
    if (arguments.length > 0) {
      var G__22093__i = 0, G__22093__a = new Array(arguments.length - 0);
      while (G__22093__i < G__22093__a.length) {
        G__22093__a[G__22093__i] = arguments[G__22093__i + 0];
        ++G__22093__i;
      }
      params = new cljs.core.IndexedSeq(G__22093__a, 0);
    }
    return markdown$core$mdToHtml__delegate.call(this, params);
  };
  markdown$core$mdToHtml.cljs$lang$maxFixedArity = 0;
  markdown$core$mdToHtml.cljs$lang$applyTo = function(arglist__22094) {
    var params = cljs.core.seq(arglist__22094);
    return markdown$core$mdToHtml__delegate(params);
  };
  markdown$core$mdToHtml.cljs$core$IFn$_invoke$arity$variadic = markdown$core$mdToHtml__delegate;
  return markdown$core$mdToHtml;
}();
goog.exportSymbol("markdown.core.mdToHtml", markdown.core.mdToHtml);
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj15829 = {};
  return obj15829;
}();
cljs.core.async.impl.protocols.take_BANG_ = function cljs$core$async$impl$protocols$take_BANG_(port, fn1_handler) {
  if (function() {
    var and__4097__auto__ = port;
    if (and__4097__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4745__auto__ = port == null ? null : port;
    return function() {
      var or__4109__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj15831 = {};
  return obj15831;
}();
cljs.core.async.impl.protocols.put_BANG_ = function cljs$core$async$impl$protocols$put_BANG_(port, val, fn1_handler) {
  if (function() {
    var and__4097__auto__ = port;
    if (and__4097__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__4745__auto__ = port == null ? null : port;
    return function() {
      var or__4109__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn1_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj15833 = {};
  return obj15833;
}();
cljs.core.async.impl.protocols.close_BANG_ = function cljs$core$async$impl$protocols$close_BANG_(chan) {
  if (function() {
    var and__4097__auto__ = chan;
    if (and__4097__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4745__auto__ = chan == null ? null : chan;
    return function() {
      var or__4109__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function cljs$core$async$impl$protocols$closed_QMARK_(chan) {
  if (function() {
    var and__4097__auto__ = chan;
    if (and__4097__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__4745__auto__ = chan == null ? null : chan;
    return function() {
      var or__4109__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj15835 = {};
  return obj15835;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function cljs$core$async$impl$protocols$active_QMARK_(h) {
  if (function() {
    var and__4097__auto__ = h;
    if (and__4097__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4745__auto__ = h == null ? null : h;
    return function() {
      var or__4109__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function cljs$core$async$impl$protocols$commit(h) {
  if (function() {
    var and__4097__auto__ = h;
    if (and__4097__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4745__auto__ = h == null ? null : h;
    return function() {
      var or__4109__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj15837 = {};
  return obj15837;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function cljs$core$async$impl$protocols$full_QMARK_(b) {
  if (function() {
    var and__4097__auto__ = b;
    if (and__4097__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4745__auto__ = b == null ? null : b;
    return function() {
      var or__4109__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function cljs$core$async$impl$protocols$remove_BANG_(b) {
  if (function() {
    var and__4097__auto__ = b;
    if (and__4097__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4745__auto__ = b == null ? null : b;
    return function() {
      var or__4109__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG__STAR_ = function cljs$core$async$impl$protocols$add_BANG__STAR_(b, itm) {
  if (function() {
    var and__4097__auto__ = b;
    if (and__4097__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2(b, itm);
  } else {
    var x__4745__auto__ = b == null ? null : b;
    return function() {
      var or__4109__auto__ = cljs.core.async.impl.protocols.add_BANG__STAR_[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core.async.impl.protocols.add_BANG__STAR_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!*", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function() {
  var cljs$core$async$impl$protocols$add_BANG_ = null;
  var cljs$core$async$impl$protocols$add_BANG___1 = function(b) {
    return b;
  };
  var cljs$core$async$impl$protocols$add_BANG___2 = function(b, itm) {
    if (!(itm == null)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "itm", "itm", -713282527, null)))))].join(""));
    }
    return cljs.core.async.impl.protocols.add_BANG__STAR_.call(null, b, itm);
  };
  cljs$core$async$impl$protocols$add_BANG_ = function(b, itm) {
    switch(arguments.length) {
      case 1:
        return cljs$core$async$impl$protocols$add_BANG___1.call(this, b);
      case 2:
        return cljs$core$async$impl$protocols$add_BANG___2.call(this, b, itm);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$impl$protocols$add_BANG_.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$impl$protocols$add_BANG___1;
  cljs$core$async$impl$protocols$add_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$impl$protocols$add_BANG___2;
  return cljs$core$async$impl$protocols$add_BANG_;
}();
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj15839 = {};
  return obj15839;
}();
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function cljs$core$async$impl$buffers$acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__15842 = cnt + 1;
      cnt = G__15842;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__4994__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__4994__auto__) {
      var v_15843 = this$.pop();
      if (keep_QMARK_.call(null, v_15843)) {
        this$.unshift(v_15843);
      } else {
      }
      var G__15844 = x + 1;
      x = G__15844;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write.call(null, writer__4689__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function cljs$core$async$impl$buffers$__GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function cljs$core$async$impl$buffers$ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  self__.buf.unbounded_unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write.call(null, writer__4689__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function cljs$core$async$impl$buffers$__GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function cljs$core$async$impl$buffers$fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
  } else {
    self__.buf.unshift(itm);
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write.call(null, writer__4689__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function cljs$core$async$impl$buffers$__GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function cljs$core$async$impl$buffers$dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  self__.buf.unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write.call(null, writer__4689__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function cljs$core$async$impl$buffers$__GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function cljs$core$async$impl$buffers$sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.async.nextTick");
goog.provide("goog.async.throwException");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.functions");
goog.async.throwException = function(exception) {
  goog.global.setTimeout(function() {
    throw exception;
  }, 0);
};
goog.async.nextTick = function(callback, opt_context) {
  var cb = callback;
  if (opt_context) {
    cb = goog.bind(callback, opt_context);
  }
  cb = goog.async.nextTick.wrapCallback_(cb);
  if (goog.isFunction(goog.global.setImmediate)) {
    goog.global.setImmediate(cb);
    return;
  }
  if (!goog.async.nextTick.setImmediate_) {
    goog.async.nextTick.setImmediate_ = goog.async.nextTick.getSetImmediateEmulator_();
  }
  goog.async.nextTick.setImmediate_(cb);
};
goog.async.nextTick.setImmediate_;
goog.async.nextTick.getSetImmediateEmulator_ = function() {
  var Channel = goog.global["MessageChannel"];
  if (typeof Channel === "undefined" && typeof window !== "undefined" && window.postMessage && window.addEventListener) {
    Channel = function() {
      var iframe = document.createElement("iframe");
      iframe.style.display = "none";
      iframe.src = "";
      document.documentElement.appendChild(iframe);
      var win = iframe.contentWindow;
      var doc = win.document;
      doc.open();
      doc.write("");
      doc.close();
      var message = "callImmediate" + Math.random();
      var origin = win.location.protocol == "file:" ? "*" : win.location.protocol + "//" + win.location.host;
      var onmessage = goog.bind(function(e) {
        if (e.origin != origin && e.data != message) {
          return;
        }
        this["port1"].onmessage();
      }, this);
      win.addEventListener("message", onmessage, false);
      this["port1"] = {};
      this["port2"] = {postMessage:function() {
        win.postMessage(message, origin);
      }};
    };
  }
  if (typeof Channel !== "undefined") {
    var channel = new Channel;
    var head = {};
    var tail = head;
    channel["port1"].onmessage = function() {
      head = head.next;
      var cb = head.cb;
      head.cb = null;
      cb();
    };
    return function(cb) {
      tail.next = {cb:cb};
      tail = tail.next;
      channel["port2"].postMessage(0);
    };
  }
  if (typeof document !== "undefined" && "onreadystatechange" in document.createElement("script")) {
    return function(cb) {
      var script = document.createElement("script");
      script.onreadystatechange = function() {
        script.onreadystatechange = null;
        script.parentNode.removeChild(script);
        script = null;
        cb();
        cb = null;
      };
      document.documentElement.appendChild(script);
    };
  }
  return function(cb) {
    goog.global.setTimeout(cb, 0);
  };
};
goog.async.nextTick.wrapCallback_ = goog.functions.identity;
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.async.nextTick.wrapCallback_ = transformer;
});
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("goog.async.nextTick");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function cljs$core$async$impl$dispatch$process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_15847 = 0;
  while (true) {
    var m_15848 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_15848 == null) {
    } else {
      m_15848.call(null);
      if (count_15847 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__15849 = count_15847 + 1;
        count_15847 = G__15849;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
cljs.core.async.impl.dispatch.queue_dispatcher = function cljs$core$async$impl$dispatch$queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__4097__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (cljs.core.truth_(and__4097__auto__)) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__4097__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    return goog.async.nextTick(cljs.core.async.impl.dispatch.process_messages);
  }
};
cljs.core.async.impl.dispatch.run = function cljs$core$async$impl$dispatch$run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function cljs$core$async$impl$dispatch$queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function cljs$core$async$impl$channels$box(val) {
  if (typeof cljs.core.async.impl.channels.t15855 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t15855 = function(val, box, meta15856) {
      this.val = val;
      this.box = box;
      this.meta15856 = meta15856;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t15855.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t15855.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15857) {
      var self__ = this;
      var _15857__$1 = this;
      return self__.meta15856;
    };
    cljs.core.async.impl.channels.t15855.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15857, meta15856__$1) {
      var self__ = this;
      var _15857__$1 = this;
      return new cljs.core.async.impl.channels.t15855(self__.val, self__.box, meta15856__$1);
    };
    cljs.core.async.impl.channels.t15855.cljs$lang$type = true;
    cljs.core.async.impl.channels.t15855.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t15855";
    cljs.core.async.impl.channels.t15855.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
      return cljs.core._write.call(null, writer__4689__auto__, "cljs.core.async.impl.channels/t15855");
    };
    cljs.core.async.impl.channels.__GT_t15855 = function cljs$core$async$impl$channels$box_$___GT_t15855(val__$1, box__$1, meta15856) {
      return new cljs.core.async.impl.channels.t15855(val__$1, box__$1, meta15856);
    };
  }
  return new cljs.core.async.impl.channels.t15855(val, cljs$core$async$impl$channels$box, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write.call(null, writer__4689__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function cljs$core$async$impl$channels$__GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function cljs$core$async$impl$channels$put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.MMC = function() {
  var obj15859 = {};
  return obj15859;
}();
cljs.core.async.impl.channels.abort = function cljs$core$async$impl$channels$abort(this$) {
  if (function() {
    var and__4097__auto__ = this$;
    if (and__4097__auto__) {
      return this$.cljs$core$async$impl$channels$MMC$abort$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return this$.cljs$core$async$impl$channels$MMC$abort$arity$1(this$);
  } else {
    var x__4745__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4109__auto__ = cljs.core.async.impl.channels.abort[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core.async.impl.channels.abort["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "MMC.abort", this$);
        }
      }
    }().call(null, this$);
  }
};
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
  this.add_BANG_ = add_BANG_;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    if (cljs.core.truth_(function() {
      var and__4097__auto__ = self__.buf;
      if (cljs.core.truth_(and__4097__auto__)) {
        return self__.puts.length === 0;
      } else {
        return and__4097__auto__;
      }
    }())) {
      self__.add_BANG_.call(null, self__.buf);
    } else {
    }
    while (true) {
      var taker_15860 = self__.takes.pop();
      if (taker_15860 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_15860)) {
          var take_cb_15861 = cljs.core.async.impl.protocols.commit.call(null, taker_15860);
          var val_15862 = cljs.core.truth_(function() {
            var and__4097__auto__ = self__.buf;
            if (cljs.core.truth_(and__4097__auto__)) {
              return cljs.core.count.call(null, self__.buf) > 0;
            } else {
              return and__4097__auto__;
            }
          }()) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_15861, val_15862, taker_15860, this$__$1) {
            return function() {
              return take_cb_15861.call(null, val_15862);
            };
          }(take_cb_15861, val_15862, taker_15860, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        if (cljs.core.truth_(cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
        } else {
          var putter_15863 = self__.puts.pop();
          if (putter_15863 == null) {
          } else {
            var put_handler_15864 = putter_15863.handler;
            var val_15865 = putter_15863.val;
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_15864)) {
              var put_cb_15866 = cljs.core.async.impl.protocols.commit.call(null, put_handler_15864);
              cljs.core.async.impl.protocols.commit.call(null, handler);
              cljs.core.async.impl.dispatch.run.call(null, function(put_cb_15866, put_handler_15864, val_15865, putter_15863, _, retval, this$__$1) {
                return function() {
                  return put_cb_15866.call(null, true);
                };
              }(put_cb_15866, put_handler_15864, val_15865, putter_15863, _, retval, this$__$1));
              if (cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val_15865))) {
                cljs.core.async.impl.channels.abort.call(null, this$__$1);
              } else {
              }
            } else {
            }
            continue;
          }
        }
        break;
      }
      return retval;
    } else {
      var putter = function() {
        while (true) {
          var putter = self__.puts.pop();
          if (cljs.core.truth_(putter)) {
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, putter.handler)) {
              return putter;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(putter)) {
        var put_cb = cljs.core.async.impl.protocols.commit.call(null, putter.handler);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb, putter, this$__$1) {
          return function() {
            return put_cb.call(null, true);
          };
        }(put_cb, putter, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, putter.val);
      } else {
        if (cljs.core.truth_(self__.closed)) {
          if (cljs.core.truth_(self__.buf)) {
            self__.add_BANG_.call(null, self__.buf);
          } else {
          }
          if (cljs.core.truth_(function() {
            var and__4097__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, handler);
            if (cljs.core.truth_(and__4097__auto__)) {
              return cljs.core.async.impl.protocols.commit.call(null, handler);
            } else {
              return and__4097__auto__;
            }
          }())) {
            var has_val = function() {
              var and__4097__auto__ = self__.buf;
              if (cljs.core.truth_(and__4097__auto__)) {
                return cljs.core.count.call(null, self__.buf) > 0;
              } else {
                return and__4097__auto__;
              }
            }();
            var val = cljs.core.truth_(has_val) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            return null;
          }
        } else {
          if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_takes = 0;
            self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
          } else {
            self__.dirty_takes = self__.dirty_takes + 1;
          }
          if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, "takes", 
            "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
          }
          self__.takes.unbounded_unshift(handler);
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    if (cljs.core.truth_(function() {
      var and__4097__auto__ = self__.buf;
      if (cljs.core.truth_(and__4097__auto__)) {
        return cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf));
      } else {
        return and__4097__auto__;
      }
    }())) {
      cljs.core.async.impl.protocols.commit.call(null, handler);
      var done_QMARK_ = cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val));
      while (true) {
        if (self__.takes.length > 0 && cljs.core.count.call(null, self__.buf) > 0) {
          var taker_15867 = self__.takes.pop();
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_15867)) {
            var take_cb_15868 = cljs.core.async.impl.protocols.commit.call(null, taker_15867);
            var val_15869__$1 = cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf);
            cljs.core.async.impl.dispatch.run.call(null, function(take_cb_15868, val_15869__$1, taker_15867, done_QMARK_, closed__$1, this$__$1) {
              return function() {
                return take_cb_15868.call(null, val_15869__$1);
              };
            }(take_cb_15868, val_15869__$1, taker_15867, done_QMARK_, closed__$1, this$__$1));
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      if (done_QMARK_) {
        cljs.core.async.impl.channels.abort.call(null, this$__$1);
      } else {
      }
      return cljs.core.async.impl.channels.box.call(null, true);
    } else {
      var taker = function() {
        while (true) {
          var taker = self__.takes.pop();
          if (cljs.core.truth_(taker)) {
            if (cljs.core.truth_(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker))) {
              return taker;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(taker)) {
        var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(take_cb, taker, closed__$1, this$__$1) {
          return function() {
            return take_cb.call(null, val);
          };
        }(take_cb, taker, closed__$1, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, true);
      } else {
        if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
          self__.dirty_puts = 0;
          self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
        } else {
          self__.dirty_puts = self__.dirty_puts + 1;
        }
        if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
        } else {
          throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
          -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
        }
        self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
        return null;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$abort$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  while (true) {
    var putter_15870 = self__.puts.pop();
    if (putter_15870 == null) {
    } else {
      var put_handler_15871 = putter_15870.handler;
      var val_15872 = putter_15870.val;
      if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_15871)) {
        var put_cb_15873 = cljs.core.async.impl.protocols.commit.call(null, put_handler_15871);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb_15873, put_handler_15871, val_15872, putter_15870, this$__$1) {
          return function() {
            return put_cb_15873.call(null, true);
          };
        }(put_cb_15873, put_handler_15871, val_15872, putter_15870, this$__$1));
      } else {
        continue;
      }
    }
    break;
  }
  self__.puts.cleanup(cljs.core.constantly.call(null, false));
  return cljs.core.async.impl.protocols.close_BANG_.call(null, this$__$1);
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write.call(null, writer__4689__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function cljs$core$async$impl$channels$__GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_);
};
cljs.core.async.impl.channels.ex_handler = function cljs$core$async$impl$channels$ex_handler(ex) {
  console.log(ex);
  return null;
};
cljs.core.async.impl.channels.handle = function cljs$core$async$impl$channels$handle(buf, exh, t) {
  var else$ = function() {
    var or__4109__auto__ = exh;
    if (cljs.core.truth_(or__4109__auto__)) {
      return or__4109__auto__;
    } else {
      return cljs.core.async.impl.channels.ex_handler;
    }
  }().call(null, t);
  if (else$ == null) {
    return buf;
  } else {
    return cljs.core.async.impl.protocols.add_BANG_.call(null, buf, else$);
  }
};
cljs.core.async.impl.channels.chan = function() {
  var cljs$core$async$impl$channels$chan = null;
  var cljs$core$async$impl$channels$chan__1 = function(buf) {
    return cljs$core$async$impl$channels$chan.call(null, buf, null);
  };
  var cljs$core$async$impl$channels$chan__2 = function(buf, xform) {
    return cljs$core$async$impl$channels$chan.call(null, buf, xform, null);
  };
  var cljs$core$async$impl$channels$chan__3 = function(buf, xform, exh) {
    return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false, function() {
      var add_BANG_ = cljs.core.truth_(xform) ? xform.call(null, cljs.core.async.impl.protocols.add_BANG_) : cljs.core.async.impl.protocols.add_BANG_;
      return function(add_BANG_) {
        return function() {
          var G__15878 = null;
          var G__15878__1 = function(buf__$1) {
            try {
              return add_BANG_.call(null, buf__$1);
            } catch (e15876) {
              var t = e15876;
              return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
            }
          };
          var G__15878__2 = function(buf__$1, val) {
            try {
              return add_BANG_.call(null, buf__$1, val);
            } catch (e15877) {
              var t = e15877;
              return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
            }
          };
          G__15878 = function(buf__$1, val) {
            switch(arguments.length) {
              case 1:
                return G__15878__1.call(this, buf__$1);
              case 2:
                return G__15878__2.call(this, buf__$1, val);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__15878.cljs$core$IFn$_invoke$arity$1 = G__15878__1;
          G__15878.cljs$core$IFn$_invoke$arity$2 = G__15878__2;
          return G__15878;
        }();
      }(add_BANG_);
    }());
  };
  cljs$core$async$impl$channels$chan = function(buf, xform, exh) {
    switch(arguments.length) {
      case 1:
        return cljs$core$async$impl$channels$chan__1.call(this, buf);
      case 2:
        return cljs$core$async$impl$channels$chan__2.call(this, buf, xform);
      case 3:
        return cljs$core$async$impl$channels$chan__3.call(this, buf, xform, exh);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$impl$channels$chan.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$impl$channels$chan__1;
  cljs$core$async$impl$channels$chan.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$impl$channels$chan__2;
  cljs$core$async$impl$channels$chan.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$impl$channels$chan__3;
  return cljs$core$async$impl$channels$chan;
}();
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function cljs$core$async$impl$ioc_helpers$aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function cljs$core$async$impl$ioc_helpers$aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function cljs$core$async$impl$ioc_helpers$finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function cljs$core$async$impl$ioc_helpers$fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t15787 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t15787 = function(f, fn_handler, meta15788) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta15788 = meta15788;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t15787.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t15787.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t15787.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t15787.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15789) {
      var self__ = this;
      var _15789__$1 = this;
      return self__.meta15788;
    };
    cljs.core.async.impl.ioc_helpers.t15787.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15789, meta15788__$1) {
      var self__ = this;
      var _15789__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t15787(self__.f, self__.fn_handler, meta15788__$1);
    };
    cljs.core.async.impl.ioc_helpers.t15787.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t15787.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t15787";
    cljs.core.async.impl.ioc_helpers.t15787.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
      return cljs.core._write.call(null, writer__4689__auto__, "cljs.core.async.impl.ioc-helpers/t15787");
    };
    cljs.core.async.impl.ioc_helpers.__GT_t15787 = function cljs$core$async$impl$ioc_helpers$fn_handler_$___GT_t15787(f__$1, fn_handler__$1, meta15788) {
      return new cljs.core.async.impl.ioc_helpers.t15787(f__$1, fn_handler__$1, meta15788);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t15787(f, cljs$core$async$impl$ioc_helpers$fn_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function cljs$core$async$impl$ioc_helpers$run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function cljs$core$async$impl$ioc_helpers$run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e15791) {
    if (e15791 instanceof Object) {
      var ex = e15791;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      throw e15791;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function cljs$core$async$impl$ioc_helpers$take_BANG_(state, blk, c) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_15794_15796 = state;
    statearr_15794_15796[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_15794_15796[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_15795_15797 = state;
    statearr_15795_15797[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_15795_15797[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function cljs$core$async$impl$ioc_helpers$put_BANG_(state, blk, c, val) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_15800_15802 = state;
    statearr_15800_15802[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_15800_15802[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_15801_15803 = state;
    statearr_15801_15803[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_15801_15803[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.return_chan = function cljs$core$async$impl$ioc_helpers$return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap, __hash) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4704__auto__, k__4705__auto__) {
  var self__ = this;
  var this__4704__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4704__auto____$1, k__4705__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4706__auto__, k15805, else__4707__auto__) {
  var self__ = this;
  var this__4706__auto____$1 = this;
  var G__15807 = k15805 instanceof cljs.core.Keyword ? k15805.fqn : null;
  switch(G__15807) {
    case "prev":
      return self__.prev;
      break;
    case "continue-block":
      return self__.continue_block;
      break;
    case "finally-block":
      return self__.finally_block;
      break;
    case "catch-exception":
      return self__.catch_exception;
      break;
    case "catch-block":
      return self__.catch_block;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k15805, else__4707__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4718__auto__, writer__4719__auto__, opts__4720__auto__) {
  var self__ = this;
  var this__4718__auto____$1 = this;
  var pr_pair__4721__auto__ = function(this__4718__auto____$1) {
    return function(keyval__4722__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4719__auto__, cljs.core.pr_writer, "", " ", "", opts__4720__auto__, keyval__4722__auto__);
    };
  }(this__4718__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4719__auto__, pr_pair__4721__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__4720__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4702__auto__) {
  var self__ = this;
  var this__4702__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4698__auto__) {
  var self__ = this;
  var this__4698__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4708__auto__) {
  var self__ = this;
  var this__4708__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4699__auto__) {
  var self__ = this;
  var this__4699__auto____$1 = this;
  var h__4525__auto__ = self__.__hash;
  if (!(h__4525__auto__ == null)) {
    return h__4525__auto__;
  } else {
    var h__4525__auto____$1 = cljs.core.hash_imap.call(null, this__4699__auto____$1);
    self__.__hash = h__4525__auto____$1;
    return h__4525__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4700__auto__, other__4701__auto__) {
  var self__ = this;
  var this__4700__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4097__auto__ = other__4701__auto__;
    if (cljs.core.truth_(and__4097__auto__)) {
      return this__4700__auto____$1.constructor === other__4701__auto__.constructor && cljs.core.equiv_map.call(null, this__4700__auto____$1, other__4701__auto__);
    } else {
      return and__4097__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4713__auto__, k__4714__auto__) {
  var self__ = this;
  var this__4713__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  null], null), null), k__4714__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4713__auto____$1), self__.__meta), k__4714__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4714__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4711__auto__, k__4712__auto__, G__15804) {
  var self__ = this;
  var this__4711__auto____$1 = this;
  var pred__15808 = cljs.core.keyword_identical_QMARK_;
  var expr__15809 = k__4712__auto__;
  if (cljs.core.truth_(pred__15808.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), expr__15809))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__15804, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__15808.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), expr__15809))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__15804, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__15808.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), expr__15809))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__15804, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__15808.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), expr__15809))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__15804, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__15808.call(null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), expr__15809))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__15804, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4712__auto__, G__15804), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4716__auto__) {
  var self__ = this;
  var this__4716__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4703__auto__, G__15804) {
  var self__ = this;
  var this__4703__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__15804, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4709__auto__, entry__4710__auto__) {
  var self__ = this;
  var this__4709__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4710__auto__)) {
    return cljs.core._assoc.call(null, this__4709__auto____$1, cljs.core._nth.call(null, entry__4710__auto__, 0), cljs.core._nth.call(null, entry__4710__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4709__auto____$1, entry__4710__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__4738__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__4738__auto__, writer__4739__auto__) {
  return cljs.core._write.call(null, writer__4739__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$__GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev, null, null, null);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$map__GT_ExceptionFrame(G__15806) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(G__15806), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(G__15806), (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(G__15806), (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(G__15806), 
  (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(G__15806), null, cljs.core.dissoc.call(null, G__15806, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)), 
  null);
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function cljs$core$async$impl$ioc_helpers$add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_15813 = state;
  statearr_15813[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_15813;
};
cljs.core.async.impl.ioc_helpers.process_exception = function cljs$core$async$impl$ioc_helpers$process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__4097__auto__ = exception;
      if (cljs.core.truth_(and__4097__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__4097__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__4097__auto__ = exception;
        if (cljs.core.truth_(and__4097__auto__)) {
          var and__4097__auto____$1 = catch_block;
          if (cljs.core.truth_(and__4097__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__4097__auto____$1;
          }
        } else {
          return and__4097__auto__;
        }
      }())) {
        var statearr_15819 = state;
        statearr_15819[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_15819[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_15819[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_15819[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null);
        return statearr_15819;
      } else {
        if (cljs.core.truth_(function() {
          var and__4097__auto__ = exception;
          if (cljs.core.truth_(and__4097__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__4097__auto__;
          }
        }())) {
          var statearr_15820_15824 = state;
          statearr_15820_15824[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__15825 = state;
          state = G__15825;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__4097__auto__ = exception;
            if (cljs.core.truth_(and__4097__auto__)) {
              var and__4097__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__4097__auto____$1) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__4097__auto____$1;
              }
            } else {
              return and__4097__auto__;
            }
          }())) {
            var statearr_15821 = state;
            statearr_15821[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_15821[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
            return statearr_15821;
          } else {
            if (cljs.core.truth_(function() {
              var and__4097__auto__ = cljs.core.not.call(null, exception);
              if (and__4097__auto__) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__4097__auto__;
              }
            }())) {
              var statearr_15822 = state;
              statearr_15822[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_15822[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
              return statearr_15822;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_15823 = state;
                statearr_15823[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_15823[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_15823;
              } else {
                throw new Error("No matching clause");
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var cljs$core$async$impl$timers$random_level = null;
  var cljs$core$async$impl$timers$random_level__0 = function() {
    return cljs$core$async$impl$timers$random_level.call(null, 0);
  };
  var cljs$core$async$impl$timers$random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__15758 = level + 1;
        level = G__15758;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  cljs$core$async$impl$timers$random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return cljs$core$async$impl$timers$random_level__0.call(this);
      case 1:
        return cljs$core$async$impl$timers$random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$impl$timers$random_level.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$impl$timers$random_level__0;
  cljs$core$async$impl$timers$random_level.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$impl$timers$random_level__1;
  return cljs$core$async$impl$timers$random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write.call(null, writer__4689__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.__GT_SkipListNode = function cljs$core$async$impl$timers$__GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var cljs$core$async$impl$timers$skip_list_node = null;
  var cljs$core$async$impl$timers$skip_list_node__1 = function(level) {
    return cljs$core$async$impl$timers$skip_list_node.call(null, null, null, level);
  };
  var cljs$core$async$impl$timers$skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_15759 = 0;
    while (true) {
      if (i_15759 < arr.length) {
        arr[i_15759] = null;
        var G__15760 = i_15759 + 1;
        i_15759 = G__15760;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  cljs$core$async$impl$timers$skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return cljs$core$async$impl$timers$skip_list_node__1.call(this, k);
      case 3:
        return cljs$core$async$impl$timers$skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$impl$timers$skip_list_node.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$impl$timers$skip_list_node__1;
  cljs$core$async$impl$timers$skip_list_node.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$impl$timers$skip_list_node__3;
  return cljs$core$async$impl$timers$skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var cljs$core$async$impl$timers$least_greater_node = null;
  var cljs$core$async$impl$timers$least_greater_node__3 = function(x, k, level) {
    return cljs$core$async$impl$timers$least_greater_node.call(null, x, k, level, null);
  };
  var cljs$core$async$impl$timers$least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4124__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var x_SINGLEQUOTE_ = temp__4124__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__15761 = x_SINGLEQUOTE_;
                x__$1 = G__15761;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__15762 = x__$1;
        var G__15763 = k;
        var G__15764 = level - 1;
        var G__15765 = update;
        x = G__15762;
        k = G__15763;
        level = G__15764;
        update = G__15765;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  cljs$core$async$impl$timers$least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return cljs$core$async$impl$timers$least_greater_node__3.call(this, x, k, level);
      case 4:
        return cljs$core$async$impl$timers$least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$impl$timers$least_greater_node.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$impl$timers$least_greater_node__3;
  cljs$core$async$impl$timers$least_greater_node.cljs$core$IFn$_invoke$arity$4 = cljs$core$async$impl$timers$least_greater_node__4;
  return cljs$core$async$impl$timers$least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function cljs$core$async$impl$timers$iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), cljs$core$async$impl$timers$iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_15766 = self__.level + 1;
      while (true) {
        if (i_15766 <= new_level + 1) {
          update[i_15766] = self__.header;
          var G__15767 = i_15766 + 1;
          i_15766 = G__15767;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_15768 = 0;
    while (true) {
      if (i_15768 <= self__.level) {
        var links_15769 = update[i_15768].forward;
        if (links_15769[i_15768] === x__$1) {
          links_15769[i_15768] = x__$1.forward[i_15768];
          var G__15770 = i_15768 + 1;
          i_15768 = G__15770;
          continue;
        } else {
          var G__15771 = i_15768 + 1;
          i_15768 = G__15771;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__15772 = x_SINGLEQUOTE_;
              x__$1 = G__15772;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__15773 = nx;
        var G__15774 = level__$1 - 1;
        x = G__15773;
        level__$1 = G__15774;
        continue;
      } else {
        var G__15775 = x;
        var G__15776 = level__$1 - 1;
        x = G__15775;
        level__$1 = G__15776;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__15777 = x_SINGLEQUOTE_;
              x__$1 = G__15777;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__15778 = nx;
        var G__15779 = level__$1 - 1;
        x = G__15778;
        level__$1 = G__15779;
        continue;
      } else {
        var G__15780 = x;
        var G__15781 = level__$1 - 1;
        x = G__15780;
        level__$1 = G__15781;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write.call(null, writer__4689__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.__GT_SkipList = function cljs$core$async$impl$timers$__GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function cljs$core$async$impl$timers$skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function cljs$core$async$impl$timers$timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__4109__auto__ = cljs.core.truth_(function() {
    var and__4097__auto__ = me;
    if (cljs.core.truth_(and__4097__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__4097__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__4109__auto__)) {
    return or__4109__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__4109__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__4109__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function cljs$core$async$fn_handler(f) {
  if (typeof cljs.core.async.t12669 !== "undefined") {
  } else {
    cljs.core.async.t12669 = function(f, fn_handler, meta12670) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta12670 = meta12670;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12669.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t12669.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t12669.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t12669.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12671) {
      var self__ = this;
      var _12671__$1 = this;
      return self__.meta12670;
    };
    cljs.core.async.t12669.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12671, meta12670__$1) {
      var self__ = this;
      var _12671__$1 = this;
      return new cljs.core.async.t12669(self__.f, self__.fn_handler, meta12670__$1);
    };
    cljs.core.async.t12669.cljs$lang$type = true;
    cljs.core.async.t12669.cljs$lang$ctorStr = "cljs.core.async/t12669";
    cljs.core.async.t12669.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
      return cljs.core._write.call(null, writer__4689__auto__, "cljs.core.async/t12669");
    };
    cljs.core.async.__GT_t12669 = function cljs$core$async$fn_handler_$___GT_t12669(f__$1, fn_handler__$1, meta12670) {
      return new cljs.core.async.t12669(f__$1, fn_handler__$1, meta12670);
    };
  }
  return new cljs.core.async.t12669(f, cljs$core$async$fn_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.buffer = function cljs$core$async$buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function cljs$core$async$dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function cljs$core$async$sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function cljs$core$async$unblocking_buffer_QMARK_(buff) {
  var G__12673 = buff;
  if (G__12673) {
    var bit__4783__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4109__auto__ = bit__4783__auto__;
      if (cljs.core.truth_(or__4109__auto__)) {
        return or__4109__auto__;
      } else {
        return G__12673.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__12673.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__12673);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__12673);
  }
};
cljs.core.async.chan = function() {
  var cljs$core$async$chan = null;
  var cljs$core$async$chan__0 = function() {
    return cljs$core$async$chan.call(null, null);
  };
  var cljs$core$async$chan__1 = function(buf_or_n) {
    return cljs$core$async$chan.call(null, buf_or_n, null, null);
  };
  var cljs$core$async$chan__2 = function(buf_or_n, xform) {
    return cljs$core$async$chan.call(null, buf_or_n, xform, null);
  };
  var cljs$core$async$chan__3 = function(buf_or_n, xform, ex_handler) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    if (cljs.core.truth_(xform)) {
      if (cljs.core.truth_(buf_or_n__$1)) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("buffer must be supplied when transducer is"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "buf-or-n", "buf-or-n", -1646815050, null)))].join(""));
      }
    } else {
    }
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1, xform, ex_handler);
  };
  cljs$core$async$chan = function(buf_or_n, xform, ex_handler) {
    switch(arguments.length) {
      case 0:
        return cljs$core$async$chan__0.call(this);
      case 1:
        return cljs$core$async$chan__1.call(this, buf_or_n);
      case 2:
        return cljs$core$async$chan__2.call(this, buf_or_n, xform);
      case 3:
        return cljs$core$async$chan__3.call(this, buf_or_n, xform, ex_handler);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$chan.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$chan__0;
  cljs$core$async$chan.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$chan__1;
  cljs$core$async$chan.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$chan__2;
  cljs$core$async$chan.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$chan__3;
  return cljs$core$async$chan;
}();
cljs.core.async.timeout = function cljs$core$async$timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function cljs$core$async$_LT__BANG_(port) {
  throw new Error("\x3c! used not in (go ...) block");
};
cljs.core.async.take_BANG_ = function() {
  var cljs$core$async$take_BANG_ = null;
  var cljs$core$async$take_BANG___2 = function(port, fn1) {
    return cljs$core$async$take_BANG_.call(null, port, fn1, true);
  };
  var cljs$core$async$take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_12674 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_12674);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(val_12674, ret) {
          return function() {
            return fn1.call(null, val_12674);
          };
        }(val_12674, ret));
      }
    } else {
    }
    return null;
  };
  cljs$core$async$take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$take_BANG___2.call(this, port, fn1);
      case 3:
        return cljs$core$async$take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$take_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$take_BANG___2;
  cljs$core$async$take_BANG_.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$take_BANG___3;
  return cljs$core$async$take_BANG_;
}();
cljs.core.async.nop = function cljs$core$async$nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function cljs$core$async$_GT__BANG_(port, val) {
  throw new Error("\x3e! used not in (go ...) block");
};
cljs.core.async.put_BANG_ = function() {
  var cljs$core$async$put_BANG_ = null;
  var cljs$core$async$put_BANG___2 = function(port, val) {
    var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var ret = temp__4124__auto__;
      return cljs.core.deref.call(null, ret);
    } else {
      return true;
    }
  };
  var cljs$core$async$put_BANG___3 = function(port, val, fn1) {
    return cljs$core$async$put_BANG_.call(null, port, val, fn1, true);
  };
  var cljs$core$async$put_BANG___4 = function(port, val, fn1, on_caller_QMARK_) {
    var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(temp__4124__auto__)) {
      var retb = temp__4124__auto__;
      var ret = cljs.core.deref.call(null, retb);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, ret);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(ret, retb, temp__4124__auto__) {
          return function() {
            return fn1.call(null, ret);
          };
        }(ret, retb, temp__4124__auto__));
      }
      return ret;
    } else {
      return true;
    }
  };
  cljs$core$async$put_BANG_ = function(port, val, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$put_BANG___2.call(this, port, val);
      case 3:
        return cljs$core$async$put_BANG___3.call(this, port, val, fn1);
      case 4:
        return cljs$core$async$put_BANG___4.call(this, port, val, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$put_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$put_BANG___2;
  cljs$core$async$put_BANG_.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$put_BANG___3;
  cljs$core$async$put_BANG_.cljs$core$IFn$_invoke$arity$4 = cljs$core$async$put_BANG___4;
  return cljs$core$async$put_BANG_;
}();
cljs.core.async.close_BANG_ = function cljs$core$async$close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function cljs$core$async$random_array(n) {
  var a = new Array(n);
  var n__4994__auto___12675 = n;
  var x_12676 = 0;
  while (true) {
    if (x_12676 < n__4994__auto___12675) {
      a[x_12676] = 0;
      var G__12677 = x_12676 + 1;
      x_12676 = G__12677;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__12678 = i + 1;
      i = G__12678;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function cljs$core$async$alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t12682 !== "undefined") {
  } else {
    cljs.core.async.t12682 = function(flag, alt_flag, meta12683) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta12683 = meta12683;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12682.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t12682.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t12682.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t12682.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_12684) {
        var self__ = this;
        var _12684__$1 = this;
        return self__.meta12683;
      };
    }(flag);
    cljs.core.async.t12682.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_12684, meta12683__$1) {
        var self__ = this;
        var _12684__$1 = this;
        return new cljs.core.async.t12682(self__.flag, self__.alt_flag, meta12683__$1);
      };
    }(flag);
    cljs.core.async.t12682.cljs$lang$type = true;
    cljs.core.async.t12682.cljs$lang$ctorStr = "cljs.core.async/t12682";
    cljs.core.async.t12682.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
        return cljs.core._write.call(null, writer__4689__auto__, "cljs.core.async/t12682");
      };
    }(flag);
    cljs.core.async.__GT_t12682 = function(flag) {
      return function cljs$core$async$alt_flag_$___GT_t12682(flag__$1, alt_flag__$1, meta12683) {
        return new cljs.core.async.t12682(flag__$1, alt_flag__$1, meta12683);
      };
    }(flag);
  }
  return new cljs.core.async.t12682(flag, cljs$core$async$alt_flag, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.alt_handler = function cljs$core$async$alt_handler(flag, cb) {
  if (typeof cljs.core.async.t12688 !== "undefined") {
  } else {
    cljs.core.async.t12688 = function(cb, flag, alt_handler, meta12689) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta12689 = meta12689;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12688.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t12688.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t12688.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t12688.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12690) {
      var self__ = this;
      var _12690__$1 = this;
      return self__.meta12689;
    };
    cljs.core.async.t12688.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12690, meta12689__$1) {
      var self__ = this;
      var _12690__$1 = this;
      return new cljs.core.async.t12688(self__.cb, self__.flag, self__.alt_handler, meta12689__$1);
    };
    cljs.core.async.t12688.cljs$lang$type = true;
    cljs.core.async.t12688.cljs$lang$ctorStr = "cljs.core.async/t12688";
    cljs.core.async.t12688.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
      return cljs.core._write.call(null, writer__4689__auto__, "cljs.core.async/t12688");
    };
    cljs.core.async.__GT_t12688 = function cljs$core$async$alt_handler_$___GT_t12688(cb__$1, flag__$1, alt_handler__$1, meta12689) {
      return new cljs.core.async.t12688(cb__$1, flag__$1, alt_handler__$1, meta12689);
    };
  }
  return new cljs.core.async.t12688(cb, flag, cljs$core$async$alt_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.do_alts = function cljs$core$async$do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__12691_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__12691_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__12692_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__12692_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__4109__auto__ = wport;
            if (cljs.core.truth_(or__4109__auto__)) {
              return or__4109__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__12693 = i + 1;
          i = G__12693;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__4109__auto__ = ret;
  if (cljs.core.truth_(or__4109__auto__)) {
    return or__4109__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4126__auto__ = function() {
        var and__4097__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__4097__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__4097__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4126__auto__)) {
        var got = temp__4126__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var cljs$core$async$alts_BANG___delegate = function(ports, p__12694) {
    var map__12696 = p__12694;
    var map__12696__$1 = cljs.core.seq_QMARK_.call(null, map__12696) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12696) : map__12696;
    var opts = map__12696__$1;
    throw new Error("alts! used not in (go ...) block");
  };
  var cljs$core$async$alts_BANG_ = function(ports, var_args) {
    var p__12694 = null;
    if (arguments.length > 1) {
      var G__12697__i = 0, G__12697__a = new Array(arguments.length - 1);
      while (G__12697__i < G__12697__a.length) {
        G__12697__a[G__12697__i] = arguments[G__12697__i + 1];
        ++G__12697__i;
      }
      p__12694 = new cljs.core.IndexedSeq(G__12697__a, 0);
    }
    return cljs$core$async$alts_BANG___delegate.call(this, ports, p__12694);
  };
  cljs$core$async$alts_BANG_.cljs$lang$maxFixedArity = 1;
  cljs$core$async$alts_BANG_.cljs$lang$applyTo = function(arglist__12698) {
    var ports = cljs.core.first(arglist__12698);
    var p__12694 = cljs.core.rest(arglist__12698);
    return cljs$core$async$alts_BANG___delegate(ports, p__12694);
  };
  cljs$core$async$alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$async$alts_BANG___delegate;
  return cljs$core$async$alts_BANG_;
}();
cljs.core.async.pipe = function() {
  var cljs$core$async$pipe = null;
  var cljs$core$async$pipe__2 = function(from, to) {
    return cljs$core$async$pipe.call(null, from, to, true);
  };
  var cljs$core$async$pipe__3 = function(from, to, close_QMARK_) {
    var c__6990__auto___12793 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6990__auto___12793) {
      return function() {
        var f__6991__auto__ = function() {
          var switch__6934__auto__ = function(c__6990__auto___12793) {
            return function(state_12769) {
              var state_val_12770 = state_12769[1];
              if (state_val_12770 === 7) {
                var inst_12765 = state_12769[2];
                var state_12769__$1 = state_12769;
                var statearr_12771_12794 = state_12769__$1;
                statearr_12771_12794[2] = inst_12765;
                statearr_12771_12794[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12770 === 1) {
                  var state_12769__$1 = state_12769;
                  var statearr_12772_12795 = state_12769__$1;
                  statearr_12772_12795[2] = null;
                  statearr_12772_12795[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12770 === 4) {
                    var inst_12748 = state_12769[7];
                    var inst_12748__$1 = state_12769[2];
                    var inst_12749 = inst_12748__$1 == null;
                    var state_12769__$1 = function() {
                      var statearr_12773 = state_12769;
                      statearr_12773[7] = inst_12748__$1;
                      return statearr_12773;
                    }();
                    if (cljs.core.truth_(inst_12749)) {
                      var statearr_12774_12796 = state_12769__$1;
                      statearr_12774_12796[1] = 5;
                    } else {
                      var statearr_12775_12797 = state_12769__$1;
                      statearr_12775_12797[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12770 === 13) {
                      var state_12769__$1 = state_12769;
                      var statearr_12776_12798 = state_12769__$1;
                      statearr_12776_12798[2] = null;
                      statearr_12776_12798[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12770 === 6) {
                        var inst_12748 = state_12769[7];
                        var state_12769__$1 = state_12769;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12769__$1, 11, to, inst_12748);
                      } else {
                        if (state_val_12770 === 3) {
                          var inst_12767 = state_12769[2];
                          var state_12769__$1 = state_12769;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12769__$1, inst_12767);
                        } else {
                          if (state_val_12770 === 12) {
                            var state_12769__$1 = state_12769;
                            var statearr_12777_12799 = state_12769__$1;
                            statearr_12777_12799[2] = null;
                            statearr_12777_12799[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12770 === 2) {
                              var state_12769__$1 = state_12769;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12769__$1, 4, from);
                            } else {
                              if (state_val_12770 === 11) {
                                var inst_12758 = state_12769[2];
                                var state_12769__$1 = state_12769;
                                if (cljs.core.truth_(inst_12758)) {
                                  var statearr_12778_12800 = state_12769__$1;
                                  statearr_12778_12800[1] = 12;
                                } else {
                                  var statearr_12779_12801 = state_12769__$1;
                                  statearr_12779_12801[1] = 13;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12770 === 9) {
                                  var state_12769__$1 = state_12769;
                                  var statearr_12780_12802 = state_12769__$1;
                                  statearr_12780_12802[2] = null;
                                  statearr_12780_12802[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12770 === 5) {
                                    var state_12769__$1 = state_12769;
                                    if (cljs.core.truth_(close_QMARK_)) {
                                      var statearr_12781_12803 = state_12769__$1;
                                      statearr_12781_12803[1] = 8;
                                    } else {
                                      var statearr_12782_12804 = state_12769__$1;
                                      statearr_12782_12804[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12770 === 14) {
                                      var inst_12763 = state_12769[2];
                                      var state_12769__$1 = state_12769;
                                      var statearr_12783_12805 = state_12769__$1;
                                      statearr_12783_12805[2] = inst_12763;
                                      statearr_12783_12805[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_12770 === 10) {
                                        var inst_12755 = state_12769[2];
                                        var state_12769__$1 = state_12769;
                                        var statearr_12784_12806 = state_12769__$1;
                                        statearr_12784_12806[2] = inst_12755;
                                        statearr_12784_12806[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12770 === 8) {
                                          var inst_12752 = cljs.core.async.close_BANG_.call(null, to);
                                          var state_12769__$1 = state_12769;
                                          var statearr_12785_12807 = state_12769__$1;
                                          statearr_12785_12807[2] = inst_12752;
                                          statearr_12785_12807[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6990__auto___12793);
          return function(switch__6934__auto__, c__6990__auto___12793) {
            return function() {
              var cljs$core$async$pipe_$_state_machine__6935__auto__ = null;
              var cljs$core$async$pipe_$_state_machine__6935__auto____0 = function() {
                var statearr_12789 = [null, null, null, null, null, null, null, null];
                statearr_12789[0] = cljs$core$async$pipe_$_state_machine__6935__auto__;
                statearr_12789[1] = 1;
                return statearr_12789;
              };
              var cljs$core$async$pipe_$_state_machine__6935__auto____1 = function(state_12769) {
                while (true) {
                  var ret_value__6936__auto__ = function() {
                    try {
                      while (true) {
                        var result__6937__auto__ = switch__6934__auto__.call(null, state_12769);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6937__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6937__auto__;
                        }
                        break;
                      }
                    } catch (e12790) {
                      if (e12790 instanceof Object) {
                        var ex__6938__auto__ = e12790;
                        var statearr_12791_12808 = state_12769;
                        statearr_12791_12808[5] = ex__6938__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12769);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e12790;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6936__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__12809 = state_12769;
                    state_12769 = G__12809;
                    continue;
                  } else {
                    return ret_value__6936__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$pipe_$_state_machine__6935__auto__ = function(state_12769) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$pipe_$_state_machine__6935__auto____0.call(this);
                  case 1:
                    return cljs$core$async$pipe_$_state_machine__6935__auto____1.call(this, state_12769);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$pipe_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipe_$_state_machine__6935__auto____0;
              cljs$core$async$pipe_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipe_$_state_machine__6935__auto____1;
              return cljs$core$async$pipe_$_state_machine__6935__auto__;
            }();
          }(switch__6934__auto__, c__6990__auto___12793);
        }();
        var state__6992__auto__ = function() {
          var statearr_12792 = f__6991__auto__.call(null);
          statearr_12792[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6990__auto___12793;
          return statearr_12792;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6992__auto__);
      };
    }(c__6990__auto___12793));
    return to;
  };
  cljs$core$async$pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$pipe__2.call(this, from, to);
      case 3:
        return cljs$core$async$pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$pipe.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$pipe__2;
  cljs$core$async$pipe.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$pipe__3;
  return cljs$core$async$pipe;
}();
cljs.core.async.pipeline_STAR_ = function cljs$core$async$pipeline_STAR_(n, to, xf, from, close_QMARK_, ex_handler, type) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null))))].join(""));
  }
  var jobs = cljs.core.async.chan.call(null, n);
  var results = cljs.core.async.chan.call(null, n);
  var process = function(jobs, results) {
    return function(p__12993) {
      var vec__12994 = p__12993;
      var v = cljs.core.nth.call(null, vec__12994, 0, null);
      var p = cljs.core.nth.call(null, vec__12994, 1, null);
      var job = vec__12994;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1, xf, ex_handler);
        var c__6990__auto___13176 = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__6990__auto___13176, res, vec__12994, v, p, job, jobs, results) {
          return function() {
            var f__6991__auto__ = function() {
              var switch__6934__auto__ = function(c__6990__auto___13176, res, vec__12994, v, p, job, jobs, results) {
                return function(state_12999) {
                  var state_val_13000 = state_12999[1];
                  if (state_val_13000 === 2) {
                    var inst_12996 = state_12999[2];
                    var inst_12997 = cljs.core.async.close_BANG_.call(null, res);
                    var state_12999__$1 = function() {
                      var statearr_13001 = state_12999;
                      statearr_13001[7] = inst_12996;
                      return statearr_13001;
                    }();
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12999__$1, inst_12997);
                  } else {
                    if (state_val_13000 === 1) {
                      var state_12999__$1 = state_12999;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12999__$1, 2, res, v);
                    } else {
                      return null;
                    }
                  }
                };
              }(c__6990__auto___13176, res, vec__12994, v, p, job, jobs, results);
              return function(switch__6934__auto__, c__6990__auto___13176, res, vec__12994, v, p, job, jobs, results) {
                return function() {
                  var cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__ = null;
                  var cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____0 = function() {
                    var statearr_13005 = [null, null, null, null, null, null, null, null];
                    statearr_13005[0] = cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__;
                    statearr_13005[1] = 1;
                    return statearr_13005;
                  };
                  var cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____1 = function(state_12999) {
                    while (true) {
                      var ret_value__6936__auto__ = function() {
                        try {
                          while (true) {
                            var result__6937__auto__ = switch__6934__auto__.call(null, state_12999);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__6937__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__6937__auto__;
                            }
                            break;
                          }
                        } catch (e13006) {
                          if (e13006 instanceof Object) {
                            var ex__6938__auto__ = e13006;
                            var statearr_13007_13177 = state_12999;
                            statearr_13007_13177[5] = ex__6938__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12999);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            throw e13006;
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6936__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__13178 = state_12999;
                        state_12999 = G__13178;
                        continue;
                      } else {
                        return ret_value__6936__auto__;
                      }
                      break;
                    }
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__ = function(state_12999) {
                    switch(arguments.length) {
                      case 0:
                        return cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____0.call(this);
                      case 1:
                        return cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____1.call(this, state_12999);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____0;
                  cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____1;
                  return cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__;
                }();
              }(switch__6934__auto__, c__6990__auto___13176, res, vec__12994, v, p, job, jobs, results);
            }();
            var state__6992__auto__ = function() {
              var statearr_13008 = f__6991__auto__.call(null);
              statearr_13008[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6990__auto___13176;
              return statearr_13008;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6992__auto__);
          };
        }(c__6990__auto___13176, res, vec__12994, v, p, job, jobs, results));
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results);
  var async = function(jobs, results, process) {
    return function(p__13009) {
      var vec__13010 = p__13009;
      var v = cljs.core.nth.call(null, vec__13010, 0, null);
      var p = cljs.core.nth.call(null, vec__13010, 1, null);
      var job = vec__13010;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1);
        xf.call(null, v, res);
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results, process);
  var n__4994__auto___13179 = n;
  var __13180 = 0;
  while (true) {
    if (__13180 < n__4994__auto___13179) {
      var G__13011_13181 = type instanceof cljs.core.Keyword ? type.fqn : null;
      switch(G__13011_13181) {
        case "async":
          var c__6990__auto___13183 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__13180, c__6990__auto___13183, G__13011_13181, n__4994__auto___13179, jobs, results, process, async) {
            return function() {
              var f__6991__auto__ = function() {
                var switch__6934__auto__ = function(__13180, c__6990__auto___13183, G__13011_13181, n__4994__auto___13179, jobs, results, process, async) {
                  return function(state_13024) {
                    var state_val_13025 = state_13024[1];
                    if (state_val_13025 === 7) {
                      var inst_13020 = state_13024[2];
                      var state_13024__$1 = state_13024;
                      var statearr_13026_13184 = state_13024__$1;
                      statearr_13026_13184[2] = inst_13020;
                      statearr_13026_13184[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13025 === 6) {
                        var state_13024__$1 = state_13024;
                        var statearr_13027_13185 = state_13024__$1;
                        statearr_13027_13185[2] = null;
                        statearr_13027_13185[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13025 === 5) {
                          var state_13024__$1 = state_13024;
                          var statearr_13028_13186 = state_13024__$1;
                          statearr_13028_13186[2] = null;
                          statearr_13028_13186[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13025 === 4) {
                            var inst_13014 = state_13024[2];
                            var inst_13015 = async.call(null, inst_13014);
                            var state_13024__$1 = state_13024;
                            if (cljs.core.truth_(inst_13015)) {
                              var statearr_13029_13187 = state_13024__$1;
                              statearr_13029_13187[1] = 5;
                            } else {
                              var statearr_13030_13188 = state_13024__$1;
                              statearr_13030_13188[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13025 === 3) {
                              var inst_13022 = state_13024[2];
                              var state_13024__$1 = state_13024;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13024__$1, inst_13022);
                            } else {
                              if (state_val_13025 === 2) {
                                var state_13024__$1 = state_13024;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13024__$1, 4, jobs);
                              } else {
                                if (state_val_13025 === 1) {
                                  var state_13024__$1 = state_13024;
                                  var statearr_13031_13189 = state_13024__$1;
                                  statearr_13031_13189[2] = null;
                                  statearr_13031_13189[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__13180, c__6990__auto___13183, G__13011_13181, n__4994__auto___13179, jobs, results, process, async);
                return function(__13180, switch__6934__auto__, c__6990__auto___13183, G__13011_13181, n__4994__auto___13179, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____0 = function() {
                      var statearr_13035 = [null, null, null, null, null, null, null];
                      statearr_13035[0] = cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__;
                      statearr_13035[1] = 1;
                      return statearr_13035;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____1 = function(state_13024) {
                      while (true) {
                        var ret_value__6936__auto__ = function() {
                          try {
                            while (true) {
                              var result__6937__auto__ = switch__6934__auto__.call(null, state_13024);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__6937__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__6937__auto__;
                              }
                              break;
                            }
                          } catch (e13036) {
                            if (e13036 instanceof Object) {
                              var ex__6938__auto__ = e13036;
                              var statearr_13037_13190 = state_13024;
                              statearr_13037_13190[5] = ex__6938__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13024);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e13036;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6936__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__13191 = state_13024;
                          state_13024 = G__13191;
                          continue;
                        } else {
                          return ret_value__6936__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__ = function(state_13024) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____1.call(this, state_13024);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__;
                  }();
                }(__13180, switch__6934__auto__, c__6990__auto___13183, G__13011_13181, n__4994__auto___13179, jobs, results, process, async);
              }();
              var state__6992__auto__ = function() {
                var statearr_13038 = f__6991__auto__.call(null);
                statearr_13038[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6990__auto___13183;
                return statearr_13038;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6992__auto__);
            };
          }(__13180, c__6990__auto___13183, G__13011_13181, n__4994__auto___13179, jobs, results, process, async));
          break;
        case "compute":
          var c__6990__auto___13192 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__13180, c__6990__auto___13192, G__13011_13181, n__4994__auto___13179, jobs, results, process, async) {
            return function() {
              var f__6991__auto__ = function() {
                var switch__6934__auto__ = function(__13180, c__6990__auto___13192, G__13011_13181, n__4994__auto___13179, jobs, results, process, async) {
                  return function(state_13051) {
                    var state_val_13052 = state_13051[1];
                    if (state_val_13052 === 7) {
                      var inst_13047 = state_13051[2];
                      var state_13051__$1 = state_13051;
                      var statearr_13053_13193 = state_13051__$1;
                      statearr_13053_13193[2] = inst_13047;
                      statearr_13053_13193[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13052 === 6) {
                        var state_13051__$1 = state_13051;
                        var statearr_13054_13194 = state_13051__$1;
                        statearr_13054_13194[2] = null;
                        statearr_13054_13194[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13052 === 5) {
                          var state_13051__$1 = state_13051;
                          var statearr_13055_13195 = state_13051__$1;
                          statearr_13055_13195[2] = null;
                          statearr_13055_13195[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13052 === 4) {
                            var inst_13041 = state_13051[2];
                            var inst_13042 = process.call(null, inst_13041);
                            var state_13051__$1 = state_13051;
                            if (cljs.core.truth_(inst_13042)) {
                              var statearr_13056_13196 = state_13051__$1;
                              statearr_13056_13196[1] = 5;
                            } else {
                              var statearr_13057_13197 = state_13051__$1;
                              statearr_13057_13197[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13052 === 3) {
                              var inst_13049 = state_13051[2];
                              var state_13051__$1 = state_13051;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13051__$1, inst_13049);
                            } else {
                              if (state_val_13052 === 2) {
                                var state_13051__$1 = state_13051;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13051__$1, 4, jobs);
                              } else {
                                if (state_val_13052 === 1) {
                                  var state_13051__$1 = state_13051;
                                  var statearr_13058_13198 = state_13051__$1;
                                  statearr_13058_13198[2] = null;
                                  statearr_13058_13198[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__13180, c__6990__auto___13192, G__13011_13181, n__4994__auto___13179, jobs, results, process, async);
                return function(__13180, switch__6934__auto__, c__6990__auto___13192, G__13011_13181, n__4994__auto___13179, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____0 = function() {
                      var statearr_13062 = [null, null, null, null, null, null, null];
                      statearr_13062[0] = cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__;
                      statearr_13062[1] = 1;
                      return statearr_13062;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____1 = function(state_13051) {
                      while (true) {
                        var ret_value__6936__auto__ = function() {
                          try {
                            while (true) {
                              var result__6937__auto__ = switch__6934__auto__.call(null, state_13051);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__6937__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__6937__auto__;
                              }
                              break;
                            }
                          } catch (e13063) {
                            if (e13063 instanceof Object) {
                              var ex__6938__auto__ = e13063;
                              var statearr_13064_13199 = state_13051;
                              statearr_13064_13199[5] = ex__6938__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13051);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e13063;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6936__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__13200 = state_13051;
                          state_13051 = G__13200;
                          continue;
                        } else {
                          return ret_value__6936__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__ = function(state_13051) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____1.call(this, state_13051);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__;
                  }();
                }(__13180, switch__6934__auto__, c__6990__auto___13192, G__13011_13181, n__4994__auto___13179, jobs, results, process, async);
              }();
              var state__6992__auto__ = function() {
                var statearr_13065 = f__6991__auto__.call(null);
                statearr_13065[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6990__auto___13192;
                return statearr_13065;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6992__auto__);
            };
          }(__13180, c__6990__auto___13192, G__13011_13181, n__4994__auto___13179, jobs, results, process, async));
          break;
        default:
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(type)].join(""));;
      }
      var G__13201 = __13180 + 1;
      __13180 = G__13201;
      continue;
    } else {
    }
    break;
  }
  var c__6990__auto___13202 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6990__auto___13202, jobs, results, process, async) {
    return function() {
      var f__6991__auto__ = function() {
        var switch__6934__auto__ = function(c__6990__auto___13202, jobs, results, process, async) {
          return function(state_13087) {
            var state_val_13088 = state_13087[1];
            if (state_val_13088 === 9) {
              var inst_13080 = state_13087[2];
              var state_13087__$1 = function() {
                var statearr_13089 = state_13087;
                statearr_13089[7] = inst_13080;
                return statearr_13089;
              }();
              var statearr_13090_13203 = state_13087__$1;
              statearr_13090_13203[2] = null;
              statearr_13090_13203[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13088 === 8) {
                var inst_13073 = state_13087[8];
                var inst_13078 = state_13087[2];
                var state_13087__$1 = function() {
                  var statearr_13091 = state_13087;
                  statearr_13091[9] = inst_13078;
                  return statearr_13091;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13087__$1, 9, results, inst_13073);
              } else {
                if (state_val_13088 === 7) {
                  var inst_13083 = state_13087[2];
                  var state_13087__$1 = state_13087;
                  var statearr_13092_13204 = state_13087__$1;
                  statearr_13092_13204[2] = inst_13083;
                  statearr_13092_13204[1] = 3;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13088 === 6) {
                    var inst_13068 = state_13087[10];
                    var inst_13073 = state_13087[8];
                    var inst_13073__$1 = cljs.core.async.chan.call(null, 1);
                    var inst_13074 = cljs.core.PersistentVector.EMPTY_NODE;
                    var inst_13075 = [inst_13068, inst_13073__$1];
                    var inst_13076 = new cljs.core.PersistentVector(null, 2, 5, inst_13074, inst_13075, null);
                    var state_13087__$1 = function() {
                      var statearr_13093 = state_13087;
                      statearr_13093[8] = inst_13073__$1;
                      return statearr_13093;
                    }();
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13087__$1, 8, jobs, inst_13076);
                  } else {
                    if (state_val_13088 === 5) {
                      var inst_13071 = cljs.core.async.close_BANG_.call(null, jobs);
                      var state_13087__$1 = state_13087;
                      var statearr_13094_13205 = state_13087__$1;
                      statearr_13094_13205[2] = inst_13071;
                      statearr_13094_13205[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13088 === 4) {
                        var inst_13068 = state_13087[10];
                        var inst_13068__$1 = state_13087[2];
                        var inst_13069 = inst_13068__$1 == null;
                        var state_13087__$1 = function() {
                          var statearr_13095 = state_13087;
                          statearr_13095[10] = inst_13068__$1;
                          return statearr_13095;
                        }();
                        if (cljs.core.truth_(inst_13069)) {
                          var statearr_13096_13206 = state_13087__$1;
                          statearr_13096_13206[1] = 5;
                        } else {
                          var statearr_13097_13207 = state_13087__$1;
                          statearr_13097_13207[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13088 === 3) {
                          var inst_13085 = state_13087[2];
                          var state_13087__$1 = state_13087;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13087__$1, inst_13085);
                        } else {
                          if (state_val_13088 === 2) {
                            var state_13087__$1 = state_13087;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13087__$1, 4, from);
                          } else {
                            if (state_val_13088 === 1) {
                              var state_13087__$1 = state_13087;
                              var statearr_13098_13208 = state_13087__$1;
                              statearr_13098_13208[2] = null;
                              statearr_13098_13208[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6990__auto___13202, jobs, results, process, async);
        return function(switch__6934__auto__, c__6990__auto___13202, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____0 = function() {
              var statearr_13102 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_13102[0] = cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__;
              statearr_13102[1] = 1;
              return statearr_13102;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____1 = function(state_13087) {
              while (true) {
                var ret_value__6936__auto__ = function() {
                  try {
                    while (true) {
                      var result__6937__auto__ = switch__6934__auto__.call(null, state_13087);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6937__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6937__auto__;
                      }
                      break;
                    }
                  } catch (e13103) {
                    if (e13103 instanceof Object) {
                      var ex__6938__auto__ = e13103;
                      var statearr_13104_13209 = state_13087;
                      statearr_13104_13209[5] = ex__6938__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13087);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13103;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6936__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13210 = state_13087;
                  state_13087 = G__13210;
                  continue;
                } else {
                  return ret_value__6936__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__ = function(state_13087) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____1.call(this, state_13087);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__;
          }();
        }(switch__6934__auto__, c__6990__auto___13202, jobs, results, process, async);
      }();
      var state__6992__auto__ = function() {
        var statearr_13105 = f__6991__auto__.call(null);
        statearr_13105[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6990__auto___13202;
        return statearr_13105;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6992__auto__);
    };
  }(c__6990__auto___13202, jobs, results, process, async));
  var c__6990__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6990__auto__, jobs, results, process, async) {
    return function() {
      var f__6991__auto__ = function() {
        var switch__6934__auto__ = function(c__6990__auto__, jobs, results, process, async) {
          return function(state_13143) {
            var state_val_13144 = state_13143[1];
            if (state_val_13144 === 7) {
              var inst_13139 = state_13143[2];
              var state_13143__$1 = state_13143;
              var statearr_13145_13211 = state_13143__$1;
              statearr_13145_13211[2] = inst_13139;
              statearr_13145_13211[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13144 === 20) {
                var state_13143__$1 = state_13143;
                var statearr_13146_13212 = state_13143__$1;
                statearr_13146_13212[2] = null;
                statearr_13146_13212[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13144 === 1) {
                  var state_13143__$1 = state_13143;
                  var statearr_13147_13213 = state_13143__$1;
                  statearr_13147_13213[2] = null;
                  statearr_13147_13213[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13144 === 4) {
                    var inst_13108 = state_13143[7];
                    var inst_13108__$1 = state_13143[2];
                    var inst_13109 = inst_13108__$1 == null;
                    var state_13143__$1 = function() {
                      var statearr_13148 = state_13143;
                      statearr_13148[7] = inst_13108__$1;
                      return statearr_13148;
                    }();
                    if (cljs.core.truth_(inst_13109)) {
                      var statearr_13149_13214 = state_13143__$1;
                      statearr_13149_13214[1] = 5;
                    } else {
                      var statearr_13150_13215 = state_13143__$1;
                      statearr_13150_13215[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13144 === 15) {
                      var inst_13121 = state_13143[8];
                      var state_13143__$1 = state_13143;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13143__$1, 18, to, inst_13121);
                    } else {
                      if (state_val_13144 === 21) {
                        var inst_13134 = state_13143[2];
                        var state_13143__$1 = state_13143;
                        var statearr_13151_13216 = state_13143__$1;
                        statearr_13151_13216[2] = inst_13134;
                        statearr_13151_13216[1] = 13;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13144 === 13) {
                          var inst_13136 = state_13143[2];
                          var state_13143__$1 = function() {
                            var statearr_13152 = state_13143;
                            statearr_13152[9] = inst_13136;
                            return statearr_13152;
                          }();
                          var statearr_13153_13217 = state_13143__$1;
                          statearr_13153_13217[2] = null;
                          statearr_13153_13217[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13144 === 6) {
                            var inst_13108 = state_13143[7];
                            var state_13143__$1 = state_13143;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13143__$1, 11, inst_13108);
                          } else {
                            if (state_val_13144 === 17) {
                              var inst_13129 = state_13143[2];
                              var state_13143__$1 = state_13143;
                              if (cljs.core.truth_(inst_13129)) {
                                var statearr_13154_13218 = state_13143__$1;
                                statearr_13154_13218[1] = 19;
                              } else {
                                var statearr_13155_13219 = state_13143__$1;
                                statearr_13155_13219[1] = 20;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13144 === 3) {
                                var inst_13141 = state_13143[2];
                                var state_13143__$1 = state_13143;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13143__$1, inst_13141);
                              } else {
                                if (state_val_13144 === 12) {
                                  var inst_13118 = state_13143[10];
                                  var state_13143__$1 = state_13143;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13143__$1, 14, inst_13118);
                                } else {
                                  if (state_val_13144 === 2) {
                                    var state_13143__$1 = state_13143;
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13143__$1, 4, results);
                                  } else {
                                    if (state_val_13144 === 19) {
                                      var state_13143__$1 = state_13143;
                                      var statearr_13156_13220 = state_13143__$1;
                                      statearr_13156_13220[2] = null;
                                      statearr_13156_13220[1] = 12;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13144 === 11) {
                                        var inst_13118 = state_13143[2];
                                        var state_13143__$1 = function() {
                                          var statearr_13157 = state_13143;
                                          statearr_13157[10] = inst_13118;
                                          return statearr_13157;
                                        }();
                                        var statearr_13158_13221 = state_13143__$1;
                                        statearr_13158_13221[2] = null;
                                        statearr_13158_13221[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13144 === 9) {
                                          var state_13143__$1 = state_13143;
                                          var statearr_13159_13222 = state_13143__$1;
                                          statearr_13159_13222[2] = null;
                                          statearr_13159_13222[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_13144 === 5) {
                                            var state_13143__$1 = state_13143;
                                            if (cljs.core.truth_(close_QMARK_)) {
                                              var statearr_13160_13223 = state_13143__$1;
                                              statearr_13160_13223[1] = 8;
                                            } else {
                                              var statearr_13161_13224 = state_13143__$1;
                                              statearr_13161_13224[1] = 9;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_13144 === 14) {
                                              var inst_13121 = state_13143[8];
                                              var inst_13123 = state_13143[11];
                                              var inst_13121__$1 = state_13143[2];
                                              var inst_13122 = inst_13121__$1 == null;
                                              var inst_13123__$1 = cljs.core.not.call(null, inst_13122);
                                              var state_13143__$1 = function() {
                                                var statearr_13162 = state_13143;
                                                statearr_13162[8] = inst_13121__$1;
                                                statearr_13162[11] = inst_13123__$1;
                                                return statearr_13162;
                                              }();
                                              if (inst_13123__$1) {
                                                var statearr_13163_13225 = state_13143__$1;
                                                statearr_13163_13225[1] = 15;
                                              } else {
                                                var statearr_13164_13226 = state_13143__$1;
                                                statearr_13164_13226[1] = 16;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_13144 === 16) {
                                                var inst_13123 = state_13143[11];
                                                var state_13143__$1 = state_13143;
                                                var statearr_13165_13227 = state_13143__$1;
                                                statearr_13165_13227[2] = inst_13123;
                                                statearr_13165_13227[1] = 17;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_13144 === 10) {
                                                  var inst_13115 = state_13143[2];
                                                  var state_13143__$1 = state_13143;
                                                  var statearr_13166_13228 = state_13143__$1;
                                                  statearr_13166_13228[2] = inst_13115;
                                                  statearr_13166_13228[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_13144 === 18) {
                                                    var inst_13126 = state_13143[2];
                                                    var state_13143__$1 = state_13143;
                                                    var statearr_13167_13229 = state_13143__$1;
                                                    statearr_13167_13229[2] = inst_13126;
                                                    statearr_13167_13229[1] = 17;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_13144 === 8) {
                                                      var inst_13112 = cljs.core.async.close_BANG_.call(null, to);
                                                      var state_13143__$1 = state_13143;
                                                      var statearr_13168_13230 = state_13143__$1;
                                                      statearr_13168_13230[2] = inst_13112;
                                                      statearr_13168_13230[1] = 10;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6990__auto__, jobs, results, process, async);
        return function(switch__6934__auto__, c__6990__auto__, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____0 = function() {
              var statearr_13172 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13172[0] = cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__;
              statearr_13172[1] = 1;
              return statearr_13172;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____1 = function(state_13143) {
              while (true) {
                var ret_value__6936__auto__ = function() {
                  try {
                    while (true) {
                      var result__6937__auto__ = switch__6934__auto__.call(null, state_13143);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6937__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6937__auto__;
                      }
                      break;
                    }
                  } catch (e13173) {
                    if (e13173 instanceof Object) {
                      var ex__6938__auto__ = e13173;
                      var statearr_13174_13231 = state_13143;
                      statearr_13174_13231[5] = ex__6938__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13143);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13173;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6936__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13232 = state_13143;
                  state_13143 = G__13232;
                  continue;
                } else {
                  return ret_value__6936__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__ = function(state_13143) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____1.call(this, state_13143);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__6935__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__6935__auto__;
          }();
        }(switch__6934__auto__, c__6990__auto__, jobs, results, process, async);
      }();
      var state__6992__auto__ = function() {
        var statearr_13175 = f__6991__auto__.call(null);
        statearr_13175[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6990__auto__;
        return statearr_13175;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6992__auto__);
    };
  }(c__6990__auto__, jobs, results, process, async));
  return c__6990__auto__;
};
cljs.core.async.pipeline_async = function() {
  var cljs$core$async$pipeline_async = null;
  var cljs$core$async$pipeline_async__4 = function(n, to, af, from) {
    return cljs$core$async$pipeline_async.call(null, n, to, af, from, true);
  };
  var cljs$core$async$pipeline_async__5 = function(n, to, af, from, close_QMARK_) {
    return cljs.core.async.pipeline_STAR_.call(null, n, to, af, from, close_QMARK_, null, new cljs.core.Keyword(null, "async", "async", 1050769601));
  };
  cljs$core$async$pipeline_async = function(n, to, af, from, close_QMARK_) {
    switch(arguments.length) {
      case 4:
        return cljs$core$async$pipeline_async__4.call(this, n, to, af, from);
      case 5:
        return cljs$core$async$pipeline_async__5.call(this, n, to, af, from, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$pipeline_async.cljs$core$IFn$_invoke$arity$4 = cljs$core$async$pipeline_async__4;
  cljs$core$async$pipeline_async.cljs$core$IFn$_invoke$arity$5 = cljs$core$async$pipeline_async__5;
  return cljs$core$async$pipeline_async;
}();
cljs.core.async.pipeline = function() {
  var cljs$core$async$pipeline = null;
  var cljs$core$async$pipeline__4 = function(n, to, xf, from) {
    return cljs$core$async$pipeline.call(null, n, to, xf, from, true);
  };
  var cljs$core$async$pipeline__5 = function(n, to, xf, from, close_QMARK_) {
    return cljs$core$async$pipeline.call(null, n, to, xf, from, close_QMARK_, null);
  };
  var cljs$core$async$pipeline__6 = function(n, to, xf, from, close_QMARK_, ex_handler) {
    return cljs.core.async.pipeline_STAR_.call(null, n, to, xf, from, close_QMARK_, ex_handler, new cljs.core.Keyword(null, "compute", "compute", 1555393130));
  };
  cljs$core$async$pipeline = function(n, to, xf, from, close_QMARK_, ex_handler) {
    switch(arguments.length) {
      case 4:
        return cljs$core$async$pipeline__4.call(this, n, to, xf, from);
      case 5:
        return cljs$core$async$pipeline__5.call(this, n, to, xf, from, close_QMARK_);
      case 6:
        return cljs$core$async$pipeline__6.call(this, n, to, xf, from, close_QMARK_, ex_handler);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$pipeline.cljs$core$IFn$_invoke$arity$4 = cljs$core$async$pipeline__4;
  cljs$core$async$pipeline.cljs$core$IFn$_invoke$arity$5 = cljs$core$async$pipeline__5;
  cljs$core$async$pipeline.cljs$core$IFn$_invoke$arity$6 = cljs$core$async$pipeline__6;
  return cljs$core$async$pipeline;
}();
cljs.core.async.split = function() {
  var cljs$core$async$split = null;
  var cljs$core$async$split__2 = function(p, ch) {
    return cljs$core$async$split.call(null, p, ch, null, null);
  };
  var cljs$core$async$split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__6990__auto___13333 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6990__auto___13333, tc, fc) {
      return function() {
        var f__6991__auto__ = function() {
          var switch__6934__auto__ = function(c__6990__auto___13333, tc, fc) {
            return function(state_13308) {
              var state_val_13309 = state_13308[1];
              if (state_val_13309 === 7) {
                var inst_13304 = state_13308[2];
                var state_13308__$1 = state_13308;
                var statearr_13310_13334 = state_13308__$1;
                statearr_13310_13334[2] = inst_13304;
                statearr_13310_13334[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13309 === 1) {
                  var state_13308__$1 = state_13308;
                  var statearr_13311_13335 = state_13308__$1;
                  statearr_13311_13335[2] = null;
                  statearr_13311_13335[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13309 === 4) {
                    var inst_13285 = state_13308[7];
                    var inst_13285__$1 = state_13308[2];
                    var inst_13286 = inst_13285__$1 == null;
                    var state_13308__$1 = function() {
                      var statearr_13312 = state_13308;
                      statearr_13312[7] = inst_13285__$1;
                      return statearr_13312;
                    }();
                    if (cljs.core.truth_(inst_13286)) {
                      var statearr_13313_13336 = state_13308__$1;
                      statearr_13313_13336[1] = 5;
                    } else {
                      var statearr_13314_13337 = state_13308__$1;
                      statearr_13314_13337[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13309 === 13) {
                      var state_13308__$1 = state_13308;
                      var statearr_13315_13338 = state_13308__$1;
                      statearr_13315_13338[2] = null;
                      statearr_13315_13338[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13309 === 6) {
                        var inst_13285 = state_13308[7];
                        var inst_13291 = p.call(null, inst_13285);
                        var state_13308__$1 = state_13308;
                        if (cljs.core.truth_(inst_13291)) {
                          var statearr_13316_13339 = state_13308__$1;
                          statearr_13316_13339[1] = 9;
                        } else {
                          var statearr_13317_13340 = state_13308__$1;
                          statearr_13317_13340[1] = 10;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13309 === 3) {
                          var inst_13306 = state_13308[2];
                          var state_13308__$1 = state_13308;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13308__$1, inst_13306);
                        } else {
                          if (state_val_13309 === 12) {
                            var state_13308__$1 = state_13308;
                            var statearr_13318_13341 = state_13308__$1;
                            statearr_13318_13341[2] = null;
                            statearr_13318_13341[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13309 === 2) {
                              var state_13308__$1 = state_13308;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13308__$1, 4, ch);
                            } else {
                              if (state_val_13309 === 11) {
                                var inst_13285 = state_13308[7];
                                var inst_13295 = state_13308[2];
                                var state_13308__$1 = state_13308;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13308__$1, 8, inst_13295, inst_13285);
                              } else {
                                if (state_val_13309 === 9) {
                                  var state_13308__$1 = state_13308;
                                  var statearr_13319_13342 = state_13308__$1;
                                  statearr_13319_13342[2] = tc;
                                  statearr_13319_13342[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13309 === 5) {
                                    var inst_13288 = cljs.core.async.close_BANG_.call(null, tc);
                                    var inst_13289 = cljs.core.async.close_BANG_.call(null, fc);
                                    var state_13308__$1 = function() {
                                      var statearr_13320 = state_13308;
                                      statearr_13320[8] = inst_13288;
                                      return statearr_13320;
                                    }();
                                    var statearr_13321_13343 = state_13308__$1;
                                    statearr_13321_13343[2] = inst_13289;
                                    statearr_13321_13343[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13309 === 14) {
                                      var inst_13302 = state_13308[2];
                                      var state_13308__$1 = state_13308;
                                      var statearr_13322_13344 = state_13308__$1;
                                      statearr_13322_13344[2] = inst_13302;
                                      statearr_13322_13344[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13309 === 10) {
                                        var state_13308__$1 = state_13308;
                                        var statearr_13323_13345 = state_13308__$1;
                                        statearr_13323_13345[2] = fc;
                                        statearr_13323_13345[1] = 11;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13309 === 8) {
                                          var inst_13297 = state_13308[2];
                                          var state_13308__$1 = state_13308;
                                          if (cljs.core.truth_(inst_13297)) {
                                            var statearr_13324_13346 = state_13308__$1;
                                            statearr_13324_13346[1] = 12;
                                          } else {
                                            var statearr_13325_13347 = state_13308__$1;
                                            statearr_13325_13347[1] = 13;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6990__auto___13333, tc, fc);
          return function(switch__6934__auto__, c__6990__auto___13333, tc, fc) {
            return function() {
              var cljs$core$async$split_$_state_machine__6935__auto__ = null;
              var cljs$core$async$split_$_state_machine__6935__auto____0 = function() {
                var statearr_13329 = [null, null, null, null, null, null, null, null, null];
                statearr_13329[0] = cljs$core$async$split_$_state_machine__6935__auto__;
                statearr_13329[1] = 1;
                return statearr_13329;
              };
              var cljs$core$async$split_$_state_machine__6935__auto____1 = function(state_13308) {
                while (true) {
                  var ret_value__6936__auto__ = function() {
                    try {
                      while (true) {
                        var result__6937__auto__ = switch__6934__auto__.call(null, state_13308);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6937__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6937__auto__;
                        }
                        break;
                      }
                    } catch (e13330) {
                      if (e13330 instanceof Object) {
                        var ex__6938__auto__ = e13330;
                        var statearr_13331_13348 = state_13308;
                        statearr_13331_13348[5] = ex__6938__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13308);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e13330;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6936__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__13349 = state_13308;
                    state_13308 = G__13349;
                    continue;
                  } else {
                    return ret_value__6936__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$split_$_state_machine__6935__auto__ = function(state_13308) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$split_$_state_machine__6935__auto____0.call(this);
                  case 1:
                    return cljs$core$async$split_$_state_machine__6935__auto____1.call(this, state_13308);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$split_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$split_$_state_machine__6935__auto____0;
              cljs$core$async$split_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$split_$_state_machine__6935__auto____1;
              return cljs$core$async$split_$_state_machine__6935__auto__;
            }();
          }(switch__6934__auto__, c__6990__auto___13333, tc, fc);
        }();
        var state__6992__auto__ = function() {
          var statearr_13332 = f__6991__auto__.call(null);
          statearr_13332[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6990__auto___13333;
          return statearr_13332;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6992__auto__);
      };
    }(c__6990__auto___13333, tc, fc));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  cljs$core$async$split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$split__2.call(this, p, ch);
      case 4:
        return cljs$core$async$split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$split.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$split__2;
  cljs$core$async$split.cljs$core$IFn$_invoke$arity$4 = cljs$core$async$split__4;
  return cljs$core$async$split;
}();
cljs.core.async.reduce = function cljs$core$async$reduce(f, init, ch) {
  var c__6990__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6990__auto__) {
    return function() {
      var f__6991__auto__ = function() {
        var switch__6934__auto__ = function(c__6990__auto__) {
          return function(state_13396) {
            var state_val_13397 = state_13396[1];
            if (state_val_13397 === 7) {
              var inst_13392 = state_13396[2];
              var state_13396__$1 = state_13396;
              var statearr_13398_13414 = state_13396__$1;
              statearr_13398_13414[2] = inst_13392;
              statearr_13398_13414[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13397 === 6) {
                var inst_13382 = state_13396[7];
                var inst_13385 = state_13396[8];
                var inst_13389 = f.call(null, inst_13382, inst_13385);
                var inst_13382__$1 = inst_13389;
                var state_13396__$1 = function() {
                  var statearr_13399 = state_13396;
                  statearr_13399[7] = inst_13382__$1;
                  return statearr_13399;
                }();
                var statearr_13400_13415 = state_13396__$1;
                statearr_13400_13415[2] = null;
                statearr_13400_13415[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13397 === 5) {
                  var inst_13382 = state_13396[7];
                  var state_13396__$1 = state_13396;
                  var statearr_13401_13416 = state_13396__$1;
                  statearr_13401_13416[2] = inst_13382;
                  statearr_13401_13416[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13397 === 4) {
                    var inst_13385 = state_13396[8];
                    var inst_13385__$1 = state_13396[2];
                    var inst_13386 = inst_13385__$1 == null;
                    var state_13396__$1 = function() {
                      var statearr_13402 = state_13396;
                      statearr_13402[8] = inst_13385__$1;
                      return statearr_13402;
                    }();
                    if (cljs.core.truth_(inst_13386)) {
                      var statearr_13403_13417 = state_13396__$1;
                      statearr_13403_13417[1] = 5;
                    } else {
                      var statearr_13404_13418 = state_13396__$1;
                      statearr_13404_13418[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13397 === 3) {
                      var inst_13394 = state_13396[2];
                      var state_13396__$1 = state_13396;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13396__$1, inst_13394);
                    } else {
                      if (state_val_13397 === 2) {
                        var state_13396__$1 = state_13396;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13396__$1, 4, ch);
                      } else {
                        if (state_val_13397 === 1) {
                          var inst_13382 = init;
                          var state_13396__$1 = function() {
                            var statearr_13405 = state_13396;
                            statearr_13405[7] = inst_13382;
                            return statearr_13405;
                          }();
                          var statearr_13406_13419 = state_13396__$1;
                          statearr_13406_13419[2] = null;
                          statearr_13406_13419[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6990__auto__);
        return function(switch__6934__auto__, c__6990__auto__) {
          return function() {
            var cljs$core$async$reduce_$_state_machine__6935__auto__ = null;
            var cljs$core$async$reduce_$_state_machine__6935__auto____0 = function() {
              var statearr_13410 = [null, null, null, null, null, null, null, null, null];
              statearr_13410[0] = cljs$core$async$reduce_$_state_machine__6935__auto__;
              statearr_13410[1] = 1;
              return statearr_13410;
            };
            var cljs$core$async$reduce_$_state_machine__6935__auto____1 = function(state_13396) {
              while (true) {
                var ret_value__6936__auto__ = function() {
                  try {
                    while (true) {
                      var result__6937__auto__ = switch__6934__auto__.call(null, state_13396);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6937__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6937__auto__;
                      }
                      break;
                    }
                  } catch (e13411) {
                    if (e13411 instanceof Object) {
                      var ex__6938__auto__ = e13411;
                      var statearr_13412_13420 = state_13396;
                      statearr_13412_13420[5] = ex__6938__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13396);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13411;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6936__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13421 = state_13396;
                  state_13396 = G__13421;
                  continue;
                } else {
                  return ret_value__6936__auto__;
                }
                break;
              }
            };
            cljs$core$async$reduce_$_state_machine__6935__auto__ = function(state_13396) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$reduce_$_state_machine__6935__auto____0.call(this);
                case 1:
                  return cljs$core$async$reduce_$_state_machine__6935__auto____1.call(this, state_13396);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$reduce_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$reduce_$_state_machine__6935__auto____0;
            cljs$core$async$reduce_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$reduce_$_state_machine__6935__auto____1;
            return cljs$core$async$reduce_$_state_machine__6935__auto__;
          }();
        }(switch__6934__auto__, c__6990__auto__);
      }();
      var state__6992__auto__ = function() {
        var statearr_13413 = f__6991__auto__.call(null);
        statearr_13413[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6990__auto__;
        return statearr_13413;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6992__auto__);
    };
  }(c__6990__auto__));
  return c__6990__auto__;
};
cljs.core.async.onto_chan = function() {
  var cljs$core$async$onto_chan = null;
  var cljs$core$async$onto_chan__2 = function(ch, coll) {
    return cljs$core$async$onto_chan.call(null, ch, coll, true);
  };
  var cljs$core$async$onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__6990__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6990__auto__) {
      return function() {
        var f__6991__auto__ = function() {
          var switch__6934__auto__ = function(c__6990__auto__) {
            return function(state_13495) {
              var state_val_13496 = state_13495[1];
              if (state_val_13496 === 7) {
                var inst_13477 = state_13495[2];
                var state_13495__$1 = state_13495;
                var statearr_13497_13520 = state_13495__$1;
                statearr_13497_13520[2] = inst_13477;
                statearr_13497_13520[1] = 6;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13496 === 1) {
                  var inst_13471 = cljs.core.seq.call(null, coll);
                  var inst_13472 = inst_13471;
                  var state_13495__$1 = function() {
                    var statearr_13498 = state_13495;
                    statearr_13498[7] = inst_13472;
                    return statearr_13498;
                  }();
                  var statearr_13499_13521 = state_13495__$1;
                  statearr_13499_13521[2] = null;
                  statearr_13499_13521[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13496 === 4) {
                    var inst_13472 = state_13495[7];
                    var inst_13475 = cljs.core.first.call(null, inst_13472);
                    var state_13495__$1 = state_13495;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13495__$1, 7, ch, inst_13475);
                  } else {
                    if (state_val_13496 === 13) {
                      var inst_13489 = state_13495[2];
                      var state_13495__$1 = state_13495;
                      var statearr_13500_13522 = state_13495__$1;
                      statearr_13500_13522[2] = inst_13489;
                      statearr_13500_13522[1] = 10;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13496 === 6) {
                        var inst_13480 = state_13495[2];
                        var state_13495__$1 = state_13495;
                        if (cljs.core.truth_(inst_13480)) {
                          var statearr_13501_13523 = state_13495__$1;
                          statearr_13501_13523[1] = 8;
                        } else {
                          var statearr_13502_13524 = state_13495__$1;
                          statearr_13502_13524[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13496 === 3) {
                          var inst_13493 = state_13495[2];
                          var state_13495__$1 = state_13495;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13495__$1, inst_13493);
                        } else {
                          if (state_val_13496 === 12) {
                            var state_13495__$1 = state_13495;
                            var statearr_13503_13525 = state_13495__$1;
                            statearr_13503_13525[2] = null;
                            statearr_13503_13525[1] = 13;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13496 === 2) {
                              var inst_13472 = state_13495[7];
                              var state_13495__$1 = state_13495;
                              if (cljs.core.truth_(inst_13472)) {
                                var statearr_13504_13526 = state_13495__$1;
                                statearr_13504_13526[1] = 4;
                              } else {
                                var statearr_13505_13527 = state_13495__$1;
                                statearr_13505_13527[1] = 5;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13496 === 11) {
                                var inst_13486 = cljs.core.async.close_BANG_.call(null, ch);
                                var state_13495__$1 = state_13495;
                                var statearr_13506_13528 = state_13495__$1;
                                statearr_13506_13528[2] = inst_13486;
                                statearr_13506_13528[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13496 === 9) {
                                  var state_13495__$1 = state_13495;
                                  if (cljs.core.truth_(close_QMARK_)) {
                                    var statearr_13507_13529 = state_13495__$1;
                                    statearr_13507_13529[1] = 11;
                                  } else {
                                    var statearr_13508_13530 = state_13495__$1;
                                    statearr_13508_13530[1] = 12;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13496 === 5) {
                                    var inst_13472 = state_13495[7];
                                    var state_13495__$1 = state_13495;
                                    var statearr_13509_13531 = state_13495__$1;
                                    statearr_13509_13531[2] = inst_13472;
                                    statearr_13509_13531[1] = 6;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13496 === 10) {
                                      var inst_13491 = state_13495[2];
                                      var state_13495__$1 = state_13495;
                                      var statearr_13510_13532 = state_13495__$1;
                                      statearr_13510_13532[2] = inst_13491;
                                      statearr_13510_13532[1] = 3;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13496 === 8) {
                                        var inst_13472 = state_13495[7];
                                        var inst_13482 = cljs.core.next.call(null, inst_13472);
                                        var inst_13472__$1 = inst_13482;
                                        var state_13495__$1 = function() {
                                          var statearr_13511 = state_13495;
                                          statearr_13511[7] = inst_13472__$1;
                                          return statearr_13511;
                                        }();
                                        var statearr_13512_13533 = state_13495__$1;
                                        statearr_13512_13533[2] = null;
                                        statearr_13512_13533[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6990__auto__);
          return function(switch__6934__auto__, c__6990__auto__) {
            return function() {
              var cljs$core$async$onto_chan_$_state_machine__6935__auto__ = null;
              var cljs$core$async$onto_chan_$_state_machine__6935__auto____0 = function() {
                var statearr_13516 = [null, null, null, null, null, null, null, null];
                statearr_13516[0] = cljs$core$async$onto_chan_$_state_machine__6935__auto__;
                statearr_13516[1] = 1;
                return statearr_13516;
              };
              var cljs$core$async$onto_chan_$_state_machine__6935__auto____1 = function(state_13495) {
                while (true) {
                  var ret_value__6936__auto__ = function() {
                    try {
                      while (true) {
                        var result__6937__auto__ = switch__6934__auto__.call(null, state_13495);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6937__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6937__auto__;
                        }
                        break;
                      }
                    } catch (e13517) {
                      if (e13517 instanceof Object) {
                        var ex__6938__auto__ = e13517;
                        var statearr_13518_13534 = state_13495;
                        statearr_13518_13534[5] = ex__6938__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13495);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e13517;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6936__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__13535 = state_13495;
                    state_13495 = G__13535;
                    continue;
                  } else {
                    return ret_value__6936__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$onto_chan_$_state_machine__6935__auto__ = function(state_13495) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$onto_chan_$_state_machine__6935__auto____0.call(this);
                  case 1:
                    return cljs$core$async$onto_chan_$_state_machine__6935__auto____1.call(this, state_13495);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$onto_chan_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$onto_chan_$_state_machine__6935__auto____0;
              cljs$core$async$onto_chan_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$onto_chan_$_state_machine__6935__auto____1;
              return cljs$core$async$onto_chan_$_state_machine__6935__auto__;
            }();
          }(switch__6934__auto__, c__6990__auto__);
        }();
        var state__6992__auto__ = function() {
          var statearr_13519 = f__6991__auto__.call(null);
          statearr_13519[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6990__auto__;
          return statearr_13519;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6992__auto__);
      };
    }(c__6990__auto__));
    return c__6990__auto__;
  };
  cljs$core$async$onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$onto_chan__2.call(this, ch, coll);
      case 3:
        return cljs$core$async$onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$onto_chan.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$onto_chan__2;
  cljs$core$async$onto_chan.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$onto_chan__3;
  return cljs$core$async$onto_chan;
}();
cljs.core.async.to_chan = function cljs$core$async$to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj13537 = {};
  return obj13537;
}();
cljs.core.async.muxch_STAR_ = function cljs$core$async$muxch_STAR_(_) {
  if (function() {
    var and__4097__auto__ = _;
    if (and__4097__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4745__auto__ = _ == null ? null : _;
    return function() {
      var or__4109__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj13539 = {};
  return obj13539;
}();
cljs.core.async.tap_STAR_ = function cljs$core$async$tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__4097__auto__ = m;
    if (and__4097__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4745__auto__ = m == null ? null : m;
    return function() {
      var or__4109__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function cljs$core$async$untap_STAR_(m, ch) {
  if (function() {
    var and__4097__auto__ = m;
    if (and__4097__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4745__auto__ = m == null ? null : m;
    return function() {
      var or__4109__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function cljs$core$async$untap_all_STAR_(m) {
  if (function() {
    var and__4097__auto__ = m;
    if (and__4097__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4745__auto__ = m == null ? null : m;
    return function() {
      var or__4109__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function cljs$core$async$mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t13761 !== "undefined") {
    } else {
      cljs.core.async.t13761 = function(cs, ch, mult, meta13762) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta13762 = meta13762;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t13761.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t13761.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$1, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$1, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t13761.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$1) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$1);
          return null;
        };
      }(cs);
      cljs.core.async.t13761.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t13761.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t13761.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t13761.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_13763) {
          var self__ = this;
          var _13763__$1 = this;
          return self__.meta13762;
        };
      }(cs);
      cljs.core.async.t13761.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_13763, meta13762__$1) {
          var self__ = this;
          var _13763__$1 = this;
          return new cljs.core.async.t13761(self__.cs, self__.ch, self__.mult, meta13762__$1);
        };
      }(cs);
      cljs.core.async.t13761.cljs$lang$type = true;
      cljs.core.async.t13761.cljs$lang$ctorStr = "cljs.core.async/t13761";
      cljs.core.async.t13761.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
          return cljs.core._write.call(null, writer__4689__auto__, "cljs.core.async/t13761");
        };
      }(cs);
      cljs.core.async.__GT_t13761 = function(cs) {
        return function cljs$core$async$mult_$___GT_t13761(cs__$1, ch__$1, mult__$1, meta13762) {
          return new cljs.core.async.t13761(cs__$1, ch__$1, mult__$1, meta13762);
        };
      }(cs);
    }
    return new cljs.core.async.t13761(cs, ch, cljs$core$async$mult, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__6990__auto___13982 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6990__auto___13982, cs, m, dchan, dctr, done) {
    return function() {
      var f__6991__auto__ = function() {
        var switch__6934__auto__ = function(c__6990__auto___13982, cs, m, dchan, dctr, done) {
          return function(state_13894) {
            var state_val_13895 = state_13894[1];
            if (state_val_13895 === 7) {
              var inst_13890 = state_13894[2];
              var state_13894__$1 = state_13894;
              var statearr_13896_13983 = state_13894__$1;
              statearr_13896_13983[2] = inst_13890;
              statearr_13896_13983[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13895 === 20) {
                var inst_13795 = state_13894[7];
                var inst_13805 = cljs.core.first.call(null, inst_13795);
                var inst_13806 = cljs.core.nth.call(null, inst_13805, 0, null);
                var inst_13807 = cljs.core.nth.call(null, inst_13805, 1, null);
                var state_13894__$1 = function() {
                  var statearr_13897 = state_13894;
                  statearr_13897[8] = inst_13806;
                  return statearr_13897;
                }();
                if (cljs.core.truth_(inst_13807)) {
                  var statearr_13898_13984 = state_13894__$1;
                  statearr_13898_13984[1] = 22;
                } else {
                  var statearr_13899_13985 = state_13894__$1;
                  statearr_13899_13985[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13895 === 27) {
                  var inst_13837 = state_13894[9];
                  var inst_13766 = state_13894[10];
                  var inst_13835 = state_13894[11];
                  var inst_13842 = state_13894[12];
                  var inst_13842__$1 = cljs.core._nth.call(null, inst_13835, inst_13837);
                  var inst_13843 = cljs.core.async.put_BANG_.call(null, inst_13842__$1, inst_13766, done);
                  var state_13894__$1 = function() {
                    var statearr_13900 = state_13894;
                    statearr_13900[12] = inst_13842__$1;
                    return statearr_13900;
                  }();
                  if (cljs.core.truth_(inst_13843)) {
                    var statearr_13901_13986 = state_13894__$1;
                    statearr_13901_13986[1] = 30;
                  } else {
                    var statearr_13902_13987 = state_13894__$1;
                    statearr_13902_13987[1] = 31;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13895 === 1) {
                    var state_13894__$1 = state_13894;
                    var statearr_13903_13988 = state_13894__$1;
                    statearr_13903_13988[2] = null;
                    statearr_13903_13988[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13895 === 24) {
                      var inst_13795 = state_13894[7];
                      var inst_13812 = state_13894[2];
                      var inst_13813 = cljs.core.next.call(null, inst_13795);
                      var inst_13775 = inst_13813;
                      var inst_13776 = null;
                      var inst_13777 = 0;
                      var inst_13778 = 0;
                      var state_13894__$1 = function() {
                        var statearr_13904 = state_13894;
                        statearr_13904[13] = inst_13777;
                        statearr_13904[14] = inst_13776;
                        statearr_13904[15] = inst_13778;
                        statearr_13904[16] = inst_13775;
                        statearr_13904[17] = inst_13812;
                        return statearr_13904;
                      }();
                      var statearr_13905_13989 = state_13894__$1;
                      statearr_13905_13989[2] = null;
                      statearr_13905_13989[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13895 === 39) {
                        var state_13894__$1 = state_13894;
                        var statearr_13909_13990 = state_13894__$1;
                        statearr_13909_13990[2] = null;
                        statearr_13909_13990[1] = 41;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13895 === 4) {
                          var inst_13766 = state_13894[10];
                          var inst_13766__$1 = state_13894[2];
                          var inst_13767 = inst_13766__$1 == null;
                          var state_13894__$1 = function() {
                            var statearr_13910 = state_13894;
                            statearr_13910[10] = inst_13766__$1;
                            return statearr_13910;
                          }();
                          if (cljs.core.truth_(inst_13767)) {
                            var statearr_13911_13991 = state_13894__$1;
                            statearr_13911_13991[1] = 5;
                          } else {
                            var statearr_13912_13992 = state_13894__$1;
                            statearr_13912_13992[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13895 === 15) {
                            var inst_13777 = state_13894[13];
                            var inst_13776 = state_13894[14];
                            var inst_13778 = state_13894[15];
                            var inst_13775 = state_13894[16];
                            var inst_13791 = state_13894[2];
                            var inst_13792 = inst_13778 + 1;
                            var tmp13906 = inst_13777;
                            var tmp13907 = inst_13776;
                            var tmp13908 = inst_13775;
                            var inst_13775__$1 = tmp13908;
                            var inst_13776__$1 = tmp13907;
                            var inst_13777__$1 = tmp13906;
                            var inst_13778__$1 = inst_13792;
                            var state_13894__$1 = function() {
                              var statearr_13913 = state_13894;
                              statearr_13913[13] = inst_13777__$1;
                              statearr_13913[14] = inst_13776__$1;
                              statearr_13913[15] = inst_13778__$1;
                              statearr_13913[16] = inst_13775__$1;
                              statearr_13913[18] = inst_13791;
                              return statearr_13913;
                            }();
                            var statearr_13914_13993 = state_13894__$1;
                            statearr_13914_13993[2] = null;
                            statearr_13914_13993[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13895 === 21) {
                              var inst_13816 = state_13894[2];
                              var state_13894__$1 = state_13894;
                              var statearr_13918_13994 = state_13894__$1;
                              statearr_13918_13994[2] = inst_13816;
                              statearr_13918_13994[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13895 === 31) {
                                var inst_13842 = state_13894[12];
                                var inst_13846 = done.call(null, null);
                                var inst_13847 = cljs.core.async.untap_STAR_.call(null, m, inst_13842);
                                var state_13894__$1 = function() {
                                  var statearr_13919 = state_13894;
                                  statearr_13919[19] = inst_13846;
                                  return statearr_13919;
                                }();
                                var statearr_13920_13995 = state_13894__$1;
                                statearr_13920_13995[2] = inst_13847;
                                statearr_13920_13995[1] = 32;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13895 === 32) {
                                  var inst_13837 = state_13894[9];
                                  var inst_13834 = state_13894[20];
                                  var inst_13836 = state_13894[21];
                                  var inst_13835 = state_13894[11];
                                  var inst_13849 = state_13894[2];
                                  var inst_13850 = inst_13837 + 1;
                                  var tmp13915 = inst_13834;
                                  var tmp13916 = inst_13836;
                                  var tmp13917 = inst_13835;
                                  var inst_13834__$1 = tmp13915;
                                  var inst_13835__$1 = tmp13917;
                                  var inst_13836__$1 = tmp13916;
                                  var inst_13837__$1 = inst_13850;
                                  var state_13894__$1 = function() {
                                    var statearr_13921 = state_13894;
                                    statearr_13921[9] = inst_13837__$1;
                                    statearr_13921[20] = inst_13834__$1;
                                    statearr_13921[21] = inst_13836__$1;
                                    statearr_13921[11] = inst_13835__$1;
                                    statearr_13921[22] = inst_13849;
                                    return statearr_13921;
                                  }();
                                  var statearr_13922_13996 = state_13894__$1;
                                  statearr_13922_13996[2] = null;
                                  statearr_13922_13996[1] = 25;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13895 === 40) {
                                    var inst_13862 = state_13894[23];
                                    var inst_13866 = done.call(null, null);
                                    var inst_13867 = cljs.core.async.untap_STAR_.call(null, m, inst_13862);
                                    var state_13894__$1 = function() {
                                      var statearr_13923 = state_13894;
                                      statearr_13923[24] = inst_13866;
                                      return statearr_13923;
                                    }();
                                    var statearr_13924_13997 = state_13894__$1;
                                    statearr_13924_13997[2] = inst_13867;
                                    statearr_13924_13997[1] = 41;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13895 === 33) {
                                      var inst_13853 = state_13894[25];
                                      var inst_13855 = cljs.core.chunked_seq_QMARK_.call(null, inst_13853);
                                      var state_13894__$1 = state_13894;
                                      if (inst_13855) {
                                        var statearr_13925_13998 = state_13894__$1;
                                        statearr_13925_13998[1] = 36;
                                      } else {
                                        var statearr_13926_13999 = state_13894__$1;
                                        statearr_13926_13999[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13895 === 13) {
                                        var inst_13785 = state_13894[26];
                                        var inst_13788 = cljs.core.async.close_BANG_.call(null, inst_13785);
                                        var state_13894__$1 = state_13894;
                                        var statearr_13927_14000 = state_13894__$1;
                                        statearr_13927_14000[2] = inst_13788;
                                        statearr_13927_14000[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13895 === 22) {
                                          var inst_13806 = state_13894[8];
                                          var inst_13809 = cljs.core.async.close_BANG_.call(null, inst_13806);
                                          var state_13894__$1 = state_13894;
                                          var statearr_13928_14001 = state_13894__$1;
                                          statearr_13928_14001[2] = inst_13809;
                                          statearr_13928_14001[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_13895 === 36) {
                                            var inst_13853 = state_13894[25];
                                            var inst_13857 = cljs.core.chunk_first.call(null, inst_13853);
                                            var inst_13858 = cljs.core.chunk_rest.call(null, inst_13853);
                                            var inst_13859 = cljs.core.count.call(null, inst_13857);
                                            var inst_13834 = inst_13858;
                                            var inst_13835 = inst_13857;
                                            var inst_13836 = inst_13859;
                                            var inst_13837 = 0;
                                            var state_13894__$1 = function() {
                                              var statearr_13929 = state_13894;
                                              statearr_13929[9] = inst_13837;
                                              statearr_13929[20] = inst_13834;
                                              statearr_13929[21] = inst_13836;
                                              statearr_13929[11] = inst_13835;
                                              return statearr_13929;
                                            }();
                                            var statearr_13930_14002 = state_13894__$1;
                                            statearr_13930_14002[2] = null;
                                            statearr_13930_14002[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_13895 === 41) {
                                              var inst_13853 = state_13894[25];
                                              var inst_13869 = state_13894[2];
                                              var inst_13870 = cljs.core.next.call(null, inst_13853);
                                              var inst_13834 = inst_13870;
                                              var inst_13835 = null;
                                              var inst_13836 = 0;
                                              var inst_13837 = 0;
                                              var state_13894__$1 = function() {
                                                var statearr_13931 = state_13894;
                                                statearr_13931[9] = inst_13837;
                                                statearr_13931[20] = inst_13834;
                                                statearr_13931[21] = inst_13836;
                                                statearr_13931[11] = inst_13835;
                                                statearr_13931[27] = inst_13869;
                                                return statearr_13931;
                                              }();
                                              var statearr_13932_14003 = state_13894__$1;
                                              statearr_13932_14003[2] = null;
                                              statearr_13932_14003[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_13895 === 43) {
                                                var state_13894__$1 = state_13894;
                                                var statearr_13933_14004 = state_13894__$1;
                                                statearr_13933_14004[2] = null;
                                                statearr_13933_14004[1] = 44;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_13895 === 29) {
                                                  var inst_13878 = state_13894[2];
                                                  var state_13894__$1 = state_13894;
                                                  var statearr_13934_14005 = state_13894__$1;
                                                  statearr_13934_14005[2] = inst_13878;
                                                  statearr_13934_14005[1] = 26;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_13895 === 44) {
                                                    var inst_13887 = state_13894[2];
                                                    var state_13894__$1 = function() {
                                                      var statearr_13935 = state_13894;
                                                      statearr_13935[28] = inst_13887;
                                                      return statearr_13935;
                                                    }();
                                                    var statearr_13936_14006 = state_13894__$1;
                                                    statearr_13936_14006[2] = null;
                                                    statearr_13936_14006[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_13895 === 6) {
                                                      var inst_13826 = state_13894[29];
                                                      var inst_13825 = cljs.core.deref.call(null, cs);
                                                      var inst_13826__$1 = cljs.core.keys.call(null, inst_13825);
                                                      var inst_13827 = cljs.core.count.call(null, inst_13826__$1);
                                                      var inst_13828 = cljs.core.reset_BANG_.call(null, dctr, inst_13827);
                                                      var inst_13833 = cljs.core.seq.call(null, inst_13826__$1);
                                                      var inst_13834 = inst_13833;
                                                      var inst_13835 = null;
                                                      var inst_13836 = 0;
                                                      var inst_13837 = 0;
                                                      var state_13894__$1 = function() {
                                                        var statearr_13937 = state_13894;
                                                        statearr_13937[9] = inst_13837;
                                                        statearr_13937[20] = inst_13834;
                                                        statearr_13937[30] = inst_13828;
                                                        statearr_13937[21] = inst_13836;
                                                        statearr_13937[11] = inst_13835;
                                                        statearr_13937[29] = inst_13826__$1;
                                                        return statearr_13937;
                                                      }();
                                                      var statearr_13938_14007 = state_13894__$1;
                                                      statearr_13938_14007[2] = null;
                                                      statearr_13938_14007[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_13895 === 28) {
                                                        var inst_13853 = state_13894[25];
                                                        var inst_13834 = state_13894[20];
                                                        var inst_13853__$1 = cljs.core.seq.call(null, inst_13834);
                                                        var state_13894__$1 = function() {
                                                          var statearr_13939 = state_13894;
                                                          statearr_13939[25] = inst_13853__$1;
                                                          return statearr_13939;
                                                        }();
                                                        if (inst_13853__$1) {
                                                          var statearr_13940_14008 = state_13894__$1;
                                                          statearr_13940_14008[1] = 33;
                                                        } else {
                                                          var statearr_13941_14009 = state_13894__$1;
                                                          statearr_13941_14009[1] = 34;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_13895 === 25) {
                                                          var inst_13837 = state_13894[9];
                                                          var inst_13836 = state_13894[21];
                                                          var inst_13839 = inst_13837 < inst_13836;
                                                          var inst_13840 = inst_13839;
                                                          var state_13894__$1 = state_13894;
                                                          if (cljs.core.truth_(inst_13840)) {
                                                            var statearr_13942_14010 = state_13894__$1;
                                                            statearr_13942_14010[1] = 27;
                                                          } else {
                                                            var statearr_13943_14011 = state_13894__$1;
                                                            statearr_13943_14011[1] = 28;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_13895 === 34) {
                                                            var state_13894__$1 = state_13894;
                                                            var statearr_13944_14012 = state_13894__$1;
                                                            statearr_13944_14012[2] = null;
                                                            statearr_13944_14012[1] = 35;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_13895 === 17) {
                                                              var state_13894__$1 = state_13894;
                                                              var statearr_13945_14013 = state_13894__$1;
                                                              statearr_13945_14013[2] = null;
                                                              statearr_13945_14013[1] = 18;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_13895 === 3) {
                                                                var inst_13892 = state_13894[2];
                                                                var state_13894__$1 = state_13894;
                                                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13894__$1, inst_13892);
                                                              } else {
                                                                if (state_val_13895 === 12) {
                                                                  var inst_13821 = state_13894[2];
                                                                  var state_13894__$1 = state_13894;
                                                                  var statearr_13946_14014 = state_13894__$1;
                                                                  statearr_13946_14014[2] = inst_13821;
                                                                  statearr_13946_14014[1] = 9;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_13895 === 2) {
                                                                    var state_13894__$1 = state_13894;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13894__$1, 4, ch);
                                                                  } else {
                                                                    if (state_val_13895 === 23) {
                                                                      var state_13894__$1 = state_13894;
                                                                      var statearr_13947_14015 = state_13894__$1;
                                                                      statearr_13947_14015[2] = null;
                                                                      statearr_13947_14015[1] = 24;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_13895 === 35) {
                                                                        var inst_13876 = state_13894[2];
                                                                        var state_13894__$1 = state_13894;
                                                                        var statearr_13948_14016 = state_13894__$1;
                                                                        statearr_13948_14016[2] = inst_13876;
                                                                        statearr_13948_14016[1] = 29;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_13895 === 19) {
                                                                          var inst_13795 = state_13894[7];
                                                                          var inst_13799 = cljs.core.chunk_first.call(null, inst_13795);
                                                                          var inst_13800 = cljs.core.chunk_rest.call(null, inst_13795);
                                                                          var inst_13801 = cljs.core.count.call(null, inst_13799);
                                                                          var inst_13775 = inst_13800;
                                                                          var inst_13776 = inst_13799;
                                                                          var inst_13777 = inst_13801;
                                                                          var inst_13778 = 0;
                                                                          var state_13894__$1 = function() {
                                                                            var statearr_13949 = state_13894;
                                                                            statearr_13949[13] = inst_13777;
                                                                            statearr_13949[14] = inst_13776;
                                                                            statearr_13949[15] = inst_13778;
                                                                            statearr_13949[16] = inst_13775;
                                                                            return statearr_13949;
                                                                          }();
                                                                          var statearr_13950_14017 = state_13894__$1;
                                                                          statearr_13950_14017[2] = null;
                                                                          statearr_13950_14017[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_13895 === 11) {
                                                                            var inst_13795 = state_13894[7];
                                                                            var inst_13775 = state_13894[16];
                                                                            var inst_13795__$1 = cljs.core.seq.call(null, inst_13775);
                                                                            var state_13894__$1 = function() {
                                                                              var statearr_13951 = state_13894;
                                                                              statearr_13951[7] = inst_13795__$1;
                                                                              return statearr_13951;
                                                                            }();
                                                                            if (inst_13795__$1) {
                                                                              var statearr_13952_14018 = state_13894__$1;
                                                                              statearr_13952_14018[1] = 16;
                                                                            } else {
                                                                              var statearr_13953_14019 = state_13894__$1;
                                                                              statearr_13953_14019[1] = 17;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_13895 === 9) {
                                                                              var inst_13823 = state_13894[2];
                                                                              var state_13894__$1 = state_13894;
                                                                              var statearr_13954_14020 = state_13894__$1;
                                                                              statearr_13954_14020[2] = inst_13823;
                                                                              statearr_13954_14020[1] = 7;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_13895 === 5) {
                                                                                var inst_13773 = cljs.core.deref.call(null, cs);
                                                                                var inst_13774 = cljs.core.seq.call(null, inst_13773);
                                                                                var inst_13775 = inst_13774;
                                                                                var inst_13776 = null;
                                                                                var inst_13777 = 0;
                                                                                var inst_13778 = 0;
                                                                                var state_13894__$1 = function() {
                                                                                  var statearr_13955 = state_13894;
                                                                                  statearr_13955[13] = inst_13777;
                                                                                  statearr_13955[14] = inst_13776;
                                                                                  statearr_13955[15] = inst_13778;
                                                                                  statearr_13955[16] = inst_13775;
                                                                                  return statearr_13955;
                                                                                }();
                                                                                var statearr_13956_14021 = state_13894__$1;
                                                                                statearr_13956_14021[2] = null;
                                                                                statearr_13956_14021[1] = 8;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_13895 === 14) {
                                                                                  var state_13894__$1 = state_13894;
                                                                                  var statearr_13957_14022 = state_13894__$1;
                                                                                  statearr_13957_14022[2] = null;
                                                                                  statearr_13957_14022[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_13895 === 45) {
                                                                                    var inst_13884 = state_13894[2];
                                                                                    var state_13894__$1 = state_13894;
                                                                                    var statearr_13958_14023 = state_13894__$1;
                                                                                    statearr_13958_14023[2] = inst_13884;
                                                                                    statearr_13958_14023[1] = 44;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_13895 === 26) {
                                                                                      var inst_13826 = state_13894[29];
                                                                                      var inst_13880 = state_13894[2];
                                                                                      var inst_13881 = cljs.core.seq.call(null, inst_13826);
                                                                                      var state_13894__$1 = function() {
                                                                                        var statearr_13959 = state_13894;
                                                                                        statearr_13959[31] = inst_13880;
                                                                                        return statearr_13959;
                                                                                      }();
                                                                                      if (inst_13881) {
                                                                                        var statearr_13960_14024 = state_13894__$1;
                                                                                        statearr_13960_14024[1] = 42;
                                                                                      } else {
                                                                                        var statearr_13961_14025 = state_13894__$1;
                                                                                        statearr_13961_14025[1] = 43;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_13895 === 16) {
                                                                                        var inst_13795 = state_13894[7];
                                                                                        var inst_13797 = cljs.core.chunked_seq_QMARK_.call(null, inst_13795);
                                                                                        var state_13894__$1 = state_13894;
                                                                                        if (inst_13797) {
                                                                                          var statearr_13962_14026 = state_13894__$1;
                                                                                          statearr_13962_14026[1] = 19;
                                                                                        } else {
                                                                                          var statearr_13963_14027 = state_13894__$1;
                                                                                          statearr_13963_14027[1] = 20;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_13895 === 38) {
                                                                                          var inst_13873 = state_13894[2];
                                                                                          var state_13894__$1 = state_13894;
                                                                                          var statearr_13964_14028 = state_13894__$1;
                                                                                          statearr_13964_14028[2] = inst_13873;
                                                                                          statearr_13964_14028[1] = 35;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_13895 === 30) {
                                                                                            var state_13894__$1 = state_13894;
                                                                                            var statearr_13965_14029 = state_13894__$1;
                                                                                            statearr_13965_14029[2] = null;
                                                                                            statearr_13965_14029[1] = 32;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_13895 === 10) {
                                                                                              var inst_13776 = state_13894[14];
                                                                                              var inst_13778 = state_13894[15];
                                                                                              var inst_13784 = cljs.core._nth.call(null, inst_13776, inst_13778);
                                                                                              var inst_13785 = cljs.core.nth.call(null, inst_13784, 0, null);
                                                                                              var inst_13786 = cljs.core.nth.call(null, inst_13784, 1, null);
                                                                                              var state_13894__$1 = function() {
                                                                                                var statearr_13966 = state_13894;
                                                                                                statearr_13966[26] = inst_13785;
                                                                                                return statearr_13966;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_13786)) {
                                                                                                var statearr_13967_14030 = state_13894__$1;
                                                                                                statearr_13967_14030[1] = 13;
                                                                                              } else {
                                                                                                var statearr_13968_14031 = state_13894__$1;
                                                                                                statearr_13968_14031[1] = 14;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_13895 === 18) {
                                                                                                var inst_13819 = state_13894[2];
                                                                                                var state_13894__$1 = state_13894;
                                                                                                var statearr_13969_14032 = state_13894__$1;
                                                                                                statearr_13969_14032[2] = inst_13819;
                                                                                                statearr_13969_14032[1] = 12;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_13895 === 42) {
                                                                                                  var state_13894__$1 = state_13894;
                                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13894__$1, 45, dchan);
                                                                                                } else {
                                                                                                  if (state_val_13895 === 37) {
                                                                                                    var inst_13853 = state_13894[25];
                                                                                                    var inst_13862 = state_13894[23];
                                                                                                    var inst_13766 = state_13894[10];
                                                                                                    var inst_13862__$1 = cljs.core.first.call(null, inst_13853);
                                                                                                    var inst_13863 = cljs.core.async.put_BANG_.call(null, inst_13862__$1, inst_13766, done);
                                                                                                    var state_13894__$1 = function() {
                                                                                                      var statearr_13970 = state_13894;
                                                                                                      statearr_13970[23] = inst_13862__$1;
                                                                                                      return statearr_13970;
                                                                                                    }();
                                                                                                    if (cljs.core.truth_(inst_13863)) {
                                                                                                      var statearr_13971_14033 = state_13894__$1;
                                                                                                      statearr_13971_14033[1] = 39;
                                                                                                    } else {
                                                                                                      var statearr_13972_14034 = state_13894__$1;
                                                                                                      statearr_13972_14034[1] = 40;
                                                                                                    }
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_13895 === 8) {
                                                                                                      var inst_13777 = state_13894[13];
                                                                                                      var inst_13778 = state_13894[15];
                                                                                                      var inst_13780 = inst_13778 < inst_13777;
                                                                                                      var inst_13781 = inst_13780;
                                                                                                      var state_13894__$1 = state_13894;
                                                                                                      if (cljs.core.truth_(inst_13781)) {
                                                                                                        var statearr_13973_14035 = state_13894__$1;
                                                                                                        statearr_13973_14035[1] = 10;
                                                                                                      } else {
                                                                                                        var statearr_13974_14036 = state_13894__$1;
                                                                                                        statearr_13974_14036[1] = 11;
                                                                                                      }
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6990__auto___13982, cs, m, dchan, dctr, done);
        return function(switch__6934__auto__, c__6990__auto___13982, cs, m, dchan, dctr, done) {
          return function() {
            var cljs$core$async$mult_$_state_machine__6935__auto__ = null;
            var cljs$core$async$mult_$_state_machine__6935__auto____0 = function() {
              var statearr_13978 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13978[0] = cljs$core$async$mult_$_state_machine__6935__auto__;
              statearr_13978[1] = 1;
              return statearr_13978;
            };
            var cljs$core$async$mult_$_state_machine__6935__auto____1 = function(state_13894) {
              while (true) {
                var ret_value__6936__auto__ = function() {
                  try {
                    while (true) {
                      var result__6937__auto__ = switch__6934__auto__.call(null, state_13894);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6937__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6937__auto__;
                      }
                      break;
                    }
                  } catch (e13979) {
                    if (e13979 instanceof Object) {
                      var ex__6938__auto__ = e13979;
                      var statearr_13980_14037 = state_13894;
                      statearr_13980_14037[5] = ex__6938__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13894);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13979;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6936__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14038 = state_13894;
                  state_13894 = G__14038;
                  continue;
                } else {
                  return ret_value__6936__auto__;
                }
                break;
              }
            };
            cljs$core$async$mult_$_state_machine__6935__auto__ = function(state_13894) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mult_$_state_machine__6935__auto____0.call(this);
                case 1:
                  return cljs$core$async$mult_$_state_machine__6935__auto____1.call(this, state_13894);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mult_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mult_$_state_machine__6935__auto____0;
            cljs$core$async$mult_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mult_$_state_machine__6935__auto____1;
            return cljs$core$async$mult_$_state_machine__6935__auto__;
          }();
        }(switch__6934__auto__, c__6990__auto___13982, cs, m, dchan, dctr, done);
      }();
      var state__6992__auto__ = function() {
        var statearr_13981 = f__6991__auto__.call(null);
        statearr_13981[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6990__auto___13982;
        return statearr_13981;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6992__auto__);
    };
  }(c__6990__auto___13982, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function() {
  var cljs$core$async$tap = null;
  var cljs$core$async$tap__2 = function(mult, ch) {
    return cljs$core$async$tap.call(null, mult, ch, true);
  };
  var cljs$core$async$tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  cljs$core$async$tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$tap__2.call(this, mult, ch);
      case 3:
        return cljs$core$async$tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$tap.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$tap__2;
  cljs$core$async$tap.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$tap__3;
  return cljs$core$async$tap;
}();
cljs.core.async.untap = function cljs$core$async$untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function cljs$core$async$untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj14040 = {};
  return obj14040;
}();
cljs.core.async.admix_STAR_ = function cljs$core$async$admix_STAR_(m, ch) {
  if (function() {
    var and__4097__auto__ = m;
    if (and__4097__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4745__auto__ = m == null ? null : m;
    return function() {
      var or__4109__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function cljs$core$async$unmix_STAR_(m, ch) {
  if (function() {
    var and__4097__auto__ = m;
    if (and__4097__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4745__auto__ = m == null ? null : m;
    return function() {
      var or__4109__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function cljs$core$async$unmix_all_STAR_(m) {
  if (function() {
    var and__4097__auto__ = m;
    if (and__4097__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4745__auto__ = m == null ? null : m;
    return function() {
      var or__4109__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function cljs$core$async$toggle_STAR_(m, state_map) {
  if (function() {
    var and__4097__auto__ = m;
    if (and__4097__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4745__auto__ = m == null ? null : m;
    return function() {
      var or__4109__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function cljs$core$async$solo_mode_STAR_(m, mode) {
  if (function() {
    var and__4097__auto__ = m;
    if (and__4097__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4745__auto__ = m == null ? null : m;
    return function() {
      var or__4109__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.ioc_alts_BANG_ = function() {
  var cljs$core$async$ioc_alts_BANG___delegate = function(state, cont_block, ports, p__14041) {
    var map__14046 = p__14041;
    var map__14046__$1 = cljs.core.seq_QMARK_.call(null, map__14046) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14046) : map__14046;
    var opts = map__14046__$1;
    var statearr_14047_14050 = state;
    statearr_14047_14050[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4126__auto__ = cljs.core.async.do_alts.call(null, function(map__14046, map__14046__$1, opts) {
      return function(val) {
        var statearr_14048_14051 = state;
        statearr_14048_14051[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
      };
    }(map__14046, map__14046__$1, opts), ports, opts);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var cb = temp__4126__auto__;
      var statearr_14049_14052 = state;
      statearr_14049_14052[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
    } else {
      return null;
    }
  };
  var cljs$core$async$ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__14041 = null;
    if (arguments.length > 3) {
      var G__14053__i = 0, G__14053__a = new Array(arguments.length - 3);
      while (G__14053__i < G__14053__a.length) {
        G__14053__a[G__14053__i] = arguments[G__14053__i + 3];
        ++G__14053__i;
      }
      p__14041 = new cljs.core.IndexedSeq(G__14053__a, 0);
    }
    return cljs$core$async$ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__14041);
  };
  cljs$core$async$ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  cljs$core$async$ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__14054) {
    var state = cljs.core.first(arglist__14054);
    arglist__14054 = cljs.core.next(arglist__14054);
    var cont_block = cljs.core.first(arglist__14054);
    arglist__14054 = cljs.core.next(arglist__14054);
    var ports = cljs.core.first(arglist__14054);
    var p__14041 = cljs.core.rest(arglist__14054);
    return cljs$core$async$ioc_alts_BANG___delegate(state, cont_block, ports, p__14041);
  };
  cljs$core$async$ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$async$ioc_alts_BANG___delegate;
  return cljs$core$async$ioc_alts_BANG_;
}();
cljs.core.async.mix = function cljs$core$async$mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t14174 !== "undefined") {
    } else {
      cljs.core.async.t14174 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta14175) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta14175 = meta14175;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t14174.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t14174.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t14174.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t14174.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t14174.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t14174.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t14174.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t14174.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t14174.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_14176) {
          var self__ = this;
          var _14176__$1 = this;
          return self__.meta14175;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t14174.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_14176, meta14175__$1) {
          var self__ = this;
          var _14176__$1 = this;
          return new cljs.core.async.t14174(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta14175__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t14174.cljs$lang$type = true;
      cljs.core.async.t14174.cljs$lang$ctorStr = "cljs.core.async/t14174";
      cljs.core.async.t14174.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
          return cljs.core._write.call(null, writer__4689__auto__, "cljs.core.async/t14174");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t14174 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function cljs$core$async$mix_$___GT_t14174(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta14175) {
          return new cljs.core.async.t14174(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta14175);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t14174(change, cljs$core$async$mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__6990__auto___14293 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6990__auto___14293, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__6991__auto__ = function() {
        var switch__6934__auto__ = function(c__6990__auto___14293, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_14246) {
            var state_val_14247 = state_14246[1];
            if (state_val_14247 === 7) {
              var inst_14190 = state_14246[7];
              var inst_14195 = cljs.core.apply.call(null, cljs.core.hash_map, inst_14190);
              var state_14246__$1 = state_14246;
              var statearr_14248_14294 = state_14246__$1;
              statearr_14248_14294[2] = inst_14195;
              statearr_14248_14294[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14247 === 20) {
                var inst_14205 = state_14246[8];
                var state_14246__$1 = state_14246;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14246__$1, 23, out, inst_14205);
              } else {
                if (state_val_14247 === 1) {
                  var inst_14180 = state_14246[9];
                  var inst_14180__$1 = calc_state.call(null);
                  var inst_14181 = cljs.core.seq_QMARK_.call(null, inst_14180__$1);
                  var state_14246__$1 = function() {
                    var statearr_14249 = state_14246;
                    statearr_14249[9] = inst_14180__$1;
                    return statearr_14249;
                  }();
                  if (inst_14181) {
                    var statearr_14250_14295 = state_14246__$1;
                    statearr_14250_14295[1] = 2;
                  } else {
                    var statearr_14251_14296 = state_14246__$1;
                    statearr_14251_14296[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14247 === 24) {
                    var inst_14198 = state_14246[10];
                    var inst_14190 = inst_14198;
                    var state_14246__$1 = function() {
                      var statearr_14252 = state_14246;
                      statearr_14252[7] = inst_14190;
                      return statearr_14252;
                    }();
                    var statearr_14253_14297 = state_14246__$1;
                    statearr_14253_14297[2] = null;
                    statearr_14253_14297[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14247 === 4) {
                      var inst_14180 = state_14246[9];
                      var inst_14186 = state_14246[2];
                      var inst_14187 = cljs.core.get.call(null, inst_14186, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                      var inst_14188 = cljs.core.get.call(null, inst_14186, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                      var inst_14189 = cljs.core.get.call(null, inst_14186, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                      var inst_14190 = inst_14180;
                      var state_14246__$1 = function() {
                        var statearr_14254 = state_14246;
                        statearr_14254[7] = inst_14190;
                        statearr_14254[11] = inst_14188;
                        statearr_14254[12] = inst_14187;
                        statearr_14254[13] = inst_14189;
                        return statearr_14254;
                      }();
                      var statearr_14255_14298 = state_14246__$1;
                      statearr_14255_14298[2] = null;
                      statearr_14255_14298[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14247 === 15) {
                        var state_14246__$1 = state_14246;
                        var statearr_14256_14299 = state_14246__$1;
                        statearr_14256_14299[2] = null;
                        statearr_14256_14299[1] = 16;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14247 === 21) {
                          var inst_14198 = state_14246[10];
                          var inst_14190 = inst_14198;
                          var state_14246__$1 = function() {
                            var statearr_14257 = state_14246;
                            statearr_14257[7] = inst_14190;
                            return statearr_14257;
                          }();
                          var statearr_14258_14300 = state_14246__$1;
                          statearr_14258_14300[2] = null;
                          statearr_14258_14300[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14247 === 13) {
                            var inst_14242 = state_14246[2];
                            var state_14246__$1 = state_14246;
                            var statearr_14259_14301 = state_14246__$1;
                            statearr_14259_14301[2] = inst_14242;
                            statearr_14259_14301[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14247 === 22) {
                              var inst_14240 = state_14246[2];
                              var state_14246__$1 = state_14246;
                              var statearr_14260_14302 = state_14246__$1;
                              statearr_14260_14302[2] = inst_14240;
                              statearr_14260_14302[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14247 === 6) {
                                var inst_14244 = state_14246[2];
                                var state_14246__$1 = state_14246;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14246__$1, inst_14244);
                              } else {
                                if (state_val_14247 === 25) {
                                  var state_14246__$1 = state_14246;
                                  var statearr_14261_14303 = state_14246__$1;
                                  statearr_14261_14303[2] = null;
                                  statearr_14261_14303[1] = 26;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14247 === 17) {
                                    var inst_14220 = state_14246[14];
                                    var state_14246__$1 = state_14246;
                                    var statearr_14262_14304 = state_14246__$1;
                                    statearr_14262_14304[2] = inst_14220;
                                    statearr_14262_14304[1] = 19;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14247 === 3) {
                                      var inst_14180 = state_14246[9];
                                      var state_14246__$1 = state_14246;
                                      var statearr_14263_14305 = state_14246__$1;
                                      statearr_14263_14305[2] = inst_14180;
                                      statearr_14263_14305[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_14247 === 12) {
                                        var inst_14201 = state_14246[15];
                                        var inst_14220 = state_14246[14];
                                        var inst_14206 = state_14246[16];
                                        var inst_14220__$1 = inst_14201.call(null, inst_14206);
                                        var state_14246__$1 = function() {
                                          var statearr_14264 = state_14246;
                                          statearr_14264[14] = inst_14220__$1;
                                          return statearr_14264;
                                        }();
                                        if (cljs.core.truth_(inst_14220__$1)) {
                                          var statearr_14265_14306 = state_14246__$1;
                                          statearr_14265_14306[1] = 17;
                                        } else {
                                          var statearr_14266_14307 = state_14246__$1;
                                          statearr_14266_14307[1] = 18;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_14247 === 2) {
                                          var inst_14180 = state_14246[9];
                                          var inst_14183 = cljs.core.apply.call(null, cljs.core.hash_map, inst_14180);
                                          var state_14246__$1 = state_14246;
                                          var statearr_14267_14308 = state_14246__$1;
                                          statearr_14267_14308[2] = inst_14183;
                                          statearr_14267_14308[1] = 4;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_14247 === 23) {
                                            var inst_14231 = state_14246[2];
                                            var state_14246__$1 = state_14246;
                                            if (cljs.core.truth_(inst_14231)) {
                                              var statearr_14268_14309 = state_14246__$1;
                                              statearr_14268_14309[1] = 24;
                                            } else {
                                              var statearr_14269_14310 = state_14246__$1;
                                              statearr_14269_14310[1] = 25;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_14247 === 19) {
                                              var inst_14228 = state_14246[2];
                                              var state_14246__$1 = state_14246;
                                              if (cljs.core.truth_(inst_14228)) {
                                                var statearr_14270_14311 = state_14246__$1;
                                                statearr_14270_14311[1] = 20;
                                              } else {
                                                var statearr_14271_14312 = state_14246__$1;
                                                statearr_14271_14312[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_14247 === 11) {
                                                var inst_14205 = state_14246[8];
                                                var inst_14211 = inst_14205 == null;
                                                var state_14246__$1 = state_14246;
                                                if (cljs.core.truth_(inst_14211)) {
                                                  var statearr_14272_14313 = state_14246__$1;
                                                  statearr_14272_14313[1] = 14;
                                                } else {
                                                  var statearr_14273_14314 = state_14246__$1;
                                                  statearr_14273_14314[1] = 15;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_14247 === 9) {
                                                  var inst_14198 = state_14246[10];
                                                  var inst_14198__$1 = state_14246[2];
                                                  var inst_14199 = cljs.core.get.call(null, inst_14198__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                                  var inst_14200 = cljs.core.get.call(null, inst_14198__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                                  var inst_14201 = cljs.core.get.call(null, inst_14198__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                                  var state_14246__$1 = function() {
                                                    var statearr_14274 = state_14246;
                                                    statearr_14274[10] = inst_14198__$1;
                                                    statearr_14274[15] = inst_14201;
                                                    statearr_14274[17] = inst_14200;
                                                    return statearr_14274;
                                                  }();
                                                  return cljs.core.async.ioc_alts_BANG_.call(null, state_14246__$1, 10, inst_14199);
                                                } else {
                                                  if (state_val_14247 === 5) {
                                                    var inst_14190 = state_14246[7];
                                                    var inst_14193 = cljs.core.seq_QMARK_.call(null, inst_14190);
                                                    var state_14246__$1 = state_14246;
                                                    if (inst_14193) {
                                                      var statearr_14275_14315 = state_14246__$1;
                                                      statearr_14275_14315[1] = 7;
                                                    } else {
                                                      var statearr_14276_14316 = state_14246__$1;
                                                      statearr_14276_14316[1] = 8;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_14247 === 14) {
                                                      var inst_14206 = state_14246[16];
                                                      var inst_14213 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_14206);
                                                      var state_14246__$1 = state_14246;
                                                      var statearr_14277_14317 = state_14246__$1;
                                                      statearr_14277_14317[2] = inst_14213;
                                                      statearr_14277_14317[1] = 16;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_14247 === 26) {
                                                        var inst_14236 = state_14246[2];
                                                        var state_14246__$1 = state_14246;
                                                        var statearr_14278_14318 = state_14246__$1;
                                                        statearr_14278_14318[2] = inst_14236;
                                                        statearr_14278_14318[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_14247 === 16) {
                                                          var inst_14216 = state_14246[2];
                                                          var inst_14217 = calc_state.call(null);
                                                          var inst_14190 = inst_14217;
                                                          var state_14246__$1 = function() {
                                                            var statearr_14279 = state_14246;
                                                            statearr_14279[7] = inst_14190;
                                                            statearr_14279[18] = inst_14216;
                                                            return statearr_14279;
                                                          }();
                                                          var statearr_14280_14319 = state_14246__$1;
                                                          statearr_14280_14319[2] = null;
                                                          statearr_14280_14319[1] = 5;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_14247 === 10) {
                                                            var inst_14205 = state_14246[8];
                                                            var inst_14206 = state_14246[16];
                                                            var inst_14204 = state_14246[2];
                                                            var inst_14205__$1 = cljs.core.nth.call(null, inst_14204, 0, null);
                                                            var inst_14206__$1 = cljs.core.nth.call(null, inst_14204, 1, null);
                                                            var inst_14207 = inst_14205__$1 == null;
                                                            var inst_14208 = cljs.core._EQ_.call(null, inst_14206__$1, change);
                                                            var inst_14209 = inst_14207 || inst_14208;
                                                            var state_14246__$1 = function() {
                                                              var statearr_14281 = state_14246;
                                                              statearr_14281[8] = inst_14205__$1;
                                                              statearr_14281[16] = inst_14206__$1;
                                                              return statearr_14281;
                                                            }();
                                                            if (cljs.core.truth_(inst_14209)) {
                                                              var statearr_14282_14320 = state_14246__$1;
                                                              statearr_14282_14320[1] = 11;
                                                            } else {
                                                              var statearr_14283_14321 = state_14246__$1;
                                                              statearr_14283_14321[1] = 12;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_14247 === 18) {
                                                              var inst_14201 = state_14246[15];
                                                              var inst_14206 = state_14246[16];
                                                              var inst_14200 = state_14246[17];
                                                              var inst_14223 = cljs.core.empty_QMARK_.call(null, inst_14201);
                                                              var inst_14224 = inst_14200.call(null, inst_14206);
                                                              var inst_14225 = cljs.core.not.call(null, inst_14224);
                                                              var inst_14226 = inst_14223 && inst_14225;
                                                              var state_14246__$1 = state_14246;
                                                              var statearr_14284_14322 = state_14246__$1;
                                                              statearr_14284_14322[2] = inst_14226;
                                                              statearr_14284_14322[1] = 19;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_14247 === 8) {
                                                                var inst_14190 = state_14246[7];
                                                                var state_14246__$1 = state_14246;
                                                                var statearr_14285_14323 = state_14246__$1;
                                                                statearr_14285_14323[2] = inst_14190;
                                                                statearr_14285_14323[1] = 9;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6990__auto___14293, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__6934__auto__, c__6990__auto___14293, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var cljs$core$async$mix_$_state_machine__6935__auto__ = null;
            var cljs$core$async$mix_$_state_machine__6935__auto____0 = function() {
              var statearr_14289 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14289[0] = cljs$core$async$mix_$_state_machine__6935__auto__;
              statearr_14289[1] = 1;
              return statearr_14289;
            };
            var cljs$core$async$mix_$_state_machine__6935__auto____1 = function(state_14246) {
              while (true) {
                var ret_value__6936__auto__ = function() {
                  try {
                    while (true) {
                      var result__6937__auto__ = switch__6934__auto__.call(null, state_14246);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6937__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6937__auto__;
                      }
                      break;
                    }
                  } catch (e14290) {
                    if (e14290 instanceof Object) {
                      var ex__6938__auto__ = e14290;
                      var statearr_14291_14324 = state_14246;
                      statearr_14291_14324[5] = ex__6938__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14246);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14290;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6936__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14325 = state_14246;
                  state_14246 = G__14325;
                  continue;
                } else {
                  return ret_value__6936__auto__;
                }
                break;
              }
            };
            cljs$core$async$mix_$_state_machine__6935__auto__ = function(state_14246) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mix_$_state_machine__6935__auto____0.call(this);
                case 1:
                  return cljs$core$async$mix_$_state_machine__6935__auto____1.call(this, state_14246);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mix_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mix_$_state_machine__6935__auto____0;
            cljs$core$async$mix_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mix_$_state_machine__6935__auto____1;
            return cljs$core$async$mix_$_state_machine__6935__auto__;
          }();
        }(switch__6934__auto__, c__6990__auto___14293, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__6992__auto__ = function() {
        var statearr_14292 = f__6991__auto__.call(null);
        statearr_14292[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6990__auto___14293;
        return statearr_14292;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6992__auto__);
    };
  }(c__6990__auto___14293, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function cljs$core$async$admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function cljs$core$async$unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function cljs$core$async$unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function cljs$core$async$toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function cljs$core$async$solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj14327 = {};
  return obj14327;
}();
cljs.core.async.sub_STAR_ = function cljs$core$async$sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__4097__auto__ = p;
    if (and__4097__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4745__auto__ = p == null ? null : p;
    return function() {
      var or__4109__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function cljs$core$async$unsub_STAR_(p, v, ch) {
  if (function() {
    var and__4097__auto__ = p;
    if (and__4097__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4745__auto__ = p == null ? null : p;
    return function() {
      var or__4109__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var cljs$core$async$unsub_all_STAR_ = null;
  var cljs$core$async$unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__4097__auto__ = p;
      if (and__4097__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__4745__auto__ = p == null ? null : p;
      return function() {
        var or__4109__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4745__auto__)];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var cljs$core$async$unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__4097__auto__ = p;
      if (and__4097__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__4745__auto__ = p == null ? null : p;
      return function() {
        var or__4109__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4745__auto__)];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  cljs$core$async$unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return cljs$core$async$unsub_all_STAR___1.call(this, p);
      case 2:
        return cljs$core$async$unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$unsub_all_STAR___1;
  cljs$core$async$unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$unsub_all_STAR___2;
  return cljs$core$async$unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var cljs$core$async$pub = null;
  var cljs$core$async$pub__2 = function(ch, topic_fn) {
    return cljs$core$async$pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var cljs$core$async$pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__4109__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__4109__auto__)) {
          return or__4109__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__4109__auto__, mults) {
            return function(p1__14328_SHARP_) {
              if (cljs.core.truth_(p1__14328_SHARP_.call(null, topic))) {
                return p1__14328_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__14328_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__4109__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t14451 !== "undefined") {
      } else {
        cljs.core.async.t14451 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta14452) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta14452 = meta14452;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t14451.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t14451.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$1, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$1, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t14451.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$1) {
            var self__ = this;
            var p__$1 = this;
            var temp__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4126__auto__)) {
              var m = temp__4126__auto__;
              return cljs.core.async.untap.call(null, m, ch__$1);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t14451.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t14451.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t14451.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t14451.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t14451.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_14453) {
            var self__ = this;
            var _14453__$1 = this;
            return self__.meta14452;
          };
        }(mults, ensure_mult);
        cljs.core.async.t14451.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_14453, meta14452__$1) {
            var self__ = this;
            var _14453__$1 = this;
            return new cljs.core.async.t14451(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta14452__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.t14451.cljs$lang$type = true;
        cljs.core.async.t14451.cljs$lang$ctorStr = "cljs.core.async/t14451";
        cljs.core.async.t14451.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
            return cljs.core._write.call(null, writer__4689__auto__, "cljs.core.async/t14451");
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t14451 = function(mults, ensure_mult) {
          return function cljs$core$async$pub_$___GT_t14451(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta14452) {
            return new cljs.core.async.t14451(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta14452);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t14451(ensure_mult, mults, buf_fn, topic_fn, ch, cljs$core$async$pub, cljs.core.PersistentArrayMap.EMPTY);
    }();
    var c__6990__auto___14573 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6990__auto___14573, mults, ensure_mult, p) {
      return function() {
        var f__6991__auto__ = function() {
          var switch__6934__auto__ = function(c__6990__auto___14573, mults, ensure_mult, p) {
            return function(state_14525) {
              var state_val_14526 = state_14525[1];
              if (state_val_14526 === 7) {
                var inst_14521 = state_14525[2];
                var state_14525__$1 = state_14525;
                var statearr_14527_14574 = state_14525__$1;
                statearr_14527_14574[2] = inst_14521;
                statearr_14527_14574[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14526 === 20) {
                  var state_14525__$1 = state_14525;
                  var statearr_14528_14575 = state_14525__$1;
                  statearr_14528_14575[2] = null;
                  statearr_14528_14575[1] = 21;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14526 === 1) {
                    var state_14525__$1 = state_14525;
                    var statearr_14529_14576 = state_14525__$1;
                    statearr_14529_14576[2] = null;
                    statearr_14529_14576[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14526 === 24) {
                      var inst_14504 = state_14525[7];
                      var inst_14513 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_14504);
                      var state_14525__$1 = state_14525;
                      var statearr_14530_14577 = state_14525__$1;
                      statearr_14530_14577[2] = inst_14513;
                      statearr_14530_14577[1] = 25;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14526 === 4) {
                        var inst_14456 = state_14525[8];
                        var inst_14456__$1 = state_14525[2];
                        var inst_14457 = inst_14456__$1 == null;
                        var state_14525__$1 = function() {
                          var statearr_14531 = state_14525;
                          statearr_14531[8] = inst_14456__$1;
                          return statearr_14531;
                        }();
                        if (cljs.core.truth_(inst_14457)) {
                          var statearr_14532_14578 = state_14525__$1;
                          statearr_14532_14578[1] = 5;
                        } else {
                          var statearr_14533_14579 = state_14525__$1;
                          statearr_14533_14579[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14526 === 15) {
                          var inst_14498 = state_14525[2];
                          var state_14525__$1 = state_14525;
                          var statearr_14534_14580 = state_14525__$1;
                          statearr_14534_14580[2] = inst_14498;
                          statearr_14534_14580[1] = 12;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14526 === 21) {
                            var inst_14518 = state_14525[2];
                            var state_14525__$1 = function() {
                              var statearr_14535 = state_14525;
                              statearr_14535[9] = inst_14518;
                              return statearr_14535;
                            }();
                            var statearr_14536_14581 = state_14525__$1;
                            statearr_14536_14581[2] = null;
                            statearr_14536_14581[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14526 === 13) {
                              var inst_14480 = state_14525[10];
                              var inst_14482 = cljs.core.chunked_seq_QMARK_.call(null, inst_14480);
                              var state_14525__$1 = state_14525;
                              if (inst_14482) {
                                var statearr_14537_14582 = state_14525__$1;
                                statearr_14537_14582[1] = 16;
                              } else {
                                var statearr_14538_14583 = state_14525__$1;
                                statearr_14538_14583[1] = 17;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14526 === 22) {
                                var inst_14510 = state_14525[2];
                                var state_14525__$1 = state_14525;
                                if (cljs.core.truth_(inst_14510)) {
                                  var statearr_14539_14584 = state_14525__$1;
                                  statearr_14539_14584[1] = 23;
                                } else {
                                  var statearr_14540_14585 = state_14525__$1;
                                  statearr_14540_14585[1] = 24;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14526 === 6) {
                                  var inst_14506 = state_14525[11];
                                  var inst_14456 = state_14525[8];
                                  var inst_14504 = state_14525[7];
                                  var inst_14504__$1 = topic_fn.call(null, inst_14456);
                                  var inst_14505 = cljs.core.deref.call(null, mults);
                                  var inst_14506__$1 = cljs.core.get.call(null, inst_14505, inst_14504__$1);
                                  var state_14525__$1 = function() {
                                    var statearr_14541 = state_14525;
                                    statearr_14541[11] = inst_14506__$1;
                                    statearr_14541[7] = inst_14504__$1;
                                    return statearr_14541;
                                  }();
                                  if (cljs.core.truth_(inst_14506__$1)) {
                                    var statearr_14542_14586 = state_14525__$1;
                                    statearr_14542_14586[1] = 19;
                                  } else {
                                    var statearr_14543_14587 = state_14525__$1;
                                    statearr_14543_14587[1] = 20;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14526 === 25) {
                                    var inst_14515 = state_14525[2];
                                    var state_14525__$1 = state_14525;
                                    var statearr_14544_14588 = state_14525__$1;
                                    statearr_14544_14588[2] = inst_14515;
                                    statearr_14544_14588[1] = 21;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14526 === 17) {
                                      var inst_14480 = state_14525[10];
                                      var inst_14489 = cljs.core.first.call(null, inst_14480);
                                      var inst_14490 = cljs.core.async.muxch_STAR_.call(null, inst_14489);
                                      var inst_14491 = cljs.core.async.close_BANG_.call(null, inst_14490);
                                      var inst_14492 = cljs.core.next.call(null, inst_14480);
                                      var inst_14466 = inst_14492;
                                      var inst_14467 = null;
                                      var inst_14468 = 0;
                                      var inst_14469 = 0;
                                      var state_14525__$1 = function() {
                                        var statearr_14545 = state_14525;
                                        statearr_14545[12] = inst_14491;
                                        statearr_14545[13] = inst_14466;
                                        statearr_14545[14] = inst_14467;
                                        statearr_14545[15] = inst_14469;
                                        statearr_14545[16] = inst_14468;
                                        return statearr_14545;
                                      }();
                                      var statearr_14546_14589 = state_14525__$1;
                                      statearr_14546_14589[2] = null;
                                      statearr_14546_14589[1] = 8;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_14526 === 3) {
                                        var inst_14523 = state_14525[2];
                                        var state_14525__$1 = state_14525;
                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14525__$1, inst_14523);
                                      } else {
                                        if (state_val_14526 === 12) {
                                          var inst_14500 = state_14525[2];
                                          var state_14525__$1 = state_14525;
                                          var statearr_14547_14590 = state_14525__$1;
                                          statearr_14547_14590[2] = inst_14500;
                                          statearr_14547_14590[1] = 9;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_14526 === 2) {
                                            var state_14525__$1 = state_14525;
                                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14525__$1, 4, ch);
                                          } else {
                                            if (state_val_14526 === 23) {
                                              var state_14525__$1 = state_14525;
                                              var statearr_14548_14591 = state_14525__$1;
                                              statearr_14548_14591[2] = null;
                                              statearr_14548_14591[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_14526 === 19) {
                                                var inst_14506 = state_14525[11];
                                                var inst_14456 = state_14525[8];
                                                var inst_14508 = cljs.core.async.muxch_STAR_.call(null, inst_14506);
                                                var state_14525__$1 = state_14525;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14525__$1, 22, inst_14508, inst_14456);
                                              } else {
                                                if (state_val_14526 === 11) {
                                                  var inst_14466 = state_14525[13];
                                                  var inst_14480 = state_14525[10];
                                                  var inst_14480__$1 = cljs.core.seq.call(null, inst_14466);
                                                  var state_14525__$1 = function() {
                                                    var statearr_14549 = state_14525;
                                                    statearr_14549[10] = inst_14480__$1;
                                                    return statearr_14549;
                                                  }();
                                                  if (inst_14480__$1) {
                                                    var statearr_14550_14592 = state_14525__$1;
                                                    statearr_14550_14592[1] = 13;
                                                  } else {
                                                    var statearr_14551_14593 = state_14525__$1;
                                                    statearr_14551_14593[1] = 14;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_14526 === 9) {
                                                    var inst_14502 = state_14525[2];
                                                    var state_14525__$1 = state_14525;
                                                    var statearr_14552_14594 = state_14525__$1;
                                                    statearr_14552_14594[2] = inst_14502;
                                                    statearr_14552_14594[1] = 7;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_14526 === 5) {
                                                      var inst_14463 = cljs.core.deref.call(null, mults);
                                                      var inst_14464 = cljs.core.vals.call(null, inst_14463);
                                                      var inst_14465 = cljs.core.seq.call(null, inst_14464);
                                                      var inst_14466 = inst_14465;
                                                      var inst_14467 = null;
                                                      var inst_14468 = 0;
                                                      var inst_14469 = 0;
                                                      var state_14525__$1 = function() {
                                                        var statearr_14553 = state_14525;
                                                        statearr_14553[13] = inst_14466;
                                                        statearr_14553[14] = inst_14467;
                                                        statearr_14553[15] = inst_14469;
                                                        statearr_14553[16] = inst_14468;
                                                        return statearr_14553;
                                                      }();
                                                      var statearr_14554_14595 = state_14525__$1;
                                                      statearr_14554_14595[2] = null;
                                                      statearr_14554_14595[1] = 8;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_14526 === 14) {
                                                        var state_14525__$1 = state_14525;
                                                        var statearr_14558_14596 = state_14525__$1;
                                                        statearr_14558_14596[2] = null;
                                                        statearr_14558_14596[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_14526 === 16) {
                                                          var inst_14480 = state_14525[10];
                                                          var inst_14484 = cljs.core.chunk_first.call(null, inst_14480);
                                                          var inst_14485 = cljs.core.chunk_rest.call(null, inst_14480);
                                                          var inst_14486 = cljs.core.count.call(null, inst_14484);
                                                          var inst_14466 = inst_14485;
                                                          var inst_14467 = inst_14484;
                                                          var inst_14468 = inst_14486;
                                                          var inst_14469 = 0;
                                                          var state_14525__$1 = function() {
                                                            var statearr_14559 = state_14525;
                                                            statearr_14559[13] = inst_14466;
                                                            statearr_14559[14] = inst_14467;
                                                            statearr_14559[15] = inst_14469;
                                                            statearr_14559[16] = inst_14468;
                                                            return statearr_14559;
                                                          }();
                                                          var statearr_14560_14597 = state_14525__$1;
                                                          statearr_14560_14597[2] = null;
                                                          statearr_14560_14597[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_14526 === 10) {
                                                            var inst_14466 = state_14525[13];
                                                            var inst_14467 = state_14525[14];
                                                            var inst_14469 = state_14525[15];
                                                            var inst_14468 = state_14525[16];
                                                            var inst_14474 = cljs.core._nth.call(null, inst_14467, inst_14469);
                                                            var inst_14475 = cljs.core.async.muxch_STAR_.call(null, inst_14474);
                                                            var inst_14476 = cljs.core.async.close_BANG_.call(null, inst_14475);
                                                            var inst_14477 = inst_14469 + 1;
                                                            var tmp14555 = inst_14466;
                                                            var tmp14556 = inst_14467;
                                                            var tmp14557 = inst_14468;
                                                            var inst_14466__$1 = tmp14555;
                                                            var inst_14467__$1 = tmp14556;
                                                            var inst_14468__$1 = tmp14557;
                                                            var inst_14469__$1 = inst_14477;
                                                            var state_14525__$1 = function() {
                                                              var statearr_14561 = state_14525;
                                                              statearr_14561[13] = inst_14466__$1;
                                                              statearr_14561[14] = inst_14467__$1;
                                                              statearr_14561[17] = inst_14476;
                                                              statearr_14561[15] = inst_14469__$1;
                                                              statearr_14561[16] = inst_14468__$1;
                                                              return statearr_14561;
                                                            }();
                                                            var statearr_14562_14598 = state_14525__$1;
                                                            statearr_14562_14598[2] = null;
                                                            statearr_14562_14598[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_14526 === 18) {
                                                              var inst_14495 = state_14525[2];
                                                              var state_14525__$1 = state_14525;
                                                              var statearr_14563_14599 = state_14525__$1;
                                                              statearr_14563_14599[2] = inst_14495;
                                                              statearr_14563_14599[1] = 15;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_14526 === 8) {
                                                                var inst_14469 = state_14525[15];
                                                                var inst_14468 = state_14525[16];
                                                                var inst_14471 = inst_14469 < inst_14468;
                                                                var inst_14472 = inst_14471;
                                                                var state_14525__$1 = state_14525;
                                                                if (cljs.core.truth_(inst_14472)) {
                                                                  var statearr_14564_14600 = state_14525__$1;
                                                                  statearr_14564_14600[1] = 10;
                                                                } else {
                                                                  var statearr_14565_14601 = state_14525__$1;
                                                                  statearr_14565_14601[1] = 11;
                                                                }
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6990__auto___14573, mults, ensure_mult, p);
          return function(switch__6934__auto__, c__6990__auto___14573, mults, ensure_mult, p) {
            return function() {
              var cljs$core$async$pub_$_state_machine__6935__auto__ = null;
              var cljs$core$async$pub_$_state_machine__6935__auto____0 = function() {
                var statearr_14569 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_14569[0] = cljs$core$async$pub_$_state_machine__6935__auto__;
                statearr_14569[1] = 1;
                return statearr_14569;
              };
              var cljs$core$async$pub_$_state_machine__6935__auto____1 = function(state_14525) {
                while (true) {
                  var ret_value__6936__auto__ = function() {
                    try {
                      while (true) {
                        var result__6937__auto__ = switch__6934__auto__.call(null, state_14525);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6937__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6937__auto__;
                        }
                        break;
                      }
                    } catch (e14570) {
                      if (e14570 instanceof Object) {
                        var ex__6938__auto__ = e14570;
                        var statearr_14571_14602 = state_14525;
                        statearr_14571_14602[5] = ex__6938__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14525);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e14570;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6936__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__14603 = state_14525;
                    state_14525 = G__14603;
                    continue;
                  } else {
                    return ret_value__6936__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$pub_$_state_machine__6935__auto__ = function(state_14525) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$pub_$_state_machine__6935__auto____0.call(this);
                  case 1:
                    return cljs$core$async$pub_$_state_machine__6935__auto____1.call(this, state_14525);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$pub_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pub_$_state_machine__6935__auto____0;
              cljs$core$async$pub_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pub_$_state_machine__6935__auto____1;
              return cljs$core$async$pub_$_state_machine__6935__auto__;
            }();
          }(switch__6934__auto__, c__6990__auto___14573, mults, ensure_mult, p);
        }();
        var state__6992__auto__ = function() {
          var statearr_14572 = f__6991__auto__.call(null);
          statearr_14572[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6990__auto___14573;
          return statearr_14572;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6992__auto__);
      };
    }(c__6990__auto___14573, mults, ensure_mult, p));
    return p;
  };
  cljs$core$async$pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$pub__2.call(this, ch, topic_fn);
      case 3:
        return cljs$core$async$pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$pub.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$pub__2;
  cljs$core$async$pub.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$pub__3;
  return cljs$core$async$pub;
}();
cljs.core.async.sub = function() {
  var cljs$core$async$sub = null;
  var cljs$core$async$sub__3 = function(p, topic, ch) {
    return cljs$core$async$sub.call(null, p, topic, ch, true);
  };
  var cljs$core$async$sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  cljs$core$async$sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return cljs$core$async$sub__3.call(this, p, topic, ch);
      case 4:
        return cljs$core$async$sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$sub.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$sub__3;
  cljs$core$async$sub.cljs$core$IFn$_invoke$arity$4 = cljs$core$async$sub__4;
  return cljs$core$async$sub;
}();
cljs.core.async.unsub = function cljs$core$async$unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var cljs$core$async$unsub_all = null;
  var cljs$core$async$unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var cljs$core$async$unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  cljs$core$async$unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return cljs$core$async$unsub_all__1.call(this, p);
      case 2:
        return cljs$core$async$unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$unsub_all.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$unsub_all__1;
  cljs$core$async$unsub_all.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$unsub_all__2;
  return cljs$core$async$unsub_all;
}();
cljs.core.async.map = function() {
  var cljs$core$async$map = null;
  var cljs$core$async$map__2 = function(f, chs) {
    return cljs$core$async$map.call(null, f, chs, null);
  };
  var cljs$core$async$map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__6990__auto___14740 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6990__auto___14740, chs__$1, out, cnt, rets, dchan, dctr, done) {
      return function() {
        var f__6991__auto__ = function() {
          var switch__6934__auto__ = function(c__6990__auto___14740, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function(state_14710) {
              var state_val_14711 = state_14710[1];
              if (state_val_14711 === 7) {
                var state_14710__$1 = state_14710;
                var statearr_14712_14741 = state_14710__$1;
                statearr_14712_14741[2] = null;
                statearr_14712_14741[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14711 === 1) {
                  var state_14710__$1 = state_14710;
                  var statearr_14713_14742 = state_14710__$1;
                  statearr_14713_14742[2] = null;
                  statearr_14713_14742[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14711 === 4) {
                    var inst_14674 = state_14710[7];
                    var inst_14676 = inst_14674 < cnt;
                    var state_14710__$1 = state_14710;
                    if (cljs.core.truth_(inst_14676)) {
                      var statearr_14714_14743 = state_14710__$1;
                      statearr_14714_14743[1] = 6;
                    } else {
                      var statearr_14715_14744 = state_14710__$1;
                      statearr_14715_14744[1] = 7;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14711 === 15) {
                      var inst_14706 = state_14710[2];
                      var state_14710__$1 = state_14710;
                      var statearr_14716_14745 = state_14710__$1;
                      statearr_14716_14745[2] = inst_14706;
                      statearr_14716_14745[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14711 === 13) {
                        var inst_14699 = cljs.core.async.close_BANG_.call(null, out);
                        var state_14710__$1 = state_14710;
                        var statearr_14717_14746 = state_14710__$1;
                        statearr_14717_14746[2] = inst_14699;
                        statearr_14717_14746[1] = 15;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14711 === 6) {
                          var state_14710__$1 = state_14710;
                          var statearr_14718_14747 = state_14710__$1;
                          statearr_14718_14747[2] = null;
                          statearr_14718_14747[1] = 11;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14711 === 3) {
                            var inst_14708 = state_14710[2];
                            var state_14710__$1 = state_14710;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14710__$1, inst_14708);
                          } else {
                            if (state_val_14711 === 12) {
                              var inst_14696 = state_14710[8];
                              var inst_14696__$1 = state_14710[2];
                              var inst_14697 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_14696__$1);
                              var state_14710__$1 = function() {
                                var statearr_14719 = state_14710;
                                statearr_14719[8] = inst_14696__$1;
                                return statearr_14719;
                              }();
                              if (cljs.core.truth_(inst_14697)) {
                                var statearr_14720_14748 = state_14710__$1;
                                statearr_14720_14748[1] = 13;
                              } else {
                                var statearr_14721_14749 = state_14710__$1;
                                statearr_14721_14749[1] = 14;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14711 === 2) {
                                var inst_14673 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                                var inst_14674 = 0;
                                var state_14710__$1 = function() {
                                  var statearr_14722 = state_14710;
                                  statearr_14722[7] = inst_14674;
                                  statearr_14722[9] = inst_14673;
                                  return statearr_14722;
                                }();
                                var statearr_14723_14750 = state_14710__$1;
                                statearr_14723_14750[2] = null;
                                statearr_14723_14750[1] = 4;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14711 === 11) {
                                  var inst_14674 = state_14710[7];
                                  var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_14710, 10, Object, null, 9);
                                  var inst_14683 = chs__$1.call(null, inst_14674);
                                  var inst_14684 = done.call(null, inst_14674);
                                  var inst_14685 = cljs.core.async.take_BANG_.call(null, inst_14683, inst_14684);
                                  var state_14710__$1 = state_14710;
                                  var statearr_14724_14751 = state_14710__$1;
                                  statearr_14724_14751[2] = inst_14685;
                                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14710__$1);
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14711 === 9) {
                                    var inst_14674 = state_14710[7];
                                    var inst_14687 = state_14710[2];
                                    var inst_14688 = inst_14674 + 1;
                                    var inst_14674__$1 = inst_14688;
                                    var state_14710__$1 = function() {
                                      var statearr_14725 = state_14710;
                                      statearr_14725[7] = inst_14674__$1;
                                      statearr_14725[10] = inst_14687;
                                      return statearr_14725;
                                    }();
                                    var statearr_14726_14752 = state_14710__$1;
                                    statearr_14726_14752[2] = null;
                                    statearr_14726_14752[1] = 4;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14711 === 5) {
                                      var inst_14694 = state_14710[2];
                                      var state_14710__$1 = function() {
                                        var statearr_14727 = state_14710;
                                        statearr_14727[11] = inst_14694;
                                        return statearr_14727;
                                      }();
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14710__$1, 12, dchan);
                                    } else {
                                      if (state_val_14711 === 14) {
                                        var inst_14696 = state_14710[8];
                                        var inst_14701 = cljs.core.apply.call(null, f, inst_14696);
                                        var state_14710__$1 = state_14710;
                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14710__$1, 16, out, inst_14701);
                                      } else {
                                        if (state_val_14711 === 16) {
                                          var inst_14703 = state_14710[2];
                                          var state_14710__$1 = function() {
                                            var statearr_14728 = state_14710;
                                            statearr_14728[12] = inst_14703;
                                            return statearr_14728;
                                          }();
                                          var statearr_14729_14753 = state_14710__$1;
                                          statearr_14729_14753[2] = null;
                                          statearr_14729_14753[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_14711 === 10) {
                                            var inst_14678 = state_14710[2];
                                            var inst_14679 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                            var state_14710__$1 = function() {
                                              var statearr_14730 = state_14710;
                                              statearr_14730[13] = inst_14678;
                                              return statearr_14730;
                                            }();
                                            var statearr_14731_14754 = state_14710__$1;
                                            statearr_14731_14754[2] = inst_14679;
                                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14710__$1);
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_14711 === 8) {
                                              var inst_14692 = state_14710[2];
                                              var state_14710__$1 = state_14710;
                                              var statearr_14732_14755 = state_14710__$1;
                                              statearr_14732_14755[2] = inst_14692;
                                              statearr_14732_14755[1] = 5;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6990__auto___14740, chs__$1, out, cnt, rets, dchan, dctr, done);
          return function(switch__6934__auto__, c__6990__auto___14740, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function() {
              var cljs$core$async$map_$_state_machine__6935__auto__ = null;
              var cljs$core$async$map_$_state_machine__6935__auto____0 = function() {
                var statearr_14736 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_14736[0] = cljs$core$async$map_$_state_machine__6935__auto__;
                statearr_14736[1] = 1;
                return statearr_14736;
              };
              var cljs$core$async$map_$_state_machine__6935__auto____1 = function(state_14710) {
                while (true) {
                  var ret_value__6936__auto__ = function() {
                    try {
                      while (true) {
                        var result__6937__auto__ = switch__6934__auto__.call(null, state_14710);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6937__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6937__auto__;
                        }
                        break;
                      }
                    } catch (e14737) {
                      if (e14737 instanceof Object) {
                        var ex__6938__auto__ = e14737;
                        var statearr_14738_14756 = state_14710;
                        statearr_14738_14756[5] = ex__6938__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14710);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e14737;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6936__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__14757 = state_14710;
                    state_14710 = G__14757;
                    continue;
                  } else {
                    return ret_value__6936__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$map_$_state_machine__6935__auto__ = function(state_14710) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$map_$_state_machine__6935__auto____0.call(this);
                  case 1:
                    return cljs$core$async$map_$_state_machine__6935__auto____1.call(this, state_14710);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$map_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$map_$_state_machine__6935__auto____0;
              cljs$core$async$map_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$map_$_state_machine__6935__auto____1;
              return cljs$core$async$map_$_state_machine__6935__auto__;
            }();
          }(switch__6934__auto__, c__6990__auto___14740, chs__$1, out, cnt, rets, dchan, dctr, done);
        }();
        var state__6992__auto__ = function() {
          var statearr_14739 = f__6991__auto__.call(null);
          statearr_14739[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6990__auto___14740;
          return statearr_14739;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6992__auto__);
      };
    }(c__6990__auto___14740, chs__$1, out, cnt, rets, dchan, dctr, done));
    return out;
  };
  cljs$core$async$map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$map__2.call(this, f, chs);
      case 3:
        return cljs$core$async$map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$map.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$map__2;
  cljs$core$async$map.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$map__3;
  return cljs$core$async$map;
}();
cljs.core.async.merge = function() {
  var cljs$core$async$merge = null;
  var cljs$core$async$merge__1 = function(chs) {
    return cljs$core$async$merge.call(null, chs, null);
  };
  var cljs$core$async$merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6990__auto___14865 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6990__auto___14865, out) {
      return function() {
        var f__6991__auto__ = function() {
          var switch__6934__auto__ = function(c__6990__auto___14865, out) {
            return function(state_14841) {
              var state_val_14842 = state_14841[1];
              if (state_val_14842 === 7) {
                var inst_14820 = state_14841[7];
                var inst_14821 = state_14841[8];
                var inst_14820__$1 = state_14841[2];
                var inst_14821__$1 = cljs.core.nth.call(null, inst_14820__$1, 0, null);
                var inst_14822 = cljs.core.nth.call(null, inst_14820__$1, 1, null);
                var inst_14823 = inst_14821__$1 == null;
                var state_14841__$1 = function() {
                  var statearr_14843 = state_14841;
                  statearr_14843[7] = inst_14820__$1;
                  statearr_14843[8] = inst_14821__$1;
                  statearr_14843[9] = inst_14822;
                  return statearr_14843;
                }();
                if (cljs.core.truth_(inst_14823)) {
                  var statearr_14844_14866 = state_14841__$1;
                  statearr_14844_14866[1] = 8;
                } else {
                  var statearr_14845_14867 = state_14841__$1;
                  statearr_14845_14867[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14842 === 1) {
                  var inst_14812 = cljs.core.vec.call(null, chs);
                  var inst_14813 = inst_14812;
                  var state_14841__$1 = function() {
                    var statearr_14846 = state_14841;
                    statearr_14846[10] = inst_14813;
                    return statearr_14846;
                  }();
                  var statearr_14847_14868 = state_14841__$1;
                  statearr_14847_14868[2] = null;
                  statearr_14847_14868[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14842 === 4) {
                    var inst_14813 = state_14841[10];
                    var state_14841__$1 = state_14841;
                    return cljs.core.async.ioc_alts_BANG_.call(null, state_14841__$1, 7, inst_14813);
                  } else {
                    if (state_val_14842 === 6) {
                      var inst_14837 = state_14841[2];
                      var state_14841__$1 = state_14841;
                      var statearr_14848_14869 = state_14841__$1;
                      statearr_14848_14869[2] = inst_14837;
                      statearr_14848_14869[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14842 === 3) {
                        var inst_14839 = state_14841[2];
                        var state_14841__$1 = state_14841;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14841__$1, inst_14839);
                      } else {
                        if (state_val_14842 === 2) {
                          var inst_14813 = state_14841[10];
                          var inst_14815 = cljs.core.count.call(null, inst_14813);
                          var inst_14816 = inst_14815 > 0;
                          var state_14841__$1 = state_14841;
                          if (cljs.core.truth_(inst_14816)) {
                            var statearr_14850_14870 = state_14841__$1;
                            statearr_14850_14870[1] = 4;
                          } else {
                            var statearr_14851_14871 = state_14841__$1;
                            statearr_14851_14871[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14842 === 11) {
                            var inst_14813 = state_14841[10];
                            var inst_14830 = state_14841[2];
                            var tmp14849 = inst_14813;
                            var inst_14813__$1 = tmp14849;
                            var state_14841__$1 = function() {
                              var statearr_14852 = state_14841;
                              statearr_14852[10] = inst_14813__$1;
                              statearr_14852[11] = inst_14830;
                              return statearr_14852;
                            }();
                            var statearr_14853_14872 = state_14841__$1;
                            statearr_14853_14872[2] = null;
                            statearr_14853_14872[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14842 === 9) {
                              var inst_14821 = state_14841[8];
                              var state_14841__$1 = state_14841;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14841__$1, 11, out, inst_14821);
                            } else {
                              if (state_val_14842 === 5) {
                                var inst_14835 = cljs.core.async.close_BANG_.call(null, out);
                                var state_14841__$1 = state_14841;
                                var statearr_14854_14873 = state_14841__$1;
                                statearr_14854_14873[2] = inst_14835;
                                statearr_14854_14873[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14842 === 10) {
                                  var inst_14833 = state_14841[2];
                                  var state_14841__$1 = state_14841;
                                  var statearr_14855_14874 = state_14841__$1;
                                  statearr_14855_14874[2] = inst_14833;
                                  statearr_14855_14874[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14842 === 8) {
                                    var inst_14813 = state_14841[10];
                                    var inst_14820 = state_14841[7];
                                    var inst_14821 = state_14841[8];
                                    var inst_14822 = state_14841[9];
                                    var inst_14825 = function() {
                                      var c = inst_14822;
                                      var v = inst_14821;
                                      var vec__14818 = inst_14820;
                                      var cs = inst_14813;
                                      return function(c, v, vec__14818, cs, inst_14813, inst_14820, inst_14821, inst_14822, state_val_14842, c__6990__auto___14865, out) {
                                        return function(p1__14758_SHARP_) {
                                          return cljs.core.not_EQ_.call(null, c, p1__14758_SHARP_);
                                        };
                                      }(c, v, vec__14818, cs, inst_14813, inst_14820, inst_14821, inst_14822, state_val_14842, c__6990__auto___14865, out);
                                    }();
                                    var inst_14826 = cljs.core.filterv.call(null, inst_14825, inst_14813);
                                    var inst_14813__$1 = inst_14826;
                                    var state_14841__$1 = function() {
                                      var statearr_14856 = state_14841;
                                      statearr_14856[10] = inst_14813__$1;
                                      return statearr_14856;
                                    }();
                                    var statearr_14857_14875 = state_14841__$1;
                                    statearr_14857_14875[2] = null;
                                    statearr_14857_14875[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6990__auto___14865, out);
          return function(switch__6934__auto__, c__6990__auto___14865, out) {
            return function() {
              var cljs$core$async$merge_$_state_machine__6935__auto__ = null;
              var cljs$core$async$merge_$_state_machine__6935__auto____0 = function() {
                var statearr_14861 = [null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_14861[0] = cljs$core$async$merge_$_state_machine__6935__auto__;
                statearr_14861[1] = 1;
                return statearr_14861;
              };
              var cljs$core$async$merge_$_state_machine__6935__auto____1 = function(state_14841) {
                while (true) {
                  var ret_value__6936__auto__ = function() {
                    try {
                      while (true) {
                        var result__6937__auto__ = switch__6934__auto__.call(null, state_14841);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6937__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6937__auto__;
                        }
                        break;
                      }
                    } catch (e14862) {
                      if (e14862 instanceof Object) {
                        var ex__6938__auto__ = e14862;
                        var statearr_14863_14876 = state_14841;
                        statearr_14863_14876[5] = ex__6938__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14841);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e14862;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6936__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__14877 = state_14841;
                    state_14841 = G__14877;
                    continue;
                  } else {
                    return ret_value__6936__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$merge_$_state_machine__6935__auto__ = function(state_14841) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$merge_$_state_machine__6935__auto____0.call(this);
                  case 1:
                    return cljs$core$async$merge_$_state_machine__6935__auto____1.call(this, state_14841);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$merge_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$merge_$_state_machine__6935__auto____0;
              cljs$core$async$merge_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$merge_$_state_machine__6935__auto____1;
              return cljs$core$async$merge_$_state_machine__6935__auto__;
            }();
          }(switch__6934__auto__, c__6990__auto___14865, out);
        }();
        var state__6992__auto__ = function() {
          var statearr_14864 = f__6991__auto__.call(null);
          statearr_14864[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6990__auto___14865;
          return statearr_14864;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6992__auto__);
      };
    }(c__6990__auto___14865, out));
    return out;
  };
  cljs$core$async$merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return cljs$core$async$merge__1.call(this, chs);
      case 2:
        return cljs$core$async$merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$merge.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$merge__1;
  cljs$core$async$merge.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$merge__2;
  return cljs$core$async$merge;
}();
cljs.core.async.into = function cljs$core$async$into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function() {
  var cljs$core$async$take = null;
  var cljs$core$async$take__2 = function(n, ch) {
    return cljs$core$async$take.call(null, n, ch, null);
  };
  var cljs$core$async$take__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6990__auto___14970 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6990__auto___14970, out) {
      return function() {
        var f__6991__auto__ = function() {
          var switch__6934__auto__ = function(c__6990__auto___14970, out) {
            return function(state_14947) {
              var state_val_14948 = state_14947[1];
              if (state_val_14948 === 7) {
                var inst_14929 = state_14947[7];
                var inst_14929__$1 = state_14947[2];
                var inst_14930 = inst_14929__$1 == null;
                var inst_14931 = cljs.core.not.call(null, inst_14930);
                var state_14947__$1 = function() {
                  var statearr_14949 = state_14947;
                  statearr_14949[7] = inst_14929__$1;
                  return statearr_14949;
                }();
                if (inst_14931) {
                  var statearr_14950_14971 = state_14947__$1;
                  statearr_14950_14971[1] = 8;
                } else {
                  var statearr_14951_14972 = state_14947__$1;
                  statearr_14951_14972[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14948 === 1) {
                  var inst_14924 = 0;
                  var state_14947__$1 = function() {
                    var statearr_14952 = state_14947;
                    statearr_14952[8] = inst_14924;
                    return statearr_14952;
                  }();
                  var statearr_14953_14973 = state_14947__$1;
                  statearr_14953_14973[2] = null;
                  statearr_14953_14973[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14948 === 4) {
                    var state_14947__$1 = state_14947;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14947__$1, 7, ch);
                  } else {
                    if (state_val_14948 === 6) {
                      var inst_14942 = state_14947[2];
                      var state_14947__$1 = state_14947;
                      var statearr_14954_14974 = state_14947__$1;
                      statearr_14954_14974[2] = inst_14942;
                      statearr_14954_14974[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14948 === 3) {
                        var inst_14944 = state_14947[2];
                        var inst_14945 = cljs.core.async.close_BANG_.call(null, out);
                        var state_14947__$1 = function() {
                          var statearr_14955 = state_14947;
                          statearr_14955[9] = inst_14944;
                          return statearr_14955;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14947__$1, inst_14945);
                      } else {
                        if (state_val_14948 === 2) {
                          var inst_14924 = state_14947[8];
                          var inst_14926 = inst_14924 < n;
                          var state_14947__$1 = state_14947;
                          if (cljs.core.truth_(inst_14926)) {
                            var statearr_14956_14975 = state_14947__$1;
                            statearr_14956_14975[1] = 4;
                          } else {
                            var statearr_14957_14976 = state_14947__$1;
                            statearr_14957_14976[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14948 === 11) {
                            var inst_14924 = state_14947[8];
                            var inst_14934 = state_14947[2];
                            var inst_14935 = inst_14924 + 1;
                            var inst_14924__$1 = inst_14935;
                            var state_14947__$1 = function() {
                              var statearr_14958 = state_14947;
                              statearr_14958[8] = inst_14924__$1;
                              statearr_14958[10] = inst_14934;
                              return statearr_14958;
                            }();
                            var statearr_14959_14977 = state_14947__$1;
                            statearr_14959_14977[2] = null;
                            statearr_14959_14977[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14948 === 9) {
                              var state_14947__$1 = state_14947;
                              var statearr_14960_14978 = state_14947__$1;
                              statearr_14960_14978[2] = null;
                              statearr_14960_14978[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14948 === 5) {
                                var state_14947__$1 = state_14947;
                                var statearr_14961_14979 = state_14947__$1;
                                statearr_14961_14979[2] = null;
                                statearr_14961_14979[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14948 === 10) {
                                  var inst_14939 = state_14947[2];
                                  var state_14947__$1 = state_14947;
                                  var statearr_14962_14980 = state_14947__$1;
                                  statearr_14962_14980[2] = inst_14939;
                                  statearr_14962_14980[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14948 === 8) {
                                    var inst_14929 = state_14947[7];
                                    var state_14947__$1 = state_14947;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14947__$1, 11, out, inst_14929);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6990__auto___14970, out);
          return function(switch__6934__auto__, c__6990__auto___14970, out) {
            return function() {
              var cljs$core$async$take_$_state_machine__6935__auto__ = null;
              var cljs$core$async$take_$_state_machine__6935__auto____0 = function() {
                var statearr_14966 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_14966[0] = cljs$core$async$take_$_state_machine__6935__auto__;
                statearr_14966[1] = 1;
                return statearr_14966;
              };
              var cljs$core$async$take_$_state_machine__6935__auto____1 = function(state_14947) {
                while (true) {
                  var ret_value__6936__auto__ = function() {
                    try {
                      while (true) {
                        var result__6937__auto__ = switch__6934__auto__.call(null, state_14947);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6937__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6937__auto__;
                        }
                        break;
                      }
                    } catch (e14967) {
                      if (e14967 instanceof Object) {
                        var ex__6938__auto__ = e14967;
                        var statearr_14968_14981 = state_14947;
                        statearr_14968_14981[5] = ex__6938__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14947);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e14967;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6936__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__14982 = state_14947;
                    state_14947 = G__14982;
                    continue;
                  } else {
                    return ret_value__6936__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$take_$_state_machine__6935__auto__ = function(state_14947) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$take_$_state_machine__6935__auto____0.call(this);
                  case 1:
                    return cljs$core$async$take_$_state_machine__6935__auto____1.call(this, state_14947);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$take_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$take_$_state_machine__6935__auto____0;
              cljs$core$async$take_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$take_$_state_machine__6935__auto____1;
              return cljs$core$async$take_$_state_machine__6935__auto__;
            }();
          }(switch__6934__auto__, c__6990__auto___14970, out);
        }();
        var state__6992__auto__ = function() {
          var statearr_14969 = f__6991__auto__.call(null);
          statearr_14969[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6990__auto___14970;
          return statearr_14969;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6992__auto__);
      };
    }(c__6990__auto___14970, out));
    return out;
  };
  cljs$core$async$take = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$take__2.call(this, n, ch);
      case 3:
        return cljs$core$async$take__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$take.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$take__2;
  cljs$core$async$take.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$take__3;
  return cljs$core$async$take;
}();
cljs.core.async.map_LT_ = function cljs$core$async$map_LT_(f, ch) {
  if (typeof cljs.core.async.t14990 !== "undefined") {
  } else {
    cljs.core.async.t14990 = function(ch, f, map_LT_, meta14991) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta14991 = meta14991;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t14990.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t14990.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t14990.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t14990.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t14993 !== "undefined") {
        } else {
          cljs.core.async.t14993 = function(fn1, _, meta14991, map_LT_, f, ch, meta14994) {
            this.fn1 = fn1;
            this._ = _;
            this.meta14991 = meta14991;
            this.map_LT_ = map_LT_;
            this.f = f;
            this.ch = ch;
            this.meta14994 = meta14994;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t14993.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t14993.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t14993.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$2, ___$1) {
                return function(p1__14983_SHARP_) {
                  return f1.call(null, p1__14983_SHARP_ == null ? null : self__.f.call(null, p1__14983_SHARP_));
                };
              }(f1, ___$2, ___$1);
            };
          }(___$1);
          cljs.core.async.t14993.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_14995) {
              var self__ = this;
              var _14995__$1 = this;
              return self__.meta14994;
            };
          }(___$1);
          cljs.core.async.t14993.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_14995, meta14994__$1) {
              var self__ = this;
              var _14995__$1 = this;
              return new cljs.core.async.t14993(self__.fn1, self__._, self__.meta14991, self__.map_LT_, self__.f, self__.ch, meta14994__$1);
            };
          }(___$1);
          cljs.core.async.t14993.cljs$lang$type = true;
          cljs.core.async.t14993.cljs$lang$ctorStr = "cljs.core.async/t14993";
          cljs.core.async.t14993.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
              return cljs.core._write.call(null, writer__4689__auto__, "cljs.core.async/t14993");
            };
          }(___$1);
          cljs.core.async.__GT_t14993 = function(___$1) {
            return function cljs$core$async$map_LT__$___GT_t14993(fn1__$1, ___$2, meta14991__$1, map_LT___$1, f__$1, ch__$1, meta14994) {
              return new cljs.core.async.t14993(fn1__$1, ___$2, meta14991__$1, map_LT___$1, f__$1, ch__$1, meta14994);
            };
          }(___$1);
        }
        return new cljs.core.async.t14993(fn1, ___$1, self__.meta14991, self__.map_LT_, self__.f, self__.ch, cljs.core.PersistentArrayMap.EMPTY);
      }());
      if (cljs.core.truth_(function() {
        var and__4097__auto__ = ret;
        if (cljs.core.truth_(and__4097__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__4097__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t14990.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t14990.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t14990.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t14990.prototype.cljs$core$IMeta$_meta$arity$1 = function(_14992) {
      var self__ = this;
      var _14992__$1 = this;
      return self__.meta14991;
    };
    cljs.core.async.t14990.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_14992, meta14991__$1) {
      var self__ = this;
      var _14992__$1 = this;
      return new cljs.core.async.t14990(self__.ch, self__.f, self__.map_LT_, meta14991__$1);
    };
    cljs.core.async.t14990.cljs$lang$type = true;
    cljs.core.async.t14990.cljs$lang$ctorStr = "cljs.core.async/t14990";
    cljs.core.async.t14990.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
      return cljs.core._write.call(null, writer__4689__auto__, "cljs.core.async/t14990");
    };
    cljs.core.async.__GT_t14990 = function cljs$core$async$map_LT__$___GT_t14990(ch__$1, f__$1, map_LT___$1, meta14991) {
      return new cljs.core.async.t14990(ch__$1, f__$1, map_LT___$1, meta14991);
    };
  }
  return new cljs.core.async.t14990(ch, f, cljs$core$async$map_LT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.map_GT_ = function cljs$core$async$map_GT_(f, ch) {
  if (typeof cljs.core.async.t14999 !== "undefined") {
  } else {
    cljs.core.async.t14999 = function(ch, f, map_GT_, meta15000) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta15000 = meta15000;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t14999.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t14999.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t14999.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t14999.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t14999.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t14999.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t14999.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15001) {
      var self__ = this;
      var _15001__$1 = this;
      return self__.meta15000;
    };
    cljs.core.async.t14999.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15001, meta15000__$1) {
      var self__ = this;
      var _15001__$1 = this;
      return new cljs.core.async.t14999(self__.ch, self__.f, self__.map_GT_, meta15000__$1);
    };
    cljs.core.async.t14999.cljs$lang$type = true;
    cljs.core.async.t14999.cljs$lang$ctorStr = "cljs.core.async/t14999";
    cljs.core.async.t14999.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
      return cljs.core._write.call(null, writer__4689__auto__, "cljs.core.async/t14999");
    };
    cljs.core.async.__GT_t14999 = function cljs$core$async$map_GT__$___GT_t14999(ch__$1, f__$1, map_GT___$1, meta15000) {
      return new cljs.core.async.t14999(ch__$1, f__$1, map_GT___$1, meta15000);
    };
  }
  return new cljs.core.async.t14999(ch, f, cljs$core$async$map_GT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.filter_GT_ = function cljs$core$async$filter_GT_(p, ch) {
  if (typeof cljs.core.async.t15005 !== "undefined") {
  } else {
    cljs.core.async.t15005 = function(ch, p, filter_GT_, meta15006) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta15006 = meta15006;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t15005.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t15005.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t15005.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t15005.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t15005.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t15005.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t15005.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t15005.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15007) {
      var self__ = this;
      var _15007__$1 = this;
      return self__.meta15006;
    };
    cljs.core.async.t15005.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15007, meta15006__$1) {
      var self__ = this;
      var _15007__$1 = this;
      return new cljs.core.async.t15005(self__.ch, self__.p, self__.filter_GT_, meta15006__$1);
    };
    cljs.core.async.t15005.cljs$lang$type = true;
    cljs.core.async.t15005.cljs$lang$ctorStr = "cljs.core.async/t15005";
    cljs.core.async.t15005.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
      return cljs.core._write.call(null, writer__4689__auto__, "cljs.core.async/t15005");
    };
    cljs.core.async.__GT_t15005 = function cljs$core$async$filter_GT__$___GT_t15005(ch__$1, p__$1, filter_GT___$1, meta15006) {
      return new cljs.core.async.t15005(ch__$1, p__$1, filter_GT___$1, meta15006);
    };
  }
  return new cljs.core.async.t15005(ch, p, cljs$core$async$filter_GT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.remove_GT_ = function cljs$core$async$remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var cljs$core$async$filter_LT_ = null;
  var cljs$core$async$filter_LT___2 = function(p, ch) {
    return cljs$core$async$filter_LT_.call(null, p, ch, null);
  };
  var cljs$core$async$filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6990__auto___15090 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6990__auto___15090, out) {
      return function() {
        var f__6991__auto__ = function() {
          var switch__6934__auto__ = function(c__6990__auto___15090, out) {
            return function(state_15069) {
              var state_val_15070 = state_15069[1];
              if (state_val_15070 === 7) {
                var inst_15065 = state_15069[2];
                var state_15069__$1 = state_15069;
                var statearr_15071_15091 = state_15069__$1;
                statearr_15071_15091[2] = inst_15065;
                statearr_15071_15091[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15070 === 1) {
                  var state_15069__$1 = state_15069;
                  var statearr_15072_15092 = state_15069__$1;
                  statearr_15072_15092[2] = null;
                  statearr_15072_15092[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15070 === 4) {
                    var inst_15051 = state_15069[7];
                    var inst_15051__$1 = state_15069[2];
                    var inst_15052 = inst_15051__$1 == null;
                    var state_15069__$1 = function() {
                      var statearr_15073 = state_15069;
                      statearr_15073[7] = inst_15051__$1;
                      return statearr_15073;
                    }();
                    if (cljs.core.truth_(inst_15052)) {
                      var statearr_15074_15093 = state_15069__$1;
                      statearr_15074_15093[1] = 5;
                    } else {
                      var statearr_15075_15094 = state_15069__$1;
                      statearr_15075_15094[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15070 === 6) {
                      var inst_15051 = state_15069[7];
                      var inst_15056 = p.call(null, inst_15051);
                      var state_15069__$1 = state_15069;
                      if (cljs.core.truth_(inst_15056)) {
                        var statearr_15076_15095 = state_15069__$1;
                        statearr_15076_15095[1] = 8;
                      } else {
                        var statearr_15077_15096 = state_15069__$1;
                        statearr_15077_15096[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15070 === 3) {
                        var inst_15067 = state_15069[2];
                        var state_15069__$1 = state_15069;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15069__$1, inst_15067);
                      } else {
                        if (state_val_15070 === 2) {
                          var state_15069__$1 = state_15069;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15069__$1, 4, ch);
                        } else {
                          if (state_val_15070 === 11) {
                            var inst_15059 = state_15069[2];
                            var state_15069__$1 = state_15069;
                            var statearr_15078_15097 = state_15069__$1;
                            statearr_15078_15097[2] = inst_15059;
                            statearr_15078_15097[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_15070 === 9) {
                              var state_15069__$1 = state_15069;
                              var statearr_15079_15098 = state_15069__$1;
                              statearr_15079_15098[2] = null;
                              statearr_15079_15098[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15070 === 5) {
                                var inst_15054 = cljs.core.async.close_BANG_.call(null, out);
                                var state_15069__$1 = state_15069;
                                var statearr_15080_15099 = state_15069__$1;
                                statearr_15080_15099[2] = inst_15054;
                                statearr_15080_15099[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15070 === 10) {
                                  var inst_15062 = state_15069[2];
                                  var state_15069__$1 = function() {
                                    var statearr_15081 = state_15069;
                                    statearr_15081[8] = inst_15062;
                                    return statearr_15081;
                                  }();
                                  var statearr_15082_15100 = state_15069__$1;
                                  statearr_15082_15100[2] = null;
                                  statearr_15082_15100[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_15070 === 8) {
                                    var inst_15051 = state_15069[7];
                                    var state_15069__$1 = state_15069;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15069__$1, 11, out, inst_15051);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6990__auto___15090, out);
          return function(switch__6934__auto__, c__6990__auto___15090, out) {
            return function() {
              var cljs$core$async$filter_LT__$_state_machine__6935__auto__ = null;
              var cljs$core$async$filter_LT__$_state_machine__6935__auto____0 = function() {
                var statearr_15086 = [null, null, null, null, null, null, null, null, null];
                statearr_15086[0] = cljs$core$async$filter_LT__$_state_machine__6935__auto__;
                statearr_15086[1] = 1;
                return statearr_15086;
              };
              var cljs$core$async$filter_LT__$_state_machine__6935__auto____1 = function(state_15069) {
                while (true) {
                  var ret_value__6936__auto__ = function() {
                    try {
                      while (true) {
                        var result__6937__auto__ = switch__6934__auto__.call(null, state_15069);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6937__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6937__auto__;
                        }
                        break;
                      }
                    } catch (e15087) {
                      if (e15087 instanceof Object) {
                        var ex__6938__auto__ = e15087;
                        var statearr_15088_15101 = state_15069;
                        statearr_15088_15101[5] = ex__6938__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15069);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e15087;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6936__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__15102 = state_15069;
                    state_15069 = G__15102;
                    continue;
                  } else {
                    return ret_value__6936__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$filter_LT__$_state_machine__6935__auto__ = function(state_15069) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$filter_LT__$_state_machine__6935__auto____0.call(this);
                  case 1:
                    return cljs$core$async$filter_LT__$_state_machine__6935__auto____1.call(this, state_15069);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$filter_LT__$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$filter_LT__$_state_machine__6935__auto____0;
              cljs$core$async$filter_LT__$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$filter_LT__$_state_machine__6935__auto____1;
              return cljs$core$async$filter_LT__$_state_machine__6935__auto__;
            }();
          }(switch__6934__auto__, c__6990__auto___15090, out);
        }();
        var state__6992__auto__ = function() {
          var statearr_15089 = f__6991__auto__.call(null);
          statearr_15089[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6990__auto___15090;
          return statearr_15089;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6992__auto__);
      };
    }(c__6990__auto___15090, out));
    return out;
  };
  cljs$core$async$filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$filter_LT___2.call(this, p, ch);
      case 3:
        return cljs$core$async$filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$filter_LT_.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$filter_LT___2;
  cljs$core$async$filter_LT_.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$filter_LT___3;
  return cljs$core$async$filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var cljs$core$async$remove_LT_ = null;
  var cljs$core$async$remove_LT___2 = function(p, ch) {
    return cljs$core$async$remove_LT_.call(null, p, ch, null);
  };
  var cljs$core$async$remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  cljs$core$async$remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$remove_LT___2.call(this, p, ch);
      case 3:
        return cljs$core$async$remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$remove_LT_.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$remove_LT___2;
  cljs$core$async$remove_LT_.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$remove_LT___3;
  return cljs$core$async$remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function cljs$core$async$mapcat_STAR_(f, in$, out) {
  var c__6990__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6990__auto__) {
    return function() {
      var f__6991__auto__ = function() {
        var switch__6934__auto__ = function(c__6990__auto__) {
          return function(state_15268) {
            var state_val_15269 = state_15268[1];
            if (state_val_15269 === 7) {
              var inst_15264 = state_15268[2];
              var state_15268__$1 = state_15268;
              var statearr_15270_15311 = state_15268__$1;
              statearr_15270_15311[2] = inst_15264;
              statearr_15270_15311[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15269 === 20) {
                var inst_15234 = state_15268[7];
                var inst_15245 = state_15268[2];
                var inst_15246 = cljs.core.next.call(null, inst_15234);
                var inst_15220 = inst_15246;
                var inst_15221 = null;
                var inst_15222 = 0;
                var inst_15223 = 0;
                var state_15268__$1 = function() {
                  var statearr_15271 = state_15268;
                  statearr_15271[8] = inst_15220;
                  statearr_15271[9] = inst_15245;
                  statearr_15271[10] = inst_15222;
                  statearr_15271[11] = inst_15223;
                  statearr_15271[12] = inst_15221;
                  return statearr_15271;
                }();
                var statearr_15272_15312 = state_15268__$1;
                statearr_15272_15312[2] = null;
                statearr_15272_15312[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15269 === 1) {
                  var state_15268__$1 = state_15268;
                  var statearr_15273_15313 = state_15268__$1;
                  statearr_15273_15313[2] = null;
                  statearr_15273_15313[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15269 === 4) {
                    var inst_15209 = state_15268[13];
                    var inst_15209__$1 = state_15268[2];
                    var inst_15210 = inst_15209__$1 == null;
                    var state_15268__$1 = function() {
                      var statearr_15274 = state_15268;
                      statearr_15274[13] = inst_15209__$1;
                      return statearr_15274;
                    }();
                    if (cljs.core.truth_(inst_15210)) {
                      var statearr_15275_15314 = state_15268__$1;
                      statearr_15275_15314[1] = 5;
                    } else {
                      var statearr_15276_15315 = state_15268__$1;
                      statearr_15276_15315[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15269 === 15) {
                      var state_15268__$1 = state_15268;
                      var statearr_15280_15316 = state_15268__$1;
                      statearr_15280_15316[2] = null;
                      statearr_15280_15316[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15269 === 21) {
                        var state_15268__$1 = state_15268;
                        var statearr_15281_15317 = state_15268__$1;
                        statearr_15281_15317[2] = null;
                        statearr_15281_15317[1] = 23;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_15269 === 13) {
                          var inst_15220 = state_15268[8];
                          var inst_15222 = state_15268[10];
                          var inst_15223 = state_15268[11];
                          var inst_15221 = state_15268[12];
                          var inst_15230 = state_15268[2];
                          var inst_15231 = inst_15223 + 1;
                          var tmp15277 = inst_15220;
                          var tmp15278 = inst_15222;
                          var tmp15279 = inst_15221;
                          var inst_15220__$1 = tmp15277;
                          var inst_15221__$1 = tmp15279;
                          var inst_15222__$1 = tmp15278;
                          var inst_15223__$1 = inst_15231;
                          var state_15268__$1 = function() {
                            var statearr_15282 = state_15268;
                            statearr_15282[8] = inst_15220__$1;
                            statearr_15282[10] = inst_15222__$1;
                            statearr_15282[14] = inst_15230;
                            statearr_15282[11] = inst_15223__$1;
                            statearr_15282[12] = inst_15221__$1;
                            return statearr_15282;
                          }();
                          var statearr_15283_15318 = state_15268__$1;
                          statearr_15283_15318[2] = null;
                          statearr_15283_15318[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_15269 === 22) {
                            var state_15268__$1 = state_15268;
                            var statearr_15284_15319 = state_15268__$1;
                            statearr_15284_15319[2] = null;
                            statearr_15284_15319[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_15269 === 6) {
                              var inst_15209 = state_15268[13];
                              var inst_15218 = f.call(null, inst_15209);
                              var inst_15219 = cljs.core.seq.call(null, inst_15218);
                              var inst_15220 = inst_15219;
                              var inst_15221 = null;
                              var inst_15222 = 0;
                              var inst_15223 = 0;
                              var state_15268__$1 = function() {
                                var statearr_15285 = state_15268;
                                statearr_15285[8] = inst_15220;
                                statearr_15285[10] = inst_15222;
                                statearr_15285[11] = inst_15223;
                                statearr_15285[12] = inst_15221;
                                return statearr_15285;
                              }();
                              var statearr_15286_15320 = state_15268__$1;
                              statearr_15286_15320[2] = null;
                              statearr_15286_15320[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15269 === 17) {
                                var inst_15234 = state_15268[7];
                                var inst_15238 = cljs.core.chunk_first.call(null, inst_15234);
                                var inst_15239 = cljs.core.chunk_rest.call(null, inst_15234);
                                var inst_15240 = cljs.core.count.call(null, inst_15238);
                                var inst_15220 = inst_15239;
                                var inst_15221 = inst_15238;
                                var inst_15222 = inst_15240;
                                var inst_15223 = 0;
                                var state_15268__$1 = function() {
                                  var statearr_15287 = state_15268;
                                  statearr_15287[8] = inst_15220;
                                  statearr_15287[10] = inst_15222;
                                  statearr_15287[11] = inst_15223;
                                  statearr_15287[12] = inst_15221;
                                  return statearr_15287;
                                }();
                                var statearr_15288_15321 = state_15268__$1;
                                statearr_15288_15321[2] = null;
                                statearr_15288_15321[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15269 === 3) {
                                  var inst_15266 = state_15268[2];
                                  var state_15268__$1 = state_15268;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15268__$1, inst_15266);
                                } else {
                                  if (state_val_15269 === 12) {
                                    var inst_15254 = state_15268[2];
                                    var state_15268__$1 = state_15268;
                                    var statearr_15289_15322 = state_15268__$1;
                                    statearr_15289_15322[2] = inst_15254;
                                    statearr_15289_15322[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_15269 === 2) {
                                      var state_15268__$1 = state_15268;
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15268__$1, 4, in$);
                                    } else {
                                      if (state_val_15269 === 23) {
                                        var inst_15262 = state_15268[2];
                                        var state_15268__$1 = state_15268;
                                        var statearr_15290_15323 = state_15268__$1;
                                        statearr_15290_15323[2] = inst_15262;
                                        statearr_15290_15323[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_15269 === 19) {
                                          var inst_15249 = state_15268[2];
                                          var state_15268__$1 = state_15268;
                                          var statearr_15291_15324 = state_15268__$1;
                                          statearr_15291_15324[2] = inst_15249;
                                          statearr_15291_15324[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_15269 === 11) {
                                            var inst_15220 = state_15268[8];
                                            var inst_15234 = state_15268[7];
                                            var inst_15234__$1 = cljs.core.seq.call(null, inst_15220);
                                            var state_15268__$1 = function() {
                                              var statearr_15292 = state_15268;
                                              statearr_15292[7] = inst_15234__$1;
                                              return statearr_15292;
                                            }();
                                            if (inst_15234__$1) {
                                              var statearr_15293_15325 = state_15268__$1;
                                              statearr_15293_15325[1] = 14;
                                            } else {
                                              var statearr_15294_15326 = state_15268__$1;
                                              statearr_15294_15326[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_15269 === 9) {
                                              var inst_15256 = state_15268[2];
                                              var inst_15257 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                                              var state_15268__$1 = function() {
                                                var statearr_15295 = state_15268;
                                                statearr_15295[15] = inst_15256;
                                                return statearr_15295;
                                              }();
                                              if (cljs.core.truth_(inst_15257)) {
                                                var statearr_15296_15327 = state_15268__$1;
                                                statearr_15296_15327[1] = 21;
                                              } else {
                                                var statearr_15297_15328 = state_15268__$1;
                                                statearr_15297_15328[1] = 22;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_15269 === 5) {
                                                var inst_15212 = cljs.core.async.close_BANG_.call(null, out);
                                                var state_15268__$1 = state_15268;
                                                var statearr_15298_15329 = state_15268__$1;
                                                statearr_15298_15329[2] = inst_15212;
                                                statearr_15298_15329[1] = 7;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_15269 === 14) {
                                                  var inst_15234 = state_15268[7];
                                                  var inst_15236 = cljs.core.chunked_seq_QMARK_.call(null, inst_15234);
                                                  var state_15268__$1 = state_15268;
                                                  if (inst_15236) {
                                                    var statearr_15299_15330 = state_15268__$1;
                                                    statearr_15299_15330[1] = 17;
                                                  } else {
                                                    var statearr_15300_15331 = state_15268__$1;
                                                    statearr_15300_15331[1] = 18;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_15269 === 16) {
                                                    var inst_15252 = state_15268[2];
                                                    var state_15268__$1 = state_15268;
                                                    var statearr_15301_15332 = state_15268__$1;
                                                    statearr_15301_15332[2] = inst_15252;
                                                    statearr_15301_15332[1] = 12;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_15269 === 10) {
                                                      var inst_15223 = state_15268[11];
                                                      var inst_15221 = state_15268[12];
                                                      var inst_15228 = cljs.core._nth.call(null, inst_15221, inst_15223);
                                                      var state_15268__$1 = state_15268;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15268__$1, 13, out, inst_15228);
                                                    } else {
                                                      if (state_val_15269 === 18) {
                                                        var inst_15234 = state_15268[7];
                                                        var inst_15243 = cljs.core.first.call(null, inst_15234);
                                                        var state_15268__$1 = state_15268;
                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15268__$1, 20, out, inst_15243);
                                                      } else {
                                                        if (state_val_15269 === 8) {
                                                          var inst_15222 = state_15268[10];
                                                          var inst_15223 = state_15268[11];
                                                          var inst_15225 = inst_15223 < inst_15222;
                                                          var inst_15226 = inst_15225;
                                                          var state_15268__$1 = state_15268;
                                                          if (cljs.core.truth_(inst_15226)) {
                                                            var statearr_15302_15333 = state_15268__$1;
                                                            statearr_15302_15333[1] = 10;
                                                          } else {
                                                            var statearr_15303_15334 = state_15268__$1;
                                                            statearr_15303_15334[1] = 11;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6990__auto__);
        return function(switch__6934__auto__, c__6990__auto__) {
          return function() {
            var cljs$core$async$mapcat_STAR__$_state_machine__6935__auto__ = null;
            var cljs$core$async$mapcat_STAR__$_state_machine__6935__auto____0 = function() {
              var statearr_15307 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_15307[0] = cljs$core$async$mapcat_STAR__$_state_machine__6935__auto__;
              statearr_15307[1] = 1;
              return statearr_15307;
            };
            var cljs$core$async$mapcat_STAR__$_state_machine__6935__auto____1 = function(state_15268) {
              while (true) {
                var ret_value__6936__auto__ = function() {
                  try {
                    while (true) {
                      var result__6937__auto__ = switch__6934__auto__.call(null, state_15268);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6937__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6937__auto__;
                      }
                      break;
                    }
                  } catch (e15308) {
                    if (e15308 instanceof Object) {
                      var ex__6938__auto__ = e15308;
                      var statearr_15309_15335 = state_15268;
                      statearr_15309_15335[5] = ex__6938__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15268);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15308;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6936__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15336 = state_15268;
                  state_15268 = G__15336;
                  continue;
                } else {
                  return ret_value__6936__auto__;
                }
                break;
              }
            };
            cljs$core$async$mapcat_STAR__$_state_machine__6935__auto__ = function(state_15268) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mapcat_STAR__$_state_machine__6935__auto____0.call(this);
                case 1:
                  return cljs$core$async$mapcat_STAR__$_state_machine__6935__auto____1.call(this, state_15268);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mapcat_STAR__$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mapcat_STAR__$_state_machine__6935__auto____0;
            cljs$core$async$mapcat_STAR__$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mapcat_STAR__$_state_machine__6935__auto____1;
            return cljs$core$async$mapcat_STAR__$_state_machine__6935__auto__;
          }();
        }(switch__6934__auto__, c__6990__auto__);
      }();
      var state__6992__auto__ = function() {
        var statearr_15310 = f__6991__auto__.call(null);
        statearr_15310[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6990__auto__;
        return statearr_15310;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6992__auto__);
    };
  }(c__6990__auto__));
  return c__6990__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var cljs$core$async$mapcat_LT_ = null;
  var cljs$core$async$mapcat_LT___2 = function(f, in$) {
    return cljs$core$async$mapcat_LT_.call(null, f, in$, null);
  };
  var cljs$core$async$mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  cljs$core$async$mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$mapcat_LT___2.call(this, f, in$);
      case 3:
        return cljs$core$async$mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$mapcat_LT___2;
  cljs$core$async$mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$mapcat_LT___3;
  return cljs$core$async$mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var cljs$core$async$mapcat_GT_ = null;
  var cljs$core$async$mapcat_GT___2 = function(f, out) {
    return cljs$core$async$mapcat_GT_.call(null, f, out, null);
  };
  var cljs$core$async$mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  cljs$core$async$mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$mapcat_GT___2.call(this, f, out);
      case 3:
        return cljs$core$async$mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$mapcat_GT___2;
  cljs$core$async$mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$mapcat_GT___3;
  return cljs$core$async$mapcat_GT_;
}();
cljs.core.async.unique = function() {
  var cljs$core$async$unique = null;
  var cljs$core$async$unique__1 = function(ch) {
    return cljs$core$async$unique.call(null, ch, null);
  };
  var cljs$core$async$unique__2 = function(ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6990__auto___15433 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6990__auto___15433, out) {
      return function() {
        var f__6991__auto__ = function() {
          var switch__6934__auto__ = function(c__6990__auto___15433, out) {
            return function(state_15408) {
              var state_val_15409 = state_15408[1];
              if (state_val_15409 === 7) {
                var inst_15403 = state_15408[2];
                var state_15408__$1 = state_15408;
                var statearr_15410_15434 = state_15408__$1;
                statearr_15410_15434[2] = inst_15403;
                statearr_15410_15434[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15409 === 1) {
                  var inst_15385 = null;
                  var state_15408__$1 = function() {
                    var statearr_15411 = state_15408;
                    statearr_15411[7] = inst_15385;
                    return statearr_15411;
                  }();
                  var statearr_15412_15435 = state_15408__$1;
                  statearr_15412_15435[2] = null;
                  statearr_15412_15435[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15409 === 4) {
                    var inst_15388 = state_15408[8];
                    var inst_15388__$1 = state_15408[2];
                    var inst_15389 = inst_15388__$1 == null;
                    var inst_15390 = cljs.core.not.call(null, inst_15389);
                    var state_15408__$1 = function() {
                      var statearr_15413 = state_15408;
                      statearr_15413[8] = inst_15388__$1;
                      return statearr_15413;
                    }();
                    if (inst_15390) {
                      var statearr_15414_15436 = state_15408__$1;
                      statearr_15414_15436[1] = 5;
                    } else {
                      var statearr_15415_15437 = state_15408__$1;
                      statearr_15415_15437[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15409 === 6) {
                      var state_15408__$1 = state_15408;
                      var statearr_15416_15438 = state_15408__$1;
                      statearr_15416_15438[2] = null;
                      statearr_15416_15438[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15409 === 3) {
                        var inst_15405 = state_15408[2];
                        var inst_15406 = cljs.core.async.close_BANG_.call(null, out);
                        var state_15408__$1 = function() {
                          var statearr_15417 = state_15408;
                          statearr_15417[9] = inst_15405;
                          return statearr_15417;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15408__$1, inst_15406);
                      } else {
                        if (state_val_15409 === 2) {
                          var state_15408__$1 = state_15408;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15408__$1, 4, ch);
                        } else {
                          if (state_val_15409 === 11) {
                            var inst_15388 = state_15408[8];
                            var inst_15397 = state_15408[2];
                            var inst_15385 = inst_15388;
                            var state_15408__$1 = function() {
                              var statearr_15418 = state_15408;
                              statearr_15418[7] = inst_15385;
                              statearr_15418[10] = inst_15397;
                              return statearr_15418;
                            }();
                            var statearr_15419_15439 = state_15408__$1;
                            statearr_15419_15439[2] = null;
                            statearr_15419_15439[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_15409 === 9) {
                              var inst_15388 = state_15408[8];
                              var state_15408__$1 = state_15408;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15408__$1, 11, out, inst_15388);
                            } else {
                              if (state_val_15409 === 5) {
                                var inst_15388 = state_15408[8];
                                var inst_15385 = state_15408[7];
                                var inst_15392 = cljs.core._EQ_.call(null, inst_15388, inst_15385);
                                var state_15408__$1 = state_15408;
                                if (inst_15392) {
                                  var statearr_15421_15440 = state_15408__$1;
                                  statearr_15421_15440[1] = 8;
                                } else {
                                  var statearr_15422_15441 = state_15408__$1;
                                  statearr_15422_15441[1] = 9;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15409 === 10) {
                                  var inst_15400 = state_15408[2];
                                  var state_15408__$1 = state_15408;
                                  var statearr_15423_15442 = state_15408__$1;
                                  statearr_15423_15442[2] = inst_15400;
                                  statearr_15423_15442[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_15409 === 8) {
                                    var inst_15385 = state_15408[7];
                                    var tmp15420 = inst_15385;
                                    var inst_15385__$1 = tmp15420;
                                    var state_15408__$1 = function() {
                                      var statearr_15424 = state_15408;
                                      statearr_15424[7] = inst_15385__$1;
                                      return statearr_15424;
                                    }();
                                    var statearr_15425_15443 = state_15408__$1;
                                    statearr_15425_15443[2] = null;
                                    statearr_15425_15443[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6990__auto___15433, out);
          return function(switch__6934__auto__, c__6990__auto___15433, out) {
            return function() {
              var cljs$core$async$unique_$_state_machine__6935__auto__ = null;
              var cljs$core$async$unique_$_state_machine__6935__auto____0 = function() {
                var statearr_15429 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_15429[0] = cljs$core$async$unique_$_state_machine__6935__auto__;
                statearr_15429[1] = 1;
                return statearr_15429;
              };
              var cljs$core$async$unique_$_state_machine__6935__auto____1 = function(state_15408) {
                while (true) {
                  var ret_value__6936__auto__ = function() {
                    try {
                      while (true) {
                        var result__6937__auto__ = switch__6934__auto__.call(null, state_15408);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6937__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6937__auto__;
                        }
                        break;
                      }
                    } catch (e15430) {
                      if (e15430 instanceof Object) {
                        var ex__6938__auto__ = e15430;
                        var statearr_15431_15444 = state_15408;
                        statearr_15431_15444[5] = ex__6938__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15408);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e15430;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6936__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__15445 = state_15408;
                    state_15408 = G__15445;
                    continue;
                  } else {
                    return ret_value__6936__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$unique_$_state_machine__6935__auto__ = function(state_15408) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$unique_$_state_machine__6935__auto____0.call(this);
                  case 1:
                    return cljs$core$async$unique_$_state_machine__6935__auto____1.call(this, state_15408);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$unique_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$unique_$_state_machine__6935__auto____0;
              cljs$core$async$unique_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$unique_$_state_machine__6935__auto____1;
              return cljs$core$async$unique_$_state_machine__6935__auto__;
            }();
          }(switch__6934__auto__, c__6990__auto___15433, out);
        }();
        var state__6992__auto__ = function() {
          var statearr_15432 = f__6991__auto__.call(null);
          statearr_15432[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6990__auto___15433;
          return statearr_15432;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6992__auto__);
      };
    }(c__6990__auto___15433, out));
    return out;
  };
  cljs$core$async$unique = function(ch, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return cljs$core$async$unique__1.call(this, ch);
      case 2:
        return cljs$core$async$unique__2.call(this, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$unique.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$unique__1;
  cljs$core$async$unique.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$unique__2;
  return cljs$core$async$unique;
}();
cljs.core.async.partition = function() {
  var cljs$core$async$partition = null;
  var cljs$core$async$partition__2 = function(n, ch) {
    return cljs$core$async$partition.call(null, n, ch, null);
  };
  var cljs$core$async$partition__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6990__auto___15580 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6990__auto___15580, out) {
      return function() {
        var f__6991__auto__ = function() {
          var switch__6934__auto__ = function(c__6990__auto___15580, out) {
            return function(state_15550) {
              var state_val_15551 = state_15550[1];
              if (state_val_15551 === 7) {
                var inst_15546 = state_15550[2];
                var state_15550__$1 = state_15550;
                var statearr_15552_15581 = state_15550__$1;
                statearr_15552_15581[2] = inst_15546;
                statearr_15552_15581[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15551 === 1) {
                  var inst_15513 = new Array(n);
                  var inst_15514 = inst_15513;
                  var inst_15515 = 0;
                  var state_15550__$1 = function() {
                    var statearr_15553 = state_15550;
                    statearr_15553[7] = inst_15514;
                    statearr_15553[8] = inst_15515;
                    return statearr_15553;
                  }();
                  var statearr_15554_15582 = state_15550__$1;
                  statearr_15554_15582[2] = null;
                  statearr_15554_15582[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15551 === 4) {
                    var inst_15518 = state_15550[9];
                    var inst_15518__$1 = state_15550[2];
                    var inst_15519 = inst_15518__$1 == null;
                    var inst_15520 = cljs.core.not.call(null, inst_15519);
                    var state_15550__$1 = function() {
                      var statearr_15555 = state_15550;
                      statearr_15555[9] = inst_15518__$1;
                      return statearr_15555;
                    }();
                    if (inst_15520) {
                      var statearr_15556_15583 = state_15550__$1;
                      statearr_15556_15583[1] = 5;
                    } else {
                      var statearr_15557_15584 = state_15550__$1;
                      statearr_15557_15584[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15551 === 15) {
                      var inst_15540 = state_15550[2];
                      var state_15550__$1 = state_15550;
                      var statearr_15558_15585 = state_15550__$1;
                      statearr_15558_15585[2] = inst_15540;
                      statearr_15558_15585[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15551 === 13) {
                        var state_15550__$1 = state_15550;
                        var statearr_15559_15586 = state_15550__$1;
                        statearr_15559_15586[2] = null;
                        statearr_15559_15586[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_15551 === 6) {
                          var inst_15515 = state_15550[8];
                          var inst_15536 = inst_15515 > 0;
                          var state_15550__$1 = state_15550;
                          if (cljs.core.truth_(inst_15536)) {
                            var statearr_15560_15587 = state_15550__$1;
                            statearr_15560_15587[1] = 12;
                          } else {
                            var statearr_15561_15588 = state_15550__$1;
                            statearr_15561_15588[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_15551 === 3) {
                            var inst_15548 = state_15550[2];
                            var state_15550__$1 = state_15550;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15550__$1, inst_15548);
                          } else {
                            if (state_val_15551 === 12) {
                              var inst_15514 = state_15550[7];
                              var inst_15538 = cljs.core.vec.call(null, inst_15514);
                              var state_15550__$1 = state_15550;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15550__$1, 15, out, inst_15538);
                            } else {
                              if (state_val_15551 === 2) {
                                var state_15550__$1 = state_15550;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15550__$1, 4, ch);
                              } else {
                                if (state_val_15551 === 11) {
                                  var inst_15530 = state_15550[2];
                                  var inst_15531 = new Array(n);
                                  var inst_15514 = inst_15531;
                                  var inst_15515 = 0;
                                  var state_15550__$1 = function() {
                                    var statearr_15562 = state_15550;
                                    statearr_15562[10] = inst_15530;
                                    statearr_15562[7] = inst_15514;
                                    statearr_15562[8] = inst_15515;
                                    return statearr_15562;
                                  }();
                                  var statearr_15563_15589 = state_15550__$1;
                                  statearr_15563_15589[2] = null;
                                  statearr_15563_15589[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_15551 === 9) {
                                    var inst_15514 = state_15550[7];
                                    var inst_15528 = cljs.core.vec.call(null, inst_15514);
                                    var state_15550__$1 = state_15550;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15550__$1, 11, out, inst_15528);
                                  } else {
                                    if (state_val_15551 === 5) {
                                      var inst_15514 = state_15550[7];
                                      var inst_15515 = state_15550[8];
                                      var inst_15523 = state_15550[11];
                                      var inst_15518 = state_15550[9];
                                      var inst_15522 = inst_15514[inst_15515] = inst_15518;
                                      var inst_15523__$1 = inst_15515 + 1;
                                      var inst_15524 = inst_15523__$1 < n;
                                      var state_15550__$1 = function() {
                                        var statearr_15564 = state_15550;
                                        statearr_15564[12] = inst_15522;
                                        statearr_15564[11] = inst_15523__$1;
                                        return statearr_15564;
                                      }();
                                      if (cljs.core.truth_(inst_15524)) {
                                        var statearr_15565_15590 = state_15550__$1;
                                        statearr_15565_15590[1] = 8;
                                      } else {
                                        var statearr_15566_15591 = state_15550__$1;
                                        statearr_15566_15591[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_15551 === 14) {
                                        var inst_15543 = state_15550[2];
                                        var inst_15544 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_15550__$1 = function() {
                                          var statearr_15568 = state_15550;
                                          statearr_15568[13] = inst_15543;
                                          return statearr_15568;
                                        }();
                                        var statearr_15569_15592 = state_15550__$1;
                                        statearr_15569_15592[2] = inst_15544;
                                        statearr_15569_15592[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_15551 === 10) {
                                          var inst_15534 = state_15550[2];
                                          var state_15550__$1 = state_15550;
                                          var statearr_15570_15593 = state_15550__$1;
                                          statearr_15570_15593[2] = inst_15534;
                                          statearr_15570_15593[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_15551 === 8) {
                                            var inst_15514 = state_15550[7];
                                            var inst_15523 = state_15550[11];
                                            var tmp15567 = inst_15514;
                                            var inst_15514__$1 = tmp15567;
                                            var inst_15515 = inst_15523;
                                            var state_15550__$1 = function() {
                                              var statearr_15571 = state_15550;
                                              statearr_15571[7] = inst_15514__$1;
                                              statearr_15571[8] = inst_15515;
                                              return statearr_15571;
                                            }();
                                            var statearr_15572_15594 = state_15550__$1;
                                            statearr_15572_15594[2] = null;
                                            statearr_15572_15594[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6990__auto___15580, out);
          return function(switch__6934__auto__, c__6990__auto___15580, out) {
            return function() {
              var cljs$core$async$partition_$_state_machine__6935__auto__ = null;
              var cljs$core$async$partition_$_state_machine__6935__auto____0 = function() {
                var statearr_15576 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_15576[0] = cljs$core$async$partition_$_state_machine__6935__auto__;
                statearr_15576[1] = 1;
                return statearr_15576;
              };
              var cljs$core$async$partition_$_state_machine__6935__auto____1 = function(state_15550) {
                while (true) {
                  var ret_value__6936__auto__ = function() {
                    try {
                      while (true) {
                        var result__6937__auto__ = switch__6934__auto__.call(null, state_15550);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6937__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6937__auto__;
                        }
                        break;
                      }
                    } catch (e15577) {
                      if (e15577 instanceof Object) {
                        var ex__6938__auto__ = e15577;
                        var statearr_15578_15595 = state_15550;
                        statearr_15578_15595[5] = ex__6938__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15550);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e15577;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6936__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__15596 = state_15550;
                    state_15550 = G__15596;
                    continue;
                  } else {
                    return ret_value__6936__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$partition_$_state_machine__6935__auto__ = function(state_15550) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$partition_$_state_machine__6935__auto____0.call(this);
                  case 1:
                    return cljs$core$async$partition_$_state_machine__6935__auto____1.call(this, state_15550);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$partition_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$partition_$_state_machine__6935__auto____0;
              cljs$core$async$partition_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$partition_$_state_machine__6935__auto____1;
              return cljs$core$async$partition_$_state_machine__6935__auto__;
            }();
          }(switch__6934__auto__, c__6990__auto___15580, out);
        }();
        var state__6992__auto__ = function() {
          var statearr_15579 = f__6991__auto__.call(null);
          statearr_15579[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6990__auto___15580;
          return statearr_15579;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6992__auto__);
      };
    }(c__6990__auto___15580, out));
    return out;
  };
  cljs$core$async$partition = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$partition__2.call(this, n, ch);
      case 3:
        return cljs$core$async$partition__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$partition.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$partition__2;
  cljs$core$async$partition.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$partition__3;
  return cljs$core$async$partition;
}();
cljs.core.async.partition_by = function() {
  var cljs$core$async$partition_by = null;
  var cljs$core$async$partition_by__2 = function(f, ch) {
    return cljs$core$async$partition_by.call(null, f, ch, null);
  };
  var cljs$core$async$partition_by__3 = function(f, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6990__auto___15739 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6990__auto___15739, out) {
      return function() {
        var f__6991__auto__ = function() {
          var switch__6934__auto__ = function(c__6990__auto___15739, out) {
            return function(state_15709) {
              var state_val_15710 = state_15709[1];
              if (state_val_15710 === 7) {
                var inst_15705 = state_15709[2];
                var state_15709__$1 = state_15709;
                var statearr_15711_15740 = state_15709__$1;
                statearr_15711_15740[2] = inst_15705;
                statearr_15711_15740[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15710 === 1) {
                  var inst_15668 = [];
                  var inst_15669 = inst_15668;
                  var inst_15670 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123);
                  var state_15709__$1 = function() {
                    var statearr_15712 = state_15709;
                    statearr_15712[7] = inst_15670;
                    statearr_15712[8] = inst_15669;
                    return statearr_15712;
                  }();
                  var statearr_15713_15741 = state_15709__$1;
                  statearr_15713_15741[2] = null;
                  statearr_15713_15741[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15710 === 4) {
                    var inst_15673 = state_15709[9];
                    var inst_15673__$1 = state_15709[2];
                    var inst_15674 = inst_15673__$1 == null;
                    var inst_15675 = cljs.core.not.call(null, inst_15674);
                    var state_15709__$1 = function() {
                      var statearr_15714 = state_15709;
                      statearr_15714[9] = inst_15673__$1;
                      return statearr_15714;
                    }();
                    if (inst_15675) {
                      var statearr_15715_15742 = state_15709__$1;
                      statearr_15715_15742[1] = 5;
                    } else {
                      var statearr_15716_15743 = state_15709__$1;
                      statearr_15716_15743[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15710 === 15) {
                      var inst_15699 = state_15709[2];
                      var state_15709__$1 = state_15709;
                      var statearr_15717_15744 = state_15709__$1;
                      statearr_15717_15744[2] = inst_15699;
                      statearr_15717_15744[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15710 === 13) {
                        var state_15709__$1 = state_15709;
                        var statearr_15718_15745 = state_15709__$1;
                        statearr_15718_15745[2] = null;
                        statearr_15718_15745[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_15710 === 6) {
                          var inst_15669 = state_15709[8];
                          var inst_15694 = inst_15669.length;
                          var inst_15695 = inst_15694 > 0;
                          var state_15709__$1 = state_15709;
                          if (cljs.core.truth_(inst_15695)) {
                            var statearr_15719_15746 = state_15709__$1;
                            statearr_15719_15746[1] = 12;
                          } else {
                            var statearr_15720_15747 = state_15709__$1;
                            statearr_15720_15747[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_15710 === 3) {
                            var inst_15707 = state_15709[2];
                            var state_15709__$1 = state_15709;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15709__$1, inst_15707);
                          } else {
                            if (state_val_15710 === 12) {
                              var inst_15669 = state_15709[8];
                              var inst_15697 = cljs.core.vec.call(null, inst_15669);
                              var state_15709__$1 = state_15709;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15709__$1, 15, out, inst_15697);
                            } else {
                              if (state_val_15710 === 2) {
                                var state_15709__$1 = state_15709;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15709__$1, 4, ch);
                              } else {
                                if (state_val_15710 === 11) {
                                  var inst_15673 = state_15709[9];
                                  var inst_15677 = state_15709[10];
                                  var inst_15687 = state_15709[2];
                                  var inst_15688 = [];
                                  var inst_15689 = inst_15688.push(inst_15673);
                                  var inst_15669 = inst_15688;
                                  var inst_15670 = inst_15677;
                                  var state_15709__$1 = function() {
                                    var statearr_15721 = state_15709;
                                    statearr_15721[7] = inst_15670;
                                    statearr_15721[11] = inst_15689;
                                    statearr_15721[8] = inst_15669;
                                    statearr_15721[12] = inst_15687;
                                    return statearr_15721;
                                  }();
                                  var statearr_15722_15748 = state_15709__$1;
                                  statearr_15722_15748[2] = null;
                                  statearr_15722_15748[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_15710 === 9) {
                                    var inst_15669 = state_15709[8];
                                    var inst_15685 = cljs.core.vec.call(null, inst_15669);
                                    var state_15709__$1 = state_15709;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15709__$1, 11, out, inst_15685);
                                  } else {
                                    if (state_val_15710 === 5) {
                                      var inst_15673 = state_15709[9];
                                      var inst_15677 = state_15709[10];
                                      var inst_15670 = state_15709[7];
                                      var inst_15677__$1 = f.call(null, inst_15673);
                                      var inst_15678 = cljs.core._EQ_.call(null, inst_15677__$1, inst_15670);
                                      var inst_15679 = cljs.core.keyword_identical_QMARK_.call(null, inst_15670, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123));
                                      var inst_15680 = inst_15678 || inst_15679;
                                      var state_15709__$1 = function() {
                                        var statearr_15723 = state_15709;
                                        statearr_15723[10] = inst_15677__$1;
                                        return statearr_15723;
                                      }();
                                      if (cljs.core.truth_(inst_15680)) {
                                        var statearr_15724_15749 = state_15709__$1;
                                        statearr_15724_15749[1] = 8;
                                      } else {
                                        var statearr_15725_15750 = state_15709__$1;
                                        statearr_15725_15750[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_15710 === 14) {
                                        var inst_15702 = state_15709[2];
                                        var inst_15703 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_15709__$1 = function() {
                                          var statearr_15727 = state_15709;
                                          statearr_15727[13] = inst_15702;
                                          return statearr_15727;
                                        }();
                                        var statearr_15728_15751 = state_15709__$1;
                                        statearr_15728_15751[2] = inst_15703;
                                        statearr_15728_15751[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_15710 === 10) {
                                          var inst_15692 = state_15709[2];
                                          var state_15709__$1 = state_15709;
                                          var statearr_15729_15752 = state_15709__$1;
                                          statearr_15729_15752[2] = inst_15692;
                                          statearr_15729_15752[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_15710 === 8) {
                                            var inst_15673 = state_15709[9];
                                            var inst_15677 = state_15709[10];
                                            var inst_15669 = state_15709[8];
                                            var inst_15682 = inst_15669.push(inst_15673);
                                            var tmp15726 = inst_15669;
                                            var inst_15669__$1 = tmp15726;
                                            var inst_15670 = inst_15677;
                                            var state_15709__$1 = function() {
                                              var statearr_15730 = state_15709;
                                              statearr_15730[7] = inst_15670;
                                              statearr_15730[8] = inst_15669__$1;
                                              statearr_15730[14] = inst_15682;
                                              return statearr_15730;
                                            }();
                                            var statearr_15731_15753 = state_15709__$1;
                                            statearr_15731_15753[2] = null;
                                            statearr_15731_15753[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6990__auto___15739, out);
          return function(switch__6934__auto__, c__6990__auto___15739, out) {
            return function() {
              var cljs$core$async$partition_by_$_state_machine__6935__auto__ = null;
              var cljs$core$async$partition_by_$_state_machine__6935__auto____0 = function() {
                var statearr_15735 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_15735[0] = cljs$core$async$partition_by_$_state_machine__6935__auto__;
                statearr_15735[1] = 1;
                return statearr_15735;
              };
              var cljs$core$async$partition_by_$_state_machine__6935__auto____1 = function(state_15709) {
                while (true) {
                  var ret_value__6936__auto__ = function() {
                    try {
                      while (true) {
                        var result__6937__auto__ = switch__6934__auto__.call(null, state_15709);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6937__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6937__auto__;
                        }
                        break;
                      }
                    } catch (e15736) {
                      if (e15736 instanceof Object) {
                        var ex__6938__auto__ = e15736;
                        var statearr_15737_15754 = state_15709;
                        statearr_15737_15754[5] = ex__6938__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15709);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e15736;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6936__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__15755 = state_15709;
                    state_15709 = G__15755;
                    continue;
                  } else {
                    return ret_value__6936__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$partition_by_$_state_machine__6935__auto__ = function(state_15709) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$partition_by_$_state_machine__6935__auto____0.call(this);
                  case 1:
                    return cljs$core$async$partition_by_$_state_machine__6935__auto____1.call(this, state_15709);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$partition_by_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$partition_by_$_state_machine__6935__auto____0;
              cljs$core$async$partition_by_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$partition_by_$_state_machine__6935__auto____1;
              return cljs$core$async$partition_by_$_state_machine__6935__auto__;
            }();
          }(switch__6934__auto__, c__6990__auto___15739, out);
        }();
        var state__6992__auto__ = function() {
          var statearr_15738 = f__6991__auto__.call(null);
          statearr_15738[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6990__auto___15739;
          return statearr_15738;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6992__auto__);
      };
    }(c__6990__auto___15739, out));
    return out;
  };
  cljs$core$async$partition_by = function(f, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$partition_by__2.call(this, f, ch);
      case 3:
        return cljs$core$async$partition_by__3.call(this, f, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$partition_by.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$partition_by__2;
  cljs$core$async$partition_by.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$partition_by__3;
  return cljs$core$async$partition_by;
}();
goog.provide("centipair.core.style");
goog.require("cljs.core");
centipair.core.style.input_container_control = "pure-controls";
centipair.core.style.input_container_control_class_error = "pure-controls validation-error";
centipair.core.style.input_container_class = "pure-control-group";
centipair.core.style.input_container_class_error = "pure-control-group validation-error";
centipair.core.style.disabled_primary_button_class = "pure-button pure-button-primary pure-button-disabled";
centipair.core.style.primary_button_class = "pure-button pure-button-primary";
centipair.core.style.bootstrap_input_container_class = "form-group";
centipair.core.style.bootstrap_input_container_class_error = "form-group has-error";
centipair.core.style.bootstrap_form_horizontal = "form-horizontal";
centipair.core.style.boostrap_input_class = "form-control";
centipair.core.style.bootstrap_primary_button_class = "btn btn-primary";
goog.provide("centipair.core.components.editor");
goog.require("cljs.core");
goog.require("centipair.core.utilities.dom");
goog.require("centipair.core.style");
goog.require("cljs.core.async");
goog.require("markdown.core");
centipair.core.components.editor.markdown_html_channel = cljs.core.async.chan.call(null);
centipair.core.components.editor.markdown_html_preview = function centipair$core$components$editor$markdown_html_preview(field) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), (new cljs.core.Keyword(null, "html", "html", -998796897)).cljs$core$IFn$_invoke$arity$1(field)], null);
};
centipair.core.components.editor.update_markdown_value = function centipair$core$components$editor$update_markdown_value(field, value) {
  cljs.core.reset_BANG_.call(null, field, cljs.core.assoc.call(null, cljs.core.deref.call(null, field), new cljs.core.Keyword(null, "value", "value", 305978217), value));
  return cljs.core.async.put_BANG_.call(null, centipair.core.components.editor.markdown_html_channel, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [field, value], null));
};
centipair.core.components.editor.generate_preview = function centipair$core$components$editor$generate_preview(field_value_group) {
  var field = cljs.core.first.call(null, field_value_group);
  var value = cljs.core.second.call(null, field_value_group);
  cljs.core.reset_BANG_.call(null, field, cljs.core.assoc.call(null, cljs.core.deref.call(null, field), new cljs.core.Keyword(null, "html", "html", -998796897), markdown.core.md__GT_html.call(null, safe_tags_regex(value))));
  return centipair.core.utilities.dom.innerHtml.call(null, "markdown-preview", (new cljs.core.Keyword(null, "html", "html", -998796897)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)));
};
centipair.core.components.editor.markdown_editor = function centipair$core$components$editor$markdown_editor(field) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ul", "ul", -1349521403), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "nav nav-tabs"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "li", "li", 723558921), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "active", new cljs.core.Keyword(null, "role", "role", -736691072), "presentation"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "href", "href", -793805698), "#md-editor", new cljs.core.Keyword(null, "aria-controls", 
  "aria-controls", -1872379154), "md-editor", new cljs.core.Keyword(null, "role", "role", -736691072), "tab", new cljs.core.Keyword(null, "data-toggle", "data-toggle", 436966687), "tab"], null), "Editor"], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "", new cljs.core.Keyword(null, "role", "role", 
  -736691072), "presentation"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "href", "href", -793805698), "#md-preview", new cljs.core.Keyword(null, "aria-controls", "aria-controls", -1872379154), "md-preview", new cljs.core.Keyword(null, "role", "role", -736691072), "tab", new cljs.core.Keyword(null, "data-toggle", "data-toggle", 
  436966687), "tab"], null), "Preview"], null)], null)], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "tab-content"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 
  3, [new cljs.core.Keyword(null, "class", "class", -2030961996), "tab-pane active", new cljs.core.Keyword(null, "role", "role", -736691072), "tab-panel", new cljs.core.Keyword(null, "id", "id", -1388402092), "md-editor"], null), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), (new cljs.core.Keyword(null, "class-name", 
  "class-name", 945142584)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)) == null ? centipair.core.style.bootstrap_input_container_class : (new cljs.core.Keyword(null, "class-name", "class-name", 945142584)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str("container-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  field)))].join("")], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "for", "for", -1323786319), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "class", "class", -2030961996), "control-label", new cljs.core.Keyword(null, "key", 
  "key", -1516042587), [cljs.core.str("label-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null), (new cljs.core.Keyword(null, "label", "label", 1718410804)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "textarea", "textarea", -650375824), new cljs.core.PersistentArrayMap(null, 
  8, [new cljs.core.Keyword(null, "class", "class", -2030961996), "form-control", new cljs.core.Keyword(null, "type", "type", 1174270348), (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "id", "id", -1388402092), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083), 
  (new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)) == null ? "" : (new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "rows", "rows", 850049680), "25", new cljs.core.Keyword(null, "value", "value", 305978217), (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  field)), new cljs.core.Keyword(null, "on-change", "on-change", -732046149), function(p1__11914_SHARP_) {
    return centipair.core.components.editor.update_markdown_value.call(null, field, p1__11914_SHARP_.target.value);
  }, new cljs.core.Keyword(null, "key", "key", -1516042587), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "message-label", new cljs.core.Keyword(null, "key", "key", 
  -1516042587), [cljs.core.str("message-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null), (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)) == null ? "" : (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null)], null)], null), new cljs.core.PersistentVector(null, 
  3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "class", "class", -2030961996), "tab-pane", new cljs.core.Keyword(null, "role", "role", -736691072), "tab-panel", new cljs.core.Keyword(null, "id", "id", -1388402092), "md-preview"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), 
  new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "panel panel-default"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", -1388402092), "markdown-preview", new cljs.core.Keyword(null, "class", "class", -2030961996), "panel-body"], null)], null)], null)], null)], null)], 
  null);
};
centipair.core.components.editor.init_markdown_channel = function centipair$core$components$editor$init_markdown_channel() {
  var c__6990__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6990__auto__) {
    return function() {
      var f__6991__auto__ = function() {
        var switch__6934__auto__ = function(c__6990__auto__) {
          return function(state_11955) {
            var state_val_11956 = state_11955[1];
            if (state_val_11956 === 7) {
              var inst_11946 = state_11955[2];
              var inst_11947 = centipair.core.components.editor.generate_preview.call(null, inst_11946);
              var state_11955__$1 = function() {
                var statearr_11957 = state_11955;
                statearr_11957[7] = inst_11947;
                return statearr_11957;
              }();
              var statearr_11958_11971 = state_11955__$1;
              statearr_11958_11971[2] = null;
              statearr_11958_11971[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11956 === 6) {
                var inst_11951 = state_11955[2];
                var state_11955__$1 = state_11955;
                var statearr_11959_11972 = state_11955__$1;
                statearr_11959_11972[2] = inst_11951;
                statearr_11959_11972[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11956 === 5) {
                  var state_11955__$1 = state_11955;
                  var statearr_11960_11973 = state_11955__$1;
                  statearr_11960_11973[2] = null;
                  statearr_11960_11973[1] = 6;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11956 === 4) {
                    var state_11955__$1 = state_11955;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11955__$1, 7, centipair.core.components.editor.markdown_html_channel);
                  } else {
                    if (state_val_11956 === 3) {
                      var inst_11953 = state_11955[2];
                      var state_11955__$1 = state_11955;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11955__$1, inst_11953);
                    } else {
                      if (state_val_11956 === 2) {
                        var state_11955__$1 = state_11955;
                        var statearr_11961_11974 = state_11955__$1;
                        statearr_11961_11974[1] = 4;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11956 === 1) {
                          var state_11955__$1 = state_11955;
                          var statearr_11963_11975 = state_11955__$1;
                          statearr_11963_11975[2] = null;
                          statearr_11963_11975[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6990__auto__);
        return function(switch__6934__auto__, c__6990__auto__) {
          return function() {
            var centipair$core$components$editor$init_markdown_channel_$_state_machine__6935__auto__ = null;
            var centipair$core$components$editor$init_markdown_channel_$_state_machine__6935__auto____0 = function() {
              var statearr_11967 = [null, null, null, null, null, null, null, null];
              statearr_11967[0] = centipair$core$components$editor$init_markdown_channel_$_state_machine__6935__auto__;
              statearr_11967[1] = 1;
              return statearr_11967;
            };
            var centipair$core$components$editor$init_markdown_channel_$_state_machine__6935__auto____1 = function(state_11955) {
              while (true) {
                var ret_value__6936__auto__ = function() {
                  try {
                    while (true) {
                      var result__6937__auto__ = switch__6934__auto__.call(null, state_11955);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6937__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6937__auto__;
                      }
                      break;
                    }
                  } catch (e11968) {
                    if (e11968 instanceof Object) {
                      var ex__6938__auto__ = e11968;
                      var statearr_11969_11976 = state_11955;
                      statearr_11969_11976[5] = ex__6938__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11955);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11968;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6936__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11977 = state_11955;
                  state_11955 = G__11977;
                  continue;
                } else {
                  return ret_value__6936__auto__;
                }
                break;
              }
            };
            centipair$core$components$editor$init_markdown_channel_$_state_machine__6935__auto__ = function(state_11955) {
              switch(arguments.length) {
                case 0:
                  return centipair$core$components$editor$init_markdown_channel_$_state_machine__6935__auto____0.call(this);
                case 1:
                  return centipair$core$components$editor$init_markdown_channel_$_state_machine__6935__auto____1.call(this, state_11955);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            centipair$core$components$editor$init_markdown_channel_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$0 = centipair$core$components$editor$init_markdown_channel_$_state_machine__6935__auto____0;
            centipair$core$components$editor$init_markdown_channel_$_state_machine__6935__auto__.cljs$core$IFn$_invoke$arity$1 = centipair$core$components$editor$init_markdown_channel_$_state_machine__6935__auto____1;
            return centipair$core$components$editor$init_markdown_channel_$_state_machine__6935__auto__;
          }();
        }(switch__6934__auto__, c__6990__auto__);
      }();
      var state__6992__auto__ = function() {
        var statearr_11970 = f__6991__auto__.call(null);
        statearr_11970[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6990__auto__;
        return statearr_11970;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6992__auto__);
    };
  }(c__6990__auto__));
  return c__6990__auto__;
};
goog.provide("centipair.core.components.input");
goog.require("cljs.core");
goog.require("centipair.core.components.editor");
goog.require("centipair.core.utilities.validators");
goog.require("centipair.core.style");
goog.require("reagent.core");
centipair.core.components.input.update_value = function centipair$core$components$input$update_value(field, value) {
  return cljs.core.reset_BANG_.call(null, field, cljs.core.assoc.call(null, cljs.core.deref.call(null, field), new cljs.core.Keyword(null, "value", "value", 305978217), value));
};
centipair.core.components.input.update_image_spec = function centipair$core$components$input$update_image_spec(key, field, value) {
  var dim = key.call(null, cljs.core.deref.call(null, field));
  var new_dim = cljs.core.assoc.call(null, dim, new cljs.core.Keyword(null, "value", "value", 305978217), value);
  return cljs.core.reset_BANG_.call(null, field, cljs.core.assoc.call(null, cljs.core.deref.call(null, field), key, new_dim));
};
centipair.core.components.input.update_image_spec_check = function centipair$core$components$input$update_image_spec_check(field, checked_QMARK_) {
  var crop = (new cljs.core.Keyword(null, "crop", "crop", 793731643)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field));
  if (cljs.core.truth_(checked_QMARK_)) {
    return cljs.core.reset_BANG_.call(null, field, cljs.core.assoc.call(null, cljs.core.deref.call(null, field), new cljs.core.Keyword(null, "crop", "crop", 793731643), cljs.core.assoc.call(null, crop, new cljs.core.Keyword(null, "checked", "checked", -50955819), "checked")));
  } else {
    return cljs.core.reset_BANG_.call(null, field, cljs.core.assoc.call(null, cljs.core.deref.call(null, field), new cljs.core.Keyword(null, "crop", "crop", 793731643), cljs.core.assoc.call(null, crop, new cljs.core.Keyword(null, "checked", "checked", -50955819), "")));
  }
};
centipair.core.components.input.update_check = function centipair$core$components$input$update_check(field, checked_QMARK_) {
  if (cljs.core.truth_(checked_QMARK_)) {
    return cljs.core.reset_BANG_.call(null, field, cljs.core.assoc.call(null, cljs.core.deref.call(null, field), new cljs.core.Keyword(null, "checked", "checked", -50955819), "checked"));
  } else {
    return cljs.core.reset_BANG_.call(null, field, cljs.core.assoc.call(null, cljs.core.deref.call(null, field), new cljs.core.Keyword(null, "checked", "checked", -50955819), ""));
  }
};
centipair.core.components.input.reset_image_spec = function centipair$core$components$input$reset_image_spec(field) {
  centipair.core.components.input.update_image_spec.call(null, new cljs.core.Keyword(null, "width", "width", -384071477), field, "");
  centipair.core.components.input.update_image_spec.call(null, new cljs.core.Keyword(null, "height", "height", 1025178622), field, "");
  return centipair.core.components.input.update_image_spec_check.call(null, field, false);
};
centipair.core.components.input.update_radio = function centipair$core$components$input$update_radio(field, value) {
  return cljs.core.swap_BANG_.call(null, field, cljs.core.assoc, new cljs.core.Keyword(null, "value", "value", 305978217), value);
};
centipair.core.components.input.text = function centipair$core$components$input$text(field) {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), (new cljs.core.Keyword(null, "class-name", "class-name", 945142584)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)) == null ? centipair.core.style.bootstrap_input_container_class : (new cljs.core.Keyword(null, "class-name", "class-name", 
  945142584)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str("container-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 
  3, [new cljs.core.Keyword(null, "for", "for", -1323786319), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "class", "class", -2030961996), "col-sm-2 control-label", new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str("label-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null), 
  (new cljs.core.Keyword(null, "label", "label", 1718410804)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), (new cljs.core.Keyword(null, "size", "size", 1098693007)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)) == 
  null ? "col-sm-6" : [cljs.core.str("col-sm-"), cljs.core.str((new cljs.core.Keyword(null, "size", "size", 1098693007)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join(""), new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str("divider-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "class", "class", -2030961996), "form-control", new cljs.core.Keyword(null, "type", "type", 1174270348), (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "id", "id", -1388402092), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  field)), new cljs.core.Keyword(null, "key", "key", -1516042587), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083), (new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)) == null ? "" : (new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  field)), new cljs.core.Keyword(null, "value", "value", 305978217), (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "on-change", "on-change", -732046149), function(p1__11838_SHARP_) {
    return centipair.core.components.input.update_value.call(null, field, p1__11838_SHARP_.target.value);
  }], null)], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "col-sm-4 message-label", new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str("message-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  field)))].join("")], null), (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)) == null ? "" : (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null)], null);
};
centipair.core.components.input.textarea = function centipair$core$components$input$textarea(field) {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), (new cljs.core.Keyword(null, "class-name", "class-name", 945142584)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)) == null ? centipair.core.style.bootstrap_input_container_class : (new cljs.core.Keyword(null, "class-name", "class-name", 
  945142584)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str("container-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 
  3, [new cljs.core.Keyword(null, "for", "for", -1323786319), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "class", "class", -2030961996), "col-sm-2 control-label", new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str("label-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null), 
  (new cljs.core.Keyword(null, "label", "label", 1718410804)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "col-sm-6", new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str("divider-"), cljs.core.str((new cljs.core.Keyword(null, 
  "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "textarea", "textarea", -650375824), new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "class", "class", -2030961996), "form-control", new cljs.core.Keyword(null, "type", "type", 1174270348), (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  field)), new cljs.core.Keyword(null, "id", "id", -1388402092), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083), (new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)) == null ? "" : (new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  field)), new cljs.core.Keyword(null, "rows", "rows", 850049680), "5", new cljs.core.Keyword(null, "value", "value", 305978217), (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "on-change", "on-change", -732046149), function(p1__11839_SHARP_) {
    return centipair.core.components.input.update_value.call(null, field, p1__11839_SHARP_.target.value);
  }, new cljs.core.Keyword(null, "key", "key", -1516042587), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null)], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "col-sm-4 message-label", new cljs.core.Keyword(null, 
  "key", "key", -1516042587), [cljs.core.str("message-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null), (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)) == null ? "" : (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null)], null);
};
centipair.core.components.input.hidden = function centipair$core$components$input$hidden(field) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), "hidden", new cljs.core.Keyword(null, "value", "value", 305978217), (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "id", "id", -1388402092), (new cljs.core.Keyword(null, 
  "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "key", "key", -1516042587), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null)], null);
};
centipair.core.components.input.make_valid_image_spec = function centipair$core$components$input$make_valid_image_spec(field) {
  cljs.core.swap_BANG_.call(null, field, cljs.core.assoc, new cljs.core.Keyword(null, "message", "message", -406056002), "", new cljs.core.Keyword(null, "class-name", "class-name", 945142584), centipair.core.style.bootstrap_input_container_class);
  var width_dim_11840 = (new cljs.core.Keyword(null, "width", "width", -384071477)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field));
  var height_dim_11841 = (new cljs.core.Keyword(null, "height", "height", 1025178622)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field));
  cljs.core.swap_BANG_.call(null, field, cljs.core.assoc, new cljs.core.Keyword(null, "width", "width", -384071477), cljs.core.assoc.call(null, width_dim_11840, new cljs.core.Keyword(null, "message", "message", -406056002), ""));
  cljs.core.swap_BANG_.call(null, field, cljs.core.assoc, new cljs.core.Keyword(null, "height", "height", 1025178622), cljs.core.assoc.call(null, height_dim_11841, new cljs.core.Keyword(null, "message", "message", -406056002), ""));
  return true;
};
centipair.core.components.input.make_valid = function centipair$core$components$input$make_valid(field) {
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), "image-spec")) {
    centipair.core.components.input.make_valid_image_spec.call(null, field);
  } else {
    cljs.core.swap_BANG_.call(null, field, cljs.core.assoc, new cljs.core.Keyword(null, "message", "message", -406056002), "", new cljs.core.Keyword(null, "class-name", "class-name", 945142584), centipair.core.style.bootstrap_input_container_class);
  }
  return true;
};
centipair.core.components.input.valid_field_QMARK_ = function centipair$core$components$input$valid_field_QMARK_(field) {
  if ((new cljs.core.Keyword(null, "validator", "validator", -1966190681)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)) == null) {
    centipair.core.components.input.make_valid.call(null, field);
    return true;
  } else {
    var result = (new cljs.core.Keyword(null, "validator", "validator", -1966190681)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)).call(null, cljs.core.deref.call(null, field));
    if (cljs.core.truth_((new cljs.core.Keyword(null, "valid", "valid", 155614240)).cljs$core$IFn$_invoke$arity$1(result))) {
      return centipair.core.components.input.make_valid.call(null, field);
    } else {
      cljs.core.swap_BANG_.call(null, field, cljs.core.assoc, new cljs.core.Keyword(null, "message", "message", -406056002), (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(result), new cljs.core.Keyword(null, "class-name", "class-name", 945142584), centipair.core.style.bootstrap_input_container_class_error);
      return false;
    }
  }
};
centipair.core.components.input.image_spec_error = function centipair$core$components$input$image_spec_error(errors, field, key, key_id) {
  if (!(key_id.call(null, errors) == null)) {
    var dim = key.call(null, cljs.core.deref.call(null, field));
    cljs.core.swap_BANG_.call(null, field, cljs.core.assoc, key, cljs.core.assoc.call(null, dim, new cljs.core.Keyword(null, "message", "message", -406056002), cljs.core.first.call(null, key_id.call(null, errors))));
    return cljs.core.swap_BANG_.call(null, field, cljs.core.assoc, new cljs.core.Keyword(null, "class-name", "class-name", 945142584), centipair.core.style.bootstrap_input_container_class_error);
  } else {
    return cljs.core.swap_BANG_.call(null, field, cljs.core.assoc, new cljs.core.Keyword(null, "class-name", "class-name", 945142584), centipair.core.style.bootstrap_input_container_class);
  }
};
centipair.core.components.input.append_image_spec_error = function centipair$core$components$input$append_image_spec_error(errors, field) {
  var width_key = cljs.core.keyword.call(null, (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "width", "width", -384071477)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))));
  var height_key = cljs.core.keyword.call(null, (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "height", "height", 1025178622)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))));
  var crop_key = cljs.core.keyword.call(null, (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "crop", "crop", 793731643)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))));
  centipair.core.components.input.image_spec_error.call(null, errors, field, new cljs.core.Keyword(null, "width", "width", -384071477), width_key);
  return centipair.core.components.input.image_spec_error.call(null, errors, field, new cljs.core.Keyword(null, "height", "height", 1025178622), height_key);
};
centipair.core.components.input.append_error = function centipair$core$components$input$append_error(errors, field) {
  if (cljs.core._EQ_.call(null, "image-spec", (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))) {
    return centipair.core.components.input.append_image_spec_error.call(null, errors, field);
  } else {
    var key = cljs.core.keyword.call(null, (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)));
    if (!(key.call(null, errors) == null)) {
      return cljs.core.swap_BANG_.call(null, field, cljs.core.assoc, new cljs.core.Keyword(null, "message", "message", -406056002), cljs.core.first.call(null, key.call(null, errors)), new cljs.core.Keyword(null, "class-name", "class-name", 945142584), centipair.core.style.bootstrap_input_container_class_error);
    } else {
      return null;
    }
  }
};
centipair.core.components.input.valid_form_QMARK_ = function centipair$core$components$input$valid_form_QMARK_(form_fields) {
  return cljs.core.apply.call(null, cljs.core._EQ_, true, cljs.core.doall.call(null, cljs.core.map.call(null, centipair.core.components.input.valid_field_QMARK_, form_fields)));
};
centipair.core.components.input.perform_action = function centipair$core$components$input$perform_action(form, action, form_fields) {
  if (cljs.core.truth_(centipair.core.components.input.valid_form_QMARK_.call(null, form_fields))) {
    cljs.core.swap_BANG_.call(null, form, cljs.core.assoc, new cljs.core.Keyword(null, "message", "message", -406056002), "");
    return action.call(null);
  } else {
    return cljs.core.swap_BANG_.call(null, form, cljs.core.assoc, new cljs.core.Keyword(null, "message", "message", -406056002), "Form error!");
  }
};
centipair.core.components.input.button = function centipair$core$components$input$button(form, form_fields, action_button) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), centipair.core.style.bootstrap_input_container_class], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "class", "class", -2030961996), "col-sm-offset-2 col-sm-6"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "class", "class", -2030961996), centipair.core.style.bootstrap_primary_button_class, new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function() {
    return centipair.core.components.input.perform_action.call(null, form, (new cljs.core.Keyword(null, "on-click", "on-click", 1632826543)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, action_button)), form_fields);
  }, new cljs.core.Keyword(null, "disabled", "disabled", -1529784218), "", new cljs.core.Keyword(null, "key", "key", -1516042587), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, action_button))], null), (new cljs.core.Keyword(null, "label", "label", 1718410804)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, action_button))], null)], null)], null);
};
centipair.core.components.input.plain_button = function centipair$core$components$input$plain_button(form, form_fields, action_button) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), centipair.core.style.bootstrap_input_container_class], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, 
  "class", "class", -2030961996), centipair.core.style.bootstrap_primary_button_class, new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function() {
    return centipair.core.components.input.perform_action.call(null, form, (new cljs.core.Keyword(null, "on-click", "on-click", 1632826543)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, action_button)), form_fields);
  }, new cljs.core.Keyword(null, "disabled", "disabled", -1529784218), "", new cljs.core.Keyword(null, "key", "key", -1516042587), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, action_button))], null), (new cljs.core.Keyword(null, "label", "label", 1718410804)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, action_button))], null)], null);
};
centipair.core.components.input.checkbox = function centipair$core$components$input$checkbox(field) {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), (new cljs.core.Keyword(null, "class-name", "class-name", 945142584)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)) == null ? centipair.core.style.bootstrap_input_container_class : (new cljs.core.Keyword(null, "class-name", "class-name", 
  945142584)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str("container-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 
  3, [new cljs.core.Keyword(null, "for", "for", -1323786319), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "class", "class", -2030961996), "col-sm-2 control-label", new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str("label-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null), 
  (new cljs.core.Keyword(null, "label", "label", 1718410804)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "col-sm-6", new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str("divider-"), cljs.core.str((new cljs.core.Keyword(null, 
  "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "checkbox", new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str("checkbox-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", 
  -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str("container-label-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  field)))].join("")], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "type", "type", 1174270348), (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "id", "id", -1388402092), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  field)), new cljs.core.Keyword(null, "value", "value", 305978217), (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "on-change", "on-change", -732046149), function(p1__11842_SHARP_) {
    return centipair.core.components.input.update_check.call(null, field, p1__11842_SHARP_.target.checked);
  }, new cljs.core.Keyword(null, "checked", "checked", -50955819), (new cljs.core.Keyword(null, "checked", "checked", -50955819)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str("key-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null)], null), [cljs.core.str(" "), cljs.core.str((new cljs.core.Keyword(null, 
  "description", "description", -1428560544)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null)], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "col-sm-4 message-label"], null), (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  field)) == null ? "" : (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null)], null);
};
centipair.core.components.input.plain_checkbox = function centipair$core$components$input$plain_checkbox(field) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "checkbox"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "type", "type", 1174270348), "checkbox", new cljs.core.Keyword(null, "value", "value", 305978217), (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "on-change", "on-change", -732046149), function(p1__11843_SHARP_) {
    return centipair.core.components.input.update_check.call(null, field, p1__11843_SHARP_.target.checked);
  }, new cljs.core.Keyword(null, "checked", "checked", -50955819), (new cljs.core.Keyword(null, "checked", "checked", -50955819)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str("key-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null)], null), [cljs.core.str(" "), cljs.core.str((new cljs.core.Keyword(null, 
  "label", "label", 1718410804)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null)], null);
};
centipair.core.components.input.select_option = function centipair$core$components$input$select_option(select_value, option) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "option", "option", 65132272), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "key", "key", -1516042587), (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(option), new cljs.core.Keyword(null, "value", "value", 305978217), (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(option)], 
  null), (new cljs.core.Keyword(null, "label", "label", 1718410804)).cljs$core$IFn$_invoke$arity$1(option)], null);
};
centipair.core.components.input.select = function centipair$core$components$input$select(field) {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), (new cljs.core.Keyword(null, "class-name", "class-name", 945142584)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)) == null ? centipair.core.style.bootstrap_input_container_class : (new cljs.core.Keyword(null, "class-name", "class-name", 
  945142584)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "for", "for", -1323786319), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "class", "class", -2030961996), 
  "col-sm-2 control-label"], null), (new cljs.core.Keyword(null, "label", "label", 1718410804)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "col-sm-6"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "select", "select", 1147833503), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "key", "key", -1516042587), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "class", "class", -2030961996), "form-control", new cljs.core.Keyword(null, "type", "type", 1174270348), (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  field)), new cljs.core.Keyword(null, "id", "id", -1388402092), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "on-change", "on-change", -732046149), function(p1__11844_SHARP_) {
    return centipair.core.components.input.update_value.call(null, field, p1__11844_SHARP_.target.value);
  }, new cljs.core.Keyword(null, "value", "value", 305978217), (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null), cljs.core.doall.call(null, cljs.core.map.call(null, cljs.core.partial.call(null, centipair.core.components.input.select_option, (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))), (new cljs.core.Keyword(null, "options", "options", 
  99638489)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))))], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "col-sm-4 message-label"], null), (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)) == 
  null ? "" : (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null)], null);
};
centipair.core.components.input.radio_option = function centipair$core$components$input$radio_option(field, option) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "radio", new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str("radio-container-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(option))].join("")], null), new cljs.core.PersistentVector(null, 
  4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str("radio-label-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(option))].join("")], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), 
  new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "type", "type", 1174270348), "radio", new cljs.core.Keyword(null, "name", "name", 1843675177), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(option), new cljs.core.Keyword(null, "id", "id", -1388402092), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(option), new cljs.core.Keyword(null, "value", "value", 305978217), (new cljs.core.Keyword(null, "value", 
  "value", 305978217)).cljs$core$IFn$_invoke$arity$1(option), new cljs.core.Keyword(null, "on-change", "on-change", -732046149), function(p1__11845_SHARP_) {
    return centipair.core.components.input.update_radio.call(null, field, p1__11845_SHARP_.target.value);
  }, new cljs.core.Keyword(null, "checked", "checked", -50955819), cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(option), (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))) ? "checked" : "", new cljs.core.Keyword(null, "key", "key", -1516042587), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(option)], null)], null), [cljs.core.str(" "), 
  cljs.core.str((new cljs.core.Keyword(null, "label", "label", 1718410804)).cljs$core$IFn$_invoke$arity$1(option))].join("")], null)], null);
};
centipair.core.components.input.radio = function centipair$core$components$input$radio(field) {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), (new cljs.core.Keyword(null, "class-name", "class-name", 945142584)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)) == null ? centipair.core.style.bootstrap_input_container_class : (new cljs.core.Keyword(null, "class-name", "class-name", 
  945142584)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str("container-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 
  3, [new cljs.core.Keyword(null, "for", "for", -1323786319), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "class", "class", -2030961996), "col-sm-2 control-label", new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str("label-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null), 
  (new cljs.core.Keyword(null, "label", "label", 1718410804)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "col-sm-6", new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str("divider-"), cljs.core.str((new cljs.core.Keyword(null, 
  "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null), cljs.core.doall.call(null, cljs.core.map.call(null, cljs.core.partial.call(null, centipair.core.components.input.radio_option, field), (new cljs.core.Keyword(null, "options", "options", 99638489)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))))], null)], null);
};
centipair.core.components.input.subheading = function centipair$core$components$input$subheading(field) {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "class", "class", -2030961996), centipair.core.style.bootstrap_input_container_class, new cljs.core.Keyword(null, "id", "id", -1388402092), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, 
  "key", "key", -1516042587), [cljs.core.str("subheading-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h4", "h4", 2004862993), (new cljs.core.Keyword(null, "label", "label", 1718410804)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null), !((new cljs.core.Keyword(null, 
  "description", "description", -1428560544)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)) == null) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), (new cljs.core.Keyword(null, "description", "description", -1428560544)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null) : null], null);
};
centipair.core.components.input.image_spec = function centipair$core$components$input$image_spec(field) {
  return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), (new cljs.core.Keyword(null, "class-name", "class-name", 945142584)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)) == null ? centipair.core.style.bootstrap_input_container_class : (new cljs.core.Keyword(null, "class-name", "class-name", 
  945142584)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "for", "for", -1323786319), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "class", "class", -2030961996), 
  "col-sm-2 control-label"], null), (new cljs.core.Keyword(null, "label", "label", 1718410804)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "col-sm-1"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "control-label"], null), "Width"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "class", "class", -2030961996), "form-control", new cljs.core.Keyword(null, "type", 
  "type", 1174270348), (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1("text"), new cljs.core.Keyword(null, "id", "id", -1388402092), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "width", "width", -384071477)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))), new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083), (new cljs.core.Keyword(null, "placeholder", 
  "placeholder", -104873083)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "width", "width", -384071477)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))) == null ? "" : (new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "width", "width", -384071477)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))), new cljs.core.Keyword(null, "value", "value", 305978217), (new cljs.core.Keyword(null, 
  "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "width", "width", -384071477)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))), new cljs.core.Keyword(null, "on-change", "on-change", -732046149), function(p1__11846_SHARP_) {
    return centipair.core.components.input.update_image_spec.call(null, new cljs.core.Keyword(null, "width", "width", -384071477), field, p1__11846_SHARP_.target.value);
  }], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "control-label"], null), (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "width", "width", -384071477)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  field)))], null)], null), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "col-sm-1"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "class", "class", -2030961996), "control-label"], null), "Height"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "class", "class", -2030961996), "form-control", new cljs.core.Keyword(null, "type", "type", 1174270348), (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1("text"), new cljs.core.Keyword(null, 
  "id", "id", -1388402092), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "height", "height", 1025178622)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))), new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083), (new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "height", "height", 1025178622)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  field))) == null ? "" : (new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "height", "height", 1025178622)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))), new cljs.core.Keyword(null, "value", "value", 305978217), (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "height", "height", 1025178622)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  field))), new cljs.core.Keyword(null, "on-change", "on-change", -732046149), function(p1__11847_SHARP_) {
    return centipair.core.components.input.update_image_spec.call(null, new cljs.core.Keyword(null, "height", "height", 1025178622), field, p1__11847_SHARP_.target.value);
  }], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "control-label"], null), (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "height", "height", 1025178622)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  field)))], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "col-sm-2"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", 
  "class", -2030961996), "checkbox"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "type", "type", 1174270348), "checkbox", new cljs.core.Keyword(null, "id", "id", -1388402092), (new cljs.core.Keyword(null, 
  "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "crop", "crop", 793731643)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))), new cljs.core.Keyword(null, "value", "value", 305978217), (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "crop", "crop", 793731643)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))), new cljs.core.Keyword(null, "on-change", "on-change", 
  -732046149), function(p1__11848_SHARP_) {
    return centipair.core.components.input.update_image_spec_check.call(null, field, p1__11848_SHARP_.target.checked);
  }, new cljs.core.Keyword(null, "checked", "checked", -50955819), (new cljs.core.Keyword(null, "checked", "checked", -50955819)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "crop", "crop", 793731643)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))], null)], null), [cljs.core.str(" "), cljs.core.str((new cljs.core.Keyword(null, "description", "description", -1428560544)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "crop", "crop", 793731643)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  field))))].join("")], null)], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "col-sm-4 message-label"], null), (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)) == null ? "" : (new cljs.core.Keyword(null, "message", 
  "message", -406056002)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null)], null);
};
centipair.core.components.input.input_field = function centipair$core$components$input$input_field(field) {
  var G__11850 = (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field));
  switch(G__11850) {
    case "text":
      return centipair.core.components.input.text.call(null, field);
      break;
    case "email":
      return centipair.core.components.input.text.call(null, field);
      break;
    case "textarea":
      return centipair.core.components.input.textarea.call(null, field);
      break;
    case "password":
      return centipair.core.components.input.text.call(null, field);
      break;
    case "checkbox":
      return centipair.core.components.input.checkbox.call(null, field);
      break;
    case "select":
      return centipair.core.components.input.select.call(null, field);
      break;
    case "radio":
      return centipair.core.components.input.radio.call(null, field);
      break;
    case "hidden":
      return centipair.core.components.input.hidden.call(null, field);
      break;
    case "subheading":
      return centipair.core.components.input.subheading.call(null, field);
      break;
    case "image-spec":
      return centipair.core.components.input.image_spec.call(null, field);
      break;
    default:
      throw new Error([cljs.core.str("No matching clause: "), cljs.core.str((new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join(""));;
  }
};
centipair.core.components.input.form_aligned = function centipair$core$components$input$form_aligned(form, form_fields, action_button) {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "form", "form", -1624062471), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "form-horizontal"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "legend", "legend", -1027192245), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "h3", "h3", 2067611163), (new cljs.core.Keyword(null, "title", "title", 636505583)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, form))], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "form-error"], null), (new cljs.core.Keyword(null, "message", "message", 
  -406056002)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, form))], null)], null), cljs.core.doall.call(null, cljs.core.map.call(null, centipair.core.components.input.input_field, form_fields)), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "pure-controls"], null), centipair.core.components.input.button.call(null, 
  form, form_fields, action_button)], null)], null);
};
centipair.core.components.input.plain_text = function centipair$core$components$input$plain_text(field) {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), (new cljs.core.Keyword(null, "class-name", "class-name", 945142584)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)) == null ? centipair.core.style.bootstrap_input_container_class : (new cljs.core.Keyword(null, "class-name", "class-name", 
  945142584)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str("container-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 
  3, [new cljs.core.Keyword(null, "for", "for", -1323786319), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "class", "class", -2030961996), "control-label", new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str("label-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null), (new cljs.core.Keyword(null, 
  "label", "label", 1718410804)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "class", "class", -2030961996), "form-control", new cljs.core.Keyword(null, "type", "type", 1174270348), (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  field)), new cljs.core.Keyword(null, "id", "id", -1388402092), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "key", "key", -1516042587), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083), (new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  field)) == null ? "" : (new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "value", "value", 305978217), (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "on-change", "on-change", -732046149), function(p1__11852_SHARP_) {
    return centipair.core.components.input.update_value.call(null, field, p1__11852_SHARP_.target.value);
  }], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "message-label", new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str("message-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], 
  null), (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)) == null ? "" : (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null)], null);
};
centipair.core.components.input.plain_textarea = function centipair$core$components$input$plain_textarea(field) {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), (new cljs.core.Keyword(null, "class-name", "class-name", 945142584)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)) == null ? centipair.core.style.bootstrap_input_container_class : (new cljs.core.Keyword(null, "class-name", "class-name", 
  945142584)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str("container-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 
  3, [new cljs.core.Keyword(null, "for", "for", -1323786319), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "class", "class", -2030961996), "control-label", new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str("label-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null), (new cljs.core.Keyword(null, 
  "label", "label", 1718410804)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "textarea", "textarea", -650375824), new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "class", "class", -2030961996), "form-control", new cljs.core.Keyword(null, "type", "type", 1174270348), (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  field)), new cljs.core.Keyword(null, "id", "id", -1388402092), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083), (new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)) == null ? "" : (new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  field)), new cljs.core.Keyword(null, "rows", "rows", 850049680), "5", new cljs.core.Keyword(null, "value", "value", 305978217), (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)), new cljs.core.Keyword(null, "on-change", "on-change", -732046149), function(p1__11853_SHARP_) {
    return centipair.core.components.input.update_value.call(null, field, p1__11853_SHARP_.target.value);
  }, new cljs.core.Keyword(null, "key", "key", -1516042587), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "message-label", new cljs.core.Keyword(null, "key", "key", 
  -1516042587), [cljs.core.str("message-"), cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join("")], null), (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)) == null ? "" : (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field))], null)], null);
};
centipair.core.components.input.plain_input_field = function centipair$core$components$input$plain_input_field(field) {
  var G__11855 = (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field));
  switch(G__11855) {
    case "text":
      return centipair.core.components.input.plain_text.call(null, field);
      break;
    case "email":
      return centipair.core.components.input.plain_text.call(null, field);
      break;
    case "textarea":
      return centipair.core.components.input.plain_textarea.call(null, field);
      break;
    case "password":
      return centipair.core.components.input.plain_text.call(null, field);
      break;
    case "subheading":
      return centipair.core.components.input.subheading.call(null, field);
      break;
    case "markdown":
      return centipair.core.components.editor.markdown_editor.call(null, field);
      break;
    case "checkbox":
      return centipair.core.components.input.plain_checkbox.call(null, field);
      break;
    default:
      throw new Error([cljs.core.str("No matching clause: "), cljs.core.str((new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join(""));;
  }
};
centipair.core.components.input.form_plain = function centipair$core$components$input$form_plain(form, form_fields, action_button) {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "form", "form", -1624062471), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "legend", "legend", -1027192245), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h3", "h3", 2067611163), (new cljs.core.Keyword(null, "title", "title", 636505583)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  form))], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "form-error"], null), (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, form))], null)], null), cljs.core.doall.call(null, cljs.core.map.call(null, centipair.core.components.input.plain_input_field, 
  form_fields)), centipair.core.components.input.plain_button.call(null, form, form_fields, action_button)], null);
};
centipair.core.components.input.reset_text_field = function centipair$core$components$input$reset_text_field(field) {
  if ((new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)) == null) {
    return centipair.core.components.input.update_value.call(null, field, "");
  } else {
    return centipair.core.components.input.update_value.call(null, field, (new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)));
  }
};
centipair.core.components.input.reset_input = function centipair$core$components$input$reset_input(field) {
  var G__11858 = (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field));
  switch(G__11858) {
    case "text":
      return centipair.core.components.input.reset_text_field.call(null, field);
      break;
    case "email":
      return centipair.core.components.input.update_value.call(null, field, "");
      break;
    case "textarea":
      return centipair.core.components.input.update_value.call(null, field, "");
      break;
    case "password":
      return centipair.core.components.input.update_value.call(null, field, "");
      break;
    case "checkbox":
      return centipair.core.components.input.update_check.call(null, field, false);
      break;
    case "select":
      return centipair.core.components.input.update_value.call(null, field, "");
      break;
    case "radio":
      return centipair.core.components.input.update_radio.call(null, field, "");
      break;
    case "hidden":
      return centipair.core.components.input.update_value.call(null, field, null);
      break;
    case "image-spec":
      return centipair.core.components.input.reset_image_spec.call(null, field);
      break;
    case "markdown":
      return centipair.core.components.input.update_value.call(null, field, "");
      break;
    default:
      throw new Error([cljs.core.str("No matching clause: "), cljs.core.str((new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)))].join(""));;
  }
};
centipair.core.components.input.reset_inputs = function centipair$core$components$input$reset_inputs(fields) {
  var seq__11864 = cljs.core.seq.call(null, fields);
  var chunk__11865 = null;
  var count__11866 = 0;
  var i__11867 = 0;
  while (true) {
    if (i__11867 < count__11866) {
      var field = cljs.core._nth.call(null, chunk__11865, i__11867);
      centipair.core.components.input.reset_input.call(null, field);
      var G__11868 = seq__11864;
      var G__11869 = chunk__11865;
      var G__11870 = count__11866;
      var G__11871 = i__11867 + 1;
      seq__11864 = G__11868;
      chunk__11865 = G__11869;
      count__11866 = G__11870;
      i__11867 = G__11871;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__11864);
      if (temp__4126__auto__) {
        var seq__11864__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11864__$1)) {
          var c__4894__auto__ = cljs.core.chunk_first.call(null, seq__11864__$1);
          var G__11872 = cljs.core.chunk_rest.call(null, seq__11864__$1);
          var G__11873 = c__4894__auto__;
          var G__11874 = cljs.core.count.call(null, c__4894__auto__);
          var G__11875 = 0;
          seq__11864 = G__11872;
          chunk__11865 = G__11873;
          count__11866 = G__11874;
          i__11867 = G__11875;
          continue;
        } else {
          var field = cljs.core.first.call(null, seq__11864__$1);
          centipair.core.components.input.reset_input.call(null, field);
          var G__11876 = cljs.core.next.call(null, seq__11864__$1);
          var G__11877 = null;
          var G__11878 = 0;
          var G__11879 = 0;
          seq__11864 = G__11876;
          chunk__11865 = G__11877;
          count__11866 = G__11878;
          i__11867 = G__11879;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
centipair.core.components.input.clear_error = function centipair$core$components$input$clear_error(field) {
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(field), "form")) {
    return cljs.core.swap_BANG_.call(null, field, cljs.core.assoc, new cljs.core.Keyword(null, "message", "message", -406056002), "");
  } else {
    return cljs.core.swap_BANG_.call(null, field, cljs.core.assoc, new cljs.core.Keyword(null, "message", "message", -406056002), "", new cljs.core.Keyword(null, "class-name", "class-name", 945142584), centipair.core.style.bootstrap_input_container_class);
  }
};
centipair.core.components.input.clear_form_errors = function centipair$core$components$input$clear_form_errors(fields) {
  var seq__11884 = cljs.core.seq.call(null, fields);
  var chunk__11885 = null;
  var count__11886 = 0;
  var i__11887 = 0;
  while (true) {
    if (i__11887 < count__11886) {
      var field = cljs.core._nth.call(null, chunk__11885, i__11887);
      centipair.core.components.input.clear_error.call(null, field);
      var G__11888 = seq__11884;
      var G__11889 = chunk__11885;
      var G__11890 = count__11886;
      var G__11891 = i__11887 + 1;
      seq__11884 = G__11888;
      chunk__11885 = G__11889;
      count__11886 = G__11890;
      i__11887 = G__11891;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__11884);
      if (temp__4126__auto__) {
        var seq__11884__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11884__$1)) {
          var c__4894__auto__ = cljs.core.chunk_first.call(null, seq__11884__$1);
          var G__11892 = cljs.core.chunk_rest.call(null, seq__11884__$1);
          var G__11893 = c__4894__auto__;
          var G__11894 = cljs.core.count.call(null, c__4894__auto__);
          var G__11895 = 0;
          seq__11884 = G__11892;
          chunk__11885 = G__11893;
          count__11886 = G__11894;
          i__11887 = G__11895;
          continue;
        } else {
          var field = cljs.core.first.call(null, seq__11884__$1);
          centipair.core.components.input.clear_error.call(null, field);
          var G__11896 = cljs.core.next.call(null, seq__11884__$1);
          var G__11897 = null;
          var G__11898 = 0;
          var G__11899 = 0;
          seq__11884 = G__11896;
          chunk__11885 = G__11897;
          count__11886 = G__11898;
          i__11887 = G__11899;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", 
SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", 
ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), 
ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", 
MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", 
COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", 
DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return-1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = (key);
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.removeAllNativeListeners = function() {
  goog.events.listenerCountEstimate_ = 0;
  return 0;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return[];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return!!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = 1;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, true, evt);
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, false, evt);
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return listener.handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventHandler");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.object");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.EventHandler = function(opt_scope) {
  goog.Disposable.call(this);
  this.handler_ = opt_scope;
  this.keys_ = {};
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture) {
  return this.listen_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenWithScope = function(src, type, fn, capture, scope) {
  return this.listen_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listen_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (!goog.isArray(type)) {
    if (type) {
      goog.events.EventHandler.typeArray_[0] = type.toString();
    }
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0;i < type.length;i++) {
    var listenerObj = goog.events.listen(src, type[i], opt_fn || this.handleEvent, opt_capture || false, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture) {
  return this.listenOnce_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenOnceWithScope = function(src, type, fn, capture, scope) {
  return this.listenOnce_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listenOnce_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.listenOnce_(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listenerObj = goog.events.listenOnce(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt) {
  return this.listenWithWrapper_(src, wrapper, listener, opt_capt);
};
goog.events.EventHandler.prototype.listenWithWrapperAndScope = function(src, wrapper, listener, capture, scope) {
  return this.listenWithWrapper_(src, wrapper, listener, capture, scope);
};
goog.events.EventHandler.prototype.listenWithWrapper_ = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.listen(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  var count = 0;
  for (var key in this.keys_) {
    if (Object.prototype.hasOwnProperty.call(this.keys_, key)) {
      count++;
    }
  }
  return count;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listener = goog.events.getListener(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (listener) {
      goog.events.unlistenByKey(listener);
      delete this.keys_[listener.key];
    }
  }
  return this;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.unlisten(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.object.forEach(this.keys_, goog.events.unlistenByKey);
  this.keys_ = {};
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);
  this.actualEventTarget_ = this;
  this.parentEventTarget_ = null;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();
  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
    }
  }
  return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  this.removeAllListeners();
  this.parentEventTarget_ = null;
};
goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};
goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = listenerArray.concat();
  var rv = true;
  for (var i = 0;i < listenerArray.length;++i) {
    var listener = listenerArray[i];
    if (listener && !listener.removed && listener.capture == capture) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;
      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }
  return rv && eventObject.returnValue_ != false;
};
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};
goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope);
};
goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
  var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(this.eventTargetListeners_, "Event target is not initialized. Did you call the superclass " + "(goog.events.EventTarget) constructor?");
};
goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
  var type = e.type || (e);
  if (goog.isString(e)) {
    e = new goog.events.Event(e, target);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event(type, target);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || target;
    }
  }
  var rv = true, currentTarget;
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }
  if (!e.propagationStopped_) {
    currentTarget = e.currentTarget = target;
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  if (opt_ancestorsTree) {
    for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  return rv;
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = .8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    if (this.timer_) {
      this.timerObject_.clearTimeout(this.timer_);
      this.timer_ = null;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.json");
goog.provide("goog.json.Replacer");
goog.provide("goog.json.Reviver");
goog.provide("goog.json.Serializer");
goog.define("goog.json.USE_NATIVE_JSON", false);
goog.json.isValid = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  var o = String(s);
  if (goog.json.isValid(o)) {
    try {
      return(eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  return(eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["stringify"]) : function(object, opt_replacer) {
  return(new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serializeInternal(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serializeInternal = function(object, sb) {
  switch(typeof object) {
    case "string":
      this.serializeString_((object), sb);
      break;
    case "number":
      this.serializeNumber_((object), sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "undefined":
      sb.push("null");
      break;
    case "object":
      if (object == null) {
        sb.push("null");
        break;
      }
      if (goog.isArray(object)) {
        this.serializeArray((object), sb);
        break;
      }
      this.serializeObject_((object), sb);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    if (c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c];
    }
    var cc = c.charCodeAt(0);
    var rv = "\\u";
    if (cc < 16) {
      rv += "000";
    } else {
      if (cc < 256) {
        rv += "00";
      } else {
        if (cc < 4096) {
          rv += "0";
        }
      }
    }
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16);
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serializeInternal(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serializeInternal(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XhrLike");
goog.net.XhrLike = function() {
};
goog.net.XhrLike.OrNative;
goog.net.XhrLike.prototype.onreadystatechange;
goog.net.XhrLike.prototype.responseText;
goog.net.XhrLike.prototype.responseXML;
goog.net.XhrLike.prototype.readyState;
goog.net.XhrLike.prototype.status;
goog.net.XhrLike.prototype.statusText;
goog.net.XhrLike.prototype.open = function(method, url, opt_async, opt_user, opt_password) {
};
goog.net.XhrLike.prototype.send = function(opt_data) {
};
goog.net.XhrLike.prototype.abort = function() {
};
goog.net.XhrLike.prototype.setRequestHeader = function(header, value) {
};
goog.net.XhrLike.prototype.getResponseHeader = function(header) {
};
goog.net.XhrLike.prototype.getAllResponseHeaders = function() {
};
goog.provide("goog.net.XmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.provide("goog.net.XmlHttpDefines");
goog.require("goog.asserts");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.define("goog.net.XmlHttp.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttpDefines = {};
goog.define("goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory(goog.asserts.assert(factory), goog.asserts.assert(optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR || goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined") {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return(this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  goog.uri.utils.phishingProtection_();
  return(uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.needsPhishingProtection_ = goog.userAgent.WEBKIT;
goog.uri.utils.phishingProtection_ = function() {
  if (goog.uri.utils.needsPhishingProtection_) {
    goog.uri.utils.needsPhishingProtection_ = false;
    var location = goog.global["location"];
    if (location) {
      var href = location["href"];
      if (href) {
        var domain = goog.uri.utils.getDomain(href);
        if (domain && domain != location["hostname"]) {
          goog.uri.utils.needsPhishingProtection_ = true;
          throw Error();
        }
      }
    }
  }
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, opt_value) {
  var paramArr = [uri, "\x26", key];
  if (goog.isDefAndNotNull(opt_value)) {
    paramArr.push("\x3d", goog.string.urlEncode(opt_value));
  }
  return goog.uri.utils.appendQueryData_(paramArr);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || followingChar == goog.uri.utils.CharCode_.EQUAL || followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return-1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.setPath = function(uri, path) {
  if (!goog.string.startsWith(path, "/")) {
    path = "/" + path;
  }
  var parts = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(parts[goog.uri.utils.ComponentIndex.SCHEME], parts[goog.uri.utils.ComponentIndex.USER_INFO], parts[goog.uri.utils.ComponentIndex.DOMAIN], parts[goog.uri.utils.ComponentIndex.PORT], path, parts[goog.uri.utils.ComponentIndex.QUERY_DATA], parts[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.forwardDeclare("goog.Uri");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.net.XhrIo.base(this, "constructor");
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
  this.active_ = false;
  this.xhr_ = null;
  this.xhrOptions_ = null;
  this.lastUri_ = "";
  this.lastMethod_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastError_ = "";
  this.errorDispatched_ = false;
  this.inSend_ = false;
  this.inOpen_ = false;
  this.inAbort_ = false;
  this.timeoutInterval_ = 0;
  this.timeoutId_ = null;
  this.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
  this.withCredentials_ = false;
  this.useXhr2Timeout_ = false;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.log.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.METHODS_WITH_FORM_DATA = ["POST", "PUT"];
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.XHR2_TIMEOUT_ = "timeout";
goog.net.XhrIo.XHR2_ON_TIMEOUT_ = "ontimeout";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    x.listen(goog.net.EventType.COMPLETE, opt_callback);
  }
  x.listenOnce(goog.net.EventType.READY, x.cleanupSend_);
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
  return x;
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.prototype.cleanupSend_ = function() {
  this.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, this);
};
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    goog.log.fine(this.logger_, this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, String(url), true);
    this.inOpen_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentTypeKey = goog.array.find(headers.getKeys(), goog.net.XhrIo.isContentTypeHeader_);
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (goog.array.contains(goog.net.XhrIo.METHODS_WITH_FORM_DATA, method) && !contentTypeKey && !contentIsFormData) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  headers.forEach(function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    this.cleanUpTimeoutTimer_();
    if (this.timeoutInterval_ > 0) {
      this.useXhr2Timeout_ = goog.net.XhrIo.shouldUseXhr2Timeout_(this.xhr_);
      goog.log.fine(this.logger_, this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete, xhr2 " + this.useXhr2Timeout_));
      if (this.useXhr2Timeout_) {
        this.xhr_[goog.net.XhrIo.XHR2_TIMEOUT_] = this.timeoutInterval_;
        this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = goog.bind(this.timeout_, this);
      } else {
        this.timeoutId_ = goog.Timer.callOnce(this.timeout_, this.timeoutInterval_, this);
      }
    }
    goog.log.fine(this.logger_, this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.shouldUseXhr2Timeout_ = function(xhr) {
  return goog.userAgent.IE && goog.userAgent.isVersionOrHigher(9) && goog.isNumber(xhr[goog.net.XhrIo.XHR2_TIMEOUT_]) && goog.isDef(xhr[goog.net.XhrIo.XHR2_ON_TIMEOUT_]);
};
goog.net.XhrIo.isContentTypeHeader_ = function(header) {
  return goog.string.caseInsensitiveEquals(goog.net.XhrIo.CONTENT_TYPE_HEADER, header);
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      goog.log.fine(this.logger_, this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    goog.log.fine(this.logger_, this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.base(this, "disposeInternal");
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (this.isDisposed()) {
    return;
  }
  if (!this.inOpen_ && !this.inSend_ && !this.inAbort_) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2) {
      goog.log.fine(this.logger_, this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.callOnce(this.onReadyStateChange_, 0, this);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        goog.log.fine(this.logger_, this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    this.cleanUpTimeoutTimer_();
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      goog.log.error(this.logger_, "Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.cleanUpTimeoutTimer_ = function() {
  if (this.xhr_ && this.useXhr2Timeout_) {
    this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = null;
  }
  if (goog.isNumber(this.timeoutId_)) {
    goog.Timer.clear(this.timeoutId_);
    this.timeoutId_ = null;
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return!!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    return-1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    goog.log.error(this.logger_, "Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getResponseHeaders = function() {
  var headersObject = {};
  var headersArray = this.getAllResponseHeaders().split("\r\n");
  for (var i = 0;i < headersArray.length;i++) {
    if (goog.string.isEmpty(headersArray[i])) {
      continue;
    }
    var keyValue = goog.string.splitLimit(headersArray[i], ": ", 2);
    if (headersObject[keyValue[0]]) {
      headersObject[keyValue[0]] += ", " + keyValue[1];
    } else {
      headersObject[keyValue[0]] = keyValue[1];
    }
  }
  return headersObject;
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("goog.structs.Queue");
goog.require("goog.array");
goog.structs.Queue = function() {
  this.front_ = [];
  this.back_ = [];
};
goog.structs.Queue.prototype.maybeFlip_ = function() {
  if (goog.array.isEmpty(this.front_)) {
    this.front_ = this.back_;
    this.front_.reverse();
    this.back_ = [];
  }
};
goog.structs.Queue.prototype.enqueue = function(element) {
  this.back_.push(element);
};
goog.structs.Queue.prototype.dequeue = function() {
  this.maybeFlip_();
  return this.front_.pop();
};
goog.structs.Queue.prototype.peek = function() {
  this.maybeFlip_();
  return goog.array.peek(this.front_);
};
goog.structs.Queue.prototype.getCount = function() {
  return this.front_.length + this.back_.length;
};
goog.structs.Queue.prototype.isEmpty = function() {
  return goog.array.isEmpty(this.front_) && goog.array.isEmpty(this.back_);
};
goog.structs.Queue.prototype.clear = function() {
  this.front_ = [];
  this.back_ = [];
};
goog.structs.Queue.prototype.contains = function(obj) {
  return goog.array.contains(this.front_, obj) || goog.array.contains(this.back_, obj);
};
goog.structs.Queue.prototype.remove = function(obj) {
  var index = goog.array.lastIndexOf(this.front_, obj);
  if (index < 0) {
    return goog.array.remove(this.back_, obj);
  }
  goog.array.removeAt(this.front_, index);
  return true;
};
goog.structs.Queue.prototype.getValues = function() {
  var res = [];
  for (var i = this.front_.length - 1;i >= 0;--i) {
    res.push(this.front_[i]);
  }
  var len = this.back_.length;
  for (var i = 0;i < len;++i) {
    res.push(this.back_[i]);
  }
  return res;
};
goog.provide("goog.structs.Pool");
goog.require("goog.Disposable");
goog.require("goog.structs.Queue");
goog.require("goog.structs.Set");
goog.structs.Pool = function(opt_minCount, opt_maxCount) {
  goog.Disposable.call(this);
  this.minCount_ = opt_minCount || 0;
  this.maxCount_ = opt_maxCount || 10;
  if (this.minCount_ > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.freeQueue_ = new goog.structs.Queue;
  this.inUseSet_ = new goog.structs.Set;
  this.delay = 0;
  this.lastAccess = null;
  this.adjustForMinMax();
  var magicProps = {canBeReused:0};
};
goog.inherits(goog.structs.Pool, goog.Disposable);
goog.structs.Pool.ERROR_MIN_MAX_ = "[goog.structs.Pool] Min can not be greater than max";
goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_ = "[goog.structs.Pool] Objects not released";
goog.structs.Pool.prototype.setMinimumCount = function(min) {
  if (min > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.minCount_ = min;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setMaximumCount = function(max) {
  if (max < this.minCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.maxCount_ = max;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setDelay = function(delay) {
  this.delay = delay;
};
goog.structs.Pool.prototype.getObject = function() {
  var time = goog.now();
  if (goog.isDefAndNotNull(this.lastAccess) && time - this.lastAccess < this.delay) {
    return undefined;
  }
  var obj = this.removeFreeObject_();
  if (obj) {
    this.lastAccess = time;
    this.inUseSet_.add(obj);
  }
  return obj;
};
goog.structs.Pool.prototype.releaseObject = function(obj) {
  if (this.inUseSet_.remove(obj)) {
    this.addFreeObject(obj);
    return true;
  }
  return false;
};
goog.structs.Pool.prototype.removeFreeObject_ = function() {
  var obj;
  while (this.getFreeCount() > 0) {
    obj = this.freeQueue_.dequeue();
    if (!this.objectCanBeReused(obj)) {
      this.adjustForMinMax();
    } else {
      break;
    }
  }
  if (!obj && this.getCount() < this.maxCount_) {
    obj = this.createObject();
  }
  return obj;
};
goog.structs.Pool.prototype.addFreeObject = function(obj) {
  this.inUseSet_.remove(obj);
  if (this.objectCanBeReused(obj) && this.getCount() < this.maxCount_) {
    this.freeQueue_.enqueue(obj);
  } else {
    this.disposeObject(obj);
  }
};
goog.structs.Pool.prototype.adjustForMinMax = function() {
  var freeQueue = this.freeQueue_;
  while (this.getCount() < this.minCount_) {
    freeQueue.enqueue(this.createObject());
  }
  while (this.getCount() > this.maxCount_ && this.getFreeCount() > 0) {
    this.disposeObject(freeQueue.dequeue());
  }
};
goog.structs.Pool.prototype.createObject = function() {
  return{};
};
goog.structs.Pool.prototype.disposeObject = function(obj) {
  if (typeof obj.dispose == "function") {
    obj.dispose();
  } else {
    for (var i in obj) {
      obj[i] = null;
    }
  }
};
goog.structs.Pool.prototype.objectCanBeReused = function(obj) {
  if (typeof obj.canBeReused == "function") {
    return obj.canBeReused();
  }
  return true;
};
goog.structs.Pool.prototype.contains = function(obj) {
  return this.freeQueue_.contains(obj) || this.inUseSet_.contains(obj);
};
goog.structs.Pool.prototype.getCount = function() {
  return this.freeQueue_.getCount() + this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getInUseCount = function() {
  return this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getFreeCount = function() {
  return this.freeQueue_.getCount();
};
goog.structs.Pool.prototype.isEmpty = function() {
  return this.freeQueue_.isEmpty() && this.inUseSet_.isEmpty();
};
goog.structs.Pool.prototype.disposeInternal = function() {
  goog.structs.Pool.superClass_.disposeInternal.call(this);
  if (this.getInUseCount() > 0) {
    throw Error(goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_);
  }
  delete this.inUseSet_;
  var freeQueue = this.freeQueue_;
  while (!freeQueue.isEmpty()) {
    this.disposeObject(freeQueue.dequeue());
  }
  delete this.freeQueue_;
};
goog.provide("goog.structs.Node");
goog.structs.Node = function(key, value) {
  this.key_ = key;
  this.value_ = value;
};
goog.structs.Node.prototype.getKey = function() {
  return this.key_;
};
goog.structs.Node.prototype.getValue = function() {
  return this.value_;
};
goog.structs.Node.prototype.clone = function() {
  return new goog.structs.Node(this.key_, this.value_);
};
goog.provide("goog.structs.Heap");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.structs.Node");
goog.structs.Heap = function(opt_heap) {
  this.nodes_ = [];
  if (opt_heap) {
    this.insertAll(opt_heap);
  }
};
goog.structs.Heap.prototype.insert = function(key, value) {
  var node = new goog.structs.Node(key, value);
  var nodes = this.nodes_;
  nodes.push(node);
  this.moveUp_(nodes.length - 1);
};
goog.structs.Heap.prototype.insertAll = function(heap) {
  var keys, values;
  if (heap instanceof goog.structs.Heap) {
    keys = heap.getKeys();
    values = heap.getValues();
    if (heap.getCount() <= 0) {
      var nodes = this.nodes_;
      for (var i = 0;i < keys.length;i++) {
        nodes.push(new goog.structs.Node(keys[i], values[i]));
      }
      return;
    }
  } else {
    keys = goog.object.getKeys(heap);
    values = goog.object.getValues(heap);
  }
  for (var i = 0;i < keys.length;i++) {
    this.insert(keys[i], values[i]);
  }
};
goog.structs.Heap.prototype.remove = function() {
  var nodes = this.nodes_;
  var count = nodes.length;
  var rootNode = nodes[0];
  if (count <= 0) {
    return undefined;
  } else {
    if (count == 1) {
      goog.array.clear(nodes);
    } else {
      nodes[0] = nodes.pop();
      this.moveDown_(0);
    }
  }
  return rootNode.getValue();
};
goog.structs.Heap.prototype.peek = function() {
  var nodes = this.nodes_;
  if (nodes.length == 0) {
    return undefined;
  }
  return nodes[0].getValue();
};
goog.structs.Heap.prototype.peekKey = function() {
  return this.nodes_[0] && this.nodes_[0].getKey();
};
goog.structs.Heap.prototype.moveDown_ = function(index) {
  var nodes = this.nodes_;
  var count = nodes.length;
  var node = nodes[index];
  while (index < count >> 1) {
    var leftChildIndex = this.getLeftChildIndex_(index);
    var rightChildIndex = this.getRightChildIndex_(index);
    var smallerChildIndex = rightChildIndex < count && nodes[rightChildIndex].getKey() < nodes[leftChildIndex].getKey() ? rightChildIndex : leftChildIndex;
    if (nodes[smallerChildIndex].getKey() > node.getKey()) {
      break;
    }
    nodes[index] = nodes[smallerChildIndex];
    index = smallerChildIndex;
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.moveUp_ = function(index) {
  var nodes = this.nodes_;
  var node = nodes[index];
  while (index > 0) {
    var parentIndex = this.getParentIndex_(index);
    if (nodes[parentIndex].getKey() > node.getKey()) {
      nodes[index] = nodes[parentIndex];
      index = parentIndex;
    } else {
      break;
    }
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.getLeftChildIndex_ = function(index) {
  return index * 2 + 1;
};
goog.structs.Heap.prototype.getRightChildIndex_ = function(index) {
  return index * 2 + 2;
};
goog.structs.Heap.prototype.getParentIndex_ = function(index) {
  return index - 1 >> 1;
};
goog.structs.Heap.prototype.getValues = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getValue());
  }
  return rv;
};
goog.structs.Heap.prototype.getKeys = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getKey());
  }
  return rv;
};
goog.structs.Heap.prototype.containsValue = function(val) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getValue() == val;
  });
};
goog.structs.Heap.prototype.containsKey = function(key) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getKey() == key;
  });
};
goog.structs.Heap.prototype.clone = function() {
  return new goog.structs.Heap(this);
};
goog.structs.Heap.prototype.getCount = function() {
  return this.nodes_.length;
};
goog.structs.Heap.prototype.isEmpty = function() {
  return goog.array.isEmpty(this.nodes_);
};
goog.structs.Heap.prototype.clear = function() {
  goog.array.clear(this.nodes_);
};
goog.provide("goog.structs.PriorityQueue");
goog.require("goog.structs.Heap");
goog.structs.PriorityQueue = function() {
  goog.structs.Heap.call(this);
};
goog.inherits(goog.structs.PriorityQueue, goog.structs.Heap);
goog.structs.PriorityQueue.prototype.enqueue = function(priority, value) {
  this.insert(priority, value);
};
goog.structs.PriorityQueue.prototype.dequeue = function() {
  return this.remove();
};
goog.provide("goog.structs.PriorityPool");
goog.require("goog.structs.Pool");
goog.require("goog.structs.PriorityQueue");
goog.structs.PriorityPool = function(opt_minCount, opt_maxCount) {
  this.delayTimeout_ = undefined;
  this.requestQueue_ = new goog.structs.PriorityQueue;
  goog.structs.Pool.call(this, opt_minCount, opt_maxCount);
};
goog.inherits(goog.structs.PriorityPool, goog.structs.Pool);
goog.structs.PriorityPool.DEFAULT_PRIORITY_ = 100;
goog.structs.PriorityPool.prototype.setDelay = function(delay) {
  goog.structs.PriorityPool.base(this, "setDelay", delay);
  if (!goog.isDefAndNotNull(this.lastAccess)) {
    return;
  }
  goog.global.clearTimeout(this.delayTimeout_);
  this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay + this.lastAccess - goog.now());
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.getObject = function(opt_callback, opt_priority) {
  if (!opt_callback) {
    var result = goog.structs.PriorityPool.base(this, "getObject");
    if (result && this.delay) {
      this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay);
    }
    return result;
  }
  var priority = goog.isDef(opt_priority) ? opt_priority : goog.structs.PriorityPool.DEFAULT_PRIORITY_;
  this.requestQueue_.enqueue(priority, opt_callback);
  this.handleQueueRequests_();
  return undefined;
};
goog.structs.PriorityPool.prototype.handleQueueRequests_ = function() {
  var requestQueue = this.requestQueue_;
  while (requestQueue.getCount() > 0) {
    var obj = this.getObject();
    if (!obj) {
      return;
    } else {
      var requestCallback = requestQueue.dequeue();
      requestCallback.apply(this, [obj]);
    }
  }
};
goog.structs.PriorityPool.prototype.addFreeObject = function(obj) {
  goog.structs.PriorityPool.superClass_.addFreeObject.call(this, obj);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.adjustForMinMax = function() {
  goog.structs.PriorityPool.superClass_.adjustForMinMax.call(this);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.disposeInternal = function() {
  goog.structs.PriorityPool.superClass_.disposeInternal.call(this);
  goog.global.clearTimeout(this.delayTimeout_);
  this.requestQueue_.clear();
  this.requestQueue_ = null;
};
goog.provide("goog.net.XhrIoPool");
goog.require("goog.net.XhrIo");
goog.require("goog.structs.PriorityPool");
goog.net.XhrIoPool = function(opt_headers, opt_minCount, opt_maxCount) {
  goog.structs.PriorityPool.call(this, opt_minCount, opt_maxCount);
  this.headers_ = opt_headers;
};
goog.inherits(goog.net.XhrIoPool, goog.structs.PriorityPool);
goog.net.XhrIoPool.prototype.createObject = function() {
  var xhrIo = new goog.net.XhrIo;
  var headers = this.headers_;
  if (headers) {
    headers.forEach(function(value, key) {
      xhrIo.headers.set(key, value);
    });
  }
  return xhrIo;
};
goog.net.XhrIoPool.prototype.objectCanBeReused = function(obj) {
  var xhr = (obj);
  return!xhr.isDisposed() && !xhr.isActive();
};
goog.provide("goog.net.XhrManager");
goog.provide("goog.net.XhrManager.Event");
goog.provide("goog.net.XhrManager.Request");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventTarget");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrIoPool");
goog.require("goog.structs.Map");
goog.net.XhrManager = function(opt_maxRetries, opt_headers, opt_minCount, opt_maxCount, opt_timeoutInterval) {
  goog.net.XhrManager.base(this, "constructor");
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.timeoutInterval_ = goog.isDef(opt_timeoutInterval) ? Math.max(0, opt_timeoutInterval) : 0;
  this.xhrPool_ = new goog.net.XhrIoPool(opt_headers, opt_minCount, opt_maxCount);
  this.requests_ = new goog.structs.Map;
  this.eventHandler_ = new goog.events.EventHandler(this);
};
goog.inherits(goog.net.XhrManager, goog.events.EventTarget);
goog.net.XhrManager.ERROR_ID_IN_USE_ = "[goog.net.XhrManager] ID in use";
goog.net.XhrManager.XHR_EVENT_TYPES_ = [goog.net.EventType.READY, goog.net.EventType.COMPLETE, goog.net.EventType.SUCCESS, goog.net.EventType.ERROR, goog.net.EventType.ABORT, goog.net.EventType.TIMEOUT];
goog.net.XhrManager.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrManager.prototype.getOutstandingCount = function() {
  return this.requests_.getCount();
};
goog.net.XhrManager.prototype.getOutstandingRequestIds = function() {
  return this.requests_.getKeys();
};
goog.net.XhrManager.prototype.send = function(id, url, opt_method, opt_content, opt_headers, opt_priority, opt_callback, opt_maxRetries, opt_responseType) {
  var requests = this.requests_;
  if (requests.get(id)) {
    throw Error(goog.net.XhrManager.ERROR_ID_IN_USE_);
  }
  var request = new goog.net.XhrManager.Request(url, goog.bind(this.handleEvent_, this, id), opt_method, opt_content, opt_headers, opt_callback, goog.isDef(opt_maxRetries) ? opt_maxRetries : this.maxRetries_, opt_responseType);
  this.requests_.set(id, request);
  var callback = goog.bind(this.handleAvailableXhr_, this, id);
  this.xhrPool_.getObject(callback, opt_priority);
  return request;
};
goog.net.XhrManager.prototype.abort = function(id, opt_force) {
  var request = this.requests_.get(id);
  if (request) {
    var xhrIo = request.xhrIo;
    request.setAborted(true);
    if (opt_force) {
      if (xhrIo) {
        this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
        goog.events.listenOnce(xhrIo, goog.net.EventType.READY, function() {
          this.xhrPool_.releaseObject(xhrIo);
        }, false, this);
      }
      this.requests_.remove(id);
    }
    if (xhrIo) {
      xhrIo.abort();
    }
  }
};
goog.net.XhrManager.prototype.handleAvailableXhr_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && !request.xhrIo) {
    this.addXhrListener_(xhrIo, request.getXhrEventCallback());
    xhrIo.setTimeoutInterval(this.timeoutInterval_);
    xhrIo.setResponseType(request.getResponseType());
    request.xhrIo = xhrIo;
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.READY, this, id, xhrIo));
    this.retry_(id, xhrIo);
    if (request.getAborted()) {
      xhrIo.abort();
    }
  } else {
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleEvent_ = function(id, e) {
  var xhrIo = (e.target);
  switch(e.type) {
    case goog.net.EventType.READY:
      this.retry_(id, xhrIo);
      break;
    case goog.net.EventType.COMPLETE:
      return this.handleComplete_(id, xhrIo, e);
    case goog.net.EventType.SUCCESS:
      this.handleSuccess_(id, xhrIo);
      break;
    case goog.net.EventType.TIMEOUT:
    ;
    case goog.net.EventType.ERROR:
      this.handleError_(id, xhrIo);
      break;
    case goog.net.EventType.ABORT:
      this.handleAbort_(id, xhrIo);
      break;
  }
  return null;
};
goog.net.XhrManager.prototype.retry_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && !request.getCompleted() && !request.hasReachedMaxRetries()) {
    request.increaseAttemptCount();
    xhrIo.send(request.getUrl(), request.getMethod(), request.getContent(), request.getHeaders());
  } else {
    if (request) {
      this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
      this.requests_.remove(id);
    }
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleComplete_ = function(id, xhrIo, e) {
  var request = this.requests_.get(id);
  if (xhrIo.getLastErrorCode() == goog.net.ErrorCode.ABORT || xhrIo.isSuccess() || request.hasReachedMaxRetries()) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.COMPLETE, this, id, xhrIo));
    if (request) {
      request.setCompleted(true);
      if (request.getCompleteCallback()) {
        return request.getCompleteCallback().call(xhrIo, e);
      }
    }
  }
  return null;
};
goog.net.XhrManager.prototype.handleAbort_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ABORT, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleSuccess_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.SUCCESS, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleError_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request.hasReachedMaxRetries()) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ERROR, this, id, xhrIo));
  }
};
goog.net.XhrManager.prototype.removeXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.unlisten(xhrIo, types, func);
};
goog.net.XhrManager.prototype.addXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.listen(xhrIo, types, func);
};
goog.net.XhrManager.prototype.disposeInternal = function() {
  goog.net.XhrManager.superClass_.disposeInternal.call(this);
  this.xhrPool_.dispose();
  this.xhrPool_ = null;
  this.eventHandler_.dispose();
  this.eventHandler_ = null;
  this.requests_.clear();
  this.requests_ = null;
};
goog.net.XhrManager.Event = function(type, target, id, xhrIo) {
  goog.events.Event.call(this, type, target);
  this.id = id;
  this.xhrIo = xhrIo;
};
goog.inherits(goog.net.XhrManager.Event, goog.events.Event);
goog.net.XhrManager.Request = function(url, xhrEventCallback, opt_method, opt_content, opt_headers, opt_callback, opt_maxRetries, opt_responseType) {
  this.url_ = url;
  this.method_ = opt_method || "GET";
  this.content_ = opt_content;
  this.headers_ = opt_headers || null;
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.attemptCount_ = 0;
  this.completed_ = false;
  this.aborted_ = false;
  this.xhrEventCallback_ = xhrEventCallback;
  this.completeCallback_ = opt_callback;
  this.responseType_ = opt_responseType || goog.net.XhrIo.ResponseType.DEFAULT;
  this.xhrIo = null;
};
goog.net.XhrManager.Request.prototype.getUrl = function() {
  return this.url_;
};
goog.net.XhrManager.Request.prototype.getMethod = function() {
  return this.method_;
};
goog.net.XhrManager.Request.prototype.getContent = function() {
  return this.content_;
};
goog.net.XhrManager.Request.prototype.getHeaders = function() {
  return this.headers_;
};
goog.net.XhrManager.Request.prototype.getMaxRetries = function() {
  return this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.getAttemptCount = function() {
  return this.attemptCount_;
};
goog.net.XhrManager.Request.prototype.increaseAttemptCount = function() {
  this.attemptCount_++;
};
goog.net.XhrManager.Request.prototype.hasReachedMaxRetries = function() {
  return this.attemptCount_ > this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.setCompleted = function(complete) {
  this.completed_ = complete;
};
goog.net.XhrManager.Request.prototype.getCompleted = function() {
  return this.completed_;
};
goog.net.XhrManager.Request.prototype.setAborted = function(aborted) {
  this.aborted_ = aborted;
};
goog.net.XhrManager.Request.prototype.getAborted = function() {
  return this.aborted_;
};
goog.net.XhrManager.Request.prototype.getXhrEventCallback = function() {
  return this.xhrEventCallback_;
};
goog.net.XhrManager.Request.prototype.getCompleteCallback = function() {
  return this.completeCallback_;
};
goog.net.XhrManager.Request.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.require("goog.uri.utils.StandardQueryParam");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    }
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, (values));
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return(this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : "";
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  if (goog.isString(unescapedPart)) {
    return encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("\x26");
      for (var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("\x3d");
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "");
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (goog.isString(opt_key)) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = (this.keyMap_.getValues());
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  this.keyMap_.forEach(function(value, key) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    this.keyMap_.forEach(function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("com.cognitect.transit.util");
goog.require("goog.object");
goog.scope(function() {
  var util = com.cognitect.transit.util, gobject = goog.object;
  if (typeof Object.keys != "undefined") {
    util.objectKeys = function(obj) {
      return Object.keys(obj);
    };
  } else {
    util.objectKeys = function(obj) {
      return gobject.getKeys(obj);
    };
  }
  if (typeof Array.isArray != "undefined") {
    util.isArray = function(obj) {
      return Array.isArray(obj);
    };
  } else {
    util.isArray = function(obj) {
      return goog.typeOf(obj) === "array";
    };
  }
  util.chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\x3d";
  util.randInt = function(ub) {
    return Math.round(Math.random() * ub);
  };
  util.randHex = function() {
    return util.randInt(15).toString(16);
  };
  util.randomUUID = function() {
    var rhex = (8 | 3 & util.randInt(14)).toString(16), ret = util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + "4" + util.randHex() + util.randHex() + util.randHex() + "-" + rhex + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + 
    util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex();
    return ret;
  };
  util.btoa = function(input) {
    if (typeof btoa != "undefined") {
      return btoa(input);
    } else {
      var str = String(input);
      for (var block, charCode, idx = 0, map = util.chars, output = "";str.charAt(idx | 0) || (map = "\x3d", idx % 1);output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
        charCode = str.charCodeAt(idx += 3 / 4);
        if (charCode > 255) {
          throw new Error("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
        }
        block = block << 8 | charCode;
      }
      return output;
    }
  };
  util.atob = function(input) {
    if (typeof atob != "undefined") {
      return atob(input);
    } else {
      var str = String(input).replace(/=+$/, "");
      if (str.length % 4 == 1) {
        throw new Error("'atob' failed: The string to be decoded is not correctly encoded.");
      }
      for (var bc = 0, bs, buffer, idx = 0, output = "";buffer = str.charAt(idx++);~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
        buffer = util.chars.indexOf(buffer);
      }
      return output;
    }
  };
  util.Uint8ToBase64 = function(u8Arr) {
    var CHUNK_SIZE = 32768, index = 0, length = u8Arr.length, result = "", slice = null;
    while (index < length) {
      slice = u8Arr.subarray(index, Math.min(index + CHUNK_SIZE, length));
      result += String.fromCharCode.apply(null, slice);
      index += CHUNK_SIZE;
    }
    return util.btoa(result);
  };
  util.Base64ToUint8 = function(base64) {
    var binary_string = util.atob(base64), len = binary_string.length, bytes = new Uint8Array(len);
    for (var i = 0;i < len;i++) {
      var ascii = binary_string.charCodeAt(i);
      bytes[i] = ascii;
    }
    return bytes;
  };
});
goog.provide("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.util");
goog.scope(function() {
  var eq = com.cognitect.transit.eq, util = com.cognitect.transit.util;
  eq.hashCodeProperty = "transit$hashCode$";
  eq.hashCodeCounter = 1;
  eq.equals = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      if (x === y) {
        return true;
      } else {
        if (typeof x === "object") {
          if (util.isArray(x)) {
            if (util.isArray(y)) {
              if (x.length === y.length) {
                for (var i = 0;i < x.length;i++) {
                  if (!eq.equals(x[i], y[i])) {
                    return false;
                  }
                }
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          } else {
            if (x.com$cognitect$transit$equals) {
              return x.com$cognitect$transit$equals(y);
            } else {
              if (y != null && typeof y === "object") {
                if (y.com$cognitect$transit$equals) {
                  return y.com$cognitect$transit$equals(x);
                } else {
                  var xklen = 0, yklen = util.objectKeys(y).length;
                  for (var p in x) {
                    if (!x.hasOwnProperty(p)) {
                      continue;
                    }
                    xklen++;
                    if (!y.hasOwnProperty(p)) {
                      return false;
                    } else {
                      if (!eq.equals(x[p], y[p])) {
                        return false;
                      }
                    }
                  }
                  return xklen === yklen;
                }
              } else {
                return false;
              }
            }
          }
        } else {
          return false;
        }
      }
    }
  };
  eq.hashCombine = function(seed, hash) {
    return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
  };
  eq.stringCodeCache = {};
  eq.stringCodeCacheSize = 0;
  eq.STR_CACHE_MAX = 256;
  eq.hashString = function(str) {
    var cached = eq.stringCodeCache[str];
    if (cached != null) {
      return cached;
    }
    var code = 0;
    for (var i = 0;i < str.length;++i) {
      code = 31 * code + str.charCodeAt(i);
      code %= 4294967296;
    }
    eq.stringCodeCacheSize++;
    if (eq.stringCodeCacheSize >= eq.STR_CACHE_MAX) {
      eq.stringCodeCache = {};
      eq.stringCodeCacheSize = 1;
    }
    eq.stringCodeCache[str] = code;
    return code;
  };
  eq.hashMapLike = function(m) {
    var code = 0;
    if (m.forEach != null) {
      m.forEach(function(val, key, m) {
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      });
    } else {
      var keys = util.objectKeys(m);
      for (var i = 0;i < keys.length;i++) {
        var key = keys[i];
        var val = m[key];
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      }
    }
    return code;
  };
  eq.hashArrayLike = function(arr) {
    var code = 0;
    if (util.isArray(arr)) {
      for (var i = 0;i < arr.length;i++) {
        code = eq.hashCombine(code, eq.hashCode(arr[i]));
      }
    } else {
      if (arr.forEach) {
        arr.forEach(function(x, i) {
          code = eq.hashCombine(code, eq.hashCode(x));
        });
      }
    }
    return code;
  };
  eq.hashCode = function(x) {
    if (x == null) {
      return 0;
    } else {
      switch(typeof x) {
        case "number":
          return x;
          break;
        case "boolean":
          return x === true ? 1 : 0;
          break;
        case "string":
          return eq.hashString(x);
          break;
        case "function":
          var code = x[eq.hashCodeProperty];
          if (code) {
            return code;
          } else {
            code = eq.hashCodeCounter;
            if (typeof Object.defineProperty != "undefined") {
              Object.defineProperty(x, eq.hashCodeProperty, {value:code, enumerable:false});
            } else {
              x[eq.hashCodeProperty] = code;
            }
            eq.hashCodeCounter++;
            return code;
          }
          break;
        default:
          if (x instanceof Date) {
            return x.valueOf();
          } else {
            if (util.isArray(x)) {
              return eq.hashArrayLike(x);
            }
          }
          if (x.com$cognitect$transit$hashCode) {
            return x.com$cognitect$transit$hashCode();
          } else {
            return eq.hashMapLike(x);
          }
          break;
      }
    }
  };
  eq.extendToEQ = function(obj, opts) {
    obj.com$cognitect$transit$hashCode = opts["hashCode"];
    obj.com$cognitect$transit$equals = opts["equals"];
    return obj;
  };
});
goog.provide("goog.math.Long");
goog.math.Long = function(low, high) {
  this.low_ = low | 0;
  this.high_ = high | 0;
};
goog.math.Long.IntCache_ = {};
goog.math.Long.fromInt = function(value) {
  if (-128 <= value && value < 128) {
    var cachedObj = goog.math.Long.IntCache_[value];
    if (cachedObj) {
      return cachedObj;
    }
  }
  var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
  if (-128 <= value && value < 128) {
    goog.math.Long.IntCache_[value] = obj;
  }
  return obj;
};
goog.math.Long.fromNumber = function(value) {
  if (isNaN(value) || !isFinite(value)) {
    return goog.math.Long.ZERO;
  } else {
    if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else {
      if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
        return goog.math.Long.MAX_VALUE;
      } else {
        if (value < 0) {
          return goog.math.Long.fromNumber(-value).negate();
        } else {
          return new goog.math.Long(value % goog.math.Long.TWO_PWR_32_DBL_ | 0, value / goog.math.Long.TWO_PWR_32_DBL_ | 0);
        }
      }
    }
  }
};
goog.math.Long.fromBits = function(lowBits, highBits) {
  return new goog.math.Long(lowBits, highBits);
};
goog.math.Long.fromString = function(str, opt_radix) {
  if (str.length == 0) {
    throw Error("number format error: empty string");
  }
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (str.charAt(0) == "-") {
    return goog.math.Long.fromString(str.substring(1), radix).negate();
  } else {
    if (str.indexOf("-") >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
  var result = goog.math.Long.ZERO;
  for (var i = 0;i < str.length;i += 8) {
    var size = Math.min(8, str.length - i);
    var value = parseInt(str.substring(i, i + size), radix);
    if (size < 8) {
      var power = goog.math.Long.fromNumber(Math.pow(radix, size));
      result = result.multiply(power).add(goog.math.Long.fromNumber(value));
    } else {
      result = result.multiply(radixToPower);
      result = result.add(goog.math.Long.fromNumber(value));
    }
  }
  return result;
};
goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
goog.math.Long.TWO_PWR_32_DBL_ = goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_31_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ / 2;
goog.math.Long.TWO_PWR_48_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_64_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
goog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;
goog.math.Long.ZERO = goog.math.Long.fromInt(0);
goog.math.Long.ONE = goog.math.Long.fromInt(1);
goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
goog.math.Long.MAX_VALUE = goog.math.Long.fromBits(4294967295 | 0, 2147483647 | 0);
goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 2147483648 | 0);
goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
goog.math.Long.prototype.toInt = function() {
  return this.low_;
};
goog.math.Long.prototype.toNumber = function() {
  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
};
goog.math.Long.prototype.toString = function(opt_radix) {
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (this.isZero()) {
    return "0";
  }
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      var radixLong = goog.math.Long.fromNumber(radix);
      var div = this.div(radixLong);
      var rem = div.multiply(radixLong).subtract(this);
      return div.toString(radix) + rem.toInt().toString(radix);
    } else {
      return "-" + this.negate().toString(radix);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
  var rem = this;
  var result = "";
  while (true) {
    var remDiv = rem.div(radixToPower);
    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
    var digits = intval.toString(radix);
    rem = remDiv;
    if (rem.isZero()) {
      return digits + result;
    } else {
      while (digits.length < 6) {
        digits = "0" + digits;
      }
      result = "" + digits + result;
    }
  }
};
goog.math.Long.prototype.getHighBits = function() {
  return this.high_;
};
goog.math.Long.prototype.getLowBits = function() {
  return this.low_;
};
goog.math.Long.prototype.getLowBitsUnsigned = function() {
  return this.low_ >= 0 ? this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
};
goog.math.Long.prototype.getNumBitsAbs = function() {
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return 64;
    } else {
      return this.negate().getNumBitsAbs();
    }
  } else {
    var val = this.high_ != 0 ? this.high_ : this.low_;
    for (var bit = 31;bit > 0;bit--) {
      if ((val & 1 << bit) != 0) {
        break;
      }
    }
    return this.high_ != 0 ? bit + 33 : bit + 1;
  }
};
goog.math.Long.prototype.isZero = function() {
  return this.high_ == 0 && this.low_ == 0;
};
goog.math.Long.prototype.isNegative = function() {
  return this.high_ < 0;
};
goog.math.Long.prototype.isOdd = function() {
  return(this.low_ & 1) == 1;
};
goog.math.Long.prototype.equals = function(other) {
  return this.high_ == other.high_ && this.low_ == other.low_;
};
goog.math.Long.prototype.notEquals = function(other) {
  return this.high_ != other.high_ || this.low_ != other.low_;
};
goog.math.Long.prototype.lessThan = function(other) {
  return this.compare(other) < 0;
};
goog.math.Long.prototype.lessThanOrEqual = function(other) {
  return this.compare(other) <= 0;
};
goog.math.Long.prototype.greaterThan = function(other) {
  return this.compare(other) > 0;
};
goog.math.Long.prototype.greaterThanOrEqual = function(other) {
  return this.compare(other) >= 0;
};
goog.math.Long.prototype.compare = function(other) {
  if (this.equals(other)) {
    return 0;
  }
  var thisNeg = this.isNegative();
  var otherNeg = other.isNegative();
  if (thisNeg && !otherNeg) {
    return-1;
  }
  if (!thisNeg && otherNeg) {
    return 1;
  }
  if (this.subtract(other).isNegative()) {
    return-1;
  } else {
    return 1;
  }
};
goog.math.Long.prototype.negate = function() {
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return goog.math.Long.MIN_VALUE;
  } else {
    return this.not().add(goog.math.Long.ONE);
  }
};
goog.math.Long.prototype.add = function(other) {
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 + b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.subtract = function(other) {
  return this.add(other.negate());
};
goog.math.Long.prototype.multiply = function(other) {
  if (this.isZero()) {
    return goog.math.Long.ZERO;
  } else {
    if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
  } else {
    if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().multiply(other.negate());
    } else {
      return this.negate().multiply(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
  }
  if (this.lessThan(goog.math.Long.TWO_PWR_24_) && other.lessThan(goog.math.Long.TWO_PWR_24_)) {
    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
  }
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.div = function(other) {
  if (other.isZero()) {
    throw Error("division by zero");
  } else {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    if (other.equals(goog.math.Long.ONE) || other.equals(goog.math.Long.NEG_ONE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    }
  } else {
    if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().div(other.negate());
    } else {
      return this.negate().div(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
  }
  var res = goog.math.Long.ZERO;
  var rem = this;
  while (rem.greaterThanOrEqual(other)) {
    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
    var approxRes = goog.math.Long.fromNumber(approx);
    var approxRem = approxRes.multiply(other);
    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
      approx -= delta;
      approxRes = goog.math.Long.fromNumber(approx);
      approxRem = approxRes.multiply(other);
    }
    if (approxRes.isZero()) {
      approxRes = goog.math.Long.ONE;
    }
    res = res.add(approxRes);
    rem = rem.subtract(approxRem);
  }
  return res;
};
goog.math.Long.prototype.modulo = function(other) {
  return this.subtract(this.div(other).multiply(other));
};
goog.math.Long.prototype.not = function() {
  return goog.math.Long.fromBits(~this.low_, ~this.high_);
};
goog.math.Long.prototype.and = function(other) {
  return goog.math.Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
};
goog.math.Long.prototype.or = function(other) {
  return goog.math.Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
};
goog.math.Long.prototype.xor = function(other) {
  return goog.math.Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
};
goog.math.Long.prototype.shiftLeft = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var low = this.low_;
    if (numBits < 32) {
      var high = this.high_;
      return goog.math.Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);
    } else {
      return goog.math.Long.fromBits(0, low << numBits - 32);
    }
  }
};
goog.math.Long.prototype.shiftRight = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);
    } else {
      return goog.math.Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);
    }
  }
};
goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);
    } else {
      if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> numBits - 32, 0);
      }
    }
  }
};
goog.provide("com.cognitect.transit.types");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.eq");
goog.require("goog.math.Long");
goog.scope(function() {
  var types = com.cognitect.transit.types, util = com.cognitect.transit.util, eq = com.cognitect.transit.eq, Long = goog.math.Long;
  types.TaggedValue = function(tag, rep) {
    this.tag = tag;
    this.rep = rep;
    this.hashCode = -1;
  };
  types.TaggedValue.prototype.toString = function() {
    return "[TaggedValue: " + this.tag + ", " + this.rep + "]";
  };
  types.TaggedValue.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.TaggedValue.prototype["equiv"] = types.TaggedValue.prototype.equiv;
  types.TaggedValue.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TaggedValue) {
      return this.tag === other.tag && eq.equals(this.rep, other.rep);
    } else {
      return false;
    }
  };
  types.TaggedValue.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCombine(eq.hashCode(this.tag), eq.hashCode(this.rep));
    }
    return this.hashCode;
  };
  types.taggedValue = function(tag, rep) {
    return new types.TaggedValue(tag, rep);
  };
  types.isTaggedValue = function(x) {
    return x instanceof types.TaggedValue;
  };
  types.nullValue = function() {
    return null;
  };
  types.boolValue = function(s) {
    return s === "t";
  };
  types.MAX_INT = Long.fromString("9007199254740992");
  types.MIN_INT = Long.fromString("-9007199254740992");
  types.intValue = function(s) {
    if (typeof s === "number") {
      return s;
    } else {
      if (s instanceof Long) {
        return s;
      } else {
        var n = Long.fromString(s, 10);
        if (n.greaterThan(types.MAX_INT) || n.lessThan(types.MIN_INT)) {
          return n;
        } else {
          return n.toNumber();
        }
      }
    }
  };
  Long.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  Long.prototype["equiv"] = Long.prototype.equiv;
  Long.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof Long && this.equals(other);
  };
  Long.prototype.com$cognitect$transit$hashCode = function() {
    return this.toInt();
  };
  types.isInteger = function(x) {
    if (x instanceof Long) {
      return true;
    } else {
      return typeof x === "number" && !isNaN(x) && !(x === Infinity) && parseFloat(x) === parseInt(x);
    }
  };
  types.floatValue = function(s) {
    return parseFloat(s);
  };
  types.bigInteger = function(s) {
    return types.taggedValue("n", s);
  };
  types.isBigInteger = function(x) {
    return x instanceof types.TaggedValue && x.tag === "n";
  };
  types.bigDecimalValue = function(s) {
    return types.taggedValue("f", s);
  };
  types.isBigDecimal = function(x) {
    return x instanceof types.TaggedValue && x.tag === "f";
  };
  types.charValue = function(s) {
    return s;
  };
  types.Keyword = function(name) {
    this.name = name;
    this.hashCode = -1;
  };
  types.Keyword.prototype.toString = function() {
    return ":" + this.name;
  };
  types.Keyword.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Keyword.prototype["equiv"] = types.Keyword.prototype.equiv;
  types.Keyword.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Keyword && this.name == other.name;
  };
  types.Keyword.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.name);
    }
    return this.hashCode;
  };
  types.keyword = function(s) {
    return new types.Keyword(s);
  };
  types.isKeyword = function(x) {
    return x instanceof types.Keyword;
  };
  types.Symbol = function(name) {
    this.name = name;
    this.hashCode = -1;
  };
  types.Symbol.prototype.toString = function() {
    return "[Symbol: " + this.name + "]";
  };
  types.Symbol.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Symbol.prototype["equiv"] = types.Symbol.prototype.equiv;
  types.Symbol.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Symbol && this.name == other.name;
  };
  types.Symbol.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.name);
    }
    return this.hashCode;
  };
  types.symbol = function(s) {
    return new types.Symbol(s);
  };
  types.isSymbol = function(x) {
    return x instanceof types.Symbol;
  };
  types.hexFor = function(aLong, sidx, eidx) {
    var ret = "", eidx = eidx || sidx + 1;
    for (var i = sidx, shift = (7 - i) * 8, mask = Long.fromInt(255).shiftLeft(shift);i < eidx;i++, shift -= 8, mask = mask.shiftRightUnsigned(8)) {
      var s = aLong.and(mask).shiftRightUnsigned(shift).toString(16);
      if (s.length == 1) {
        s = "0" + s;
      }
      ret += s;
    }
    return ret;
  };
  types.UUID = function(high, low) {
    this.high = high;
    this.low = low;
    this.hashCode = -1;
  };
  types.UUID.prototype.getLeastSignificantBits = function() {
    return this.low;
  };
  types.UUID.prototype.getMostSignificantBits = function() {
    return this.high;
  };
  types.UUID.prototype.toString = function(s) {
    var s = "", hi64 = this.high, lo64 = this.low;
    s += types.hexFor(hi64, 0, 4) + "-";
    s += types.hexFor(hi64, 4, 6) + "-";
    s += types.hexFor(hi64, 6, 8) + "-";
    s += types.hexFor(lo64, 0, 2) + "-";
    s += types.hexFor(lo64, 2, 8);
    return s;
  };
  types.UUID.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.UUID.prototype["equiv"] = types.UUID.prototype.equiv;
  types.UUID.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.UUID && this.high.equals(other.high) && this.low.equals(other.low);
  };
  types.UUID.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.toString());
    }
    return this.hashCode;
  };
  types.UUIDfromString = function uuidFromString(s) {
    var s = s.replace(/-/g, ""), hi64 = null, lo64 = null, hi32 = 0, lo32 = 0, off = 24, i = 0;
    for (hi32 = 0, i = 0, off = 24;i < 8;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 8, off = 24;i < 16;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    hi64 = Long.fromBits(lo32, hi32);
    for (hi32 = 0, i = 16, off = 24;i < 24;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 24, off = 24;i < 32;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    lo64 = Long.fromBits(lo32, hi32);
    return new types.UUID(hi64, lo64);
  };
  types.uuid = function(s) {
    return types.UUIDfromString(s);
  };
  types.isUUID = function(x) {
    return x instanceof types.UUID;
  };
  types.date = function(s) {
    s = typeof s === "number" ? s : parseInt(s, 10);
    return new Date(s);
  };
  types.verboseDate = function(s) {
    return new Date(s);
  };
  Date.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof Date) {
      return this.valueOf() === other.valueOf();
    } else {
      return false;
    }
  };
  Date.prototype.com$cognitect$transit$hashCode = function() {
    return this.valueOf();
  };
  types.binary = function(str, decoder) {
    if ((!decoder || decoder.preferBuffers !== false) && typeof Buffer != "undefined") {
      return new Buffer(str, "base64");
    } else {
      if (typeof Uint8Array != "undefined") {
        return util.Base64ToUint8(str);
      } else {
        return types.taggedValue("b", str);
      }
    }
  };
  types.isBinary = function(x) {
    if (typeof Buffer != "undefined" && x instanceof Buffer) {
      return true;
    } else {
      if (typeof Uint8Array != "undefined" && x instanceof Uint8Array) {
        return true;
      } else {
        return x instanceof types.TaggedValue && x.tag === "b";
      }
    }
  };
  types.uri = function(s) {
    return types.taggedValue("r", s);
  };
  types.isURI = function(x) {
    return x instanceof types.TaggedValue && x.tag === "r";
  };
  types.KEYS = 0;
  types.VALUES = 1;
  types.ENTRIES = 2;
  types.TransitArrayMapIterator = function(entries, type) {
    this.entries = entries;
    this.type = type || types.KEYS;
    this.idx = 0;
  };
  types.TransitArrayMapIterator.prototype.next = function(map, type) {
    if (this.idx < this.entries.length) {
      var value = null;
      if (this.type === types.KEYS) {
        value = this.entries[this.idx];
      } else {
        if (this.type === types.VALUES) {
          value = this.entries[this.idx + 1];
        } else {
          value = [this.entries[this.idx], this.entries[this.idx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx += 2;
      return ret;
    } else {
      return{"value":null, "done":true};
    }
  };
  types.TransitArrayMapIterator.prototype["next"] = types.TransitArrayMapIterator.prototype.next;
  types.TransitMapIterator = function(map, type) {
    this.map = map;
    this.type = type || types.KEYS;
    this.keys = this.map.getKeys();
    this.idx = 0;
    this.bucket = null;
    this.bucketIdx = 0;
  };
  types.TransitMapIterator.prototype.next = function() {
    if (this.idx < this.map.size) {
      if (this.bucket == null || !(this.bucketIdx < this.bucket.length)) {
        this.bucket = this.map.map[this.keys[this.idx]];
        this.bucketIdx = 0;
      }
      var value = null;
      if (this.type === types.KEYS) {
        value = this.bucket[this.bucketIdx];
      } else {
        if (this.type === types.VALUES) {
          value = this.bucket[this.bucketIdx + 1];
        } else {
          value = [this.bucket[this.bucketIdx], this.bucket[this.bucketIdx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx++;
      this.bucketIdx += 2;
      return ret;
    } else {
      return{"value":null, "done":true};
    }
  };
  types.TransitMapIterator.prototype["next"] = types.TransitMapIterator.prototype.next;
  types.mapEquals = function(me, you) {
    if ((you instanceof types.TransitMap || you instanceof types.TransitArrayMap) && me.size === you.size) {
      for (var code in me.map) {
        var bucket = me.map[code];
        for (var j = 0;j < bucket.length;j += 2) {
          if (!eq.equals(bucket[j + 1], you.get(bucket[j]))) {
            return false;
          }
        }
      }
      return true;
    } else {
      if (you != null && typeof you === "object") {
        var ks = util.objectKeys(you), kslen = ks.length;
        if (me.size === kslen) {
          for (var i = 0;i < kslen;i++) {
            var k = ks[i];
            if (!me.has(k) || !eq.equals(you[k], me.get(k))) {
              return false;
            }
          }
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  };
  types.SMALL_ARRAY_MAP_THRESHOLD = 8;
  types.ARRAY_MAP_THRESHOLD = 32;
  types.ARRAY_MAP_ACCESS_THRESHOLD = 32;
  types.TransitArrayMap = function(entries) {
    this._entries = entries;
    this.backingMap = null;
    this.hashCode = -1;
    this.size = entries.length / 2;
    this.accesses = 0;
  };
  types.TransitArrayMap.prototype.toString = function() {
    return "[TransitArrayMap]";
  };
  types.TransitArrayMap.prototype.convert = function() {
    if (this.backingMap) {
      throw Error("Invalid operation, already converted");
    }
    if (this.size < types.SMALL_ARRAY_MAP_THRESHOLD) {
      return false;
    }
    this.accesses++;
    if (this.accesses > types.ARRAY_MAP_ACCESS_THRESHOLD) {
      this.backingMap = types.map(this._entries, false, true);
      this._entries = [];
      return true;
    } else {
      return false;
    }
  };
  types.TransitArrayMap.prototype.clear = function() {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.clear();
      this.size = 0;
    } else {
      this._entries = [];
      this.size = 0;
    }
  };
  types.TransitArrayMap.prototype["clear"] = types.TransitArrayMap.prototype.clear;
  types.TransitArrayMap.prototype.keys = function() {
    if (this.backingMap) {
      return this.backingMap.keys();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.KEYS);
    }
  };
  types.TransitArrayMap.prototype["keys"] = types.TransitArrayMap.prototype.keys;
  types.TransitArrayMap.prototype.keySet = function() {
    if (this.backingMap) {
      return this.backingMap.keySet();
    } else {
      var ret = [];
      for (var i = 0, j = 0;j < this._entries.length;i++, j += 2) {
        ret[i] = this._entries[j];
      }
      return ret;
    }
  };
  types.TransitArrayMap.prototype["keySet"] = types.TransitArrayMap.prototype.keySet;
  types.TransitArrayMap.prototype.entries = function() {
    if (this.backingMap) {
      return this.backingMap.entries();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.ENTRIES);
    }
  };
  types.TransitArrayMap.prototype["entries"] = types.TransitArrayMap.prototype.entries;
  types.TransitArrayMap.prototype.values = function() {
    if (this.backingMap) {
      return this.backingMap.values();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.VALUES);
    }
  };
  types.TransitArrayMap.prototype["values"] = types.TransitArrayMap.prototype.values;
  types.TransitArrayMap.prototype.forEach = function(f) {
    if (this.backingMap) {
      this.backingMap.forEach(f);
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        f(this._entries[i + 1], this._entries[i]);
      }
    }
  };
  types.TransitArrayMap.prototype["forEach"] = types.TransitArrayMap.prototype.forEach;
  types.TransitArrayMap.prototype.get = function(k, notFound) {
    if (this.backingMap) {
      return this.backingMap.get(k);
    } else {
      if (this.convert()) {
        return this.get(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return this._entries[i + 1];
          }
        }
        return notFound;
      }
    }
  };
  types.TransitArrayMap.prototype["get"] = types.TransitArrayMap.prototype.get;
  types.TransitArrayMap.prototype.has = function(k) {
    if (this.backingMap) {
      return this.backingMap.has(k);
    } else {
      if (this.convert()) {
        return this.has(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return true;
          }
        }
        return false;
      }
    }
  };
  types.TransitArrayMap.prototype["has"] = types.TransitArrayMap.prototype.has;
  types.TransitArrayMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.set(k, v);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries[i + 1] = v;
          return;
        }
      }
      this._entries.push(k);
      this._entries.push(v);
      this.size++;
      if (this.size > types.ARRAY_MAP_THRESHOLD) {
        this.backingMap = types.map(this._entries, false, true);
        this._entries = null;
      }
    }
  };
  types.TransitArrayMap.prototype["set"] = types.TransitArrayMap.prototype.set;
  types.TransitArrayMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap["delete"](k);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries.splice(i, 2);
          this.size--;
          return;
        }
      }
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.backingMap) {
      return this.backingMap.com$cognitect$transit$hashCode();
    } else {
      if (this.hashCode === -1) {
        this.hashCode = eq.hashMapLike(this);
      }
      return this.hashCode;
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$equals = function(other) {
    if (this.backingMap) {
      return types.mapEquals(this.backingMap, other);
    } else {
      return types.mapEquals(this, other);
    }
  };
  types.TransitMap = function(keys, map, size) {
    this.map = map || {};
    this._keys = keys || [];
    this.size = size || 0;
    this.hashCode = -1;
  };
  types.TransitMap.prototype.toString = function() {
    return "[TransitMap]";
  };
  types.TransitMap.prototype.clear = function() {
    this.hashCode = -1;
    this.map = {};
    this._keys = [];
    this.size = 0;
  };
  types.TransitMap.prototype["clear"] = types.TransitMap.prototype.clear;
  types.TransitMap.prototype.getKeys = function() {
    if (this._keys != null) {
      return this._keys;
    } else {
      return util.objectKeys(this.map);
    }
  };
  types.TransitMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    this._keys = null;
    var code = eq.hashCode(k), bucket = this.map[code];
    for (var i = 0;i < bucket.length;i += 2) {
      if (eq.equals(k, bucket[i])) {
        bucket.splice(i, 2);
        if (bucket.length === 0) {
          delete this.map[code];
        }
        this.size--;
        break;
      }
    }
  };
  types.TransitMap.prototype.entries = function() {
    return new types.TransitMapIterator(this, types.ENTRIES);
  };
  types.TransitMap.prototype["entries"] = types.TransitMap.prototype.entries;
  types.TransitMap.prototype.forEach = function(callback) {
    var ks = this.getKeys();
    for (var i = 0;i < ks.length;i++) {
      var bucket = this.map[ks[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        callback(bucket[j + 1], bucket[j], this);
      }
    }
  };
  types.TransitMap.prototype["forEach"] = types.TransitMap.prototype.forEach;
  types.TransitMap.prototype.get = function(k, notFound) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return bucket[i + 1];
        }
      }
    } else {
      return notFound;
    }
  };
  types.TransitMap.prototype["get"] = types.TransitMap.prototype.get;
  types.TransitMap.prototype.has = function(k) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return true;
        }
      }
      return false;
    } else {
      return false;
    }
  };
  types.TransitMap.prototype["has"] = types.TransitMap.prototype.has;
  types.TransitMap.prototype.keys = function() {
    return new types.TransitMapIterator(this, types.KEYS);
  };
  types.TransitMap.prototype["keys"] = types.TransitMap.prototype.keys;
  types.TransitMap.prototype.keySet = function() {
    var keys = this.getKeys(), ret = [];
    for (var i = 0;i < keys.length;i++) {
      var bucket = this.map[keys[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        ret.push(bucket[j]);
      }
    }
    return ret;
  };
  types.TransitMap.prototype["keySet"] = types.TransitMap.prototype.keySet;
  types.TransitMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket == null) {
      if (this._keys) {
        this._keys.push(code);
      }
      this.map[code] = [k, v];
      this.size++;
    } else {
      var newEntry = true;
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(v, bucket[i])) {
          newEntry = false;
          bucket[i] = v;
          break;
        }
      }
      if (newEntry) {
        bucket.push(k);
        bucket.push(v);
        this.size++;
      }
    }
  };
  types.TransitMap.prototype["set"] = types.TransitMap.prototype.set;
  types.TransitMap.prototype.values = function() {
    return new types.TransitMapIterator(this, types.VALUES);
  };
  types.TransitMap.prototype["values"] = types.TransitMap.prototype.values;
  types.TransitMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashMapLike(this);
    }
    return this.hashCode;
  };
  types.TransitMap.prototype.com$cognitect$transit$equals = function(other) {
    return types.mapEquals(this, other);
  };
  types.map = function(arr, checkDups, hashMap) {
    arr = arr || [];
    checkDups = checkDups === false ? checkDups : true;
    hashMap = hashMap === true ? hashMap : false;
    if (!hashMap && arr.length <= types.ARRAY_MAP_THRESHOLD * 2) {
      if (checkDups) {
        var t = arr;
        arr = [];
        for (var i = 0;i < t.length;i += 2) {
          var seen = false;
          for (var j = 0;j < arr.length;j += 2) {
            if (eq.equals(arr[j], t[i])) {
              arr[j + 1] = t[i + 1];
              seen = true;
              break;
            }
          }
          if (!seen) {
            arr.push(t[i]);
            arr.push(t[i + 1]);
          }
        }
      }
      return new types.TransitArrayMap(arr);
    } else {
      var map = {}, keys = [], size = 0;
      for (var i = 0;i < arr.length;i += 2) {
        var code = eq.hashCode(arr[i]), bucket = map[code];
        if (bucket == null) {
          keys.push(code);
          map[code] = [arr[i], arr[i + 1]];
          size++;
        } else {
          var newEntry = true;
          for (var j = 0;j < bucket.length;j += 2) {
            if (eq.equals(bucket[j], arr[i])) {
              bucket[j + 1] = arr[i + 1];
              newEntry = false;
              break;
            }
          }
          if (newEntry) {
            bucket.push(arr[i]);
            bucket.push(arr[i + 1]);
            size++;
          }
        }
      }
      return new types.TransitMap(keys, map, size);
    }
  };
  types.isArrayMap = function(x) {
    return x instanceof types.TransitArrayMap;
  };
  types.isMap = function(x) {
    return x instanceof types.TransitArrayMap || x instanceof types.TransitMap;
  };
  types.TransitSet = function(map) {
    this.map = map;
    this.size = map.size;
  };
  types.TransitSet.prototype.toString = function() {
    return "[TransitSet]";
  };
  types.TransitSet.prototype.add = function(value) {
    this.map.set(value, value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype["add"] = types.TransitSet.prototype.add;
  types.TransitSet.prototype.clear = function() {
    this.map = new types.TransitMap;
    this.size = 0;
  };
  types.TransitSet.prototype["clear"] = types.TransitSet.prototype.clear;
  types.TransitSet.prototype["delete"] = function(value) {
    this.map["delete"](value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype.entries = function() {
    return this.map.entries();
  };
  types.TransitSet.prototype["entries"] = types.TransitSet.prototype.entries;
  types.TransitSet.prototype.forEach = function(iterator, thisArg) {
    var self = this;
    this.map.forEach(function(v, k, m) {
      iterator(k, self);
    });
  };
  types.TransitSet.prototype["forEach"] = types.TransitSet.prototype.forEach;
  types.TransitSet.prototype.has = function(value) {
    return this.map.has(value);
  };
  types.TransitSet.prototype["has"] = types.TransitSet.prototype.has;
  types.TransitSet.prototype.keys = function() {
    return this.map.keys();
  };
  types.TransitSet.prototype["keys"] = types.TransitSet.prototype.keys;
  types.TransitSet.prototype.keySet = function() {
    return this.map.keySet();
  };
  types.TransitSet.prototype["keySet"] = types.TransitSet.prototype.keySet;
  types.TransitSet.prototype.values = function() {
    return this.map.values();
  };
  types.TransitSet.prototype["values"] = types.TransitSet.prototype.values;
  types.TransitSet.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TransitSet) {
      if (this.size === other.size) {
        return eq.equals(this.map, other.map);
      }
    } else {
      return false;
    }
  };
  types.TransitSet.prototype.com$cognitect$transit$hashCode = function(other) {
    return eq.hashCode(this.map);
  };
  types.set = function(arr) {
    arr = arr || [];
    var map = {}, keys = [], size = 0;
    for (var i = 0;i < arr.length;i++) {
      var code = eq.hashCode(arr[i]), vals = map[code];
      if (vals == null) {
        keys.push(code);
        map[code] = [arr[i], arr[i]];
        size++;
      } else {
        var newEntry = true;
        for (var j = 0;j < vals.length;j += 2) {
          if (eq.equals(vals[j], arr[i])) {
            newEntry = false;
            break;
          }
        }
        if (newEntry) {
          vals.push(arr[i]);
          vals.push(arr[i]);
          size++;
        }
      }
    }
    return new types.TransitSet(new types.TransitMap(keys, map, size));
  };
  types.isSet = function(x) {
    return x instanceof types.TransitSet;
  };
  types.quoted = function(obj) {
    return types.taggedValue("'", obj);
  };
  types.isQuoted = function(x) {
    return x instanceof types.TaggedValue && x.tag === "'";
  };
  types.list = function(xs) {
    return types.taggedValue("list", xs);
  };
  types.isList = function(x) {
    return x instanceof types.List && x.tag === "list";
  };
  types.link = function(rep) {
    return types.taggedValue("link", rep);
  };
  types.isLink = function(x) {
    return x instanceof types.TaggedValue && x.tag === "link";
  };
  types.specialDouble = function(v) {
    switch(v) {
      case "-INF":
        return-Infinity;
      case "INF":
        return Infinity;
      case "NaN":
        return NaN;
      default:
        throw new Error("Invalid special double value " + v);break;
    }
  };
});
goog.provide("com.cognitect.transit.delimiters");
goog.scope(function() {
  var delimiters = com.cognitect.transit.delimiters;
  delimiters.ESC = "~";
  delimiters.TAG = "#";
  delimiters.SUB = "^";
  delimiters.RES = "`";
  delimiters.ESC_TAG = "~#";
});
goog.provide("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.delimiters");
goog.scope(function() {
  var caching = com.cognitect.transit.caching, d = com.cognitect.transit.delimiters;
  caching.MIN_SIZE_CACHEABLE = 3;
  caching.BASE_CHAR_IDX = 48;
  caching.CACHE_CODE_DIGITS = 44;
  caching.MAX_CACHE_ENTRIES = caching.CACHE_CODE_DIGITS * caching.CACHE_CODE_DIGITS;
  caching.MAX_CACHE_SIZE = 4096;
  caching.isCacheable = function(string, asMapKey) {
    if (string.length > caching.MIN_SIZE_CACHEABLE) {
      if (asMapKey) {
        return true;
      } else {
        var c0 = string.charAt(0), c1 = string.charAt(1);
        if (c0 === d.ESC) {
          return c1 === ":" || c1 === "$" || c1 === "#";
        } else {
          return false;
        }
      }
    } else {
      return false;
    }
  };
  caching.idxToCode = function(idx) {
    var hi = Math.floor(idx / caching.CACHE_CODE_DIGITS), lo = idx % caching.CACHE_CODE_DIGITS, loc = String.fromCharCode(lo + caching.BASE_CHAR_IDX);
    if (hi === 0) {
      return d.SUB + loc;
    } else {
      return d.SUB + String.fromCharCode(hi + caching.BASE_CHAR_IDX) + loc;
    }
  };
  caching.WriteCache = function() {
    this.idx = 0;
    this.gen = 0;
    this.cacheSize = 0;
    this.cache = {};
  };
  caching.WriteCache.prototype.write = function(string, asMapKey) {
    if (caching.isCacheable(string, asMapKey)) {
      if (this.cacheSize === caching.MAX_CACHE_SIZE) {
        this.clear();
        this.gen = 0;
        this.cache = {};
      } else {
        if (this.idx === caching.MAX_CACHE_ENTRIES) {
          this.clear();
        }
      }
      var entry = this.cache[string];
      if (entry == null) {
        this.cache[string] = [caching.idxToCode(this.idx), this.gen];
        this.idx++;
        return string;
      } else {
        if (entry[1] != this.gen) {
          entry[1] = this.gen;
          entry[0] = caching.idxToCode(this.idx);
          this.idx++;
          return string;
        } else {
          return entry[0];
        }
      }
    } else {
      return string;
    }
  };
  caching.WriteCache.prototype.clear = function() {
    this.idx = 0;
    this.gen++;
  };
  caching.writeCache = function() {
    return new caching.WriteCache;
  };
  caching.isCacheCode = function(string) {
    return string.charAt(0) === d.SUB && string.charAt(1) !== " ";
  };
  caching.codeToIdx = function(code) {
    if (code.length === 2) {
      return code.charCodeAt(1) - caching.BASE_CHAR_IDX;
    } else {
      var hi = (code.charCodeAt(1) - caching.BASE_CHAR_IDX) * caching.CACHE_CODE_DIGITS, lo = code.charCodeAt(2) - caching.BASE_CHAR_IDX;
      return hi + lo;
    }
  };
  caching.ReadCache = function() {
    this.idx = 0;
    this.cache = [];
  };
  caching.ReadCache.prototype.write = function(obj, asMapKey) {
    if (this.idx == caching.MAX_CACHE_ENTRIES) {
      this.idx = 0;
    }
    this.cache[this.idx] = obj;
    this.idx++;
    return obj;
  };
  caching.ReadCache.prototype.read = function(string, asMapKey) {
    return this.cache[caching.codeToIdx(string)];
  };
  caching.ReadCache.prototype.clear = function() {
    this.idx = 0;
  };
  caching.readCache = function() {
    return new caching.ReadCache;
  };
});
goog.provide("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.delimiters");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.types");
goog.scope(function() {
  var decoder = com.cognitect.transit.impl.decoder, util = com.cognitect.transit.util, d = com.cognitect.transit.delimiters, caching = com.cognitect.transit.caching, types = com.cognitect.transit.types;
  decoder.Tag = function(s) {
    this.str = s;
  };
  decoder.tag = function(s) {
    return new decoder.Tag(s);
  };
  decoder.isTag = function(x) {
    return x && x instanceof decoder.Tag;
  };
  decoder.isGroundHandler = function(handler) {
    switch(handler) {
      case "_":
      ;
      case "s":
      ;
      case "?":
      ;
      case "i":
      ;
      case "d":
      ;
      case "b":
      ;
      case "'":
      ;
      case "array":
      ;
      case "map":
        return true;
    }
    return false;
  };
  decoder.Decoder = function(options) {
    this.options = options || {};
    this.handlers = {};
    for (var h in this.defaults.handlers) {
      this.handlers[h] = this.defaults.handlers[h];
    }
    for (var h in this.options["handlers"]) {
      if (decoder.isGroundHandler(h)) {
        throw new Error('Cannot override handler for ground type "' + h + '"');
      }
      this.handlers[h] = this.options["handlers"][h];
    }
    this.preferStrings = this.options["preferStrings"] != null ? this.options["preferStrings"] : this.defaults.preferStrings;
    this.preferBuffers = this.options["preferBuffers"] != null ? this.options["preferBuffers"] : this.defaults.preferBuffers;
    this.defaultHandler = this.options["defaultHandler"] || this.defaults.defaultHandler;
    this.mapBuilder = this.options["mapBuilder"];
    this.arrayBuilder = this.options["arrayBuilder"];
  };
  decoder.Decoder.prototype.defaults = {handlers:{"_":function(v, d) {
    return types.nullValue();
  }, "?":function(v, d) {
    return types.boolValue(v);
  }, "b":function(v, d) {
    return types.binary(v, d);
  }, "i":function(v, d) {
    return types.intValue(v);
  }, "n":function(v, d) {
    return types.bigInteger(v);
  }, "d":function(v, d) {
    return types.floatValue(v);
  }, "f":function(v, d) {
    return types.bigDecimalValue(v);
  }, "c":function(v, d) {
    return types.charValue(v);
  }, ":":function(v, d) {
    return types.keyword(v);
  }, "$":function(v, d) {
    return types.symbol(v);
  }, "r":function(v, d) {
    return types.uri(v);
  }, "z":function(v, d) {
    return types.specialDouble(v);
  }, "'":function(v, d) {
    return v;
  }, "m":function(v, d) {
    return types.date(v);
  }, "t":function(v, d) {
    return types.verboseDate(v);
  }, "u":function(v, d) {
    return types.uuid(v);
  }, "set":function(v, d) {
    return types.set(v);
  }, "list":function(v, d) {
    return types.list(v);
  }, "link":function(v, d) {
    return types.link(v);
  }, "cmap":function(v, d) {
    return types.map(v, false);
  }}, defaultHandler:function(c, val) {
    return types.taggedValue(c, val);
  }, preferStrings:true, preferBuffers:true};
  decoder.Decoder.prototype.decode = function(node, cache, asMapKey, tagValue) {
    if (node == null) {
      return null;
    }
    var t = typeof node;
    switch(t) {
      case "string":
        return this.decodeString(node, cache, asMapKey, tagValue);
        break;
      case "object":
        if (util.isArray(node)) {
          if (node[0] === "^ ") {
            return this.decodeArrayHash(node, cache, asMapKey, tagValue);
          } else {
            return this.decodeArray(node, cache, asMapKey, tagValue);
          }
        } else {
          return this.decodeHash(node, cache, asMapKey, tagValue);
        }
        break;
    }
    return node;
  };
  decoder.Decoder.prototype["decode"] = decoder.Decoder.prototype.decode;
  decoder.Decoder.prototype.decodeString = function(string, cache, asMapKey, tagValue) {
    if (caching.isCacheable(string, asMapKey)) {
      var val = this.parseString(string, cache, false);
      if (cache) {
        cache.write(val, asMapKey);
      }
      return val;
    } else {
      if (caching.isCacheCode(string)) {
        return cache.read(string, asMapKey);
      } else {
        return this.parseString(string, cache, asMapKey);
      }
    }
  };
  decoder.Decoder.prototype.decodeHash = function(hash, cache, asMapKey, tagValue) {
    var ks = util.objectKeys(hash), key = ks[0], tag = ks.length == 1 ? this.decode(key, cache, false, false) : null;
    if (decoder.isTag(tag)) {
      var val = hash[key], handler = this.handlers[tag.str];
      if (handler != null) {
        return handler(this.decode(val, cache, false, true), this);
      } else {
        return types.taggedValue(tag.str, this.decode(val, cache, false, false));
      }
    } else {
      if (this.mapBuilder) {
        if (ks.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 && this.mapBuilder.fromArray) {
          var nodep = [];
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            nodep.push(this.decode(strKey, cache, true, false));
            nodep.push(this.decode(hash[strKey], cache, false, false));
          }
          return this.mapBuilder.fromArray(nodep, hash);
        } else {
          var ret = this.mapBuilder.init(hash);
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            ret = this.mapBuilder.add(ret, this.decode(strKey, cache, true, false), this.decode(hash[strKey], cache, false, false), hash);
          }
          return this.mapBuilder.finalize(ret, hash);
        }
      } else {
        var nodep = [];
        for (var i = 0;i < ks.length;i++) {
          var strKey = ks[i];
          nodep.push(this.decode(strKey, cache, true, false));
          nodep.push(this.decode(hash[strKey], cache, false, false));
        }
        return types.map(nodep, false);
      }
    }
  };
  decoder.Decoder.prototype.decodeArrayHash = function(node, cache, asMapKey, tagValue) {
    if (this.mapBuilder) {
      if (node.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 + 1 && this.mapBuilder.fromArray) {
        var nodep = [];
        for (var i = 1;i < node.length;i += 2) {
          nodep.push(this.decode(node[i], cache, true, false));
          nodep.push(this.decode(node[i + 1], cache, false, false));
        }
        return this.mapBuilder.fromArray(nodep, node);
      } else {
        var ret = this.mapBuilder.init(node);
        for (var i = 1;i < node.length;i += 2) {
          ret = this.mapBuilder.add(ret, this.decode(node[i], cache, true, false), this.decode(node[i + 1], cache, false, false), node);
        }
        return this.mapBuilder.finalize(ret, node);
      }
    } else {
      var nodep = [];
      for (var i = 1;i < node.length;i += 2) {
        nodep.push(this.decode(node[i], cache, true, false));
        nodep.push(this.decode(node[i + 1], cache, false, false));
      }
      return types.map(nodep, false);
    }
  };
  decoder.Decoder.prototype.decodeArray = function(node, cache, asMapKey, tagValue) {
    if (tagValue) {
      var ret = [];
      for (var i = 0;i < node.length;i++) {
        ret.push(this.decode(node[i], cache, asMapKey, false));
      }
      return ret;
    } else {
      var cacheIdx = cache && cache.idx;
      if (node.length === 2 && typeof node[0] === "string") {
        var tag = this.decode(node[0], cache, false, false);
        if (decoder.isTag(tag)) {
          var val = node[1], handler = this.handlers[tag.str];
          if (handler != null) {
            var ret = handler(this.decode(val, cache, asMapKey, true), this);
            return ret;
          } else {
            return types.taggedValue(tag.str, this.decode(val, cache, asMapKey, false));
          }
        }
      }
      if (cache && cacheIdx != cache.idx) {
        cache.idx = cacheIdx;
      }
      if (this.arrayBuilder) {
        if (node.length <= 32 && this.arrayBuilder.fromArray) {
          var arr = [];
          for (var i = 0;i < node.length;i++) {
            arr.push(this.decode(node[i], cache, asMapKey, false));
          }
          return this.arrayBuilder.fromArray(arr, node);
        } else {
          var ret = this.arrayBuilder.init();
          for (var i = 0;i < node.length;i++) {
            ret = this.arrayBuilder.add(ret, this.decode(node[i], cache, asMapKey, false), node);
          }
          return this.arrayBuilder.finalize(ret, node);
        }
      } else {
        var ret = [];
        for (var i = 0;i < node.length;i++) {
          ret.push(this.decode(node[i], cache, asMapKey, false));
        }
        return ret;
      }
    }
  };
  decoder.Decoder.prototype.parseString = function(string, cache, asMapKey) {
    if (string.charAt(0) === d.ESC) {
      var c = string.charAt(1);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return string.substring(1);
      } else {
        if (c === d.TAG) {
          return decoder.tag(string.substring(2));
        } else {
          var handler = this.handlers[c];
          if (handler == null) {
            return this.defaultHandler(c, string.substring(2));
          } else {
            return handler(string.substring(2), this);
          }
        }
      }
    } else {
      return string;
    }
  };
  decoder.decoder = function(options) {
    return new decoder.Decoder(options);
  };
});
goog.provide("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
goog.scope(function() {
  var reader = com.cognitect.transit.impl.reader, decoder = com.cognitect.transit.impl.decoder, caching = com.cognitect.transit.caching;
  reader.JSONUnmarshaller = function(opts) {
    this.decoder = new decoder.Decoder(opts);
  };
  reader.JSONUnmarshaller.prototype.unmarshal = function(str, cache) {
    return this.decoder.decode(JSON.parse(str), cache);
  };
  reader.Reader = function(unmarshaller, options) {
    this.unmarshaller = unmarshaller;
    this.options = options || {};
    this.cache = this.options["cache"] ? this.options["cache"] : new caching.ReadCache;
  };
  reader.Reader.prototype.read = function(str) {
    var ret = this.unmarshaller.unmarshal(str, this.cache);
    this.cache.clear();
    return ret;
  };
  reader.Reader.prototype["read"] = reader.Reader.prototype.read;
});
goog.provide("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.types");
goog.require("goog.math.Long");
goog.scope(function() {
  var handlers = com.cognitect.transit.handlers, util = com.cognitect.transit.util, types = com.cognitect.transit.types, Long = goog.math.Long;
  handlers.ctorGuid = 0;
  handlers.ctorGuidProperty = "transit$guid$" + util.randomUUID();
  handlers.typeTag = function(ctor) {
    if (ctor == null) {
      return "null";
    } else {
      if (ctor === String) {
        return "string";
      } else {
        if (ctor === Boolean) {
          return "boolean";
        } else {
          if (ctor === Number) {
            return "number";
          } else {
            if (ctor === Array) {
              return "array";
            } else {
              if (ctor === Object) {
                return "map";
              } else {
                var tag = ctor[handlers.ctorGuidProperty];
                if (tag == null) {
                  if (typeof Object.defineProperty != "undefined") {
                    tag = ++handlers.ctorGuid;
                    Object.defineProperty(ctor, handlers.ctorGuidProperty, {value:tag, enumerable:false});
                  } else {
                    ctor[handlers.ctorGuidProperty] = tag = ++handlers.ctorGuid;
                  }
                }
                return tag;
              }
            }
          }
        }
      }
    }
  };
  handlers.constructor = function(x) {
    if (x == null) {
      return null;
    } else {
      return x.constructor;
    }
  };
  handlers.padZeros = function(n, m) {
    var s = n.toString();
    for (var i = s.length;i < m;i++) {
      s = "0" + s;
    }
    return s;
  };
  handlers.stringableKeys = function(m) {
    var stringable = false, ks = util.objectKeys(m);
    for (var i = 0;i < ks.length;i++) {
    }
    return true;
  };
  handlers.NilHandler = function() {
  };
  handlers.NilHandler.prototype.tag = function(v) {
    return "_";
  };
  handlers.NilHandler.prototype.rep = function(v) {
    return null;
  };
  handlers.NilHandler.prototype.stringRep = function(v) {
    return "null";
  };
  handlers.StringHandler = function() {
  };
  handlers.StringHandler.prototype.tag = function(v) {
    return "s";
  };
  handlers.StringHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.StringHandler.prototype.stringRep = function(v) {
    return v;
  };
  handlers.NumberHandler = function() {
  };
  handlers.NumberHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.NumberHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.NumberHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler = function() {
  };
  handlers.IntegerHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.IntegerHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.BooleanHandler = function() {
  };
  handlers.BooleanHandler.prototype.tag = function(v) {
    return "?";
  };
  handlers.BooleanHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.BooleanHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.ArrayHandler = function() {
  };
  handlers.ArrayHandler.prototype.tag = function(v) {
    return "array";
  };
  handlers.ArrayHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.ArrayHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.MapHandler = function() {
  };
  handlers.MapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.MapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.MapHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.VerboseDateHandler = function() {
  };
  handlers.VerboseDateHandler.prototype.tag = function(v) {
    return "t";
  };
  handlers.VerboseDateHandler.prototype.rep = function(v) {
    return v.getUTCFullYear() + "-" + handlers.padZeros(v.getUTCMonth() + 1, 2) + "-" + handlers.padZeros(v.getUTCDate(), 2) + "T" + handlers.padZeros(v.getUTCHours(), 2) + ":" + handlers.padZeros(v.getUTCMinutes(), 2) + ":" + handlers.padZeros(v.getUTCSeconds(), 2) + "." + handlers.padZeros(v.getUTCMilliseconds(), 3) + "Z";
  };
  handlers.VerboseDateHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.DateHandler = function() {
  };
  handlers.DateHandler.prototype.tag = function(v) {
    return "m";
  };
  handlers.DateHandler.prototype.rep = function(v) {
    return v.valueOf();
  };
  handlers.DateHandler.prototype.stringRep = function(v) {
    return v.valueOf().toString();
  };
  handlers.DateHandler.prototype.getVerboseHandler = function(v) {
    return new handlers.VerboseDateHandler;
  };
  handlers.UUIDHandler = function() {
  };
  handlers.UUIDHandler.prototype.tag = function(v) {
    return "u";
  };
  handlers.UUIDHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.UUIDHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.KeywordHandler = function() {
  };
  handlers.KeywordHandler.prototype.tag = function(v) {
    return ":";
  };
  handlers.KeywordHandler.prototype.rep = function(v) {
    return v.name;
  };
  handlers.KeywordHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.SymbolHandler = function() {
  };
  handlers.SymbolHandler.prototype.tag = function(v) {
    return "$";
  };
  handlers.SymbolHandler.prototype.rep = function(v) {
    return v.name;
  };
  handlers.SymbolHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.TaggedHandler = function() {
  };
  handlers.TaggedHandler.prototype.tag = function(v) {
    return v.tag;
  };
  handlers.TaggedHandler.prototype.rep = function(v) {
    return v.rep;
  };
  handlers.TaggedHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitSetHandler = function() {
  };
  handlers.TransitSetHandler.prototype.tag = function(v) {
    return "set";
  };
  handlers.TransitSetHandler.prototype.rep = function(v) {
    var arr = [];
    v.forEach(function(key, set) {
      arr.push(key);
    });
    return types.taggedValue("array", arr);
  };
  handlers.TransitSetHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitArrayMapHandler = function() {
  };
  handlers.TransitArrayMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitArrayMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitArrayMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitMapHandler = function() {
  };
  handlers.TransitMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.BufferHandler = function() {
  };
  handlers.BufferHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.BufferHandler.prototype.rep = function(v) {
    return v.toString("base64");
  };
  handlers.BufferHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.Uint8ArrayHandler = function() {
  };
  handlers.Uint8ArrayHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.Uint8ArrayHandler.prototype.rep = function(v) {
    return util.Uint8ToBase64(v);
  };
  handlers.Uint8ArrayHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.defaultHandlers = function(hs) {
    hs.set(null, new handlers.NilHandler);
    hs.set(String, new handlers.StringHandler);
    hs.set(Number, new handlers.NumberHandler);
    hs.set(Long, new handlers.IntegerHandler);
    hs.set(Boolean, new handlers.BooleanHandler);
    hs.set(Array, new handlers.ArrayHandler);
    hs.set(Object, new handlers.MapHandler);
    hs.set(Date, new handlers.DateHandler);
    hs.set(types.UUID, new handlers.UUIDHandler);
    hs.set(types.Keyword, new handlers.KeywordHandler);
    hs.set(types.Symbol, new handlers.SymbolHandler);
    hs.set(types.TaggedValue, new handlers.TaggedHandler);
    hs.set(types.TransitSet, new handlers.TransitSetHandler);
    hs.set(types.TransitArrayMap, new handlers.TransitArrayMapHandler);
    hs.set(types.TransitMap, new handlers.TransitMapHandler);
    if (typeof Buffer != "undefined") {
      hs.set(Buffer, new handlers.BufferHandler);
    }
    if (typeof Uint8Array != "undefined") {
      hs.set(Uint8Array, new handlers.Uint8ArrayHandler);
    }
    return hs;
  };
  handlers.Handlers = function() {
    this.handlers = {};
    handlers.defaultHandlers(this);
  };
  handlers.Handlers.prototype.get = function(ctor) {
    var h = null;
    if (typeof ctor === "string") {
      h = this.handlers[ctor];
    } else {
      h = this.handlers[handlers.typeTag(ctor)];
    }
    if (h != null) {
      return h;
    } else {
      return this.handlers["default"];
    }
  };
  handlers.Handlers.prototype["get"] = handlers.Handlers.prototype.get;
  handlers.validTag = function(tag) {
    switch(tag) {
      case "null":
      ;
      case "string":
      ;
      case "boolean":
      ;
      case "number":
      ;
      case "array":
      ;
      case "map":
        return false;
        break;
    }
    return true;
  };
  handlers.Handlers.prototype.set = function(ctor, handler) {
    if (typeof ctor === "string" && handlers.validTag(ctor)) {
      this.handlers[ctor] = handler;
    } else {
      this.handlers[handlers.typeTag(ctor)] = handler;
    }
  };
});
goog.provide("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.delimiters");
goog.require("goog.math.Long");
goog.scope(function() {
  var writer = com.cognitect.transit.impl.writer, util = com.cognitect.transit.util, caching = com.cognitect.transit.caching, handlers = com.cognitect.transit.handlers, types = com.cognitect.transit.types, d = com.cognitect.transit.delimiters, Long = goog.math.Long;
  writer.escape = function(string) {
    if (string.length > 0) {
      var c = string.charAt(0);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return d.ESC + string;
      } else {
        return string;
      }
    } else {
      return string;
    }
  };
  writer.JSONMarshaller = function(opts) {
    this.opts = opts || {};
    this.preferStrings = this.opts["preferStrings"] != null ? this.opts["preferStrings"] : true;
    this.objectBuilder = this.opts["objectBuilder"] || null;
    this.handlers = new handlers.Handlers;
    var optsHandlers = this.opts["handlers"];
    if (optsHandlers) {
      if (util.isArray(optsHandlers) || !optsHandlers.forEach) {
        throw new Error('transit writer "handlers" option must be a map');
      }
      var self = this;
      optsHandlers.forEach(function(v, k) {
        self.handlers.set(k, v);
      });
    }
    this.handlerForForeign = this.opts["handlerForForeign"];
    this.unpack = this.opts["unpack"] || function(x) {
      if (types.isArrayMap(x) && x.backingMap === null) {
        return x._entries;
      } else {
        return false;
      }
    };
    this.verbose = this.opts && this.opts["verbose"] || false;
  };
  writer.JSONMarshaller.prototype.handler = function(obj) {
    var h = this.handlers.get(handlers.constructor(obj));
    if (h != null) {
      return h;
    } else {
      var tag = obj && obj["transitTag"];
      if (tag) {
        return this.handlers.get(tag);
      } else {
        return null;
      }
    }
  };
  writer.JSONMarshaller.prototype.registerHandler = function(ctor, handler) {
    this.handlers.set(ctor, handler);
  };
  writer.JSONMarshaller.prototype.emitNil = function(asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "_", "", asMapKey, cache);
    } else {
      return null;
    }
  };
  writer.JSONMarshaller.prototype.emitString = function(prefix, tag, s, asMapKey, cache) {
    var string = prefix + tag + s;
    if (cache) {
      return cache.write(string, asMapKey);
    } else {
      return string;
    }
  };
  writer.JSONMarshaller.prototype.emitBoolean = function(b, asMapKey, cache) {
    if (asMapKey) {
      var s = b.toString();
      return this.emitString(d.ESC, "?", s[0], asMapKey, cache);
    } else {
      return b;
    }
  };
  writer.JSONMarshaller.prototype.emitInteger = function(i, asMapKey, cache) {
    if (i === Infinity) {
      return this.emitString(d.ESC, "z", "INF", asMapKey, cache);
    } else {
      if (i === -Infinity) {
        return this.emitString(d.ESC, "z", "-INF", asMapKey, cache);
      } else {
        if (isNaN(i)) {
          return this.emitString(d.ESC, "z", "NaN", asMapKey, cache);
        } else {
          if (asMapKey || typeof i === "string" || i instanceof Long) {
            return this.emitString(d.ESC, "i", i.toString(), asMapKey, cache);
          } else {
            return i;
          }
        }
      }
    }
  };
  writer.JSONMarshaller.prototype.emitDouble = function(d, asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "d", d, asMapKey, cache);
    } else {
      return d;
    }
  };
  writer.JSONMarshaller.prototype.emitBinary = function(b, asMapKey, cache) {
    return this.emitString(d.ESC, "b", b, asMapKey, cache);
  };
  writer.JSONMarshaller.prototype.emitQuoted = function(em, obj, cache) {
    if (em.verbose) {
      var ret = {}, k = this.emitString(d.ESC_TAG, "'", "", true, cache);
      ret[k] = writer.marshal(this, obj, false, cache);
      return ret;
    } else {
      return[this.emitString(d.ESC_TAG, "'", "", true, cache), writer.marshal(this, obj, false, cache)];
    }
  };
  writer.emitObjects = function(em, iterable, cache) {
    var ret = [];
    if (util.isArray(iterable)) {
      for (var i = 0;i < iterable.length;i++) {
        ret.push(writer.marshal(em, iterable[i], false, cache));
      }
    } else {
      iterable.forEach(function(v, i) {
        ret.push(writer.marshal(em, v, false, cache));
      });
    }
    return ret;
  };
  writer.emitArray = function(em, iterable, skip, cache) {
    return writer.emitObjects(em, iterable, cache);
  };
  writer.isStringableKey = function(em, k) {
    if (typeof k !== "string") {
      var h = em.handler(k);
      return h && h.tag(k).length === 1;
    } else {
      return true;
    }
  };
  writer.stringableKeys = function(em, obj) {
    var arr = em.unpack(obj), stringableKeys = true;
    if (arr) {
      for (var i = 0;i < arr.length;i += 2) {
        stringableKeys = writer.isStringableKey(em, arr[i]);
        if (!stringableKeys) {
          break;
        }
      }
      return stringableKeys;
    } else {
      if (obj.keys) {
        var iter = obj.keys(), step = null;
        if (iter.next) {
          step = iter.next();
          while (!step.done) {
            stringableKeys = writer.isStringableKey(em, step.value);
            if (!stringableKeys) {
              break;
            }
            step = iter.next();
          }
          return stringableKeys;
        }
      }
    }
    if (obj.forEach) {
      obj.forEach(function(v, k) {
        stringableKeys = stringableKeys && writer.isStringableKey(em, k);
      });
      return stringableKeys;
    } else {
      throw new Error("Cannot walk keys of object type " + handlers.constructor(obj).name);
    }
  };
  writer.isForeignObject = function(x) {
    if (x.constructor["transit$isObject"]) {
      return true;
    }
    var ret = x.constructor.toString(), ret = ret.substr("function ".length), ret = ret.substr(0, ret.indexOf("(")), isObject = ret == "Object";
    if (typeof Object.defineProperty != "undefined") {
      Object.defineProperty(x.constructor, "transit$isObject", {value:isObject, enumerable:false});
    } else {
      x.constructor["transit$isObject"] = isObject;
    }
    return isObject;
  };
  writer.emitMap = function(em, obj, skip, cache) {
    if (obj.constructor === Object || obj.forEach != null || em.handlerForForeign && writer.isForeignObject(obj)) {
      if (em.verbose) {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var ret = {};
            obj.forEach(function(v, k) {
              ret[writer.marshal(em, k, true, false)] = writer.marshal(em, v, false, cache);
            });
            return ret;
          } else {
            var arr = em.unpack(obj), rep = [], tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], true, false));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, true, false));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            var ret = {};
            ret[tag] = rep;
            return ret;
          }
        } else {
          var ret = {}, ks = util.objectKeys(obj);
          for (var i = 0;i < ks.length;i++) {
            ret[writer.marshal(em, ks[i], true, false)] = writer.marshal(em, obj[ks[i]], false, cache);
          }
          return ret;
        }
      } else {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var arr = em.unpack(obj), ret = ["^ "];
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                ret.push(writer.marshal(em, arr[i], true, cache));
                ret.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                ret.push(writer.marshal(em, k, true, cache));
                ret.push(writer.marshal(em, v, false, cache));
              });
            }
            return ret;
          } else {
            var arr = em.unpack(obj), rep = [], tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], true, cache));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, true, cache));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            return[tag, rep];
          }
        } else {
          var ret = ["^ "], ks = util.objectKeys(obj);
          for (var i = 0;i < ks.length;i++) {
            ret.push(writer.marshal(em, ks[i], true, cache));
            ret.push(writer.marshal(em, obj[ks[i]], false, cache));
          }
          return ret;
        }
      }
    } else {
      if (em.objectBuilder != null) {
        return em.objectBuilder(obj, function(k) {
          return writer.marshal(em, k, true, cache);
        }, function(v) {
          return writer.marshal(em, v, false, cache);
        });
      } else {
        var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
        err.data = {obj:obj, type:name};
        throw err;
      }
    }
  };
  writer.emitTaggedMap = function(em, tag, rep, skip, cache) {
    if (em.verbose) {
      var ret = {};
      ret[em.emitString(d.ESC_TAG, tag, "", true, cache)] = writer.marshal(em, rep, false, cache);
      return ret;
    } else {
      return[em.emitString(d.ESC_TAG, tag, "", true, cache), writer.marshal(em, rep, false, cache)];
    }
  };
  writer.emitEncoded = function(em, h, tag, rep, obj, asMapKey, cache) {
    if (tag.length === 1) {
      if (typeof rep === "string") {
        return em.emitString(d.ESC, tag, rep, asMapKey, cache);
      } else {
        if (asMapKey || em.preferStrings) {
          var vh = em.verbose && h.getVerboseHandler();
          if (vh) {
            tag = vh.tag(obj);
            rep = vh.stringRep(obj, vh);
          } else {
            rep = h.stringRep(obj, h);
          }
          if (rep !== null) {
            return em.emitString(d.ESC, tag, rep, asMapKey, cache);
          } else {
            var err = new Error('Tag "' + tag + '" cannot be encoded as string');
            err.data = {tag:tag, rep:rep, obj:obj};
            throw err;
          }
        } else {
          return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
        }
      }
    } else {
      return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
    }
  };
  writer.marshal = function(em, obj, asMapKey, cache) {
    var h = em.handler(obj) || (em.handlerForForeign ? em.handlerForForeign(obj, em.handlers) : null), tag = h ? h.tag(obj) : null, rep = h ? h.rep(obj) : null;
    if (h != null && tag != null) {
      switch(tag) {
        case "_":
          return em.emitNil(asMapKey, cache);
          break;
        case "s":
          return em.emitString("", "", writer.escape(rep), asMapKey, cache);
          break;
        case "?":
          return em.emitBoolean(rep, asMapKey, cache);
          break;
        case "i":
          return em.emitInteger(rep, asMapKey, cache);
          break;
        case "d":
          return em.emitDouble(rep, asMapKey, cache);
          break;
        case "b":
          return em.emitBinary(rep, asMapKey, cache);
          break;
        case "'":
          return em.emitQuoted(em, rep, cache);
          break;
        case "array":
          return writer.emitArray(em, rep, asMapKey, cache);
          break;
        case "map":
          return writer.emitMap(em, rep, asMapKey, cache);
          break;
        default:
          return writer.emitEncoded(em, h, tag, rep, obj, asMapKey, cache);
          break;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.maybeQuoted = function(em, obj) {
    var h = em.handler(obj) || (em.handlerForForeign ? em.handlerForForeign(obj, em.handlers) : null);
    if (h != null) {
      if (h.tag(obj).length === 1) {
        return types.quoted(obj);
      } else {
        return obj;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.marshalTop = function(em, obj, asMapKey, cache) {
    return JSON.stringify(writer.marshal(em, writer.maybeQuoted(em, obj), asMapKey, cache));
  };
  writer.Writer = function(marshaller, options) {
    this._marshaller = marshaller;
    this.options = options || {};
    if (this.options["cache"] === false) {
      this.cache = null;
    } else {
      this.cache = this.options["cache"] ? this.options["cache"] : new caching.WriteCache;
    }
  };
  writer.Writer.prototype.marshaller = function() {
    return this._marshaller;
  };
  writer.Writer.prototype["marshaller"] = writer.Writer.prototype.marshaller;
  writer.Writer.prototype.write = function(obj, opts) {
    var ret = null, ropts = opts || {}, asMapKey = ropts["asMapKey"] || false, cache = this._marshaller.verbose ? false : this.cache;
    if (ropts["marshalTop"] === false) {
      ret = writer.marshal(this._marshaller, obj, asMapKey, cache);
    } else {
      ret = writer.marshalTop(this._marshaller, obj, asMapKey, cache);
    }
    if (this.cache != null) {
      this.cache.clear();
    }
    return ret;
  };
  writer.Writer.prototype["write"] = writer.Writer.prototype.write;
  writer.Writer.prototype.register = function(type, handler) {
    this._marshaller.registerHandler(type, handler);
  };
  writer.Writer.prototype["register"] = writer.Writer.prototype.register;
});
goog.provide("com.cognitect.transit");
goog.require("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
var TRANSIT_DEV = true;
var TRANSIT_NODE_TARGET = false;
var TRANSIT_BROWSER_TARGET = false;
var TRANSIT_BROWSER_AMD_TARGET = false;
goog.scope(function() {
  var transit = com.cognitect.transit;
  var reader = com.cognitect.transit.impl.reader, writer = com.cognitect.transit.impl.writer, decoder = com.cognitect.transit.impl.decoder, types = com.cognitect.transit.types, eq = com.cognitect.transit.eq, caching = com.cognitect.transit.caching;
  transit.reader = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      type = "json";
      var unmarshaller = new reader.JSONUnmarshaller(opts);
      return new reader.Reader(unmarshaller, opts);
    } else {
      throw new Error("Cannot create reader of type " + type);
    }
  };
  transit.writer = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      if (type === "json-verbose") {
        if (opts == null) {
          opts = {};
        }
        opts["verbose"] = true;
      }
      type = "json";
      var marshaller = new writer.JSONMarshaller(opts);
      return new writer.Writer(marshaller, opts);
    } else {
      var err = new Error('Type must be "json"');
      err.data = {type:type};
      throw err;
    }
  };
  transit.makeWriteHandler = function(obj) {
    var Handler = function() {
    };
    Handler.prototype.tag = obj["tag"];
    Handler.prototype.rep = obj["rep"];
    Handler.prototype.stringRep = obj["stringRep"];
    Handler.prototype.getVerboseHandler = obj["getVerboseHandler"];
    return new Handler;
  };
  transit.makeBuilder = function(obj) {
    var Builder = function() {
    };
    Builder.prototype.init = obj["init"];
    Builder.prototype.add = obj["add"];
    Builder.prototype.finalize = obj["finalize"];
    Builder.prototype.fromArray = obj["fromArray"];
    return new Builder;
  };
  transit.date = types.date;
  transit.integer = types.intValue;
  transit.isInteger = types.isInteger;
  transit.uuid = types.uuid;
  transit.isUUID = types.isUUID;
  transit.bigInt = types.bigInteger;
  transit.isBigInt = types.isBigInteger;
  transit.bigDec = types.bigDecimalValue;
  transit.isBigDec = types.isBigDecimal;
  transit.keyword = types.keyword;
  transit.isKeyword = types.isKeyword;
  transit.symbol = types.symbol;
  transit.isSymbol = types.isSymbol;
  transit.binary = types.binary;
  transit.isBinary = types.isBinary;
  transit.uri = types.uri;
  transit.isURI = types.isURI;
  transit.map = types.map;
  transit.isMap = types.isMap;
  transit.set = types.set;
  transit.isSet = types.isSet;
  transit.list = types.list;
  transit.isList = types.isList;
  transit.quoted = types.quoted;
  transit.isQuoted = types.isQuoted;
  transit.tagged = types.taggedValue;
  transit.isTaggedValue = types.isTaggedValue;
  transit.link = types.link;
  transit.isLink = types.isLink;
  transit.hash = eq.hashCode;
  transit.hashMapLike = eq.hashMapLike;
  transit.hashMapLike = eq.hashArrayLike;
  transit.equals = eq.equals;
  transit.extendToEQ = eq.extendToEQ;
  transit.mapToObject = function(m) {
    var ret = {};
    m.forEach(function(v, k) {
      if (typeof k !== "string") {
        throw Error("Cannot convert map with non-string keys");
      } else {
        ret[k] = v;
      }
    });
    return ret;
  };
  transit.decoder = decoder.decoder;
  transit.readCache = caching.readCache;
  transit.writeCache = caching.writeCache;
  transit.UUIDfromString = types.UUIDfromString;
  transit.randomUUID = types.randomUUID;
  transit.stringableKeys = writer.stringableKeys;
  if (TRANSIT_BROWSER_TARGET) {
    goog.exportSymbol("transit.reader", transit.reader);
    goog.exportSymbol("transit.writer", transit.writer);
    goog.exportSymbol("transit.makeBuilder", transit.makeBuilder);
    goog.exportSymbol("transit.makeWriteHandler", transit.makeWriteHandler);
    goog.exportSymbol("transit.date", types.date);
    goog.exportSymbol("transit.integer", types.intValue);
    goog.exportSymbol("transit.isInteger", types.isInteger);
    goog.exportSymbol("transit.uuid", types.uuid);
    goog.exportSymbol("transit.isUUID", types.isUUID);
    goog.exportSymbol("transit.bigInt", types.bigInteger);
    goog.exportSymbol("transit.isBigInt", types.isBigInteger);
    goog.exportSymbol("transit.bigDec", types.bigDecimalValue);
    goog.exportSymbol("transit.isBigDec", types.isBigDecimal);
    goog.exportSymbol("transit.keyword", types.keyword);
    goog.exportSymbol("transit.isKeyword", types.isKeyword);
    goog.exportSymbol("transit.symbol", types.symbol);
    goog.exportSymbol("transit.isSymbol", types.isSymbol);
    goog.exportSymbol("transit.binary", types.binary);
    goog.exportSymbol("transit.isBinary", types.isBinary);
    goog.exportSymbol("transit.uri", types.uri);
    goog.exportSymbol("transit.isURI", types.isURI);
    goog.exportSymbol("transit.map", types.map);
    goog.exportSymbol("transit.isMap", types.isMap);
    goog.exportSymbol("transit.set", types.set);
    goog.exportSymbol("transit.isSet", types.isSet);
    goog.exportSymbol("transit.list", types.list);
    goog.exportSymbol("transit.isList", types.isList);
    goog.exportSymbol("transit.quoted", types.quoted);
    goog.exportSymbol("transit.isQuoted", types.isQuoted);
    goog.exportSymbol("transit.tagged", types.taggedValue);
    goog.exportSymbol("transit.isTaggedValue", types.isTaggedValue);
    goog.exportSymbol("transit.link", types.link);
    goog.exportSymbol("transit.isLink", types.isLink);
    goog.exportSymbol("transit.hash", eq.hashCode);
    goog.exportSymbol("transit.hashMapLike", eq.hashMapLike);
    goog.exportSymbol("transit.hashArrayLike", eq.hashArrayLike);
    goog.exportSymbol("transit.equals", eq.equals);
    goog.exportSymbol("transit.extendToEQ", eq.extendToEQ);
    goog.exportSymbol("transit.mapToObject", transit.mapToObject);
    goog.exportSymbol("transit.decoder", decoder.decoder);
    goog.exportSymbol("transit.UUIDfromString", types.UUIDfromString);
    goog.exportSymbol("transit.randomUUID", types.randomUUID);
    goog.exportSymbol("transit.stringableKeys", writer.stringableKeys);
    goog.exportSymbol("transit.readCache", caching.readCache);
    goog.exportSymbol("transit.writeCache", caching.writeCache);
  }
  if (TRANSIT_NODE_TARGET) {
    module.exports = {reader:transit.reader, writer:transit.writer, makeBuilder:transit.makeBuilder, makeWriteHandler:transit.makeWriteHandler, date:types.date, integer:types.intValue, isInteger:types.isInteger, uuid:types.uuid, isUUID:types.isUUID, bigInt:types.bigInteger, isBigInt:types.isBigInteger, bigDec:types.bigDecimalValue, isBigDec:types.isBigDecimal, keyword:types.keyword, isKeyword:types.isKeyword, symbol:types.symbol, isSymbol:types.isSymbol, binary:types.binary, isBinary:types.isBinary, 
    uri:types.uri, isURI:types.isURI, map:types.map, isMap:types.isMap, set:types.set, isSet:types.isSet, list:types.list, isList:types.isList, quoted:types.quoted, isQuoted:types.isQuoted, tagged:types.taggedValue, isTaggedValue:types.isTaggedValue, link:types.link, isLink:types.isLink, hash:eq.hashCode, hashArrayLike:eq.hashArrayLike, hashMapLike:eq.hashMapLike, equals:eq.equals, extendToEQ:eq.extendToEQ, mapToObject:transit.mapToObject, decoder:decoder.decoder, UUIDfromString:types.UUIDfromString, 
    randomUUID:types.randomUUID, stringableKeys:writer.stringableKeys, readCache:caching.readCache, writeCache:caching.writeCache};
  }
});
goog.provide("cognitect.transit");
goog.require("cljs.core");
goog.require("goog.math.Long");
goog.require("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit");
cljs.core.UUID.prototype.cljs$core$IEquiv$ = true;
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return this$__$1.uuid === other.uuid;
  } else {
    if (other instanceof com.cognitect.transit.types.UUID) {
      return this$__$1.uuid === other.toString();
    } else {
      return false;
    }
  }
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return cljs.core._equiv.call(null, other, this$__$1);
  } else {
    return this$__$1.equiv(other);
  }
};
goog.math.Long.prototype.cljs$core$IEquiv$ = true;
goog.math.Long.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
goog.math.Long.prototype.cljs$core$IHash$ = true;
goog.math.Long.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IPrintWithWriter$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(uuid, writer, _) {
  var uuid__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(uuid__$1.toString()), cljs.core.str('"')].join(""));
};
cognitect.transit.opts_merge = function cognitect$transit$opts_merge(a, b) {
  var seq__12250_12254 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, b));
  var chunk__12251_12255 = null;
  var count__12252_12256 = 0;
  var i__12253_12257 = 0;
  while (true) {
    if (i__12253_12257 < count__12252_12256) {
      var k_12258 = cljs.core._nth.call(null, chunk__12251_12255, i__12253_12257);
      var v_12259 = b[k_12258];
      a[k_12258] = v_12259;
      var G__12260 = seq__12250_12254;
      var G__12261 = chunk__12251_12255;
      var G__12262 = count__12252_12256;
      var G__12263 = i__12253_12257 + 1;
      seq__12250_12254 = G__12260;
      chunk__12251_12255 = G__12261;
      count__12252_12256 = G__12262;
      i__12253_12257 = G__12263;
      continue;
    } else {
      var temp__4126__auto___12264 = cljs.core.seq.call(null, seq__12250_12254);
      if (temp__4126__auto___12264) {
        var seq__12250_12265__$1 = temp__4126__auto___12264;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12250_12265__$1)) {
          var c__4894__auto___12266 = cljs.core.chunk_first.call(null, seq__12250_12265__$1);
          var G__12267 = cljs.core.chunk_rest.call(null, seq__12250_12265__$1);
          var G__12268 = c__4894__auto___12266;
          var G__12269 = cljs.core.count.call(null, c__4894__auto___12266);
          var G__12270 = 0;
          seq__12250_12254 = G__12267;
          chunk__12251_12255 = G__12268;
          count__12252_12256 = G__12269;
          i__12253_12257 = G__12270;
          continue;
        } else {
          var k_12271 = cljs.core.first.call(null, seq__12250_12265__$1);
          var v_12272 = b[k_12271];
          a[k_12271] = v_12272;
          var G__12273 = cljs.core.next.call(null, seq__12250_12265__$1);
          var G__12274 = null;
          var G__12275 = 0;
          var G__12276 = 0;
          seq__12250_12254 = G__12273;
          chunk__12251_12255 = G__12274;
          count__12252_12256 = G__12275;
          i__12253_12257 = G__12276;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return a;
};
cognitect.transit.MapBuilder = function() {
};
cognitect.transit.MapBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
};
cognitect.transit.MapBuilder.prototype.add = function(m, k, v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.assoc_BANG_.call(null, m, k, v);
};
cognitect.transit.MapBuilder.prototype.finalize = function(m, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, m);
};
cognitect.transit.MapBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentArrayMap.fromArray.call(null, arr, true, true);
};
cognitect.transit.MapBuilder.cljs$lang$type = true;
cognitect.transit.MapBuilder.cljs$lang$ctorStr = "cognitect.transit/MapBuilder";
cognitect.transit.MapBuilder.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write.call(null, writer__4689__auto__, "cognitect.transit/MapBuilder");
};
cognitect.transit.__GT_MapBuilder = function cognitect$transit$__GT_MapBuilder() {
  return new cognitect.transit.MapBuilder;
};
cognitect.transit.VectorBuilder = function() {
};
cognitect.transit.VectorBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
};
cognitect.transit.VectorBuilder.prototype.add = function(v, x, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.conj_BANG_.call(null, v, x);
};
cognitect.transit.VectorBuilder.prototype.finalize = function(v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, v);
};
cognitect.transit.VectorBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentVector.fromArray.call(null, arr, true);
};
cognitect.transit.VectorBuilder.cljs$lang$type = true;
cognitect.transit.VectorBuilder.cljs$lang$ctorStr = "cognitect.transit/VectorBuilder";
cognitect.transit.VectorBuilder.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write.call(null, writer__4689__auto__, "cognitect.transit/VectorBuilder");
};
cognitect.transit.__GT_VectorBuilder = function cognitect$transit$__GT_VectorBuilder() {
  return new cognitect.transit.VectorBuilder;
};
cognitect.transit.reader = function() {
  var cognitect$transit$reader = null;
  var cognitect$transit$reader__1 = function(type) {
    return cognitect$transit$reader.call(null, type, null);
  };
  var cognitect$transit$reader__2 = function(type, opts) {
    return com.cognitect.transit.reader.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"prefersStrings":false, "arrayBuilder":new cognitect.transit.VectorBuilder, "mapBuilder":new cognitect.transit.MapBuilder, "handlers":cljs.core.clj__GT_js.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, ["$", function(v) {
      return cljs.core.symbol.call(null, v);
    }, ":", function(v) {
      return cljs.core.keyword.call(null, v);
    }, "set", function(v) {
      return cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, v);
    }, "list", function(v) {
      return cljs.core.into.call(null, cljs.core.List.EMPTY, v.reverse());
    }, "cmap", function(v) {
      var i = 0;
      var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
      while (true) {
        if (i < v.length) {
          var G__12277 = i + 2;
          var G__12278 = cljs.core.assoc_BANG_.call(null, ret, v[i], v[i + 1]);
          i = G__12277;
          ret = G__12278;
          continue;
        } else {
          return cljs.core.persistent_BANG_.call(null, ret);
        }
        break;
      }
    }], null), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts)))}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
  };
  cognitect$transit$reader = function(type, opts) {
    switch(arguments.length) {
      case 1:
        return cognitect$transit$reader__1.call(this, type);
      case 2:
        return cognitect$transit$reader__2.call(this, type, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cognitect$transit$reader.cljs$core$IFn$_invoke$arity$1 = cognitect$transit$reader__1;
  cognitect$transit$reader.cljs$core$IFn$_invoke$arity$2 = cognitect$transit$reader__2;
  return cognitect$transit$reader;
}();
cognitect.transit.read = function cognitect$transit$read(r, str) {
  return r.read(str);
};
cognitect.transit.KeywordHandler = function() {
};
cognitect.transit.KeywordHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return ":";
};
cognitect.transit.KeywordHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.cljs$lang$type = true;
cognitect.transit.KeywordHandler.cljs$lang$ctorStr = "cognitect.transit/KeywordHandler";
cognitect.transit.KeywordHandler.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write.call(null, writer__4689__auto__, "cognitect.transit/KeywordHandler");
};
cognitect.transit.__GT_KeywordHandler = function cognitect$transit$__GT_KeywordHandler() {
  return new cognitect.transit.KeywordHandler;
};
cognitect.transit.SymbolHandler = function() {
};
cognitect.transit.SymbolHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "$";
};
cognitect.transit.SymbolHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.cljs$lang$type = true;
cognitect.transit.SymbolHandler.cljs$lang$ctorStr = "cognitect.transit/SymbolHandler";
cognitect.transit.SymbolHandler.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write.call(null, writer__4689__auto__, "cognitect.transit/SymbolHandler");
};
cognitect.transit.__GT_SymbolHandler = function cognitect$transit$__GT_SymbolHandler() {
  return new cognitect.transit.SymbolHandler;
};
cognitect.transit.ListHandler = function() {
};
cognitect.transit.ListHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "list";
};
cognitect.transit.ListHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__12279_12283 = cljs.core.seq.call(null, v);
  var chunk__12280_12284 = null;
  var count__12281_12285 = 0;
  var i__12282_12286 = 0;
  while (true) {
    if (i__12282_12286 < count__12281_12285) {
      var x_12287 = cljs.core._nth.call(null, chunk__12280_12284, i__12282_12286);
      ret.push(x_12287);
      var G__12288 = seq__12279_12283;
      var G__12289 = chunk__12280_12284;
      var G__12290 = count__12281_12285;
      var G__12291 = i__12282_12286 + 1;
      seq__12279_12283 = G__12288;
      chunk__12280_12284 = G__12289;
      count__12281_12285 = G__12290;
      i__12282_12286 = G__12291;
      continue;
    } else {
      var temp__4126__auto___12292 = cljs.core.seq.call(null, seq__12279_12283);
      if (temp__4126__auto___12292) {
        var seq__12279_12293__$1 = temp__4126__auto___12292;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12279_12293__$1)) {
          var c__4894__auto___12294 = cljs.core.chunk_first.call(null, seq__12279_12293__$1);
          var G__12295 = cljs.core.chunk_rest.call(null, seq__12279_12293__$1);
          var G__12296 = c__4894__auto___12294;
          var G__12297 = cljs.core.count.call(null, c__4894__auto___12294);
          var G__12298 = 0;
          seq__12279_12283 = G__12295;
          chunk__12280_12284 = G__12296;
          count__12281_12285 = G__12297;
          i__12282_12286 = G__12298;
          continue;
        } else {
          var x_12299 = cljs.core.first.call(null, seq__12279_12293__$1);
          ret.push(x_12299);
          var G__12300 = cljs.core.next.call(null, seq__12279_12293__$1);
          var G__12301 = null;
          var G__12302 = 0;
          var G__12303 = 0;
          seq__12279_12283 = G__12300;
          chunk__12280_12284 = G__12301;
          count__12281_12285 = G__12302;
          i__12282_12286 = G__12303;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.ListHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.ListHandler.cljs$lang$type = true;
cognitect.transit.ListHandler.cljs$lang$ctorStr = "cognitect.transit/ListHandler";
cognitect.transit.ListHandler.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write.call(null, writer__4689__auto__, "cognitect.transit/ListHandler");
};
cognitect.transit.__GT_ListHandler = function cognitect$transit$__GT_ListHandler() {
  return new cognitect.transit.ListHandler;
};
cognitect.transit.MapHandler = function() {
};
cognitect.transit.MapHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "map";
};
cognitect.transit.MapHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v;
};
cognitect.transit.MapHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.MapHandler.cljs$lang$type = true;
cognitect.transit.MapHandler.cljs$lang$ctorStr = "cognitect.transit/MapHandler";
cognitect.transit.MapHandler.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write.call(null, writer__4689__auto__, "cognitect.transit/MapHandler");
};
cognitect.transit.__GT_MapHandler = function cognitect$transit$__GT_MapHandler() {
  return new cognitect.transit.MapHandler;
};
cognitect.transit.SetHandler = function() {
};
cognitect.transit.SetHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "set";
};
cognitect.transit.SetHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__12304_12308 = cljs.core.seq.call(null, v);
  var chunk__12305_12309 = null;
  var count__12306_12310 = 0;
  var i__12307_12311 = 0;
  while (true) {
    if (i__12307_12311 < count__12306_12310) {
      var x_12312 = cljs.core._nth.call(null, chunk__12305_12309, i__12307_12311);
      ret.push(x_12312);
      var G__12313 = seq__12304_12308;
      var G__12314 = chunk__12305_12309;
      var G__12315 = count__12306_12310;
      var G__12316 = i__12307_12311 + 1;
      seq__12304_12308 = G__12313;
      chunk__12305_12309 = G__12314;
      count__12306_12310 = G__12315;
      i__12307_12311 = G__12316;
      continue;
    } else {
      var temp__4126__auto___12317 = cljs.core.seq.call(null, seq__12304_12308);
      if (temp__4126__auto___12317) {
        var seq__12304_12318__$1 = temp__4126__auto___12317;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12304_12318__$1)) {
          var c__4894__auto___12319 = cljs.core.chunk_first.call(null, seq__12304_12318__$1);
          var G__12320 = cljs.core.chunk_rest.call(null, seq__12304_12318__$1);
          var G__12321 = c__4894__auto___12319;
          var G__12322 = cljs.core.count.call(null, c__4894__auto___12319);
          var G__12323 = 0;
          seq__12304_12308 = G__12320;
          chunk__12305_12309 = G__12321;
          count__12306_12310 = G__12322;
          i__12307_12311 = G__12323;
          continue;
        } else {
          var x_12324 = cljs.core.first.call(null, seq__12304_12318__$1);
          ret.push(x_12324);
          var G__12325 = cljs.core.next.call(null, seq__12304_12318__$1);
          var G__12326 = null;
          var G__12327 = 0;
          var G__12328 = 0;
          seq__12304_12308 = G__12325;
          chunk__12305_12309 = G__12326;
          count__12306_12310 = G__12327;
          i__12307_12311 = G__12328;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.SetHandler.prototype.stringRep = function() {
  var self__ = this;
  var v = this;
  return null;
};
cognitect.transit.SetHandler.cljs$lang$type = true;
cognitect.transit.SetHandler.cljs$lang$ctorStr = "cognitect.transit/SetHandler";
cognitect.transit.SetHandler.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write.call(null, writer__4689__auto__, "cognitect.transit/SetHandler");
};
cognitect.transit.__GT_SetHandler = function cognitect$transit$__GT_SetHandler() {
  return new cognitect.transit.SetHandler;
};
cognitect.transit.VectorHandler = function() {
};
cognitect.transit.VectorHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "array";
};
cognitect.transit.VectorHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__12329_12333 = cljs.core.seq.call(null, v);
  var chunk__12330_12334 = null;
  var count__12331_12335 = 0;
  var i__12332_12336 = 0;
  while (true) {
    if (i__12332_12336 < count__12331_12335) {
      var x_12337 = cljs.core._nth.call(null, chunk__12330_12334, i__12332_12336);
      ret.push(x_12337);
      var G__12338 = seq__12329_12333;
      var G__12339 = chunk__12330_12334;
      var G__12340 = count__12331_12335;
      var G__12341 = i__12332_12336 + 1;
      seq__12329_12333 = G__12338;
      chunk__12330_12334 = G__12339;
      count__12331_12335 = G__12340;
      i__12332_12336 = G__12341;
      continue;
    } else {
      var temp__4126__auto___12342 = cljs.core.seq.call(null, seq__12329_12333);
      if (temp__4126__auto___12342) {
        var seq__12329_12343__$1 = temp__4126__auto___12342;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12329_12343__$1)) {
          var c__4894__auto___12344 = cljs.core.chunk_first.call(null, seq__12329_12343__$1);
          var G__12345 = cljs.core.chunk_rest.call(null, seq__12329_12343__$1);
          var G__12346 = c__4894__auto___12344;
          var G__12347 = cljs.core.count.call(null, c__4894__auto___12344);
          var G__12348 = 0;
          seq__12329_12333 = G__12345;
          chunk__12330_12334 = G__12346;
          count__12331_12335 = G__12347;
          i__12332_12336 = G__12348;
          continue;
        } else {
          var x_12349 = cljs.core.first.call(null, seq__12329_12343__$1);
          ret.push(x_12349);
          var G__12350 = cljs.core.next.call(null, seq__12329_12343__$1);
          var G__12351 = null;
          var G__12352 = 0;
          var G__12353 = 0;
          seq__12329_12333 = G__12350;
          chunk__12330_12334 = G__12351;
          count__12331_12335 = G__12352;
          i__12332_12336 = G__12353;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return ret;
};
cognitect.transit.VectorHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.VectorHandler.cljs$lang$type = true;
cognitect.transit.VectorHandler.cljs$lang$ctorStr = "cognitect.transit/VectorHandler";
cognitect.transit.VectorHandler.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write.call(null, writer__4689__auto__, "cognitect.transit/VectorHandler");
};
cognitect.transit.__GT_VectorHandler = function cognitect$transit$__GT_VectorHandler() {
  return new cognitect.transit.VectorHandler;
};
cognitect.transit.UUIDHandler = function() {
};
cognitect.transit.UUIDHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "u";
};
cognitect.transit.UUIDHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.uuid;
};
cognitect.transit.UUIDHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var this$ = this;
  return this$.rep(v);
};
cognitect.transit.UUIDHandler.cljs$lang$type = true;
cognitect.transit.UUIDHandler.cljs$lang$ctorStr = "cognitect.transit/UUIDHandler";
cognitect.transit.UUIDHandler.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write.call(null, writer__4689__auto__, "cognitect.transit/UUIDHandler");
};
cognitect.transit.__GT_UUIDHandler = function cognitect$transit$__GT_UUIDHandler() {
  return new cognitect.transit.UUIDHandler;
};
cognitect.transit.writer = function() {
  var cognitect$transit$writer = null;
  var cognitect$transit$writer__1 = function(type) {
    return cognitect$transit$writer.call(null, type, null);
  };
  var cognitect$transit$writer__2 = function(type, opts) {
    var keyword_handler = new cognitect.transit.KeywordHandler;
    var symbol_handler = new cognitect.transit.SymbolHandler;
    var list_handler = new cognitect.transit.ListHandler;
    var map_handler = new cognitect.transit.MapHandler;
    var set_handler = new cognitect.transit.SetHandler;
    var vector_handler = new cognitect.transit.VectorHandler;
    var uuid_handler = new cognitect.transit.UUIDHandler;
    var handlers = cljs.core.merge.call(null, cljs.core.PersistentHashMap.fromArrays([cljs.core.PersistentHashMap, cljs.core.Cons, cljs.core.PersistentArrayMap, cljs.core.NodeSeq, cljs.core.PersistentQueue, cljs.core.IndexedSeq, cljs.core.Keyword, cljs.core.EmptyList, cljs.core.LazySeq, cljs.core.Subvec, cljs.core.PersistentQueueSeq, cljs.core.ArrayNodeSeq, cljs.core.ValSeq, cljs.core.PersistentArrayMapSeq, cljs.core.PersistentVector, cljs.core.List, cljs.core.RSeq, cljs.core.PersistentHashSet, cljs.core.PersistentTreeMap, 
    cljs.core.KeySeq, cljs.core.ChunkedSeq, cljs.core.PersistentTreeSet, cljs.core.ChunkedCons, cljs.core.Symbol, cljs.core.UUID, cljs.core.Range, cljs.core.PersistentTreeMapSeq], [map_handler, list_handler, map_handler, list_handler, list_handler, list_handler, keyword_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, set_handler, map_handler, list_handler, list_handler, set_handler, list_handler, 
    symbol_handler, uuid_handler, list_handler, list_handler]), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts));
    return com.cognitect.transit.writer.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"unpack":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
      return function(x) {
        if (x instanceof cljs.core.PersistentArrayMap) {
          return x.arr;
        } else {
          return false;
        }
      };
    }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), "handlers":function() {
      var x12363 = cljs.core.clone.call(null, handlers);
      x12363.forEach = function(x12363, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
        return function(f) {
          var coll = this;
          var seq__12364 = cljs.core.seq.call(null, coll);
          var chunk__12365 = null;
          var count__12366 = 0;
          var i__12367 = 0;
          while (true) {
            if (i__12367 < count__12366) {
              var vec__12368 = cljs.core._nth.call(null, chunk__12365, i__12367);
              var k = cljs.core.nth.call(null, vec__12368, 0, null);
              var v = cljs.core.nth.call(null, vec__12368, 1, null);
              f.call(null, v, k);
              var G__12370 = seq__12364;
              var G__12371 = chunk__12365;
              var G__12372 = count__12366;
              var G__12373 = i__12367 + 1;
              seq__12364 = G__12370;
              chunk__12365 = G__12371;
              count__12366 = G__12372;
              i__12367 = G__12373;
              continue;
            } else {
              var temp__4126__auto__ = cljs.core.seq.call(null, seq__12364);
              if (temp__4126__auto__) {
                var seq__12364__$1 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__12364__$1)) {
                  var c__4894__auto__ = cljs.core.chunk_first.call(null, seq__12364__$1);
                  var G__12374 = cljs.core.chunk_rest.call(null, seq__12364__$1);
                  var G__12375 = c__4894__auto__;
                  var G__12376 = cljs.core.count.call(null, c__4894__auto__);
                  var G__12377 = 0;
                  seq__12364 = G__12374;
                  chunk__12365 = G__12375;
                  count__12366 = G__12376;
                  i__12367 = G__12377;
                  continue;
                } else {
                  var vec__12369 = cljs.core.first.call(null, seq__12364__$1);
                  var k = cljs.core.nth.call(null, vec__12369, 0, null);
                  var v = cljs.core.nth.call(null, vec__12369, 1, null);
                  f.call(null, v, k);
                  var G__12378 = cljs.core.next.call(null, seq__12364__$1);
                  var G__12379 = null;
                  var G__12380 = 0;
                  var G__12381 = 0;
                  seq__12364 = G__12378;
                  chunk__12365 = G__12379;
                  count__12366 = G__12380;
                  i__12367 = G__12381;
                  continue;
                }
              } else {
                return null;
              }
            }
            break;
          }
        };
      }(x12363, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers);
      return x12363;
    }(), "objectBuilder":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
      return function(m, kfn, vfn) {
        return cljs.core.reduce_kv.call(null, function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
          return function(obj, k, v) {
            var G__12362 = obj;
            G__12362.push(kfn.call(null, k), vfn.call(null, v));
            return G__12362;
          };
        }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), ["^ "], m);
      };
    }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers)}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
  };
  cognitect$transit$writer = function(type, opts) {
    switch(arguments.length) {
      case 1:
        return cognitect$transit$writer__1.call(this, type);
      case 2:
        return cognitect$transit$writer__2.call(this, type, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cognitect$transit$writer.cljs$core$IFn$_invoke$arity$1 = cognitect$transit$writer__1;
  cognitect$transit$writer.cljs$core$IFn$_invoke$arity$2 = cognitect$transit$writer__2;
  return cognitect$transit$writer;
}();
cognitect.transit.write = function cognitect$transit$write(w, o) {
  return w.write(o);
};
cognitect.transit.read_handler = function cognitect$transit$read_handler(from_rep) {
  return from_rep;
};
cognitect.transit.write_handler = function() {
  var cognitect$transit$write_handler = null;
  var cognitect$transit$write_handler__2 = function(tag_fn, rep_fn) {
    return cognitect$transit$write_handler.call(null, tag_fn, rep_fn, null, null);
  };
  var cognitect$transit$write_handler__3 = function(tag_fn, rep_fn, str_rep_fn) {
    return cognitect$transit$write_handler.call(null, tag_fn, rep_fn, str_rep_fn, null);
  };
  var cognitect$transit$write_handler__4 = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn) {
    if (typeof cognitect.transit.t12385 !== "undefined") {
    } else {
      cognitect.transit.t12385 = function(verbose_handler_fn, str_rep_fn, rep_fn, tag_fn, write_handler, meta12386) {
        this.verbose_handler_fn = verbose_handler_fn;
        this.str_rep_fn = str_rep_fn;
        this.rep_fn = rep_fn;
        this.tag_fn = tag_fn;
        this.write_handler = write_handler;
        this.meta12386 = meta12386;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cognitect.transit.t12385.prototype.tag = function(o) {
        var self__ = this;
        var _ = this;
        return self__.tag_fn.call(null, o);
      };
      cognitect.transit.t12385.prototype.rep = function(o) {
        var self__ = this;
        var _ = this;
        return self__.rep_fn.call(null, o);
      };
      cognitect.transit.t12385.prototype.stringRep = function(o) {
        var self__ = this;
        var _ = this;
        if (cljs.core.truth_(self__.str_rep_fn)) {
          return self__.str_rep_fn.call(null, o);
        } else {
          return null;
        }
      };
      cognitect.transit.t12385.prototype.getVerboseHandler = function() {
        var self__ = this;
        var _ = this;
        if (cljs.core.truth_(self__.verbose_handler_fn)) {
          return self__.verbose_handler_fn.call(null);
        } else {
          return null;
        }
      };
      cognitect.transit.t12385.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12387) {
        var self__ = this;
        var _12387__$1 = this;
        return self__.meta12386;
      };
      cognitect.transit.t12385.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12387, meta12386__$1) {
        var self__ = this;
        var _12387__$1 = this;
        return new cognitect.transit.t12385(self__.verbose_handler_fn, self__.str_rep_fn, self__.rep_fn, self__.tag_fn, self__.write_handler, meta12386__$1);
      };
      cognitect.transit.t12385.cljs$lang$type = true;
      cognitect.transit.t12385.cljs$lang$ctorStr = "cognitect.transit/t12385";
      cognitect.transit.t12385.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
        return cljs.core._write.call(null, writer__4689__auto__, "cognitect.transit/t12385");
      };
      cognitect.transit.__GT_t12385 = function cognitect$transit$write_handler_$___GT_t12385(verbose_handler_fn__$1, str_rep_fn__$1, rep_fn__$1, tag_fn__$1, write_handler__$1, meta12386) {
        return new cognitect.transit.t12385(verbose_handler_fn__$1, str_rep_fn__$1, rep_fn__$1, tag_fn__$1, write_handler__$1, meta12386);
      };
    }
    return new cognitect.transit.t12385(verbose_handler_fn, str_rep_fn, rep_fn, tag_fn, cognitect$transit$write_handler, cljs.core.PersistentArrayMap.EMPTY);
  };
  cognitect$transit$write_handler = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn) {
    switch(arguments.length) {
      case 2:
        return cognitect$transit$write_handler__2.call(this, tag_fn, rep_fn);
      case 3:
        return cognitect$transit$write_handler__3.call(this, tag_fn, rep_fn, str_rep_fn);
      case 4:
        return cognitect$transit$write_handler__4.call(this, tag_fn, rep_fn, str_rep_fn, verbose_handler_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cognitect$transit$write_handler.cljs$core$IFn$_invoke$arity$2 = cognitect$transit$write_handler__2;
  cognitect$transit$write_handler.cljs$core$IFn$_invoke$arity$3 = cognitect$transit$write_handler__3;
  cognitect$transit$write_handler.cljs$core$IFn$_invoke$arity$4 = cognitect$transit$write_handler__4;
  return cognitect$transit$write_handler;
}();
cognitect.transit.tagged_value = function cognitect$transit$tagged_value(tag, rep) {
  return com.cognitect.transit.types.taggedValue.call(null, tag, rep);
};
cognitect.transit.tagged_value_QMARK_ = function cognitect$transit$tagged_value_QMARK_(x) {
  return com.cognitect.transit.types.isTaggedValue.call(null, x);
};
cognitect.transit.integer = function cognitect$transit$integer(s) {
  return com.cognitect.transit.types.integer.call(null, s);
};
cognitect.transit.integer_QMARK_ = function cognitect$transit$integer_QMARK_(x) {
  return com.cognitect.transit.types.isInteger.call(null, x);
};
cognitect.transit.bigint = function cognitect$transit$bigint(s) {
  return com.cognitect.transit.types.bigInteger.call(null, s);
};
cognitect.transit.bigint_QMARK_ = function cognitect$transit$bigint_QMARK_(x) {
  return com.cognitect.transit.types.isBigInteger.call(null, x);
};
cognitect.transit.bigdec = function cognitect$transit$bigdec(s) {
  return com.cognitect.transit.types.bigDecimalValue.call(null, s);
};
cognitect.transit.bigdec_QMARK_ = function cognitect$transit$bigdec_QMARK_(x) {
  return com.cognitect.transit.types.isBigDecimal.call(null, x);
};
cognitect.transit.uri = function cognitect$transit$uri(s) {
  return com.cognitect.transit.types.uri.call(null, s);
};
cognitect.transit.uri_QMARK_ = function cognitect$transit$uri_QMARK_(x) {
  return com.cognitect.transit.types.isURI.call(null, x);
};
cognitect.transit.uuid = function cognitect$transit$uuid(s) {
  return com.cognitect.transit.types.uuid.call(null, s);
};
cognitect.transit.uuid_QMARK_ = function cognitect$transit$uuid_QMARK_(x) {
  return com.cognitect.transit.types.isUUID.call(null, x);
};
cognitect.transit.binary = function cognitect$transit$binary(s) {
  return com.cognitect.transit.types.binary.call(null, s);
};
cognitect.transit.binary_QMARK_ = function cognitect$transit$binary_QMARK_(x) {
  return com.cognitect.transit.types.isBinary.call(null, x);
};
cognitect.transit.quoted = function cognitect$transit$quoted(x) {
  return com.cognitect.transit.types.quoted.call(null, x);
};
cognitect.transit.quoted_QMARK_ = function cognitect$transit$quoted_QMARK_(x) {
  return com.cognitect.transit.types.isQuoted.call(null, x);
};
cognitect.transit.link = function cognitect$transit$link(x) {
  return com.cognitect.transit.types.link.call(null, x);
};
cognitect.transit.link_QMARK_ = function cognitect$transit$link_QMARK_(x) {
  return com.cognitect.transit.types.isLink.call(null, x);
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj12113 = {};
  return obj12113;
}();
cljs.reader.read_char = function cljs$reader$read_char(reader) {
  if (function() {
    var and__4097__auto__ = reader;
    if (and__4097__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4745__auto__ = reader == null ? null : reader;
    return function() {
      var or__4109__auto__ = cljs.reader.read_char[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.reader.read_char["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function cljs$reader$unread(reader, ch) {
  if (function() {
    var and__4097__auto__ = reader;
    if (and__4097__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4745__auto__ = reader == null ? null : reader;
    return function() {
      var or__4109__auto__ = cljs.reader.unread[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.reader.unread["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4688__auto__, writer__4689__auto__, opt__4690__auto__) {
  return cljs.core._write.call(null, writer__4689__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.__GT_StringPushbackReader = function cljs$reader$__GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function cljs$reader$push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function cljs$reader$whitespace_QMARK_(ch) {
  var or__4109__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__4109__auto__)) {
    return or__4109__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function cljs$reader$numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function cljs$reader$comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function cljs$reader$number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var cljs$reader$reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var cljs$reader$reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      var G__12114__i = 0, G__12114__a = new Array(arguments.length - 1);
      while (G__12114__i < G__12114__a.length) {
        G__12114__a[G__12114__i] = arguments[G__12114__i + 1];
        ++G__12114__i;
      }
      msg = new cljs.core.IndexedSeq(G__12114__a, 0);
    }
    return cljs$reader$reader_error__delegate.call(this, rdr, msg);
  };
  cljs$reader$reader_error.cljs$lang$maxFixedArity = 1;
  cljs$reader$reader_error.cljs$lang$applyTo = function(arglist__12115) {
    var rdr = cljs.core.first(arglist__12115);
    var msg = cljs.core.rest(arglist__12115);
    return cljs$reader$reader_error__delegate(rdr, msg);
  };
  cljs$reader$reader_error.cljs$core$IFn$_invoke$arity$variadic = cljs$reader$reader_error__delegate;
  return cljs$reader$reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function cljs$reader$macro_terminating_QMARK_(ch) {
  var and__4097__auto__ = !(ch === "#");
  if (and__4097__auto__) {
    var and__4097__auto____$1 = !(ch === "'");
    if (and__4097__auto____$1) {
      var and__4097__auto____$2 = !(ch === ":");
      if (and__4097__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__4097__auto____$2;
      }
    } else {
      return and__4097__auto____$1;
    }
  } else {
    return and__4097__auto__;
  }
};
cljs.reader.read_token = function cljs$reader$read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__12116 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__12117 = cljs.reader.read_char.call(null, rdr);
      sb = G__12116;
      ch = G__12117;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function cljs$reader$skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function cljs$reader$re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function cljs$reader$match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function cljs$reader$match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function cljs$reader$match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function cljs$reader$match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function cljs$reader$escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function cljs$reader$read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function cljs$reader$read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function cljs$reader$validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function cljs$reader$make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function cljs$reader$escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function cljs$reader$read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__12118 = cljs.reader.read_char.call(null, rdr);
      ch = G__12118;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function cljs$reader$read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4124__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var macrofn = temp__4124__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__12119 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__12119;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__12120 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__12120;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function cljs$reader$not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function cljs$reader$read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4124__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var obj = temp__4124__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function cljs$reader$read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmatched delimiter ", ch);
};
cljs.reader.read_list = function cljs$reader$read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function cljs$reader$read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function cljs$reader$read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function cljs$reader$read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__4109__auto__ = ch == null;
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__4109__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__4109__auto__)) {
        return or__4109__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__12121 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__12122 = cljs.reader.read_char.call(null, reader);
      buffer = G__12121;
      ch = G__12122;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function cljs$reader$read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__12123 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__12124 = cljs.reader.read_char.call(null, reader);
        buffer = G__12123;
        ch = G__12124;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__12125 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__12126 = cljs.reader.read_char.call(null, reader);
          buffer = G__12125;
          ch = G__12126;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function cljs$reader$read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__12131 = function() {
            var G__12129 = buffer;
            G__12129.append(nch);
            return G__12129;
          }();
          var G__12132 = cljs.reader.read_char.call(null, reader);
          buffer = G__12131;
          ch = G__12132;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__12133 = function() {
            var G__12130 = buffer;
            G__12130.append(ch);
            return G__12130;
          }();
          var G__12134 = cljs.reader.read_char.call(null, reader);
          buffer = G__12133;
          ch = G__12134;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function cljs$reader$special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (t === "/") {
          return new cljs.core.Symbol(null, "/", "/", -1371932971, null);
        } else {
          return not_found;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function cljs$reader$read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(function() {
    var and__4097__auto__ = goog.string.contains(token, "/");
    if (cljs.core.truth_(and__4097__auto__)) {
      return!(token.length === 1);
    } else {
      return and__4097__auto__;
    }
  }())) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function cljs$reader$read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function cljs$reader$desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function cljs$reader$wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function cljs$reader$throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function cljs$reader$read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__12136 = o;
    if (G__12136) {
      var bit__4783__auto__ = G__12136.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4783__auto__ || G__12136.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__12136.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__12136);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__12136);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function cljs$reader$read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function cljs$reader$read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function cljs$reader$read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function cljs$reader$macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function cljs$reader$dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function cljs$reader$read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__12137 = reader;
        var G__12138 = eof_is_error;
        var G__12139 = sentinel;
        var G__12140 = is_recursive;
        reader = G__12137;
        eof_is_error = G__12138;
        sentinel = G__12139;
        is_recursive = G__12140;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__12141 = cljs.reader.read_comment.call(null, reader, ch);
          var G__12142 = eof_is_error;
          var G__12143 = sentinel;
          var G__12144 = is_recursive;
          reader = G__12141;
          eof_is_error = G__12142;
          sentinel = G__12143;
          is_recursive = G__12144;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__12145 = reader;
            var G__12146 = eof_is_error;
            var G__12147 = sentinel;
            var G__12148 = is_recursive;
            reader = G__12145;
            eof_is_error = G__12146;
            sentinel = G__12147;
            is_recursive = G__12148;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function cljs$reader$read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function cljs$reader$zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__12149 = b.append("0");
          b = G__12149;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function cljs$reader$divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function cljs$reader$indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function cljs$reader$leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function cljs$reader$parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function cljs$reader$check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function cljs$reader$parse_and_validate_timestamp(s) {
  var vec__12151 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__12151, 0, null);
  var years = cljs.core.nth.call(null, vec__12151, 1, null);
  var months = cljs.core.nth.call(null, vec__12151, 2, null);
  var days = cljs.core.nth.call(null, vec__12151, 3, null);
  var hours = cljs.core.nth.call(null, vec__12151, 4, null);
  var minutes = cljs.core.nth.call(null, vec__12151, 5, null);
  var seconds = cljs.core.nth.call(null, vec__12151, 6, null);
  var fraction = cljs.core.nth.call(null, vec__12151, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__12151, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__12151, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__12151, 10, null);
  var v = vec__12151;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__4109__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__4109__auto__)) {
        return or__4109__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__4109__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__4109__auto__)) {
        return or__4109__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__4109__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__4109__auto__)) {
        return or__4109__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__4109__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__4109__auto__)) {
        return or__4109__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__4109__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__4109__auto__)) {
        return or__4109__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__4109__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__4109__auto__)) {
        return or__4109__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__4109__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__4109__auto__)) {
        return or__4109__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__4109__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__4109__auto__)) {
        return or__4109__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function cljs$reader$parse_timestamp(ts) {
  var temp__4124__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__12153 = temp__4124__auto__;
    var years = cljs.core.nth.call(null, vec__12153, 0, null);
    var months = cljs.core.nth.call(null, vec__12153, 1, null);
    var days = cljs.core.nth.call(null, vec__12153, 2, null);
    var hours = cljs.core.nth.call(null, vec__12153, 3, null);
    var minutes = cljs.core.nth.call(null, vec__12153, 4, null);
    var seconds = cljs.core.nth.call(null, vec__12153, 5, null);
    var ms = cljs.core.nth.call(null, vec__12153, 6, null);
    var offset = cljs.core.nth.call(null, vec__12153, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function cljs$reader$read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function cljs$reader$read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function cljs$reader$read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__12166_12178 = cljs.core.seq.call(null, form);
    var chunk__12167_12179 = null;
    var count__12168_12180 = 0;
    var i__12169_12181 = 0;
    while (true) {
      if (i__12169_12181 < count__12168_12180) {
        var x_12182 = cljs.core._nth.call(null, chunk__12167_12179, i__12169_12181);
        arr.push(x_12182);
        var G__12183 = seq__12166_12178;
        var G__12184 = chunk__12167_12179;
        var G__12185 = count__12168_12180;
        var G__12186 = i__12169_12181 + 1;
        seq__12166_12178 = G__12183;
        chunk__12167_12179 = G__12184;
        count__12168_12180 = G__12185;
        i__12169_12181 = G__12186;
        continue;
      } else {
        var temp__4126__auto___12187 = cljs.core.seq.call(null, seq__12166_12178);
        if (temp__4126__auto___12187) {
          var seq__12166_12188__$1 = temp__4126__auto___12187;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__12166_12188__$1)) {
            var c__4894__auto___12189 = cljs.core.chunk_first.call(null, seq__12166_12188__$1);
            var G__12190 = cljs.core.chunk_rest.call(null, seq__12166_12188__$1);
            var G__12191 = c__4894__auto___12189;
            var G__12192 = cljs.core.count.call(null, c__4894__auto___12189);
            var G__12193 = 0;
            seq__12166_12178 = G__12190;
            chunk__12167_12179 = G__12191;
            count__12168_12180 = G__12192;
            i__12169_12181 = G__12193;
            continue;
          } else {
            var x_12194 = cljs.core.first.call(null, seq__12166_12188__$1);
            arr.push(x_12194);
            var G__12195 = cljs.core.next.call(null, seq__12166_12188__$1);
            var G__12196 = null;
            var G__12197 = 0;
            var G__12198 = 0;
            seq__12166_12178 = G__12195;
            chunk__12167_12179 = G__12196;
            count__12168_12180 = G__12197;
            i__12169_12181 = G__12198;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj12171 = {};
        return obj12171;
      }();
      var seq__12172_12199 = cljs.core.seq.call(null, form);
      var chunk__12173_12200 = null;
      var count__12174_12201 = 0;
      var i__12175_12202 = 0;
      while (true) {
        if (i__12175_12202 < count__12174_12201) {
          var vec__12176_12203 = cljs.core._nth.call(null, chunk__12173_12200, i__12175_12202);
          var k_12204 = cljs.core.nth.call(null, vec__12176_12203, 0, null);
          var v_12205 = cljs.core.nth.call(null, vec__12176_12203, 1, null);
          obj[cljs.core.name.call(null, k_12204)] = v_12205;
          var G__12206 = seq__12172_12199;
          var G__12207 = chunk__12173_12200;
          var G__12208 = count__12174_12201;
          var G__12209 = i__12175_12202 + 1;
          seq__12172_12199 = G__12206;
          chunk__12173_12200 = G__12207;
          count__12174_12201 = G__12208;
          i__12175_12202 = G__12209;
          continue;
        } else {
          var temp__4126__auto___12210 = cljs.core.seq.call(null, seq__12172_12199);
          if (temp__4126__auto___12210) {
            var seq__12172_12211__$1 = temp__4126__auto___12210;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__12172_12211__$1)) {
              var c__4894__auto___12212 = cljs.core.chunk_first.call(null, seq__12172_12211__$1);
              var G__12213 = cljs.core.chunk_rest.call(null, seq__12172_12211__$1);
              var G__12214 = c__4894__auto___12212;
              var G__12215 = cljs.core.count.call(null, c__4894__auto___12212);
              var G__12216 = 0;
              seq__12172_12199 = G__12213;
              chunk__12173_12200 = G__12214;
              count__12174_12201 = G__12215;
              i__12175_12202 = G__12216;
              continue;
            } else {
              var vec__12177_12217 = cljs.core.first.call(null, seq__12172_12211__$1);
              var k_12218 = cljs.core.nth.call(null, vec__12177_12217, 0, null);
              var v_12219 = cljs.core.nth.call(null, vec__12177_12217, 1, null);
              obj[cljs.core.name.call(null, k_12218)] = v_12219;
              var G__12220 = cljs.core.next.call(null, seq__12172_12211__$1);
              var G__12221 = null;
              var G__12222 = 0;
              var G__12223 = 0;
              seq__12172_12199 = G__12220;
              chunk__12173_12200 = G__12221;
              count__12174_12201 = G__12222;
              i__12175_12202 = G__12223;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
    }
  }
};
cljs.reader.read_uuid = function cljs$reader$read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function cljs$reader$maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function cljs$reader$register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function cljs$reader$deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function cljs$reader$register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function cljs$reader$deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("ajax.core");
goog.require("cljs.core");
goog.require("goog.Uri");
goog.require("cognitect.transit");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrManager");
goog.require("goog.json");
goog.require("goog.Uri.QueryData");
goog.require("goog.net.EventType");
goog.require("goog.events");
goog.require("goog.structs");
goog.require("goog.json.Serializer");
goog.require("clojure.string");
goog.require("cljs.reader");
goog.require("goog.net.ErrorCode");
ajax.core.AjaxImpl = function() {
  var obj11983 = {};
  return obj11983;
}();
ajax.core._js_ajax_request = function ajax$core$_js_ajax_request(this$, uri, method, body, headers, handler, opts) {
  if (function() {
    var and__4097__auto__ = this$;
    if (and__4097__auto__) {
      return this$.ajax$core$AjaxImpl$_js_ajax_request$arity$7;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxImpl$_js_ajax_request$arity$7(this$, uri, method, body, headers, handler, opts);
  } else {
    var x__4745__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4109__auto__ = ajax.core._js_ajax_request[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = ajax.core._js_ajax_request["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxImpl.-js-ajax-request", this$);
        }
      }
    }().call(null, this$, uri, method, body, headers, handler, opts);
  }
};
ajax.core.AjaxRequest = function() {
  var obj11985 = {};
  return obj11985;
}();
ajax.core._abort = function ajax$core$_abort(this$) {
  if (function() {
    var and__4097__auto__ = this$;
    if (and__4097__auto__) {
      return this$.ajax$core$AjaxRequest$_abort$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxRequest$_abort$arity$1(this$);
  } else {
    var x__4745__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4109__auto__ = ajax.core._abort[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = ajax.core._abort["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxRequest.-abort", this$);
        }
      }
    }().call(null, this$);
  }
};
ajax.core.DirectlySubmittable = function() {
  var obj11987 = {};
  return obj11987;
}();
ajax.core.AjaxResponse = function() {
  var obj11989 = {};
  return obj11989;
}();
ajax.core._status = function ajax$core$_status(this$) {
  if (function() {
    var and__4097__auto__ = this$;
    if (and__4097__auto__) {
      return this$.ajax$core$AjaxResponse$_status$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_status$arity$1(this$);
  } else {
    var x__4745__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4109__auto__ = ajax.core._status[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = ajax.core._status["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-status", this$);
        }
      }
    }().call(null, this$);
  }
};
ajax.core._status_text = function ajax$core$_status_text(this$) {
  if (function() {
    var and__4097__auto__ = this$;
    if (and__4097__auto__) {
      return this$.ajax$core$AjaxResponse$_status_text$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_status_text$arity$1(this$);
  } else {
    var x__4745__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4109__auto__ = ajax.core._status_text[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = ajax.core._status_text["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-status-text", this$);
        }
      }
    }().call(null, this$);
  }
};
ajax.core._body = function ajax$core$_body(this$) {
  if (function() {
    var and__4097__auto__ = this$;
    if (and__4097__auto__) {
      return this$.ajax$core$AjaxResponse$_body$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_body$arity$1(this$);
  } else {
    var x__4745__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4109__auto__ = ajax.core._body[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = ajax.core._body["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-body", this$);
        }
      }
    }().call(null, this$);
  }
};
ajax.core._get_response_header = function ajax$core$_get_response_header(this$, header) {
  if (function() {
    var and__4097__auto__ = this$;
    if (and__4097__auto__) {
      return this$.ajax$core$AjaxResponse$_get_response_header$arity$2;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_get_response_header$arity$2(this$, header);
  } else {
    var x__4745__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4109__auto__ = ajax.core._get_response_header[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = ajax.core._get_response_header["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-get-response-header", this$);
        }
      }
    }().call(null, this$, header);
  }
};
ajax.core._was_aborted = function ajax$core$_was_aborted(this$) {
  if (function() {
    var and__4097__auto__ = this$;
    if (and__4097__auto__) {
      return this$.ajax$core$AjaxResponse$_was_aborted$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_was_aborted$arity$1(this$);
  } else {
    var x__4745__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4109__auto__ = ajax.core._was_aborted[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = ajax.core._was_aborted["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-was-aborted", this$);
        }
      }
    }().call(null, this$);
  }
};
if (typeof FormData !== "undefined") {
  FormData.prototype.ajax$core$DirectlySubmittable$ = true;
} else {
}
if (typeof ArrayBufferView !== "undefined") {
  ArrayBufferView.prototype.ajax$core$DirectlySubmittable$ = true;
} else {
}
if (typeof Blob !== "undefined") {
  Blob.prototype.ajax$core$DirectlySubmittable$ = true;
} else {
}
if (typeof Document !== "undefined") {
  Document.prototype.ajax$core$DirectlySubmittable$ = true;
} else {
}
ajax.core.submittable_QMARK_ = function ajax$core$submittable_QMARK_(params) {
  var or__4109__auto__ = function() {
    var G__11993 = params;
    if (G__11993) {
      var bit__4783__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4109__auto__ = bit__4783__auto__;
        if (cljs.core.truth_(or__4109__auto__)) {
          return or__4109__auto__;
        } else {
          return G__11993.ajax$core$DirectlySubmittable$;
        }
      }())) {
        return true;
      } else {
        if (!G__11993.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, ajax.core.DirectlySubmittable, G__11993);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, ajax.core.DirectlySubmittable, G__11993);
    }
  }();
  if (or__4109__auto__) {
    return or__4109__auto__;
  } else {
    return typeof params === "string";
  }
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$ = true;
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_body$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getResponseText();
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_status$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getStatus();
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_status_text$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getStatusText();
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_get_response_header$arity$2 = function(this$, header) {
  var this$__$1 = this;
  return this$__$1.getResponseHeader(header);
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_was_aborted$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core._EQ_.call(null, this$__$1.getLastErrorCode(), goog.net.ErrorCode.ABORT);
};
goog.net.XhrIo.prototype.ajax$core$AjaxRequest$ = true;
goog.net.XhrIo.prototype.ajax$core$AjaxRequest$_abort$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.abort(goog.net.ErrorCode.ABORT);
};
goog.net.XhrIo.prototype.ajax$core$AjaxImpl$ = true;
goog.net.XhrIo.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__11995) {
  var map__11996 = p__11995;
  var map__11996__$1 = cljs.core.seq_QMARK_.call(null, map__11996) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11996) : map__11996;
  var with_credentials = cljs.core.get.call(null, map__11996__$1, new cljs.core.Keyword(null, "with-credentials", "with-credentials", -1163127235), false);
  var timeout = cljs.core.get.call(null, map__11996__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318), 0);
  var this$__$1 = this;
  var G__11997 = this$__$1;
  goog.events.listen(G__11997, goog.net.EventType.COMPLETE, function(G__11997, this$__$1, map__11996, map__11996__$1, with_credentials, timeout) {
    return function(p1__11994_SHARP_) {
      return handler.call(null, p1__11994_SHARP_.target);
    };
  }(G__11997, this$__$1, map__11996, map__11996__$1, with_credentials, timeout));
  G__11997.setTimeoutInterval(timeout);
  G__11997.setWithCredentials(with_credentials);
  G__11997.send(uri, method, body, cljs.core.clj__GT_js.call(null, headers));
  return G__11997;
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$ = true;
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_body$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.response;
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_status$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.status;
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_status_text$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.statusText;
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_get_response_header$arity$2 = function(this$, header) {
  var this$__$1 = this;
  return this$__$1.getResponseHeader(header);
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_was_aborted$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core._EQ_.call(null, 0, this$__$1.readyState);
};
XMLHttpRequest.prototype.ajax$core$AjaxRequest$ = true;
XMLHttpRequest.prototype.ajax$core$AjaxRequest$_abort$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.abort();
};
XMLHttpRequest.prototype.ajax$core$AjaxImpl$ = true;
XMLHttpRequest.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__11998) {
  var map__11999 = p__11998;
  var map__11999__$1 = cljs.core.seq_QMARK_.call(null, map__11999) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11999) : map__11999;
  var with_credentials = cljs.core.get.call(null, map__11999__$1, new cljs.core.Keyword(null, "with-credentials", "with-credentials", -1163127235), false);
  var timeout = cljs.core.get.call(null, map__11999__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318), 0);
  var this$__$1 = this;
  this$__$1.timeout = timeout;
  this$__$1.withCredentials = with_credentials;
  this$__$1.onreadystatechange = function(this$__$1, map__11999, map__11999__$1, with_credentials, timeout) {
    return function() {
      return handler.call(null, this$__$1);
    };
  }(this$__$1, map__11999, map__11999__$1, with_credentials, timeout);
  var G__12000 = this$__$1;
  G__12000.open(method, uri, true);
  var t_12007 = G__12000;
  var t_12008__$1 = function() {
    var seq__12001 = cljs.core.seq.call(null, headers);
    var chunk__12002 = null;
    var count__12003 = 0;
    var i__12004 = 0;
    while (true) {
      if (i__12004 < count__12003) {
        var vec__12005 = cljs.core._nth.call(null, chunk__12002, i__12004);
        var k = cljs.core.nth.call(null, vec__12005, 0, null);
        var v = cljs.core.nth.call(null, vec__12005, 1, null);
        t_12007.setRequestHeader(k, v);
        var G__12009 = seq__12001;
        var G__12010 = chunk__12002;
        var G__12011 = count__12003;
        var G__12012 = i__12004 + 1;
        seq__12001 = G__12009;
        chunk__12002 = G__12010;
        count__12003 = G__12011;
        i__12004 = G__12012;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__12001);
        if (temp__4126__auto__) {
          var seq__12001__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__12001__$1)) {
            var c__4894__auto__ = cljs.core.chunk_first.call(null, seq__12001__$1);
            var G__12013 = cljs.core.chunk_rest.call(null, seq__12001__$1);
            var G__12014 = c__4894__auto__;
            var G__12015 = cljs.core.count.call(null, c__4894__auto__);
            var G__12016 = 0;
            seq__12001 = G__12013;
            chunk__12002 = G__12014;
            count__12003 = G__12015;
            i__12004 = G__12016;
            continue;
          } else {
            var vec__12006 = cljs.core.first.call(null, seq__12001__$1);
            var k = cljs.core.nth.call(null, vec__12006, 0, null);
            var v = cljs.core.nth.call(null, vec__12006, 1, null);
            t_12007.setRequestHeader(k, v);
            var G__12017 = cljs.core.next.call(null, seq__12001__$1);
            var G__12018 = null;
            var G__12019 = 0;
            var G__12020 = 0;
            seq__12001 = G__12017;
            chunk__12002 = G__12018;
            count__12003 = G__12019;
            i__12004 = G__12020;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  }();
  G__12000.send(function() {
    var or__4109__auto__ = body;
    if (cljs.core.truth_(or__4109__auto__)) {
      return or__4109__auto__;
    } else {
      return "";
    }
  }());
  return G__12000;
};
goog.net.XhrManager.prototype.ajax$core$AjaxImpl$ = true;
goog.net.XhrManager.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__12021) {
  var map__12022 = p__12021;
  var map__12022__$1 = cljs.core.seq_QMARK_.call(null, map__12022) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12022) : map__12022;
  var max_retries = cljs.core.get.call(null, map__12022__$1, new cljs.core.Keyword(null, "max-retries", "max-retries", -1933762121));
  var priority = cljs.core.get.call(null, map__12022__$1, new cljs.core.Keyword(null, "priority", "priority", 1431093715));
  var timeout = cljs.core.get.call(null, map__12022__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318));
  var id = cljs.core.get.call(null, map__12022__$1, new cljs.core.Keyword(null, "id", "id", -1388402092));
  var this$__$1 = this;
  return this$__$1.send(id, uri, method, body, cljs.core.clj__GT_js.call(null, headers), priority, handler, max_retries);
};
ajax.core.abort = function ajax$core$abort(this$) {
  return ajax.core._abort.call(null, this$);
};
ajax.core.success_QMARK_ = function ajax$core$success_QMARK_(status) {
  return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([status], true), new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [200, 201, 202, 204, 205, 206], null));
};
ajax.core.read_edn = function ajax$core$read_edn(xhrio) {
  return cljs.reader.read_string.call(null, ajax.core._body.call(null, xhrio));
};
ajax.core.edn_response_format = function() {
  var ajax$core$edn_response_format = null;
  var ajax$core$edn_response_format__0 = function() {
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.read_edn, new cljs.core.Keyword(null, "description", "description", -1428560544), "EDN", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/edn"], null);
  };
  var ajax$core$edn_response_format__1 = function(opts) {
    return ajax$core$edn_response_format.call(null);
  };
  ajax$core$edn_response_format = function(opts) {
    switch(arguments.length) {
      case 0:
        return ajax$core$edn_response_format__0.call(this);
      case 1:
        return ajax$core$edn_response_format__1.call(this, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$edn_response_format.cljs$core$IFn$_invoke$arity$0 = ajax$core$edn_response_format__0;
  ajax$core$edn_response_format.cljs$core$IFn$_invoke$arity$1 = ajax$core$edn_response_format__1;
  return ajax$core$edn_response_format;
}();
ajax.core.edn_request_format = function ajax$core$edn_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), cljs.core.pr_str, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/edn"], null);
};
ajax.core.transit_content_type = "application/transit+json; charset\x3dutf-8";
ajax.core.transit_write = function() {
  var ajax$core$transit_write = null;
  var ajax$core$transit_write__1 = function(writer) {
    return function(params) {
      return cognitect.transit.write.call(null, writer, params);
    };
  };
  var ajax$core$transit_write__2 = function(writer, params) {
    return cognitect.transit.write.call(null, writer, params);
  };
  ajax$core$transit_write = function(writer, params) {
    switch(arguments.length) {
      case 1:
        return ajax$core$transit_write__1.call(this, writer);
      case 2:
        return ajax$core$transit_write__2.call(this, writer, params);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$transit_write.cljs$core$IFn$_invoke$arity$1 = ajax$core$transit_write__1;
  ajax$core$transit_write.cljs$core$IFn$_invoke$arity$2 = ajax$core$transit_write__2;
  return ajax$core$transit_write;
}();
ajax.core.transit_request_format = function() {
  var ajax$core$transit_request_format = null;
  var ajax$core$transit_request_format__0 = function() {
    return ajax$core$transit_request_format.call(null, cljs.core.PersistentArrayMap.EMPTY);
  };
  var ajax$core$transit_request_format__1 = function(p__12023) {
    var map__12025 = p__12023;
    var map__12025__$1 = cljs.core.seq_QMARK_.call(null, map__12025) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12025) : map__12025;
    var opts = map__12025__$1;
    var writer = cljs.core.get.call(null, map__12025__$1, new cljs.core.Keyword(null, "writer", "writer", -277568236));
    var type = cljs.core.get.call(null, map__12025__$1, new cljs.core.Keyword(null, "type", "type", 1174270348));
    var writer__$1 = function() {
      var or__4109__auto__ = writer;
      if (cljs.core.truth_(or__4109__auto__)) {
        return or__4109__auto__;
      } else {
        return cognitect.transit.writer.call(null, function() {
          var or__4109__auto____$1 = type;
          if (cljs.core.truth_(or__4109__auto____$1)) {
            return or__4109__auto____$1;
          } else {
            return new cljs.core.Keyword(null, "json", "json", 1279968570);
          }
        }(), opts);
      }
    }();
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), ajax.core.transit_write.call(null, writer__$1), new cljs.core.Keyword(null, "content-type", "content-type", -508222634), ajax.core.transit_content_type], null);
  };
  ajax$core$transit_request_format = function(p__12023) {
    switch(arguments.length) {
      case 0:
        return ajax$core$transit_request_format__0.call(this);
      case 1:
        return ajax$core$transit_request_format__1.call(this, p__12023);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$transit_request_format.cljs$core$IFn$_invoke$arity$0 = ajax$core$transit_request_format__0;
  ajax$core$transit_request_format.cljs$core$IFn$_invoke$arity$1 = ajax$core$transit_request_format__1;
  return ajax$core$transit_request_format;
}();
ajax.core.transit_read = function() {
  var ajax$core$transit_read = null;
  var ajax$core$transit_read__1 = function(reader) {
    return function(raw, xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var data = cognitect.transit.read.call(null, reader, text);
      if (cljs.core.truth_(raw)) {
        return data;
      } else {
        return cljs.core.js__GT_clj.call(null, data);
      }
    };
  };
  var ajax$core$transit_read__2 = function(reader, raw) {
    return function(xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var data = cognitect.transit.read.call(null, reader, text);
      if (cljs.core.truth_(raw)) {
        return data;
      } else {
        return cljs.core.js__GT_clj.call(null, data);
      }
    };
  };
  var ajax$core$transit_read__3 = function(reader, raw, xhrio) {
    var text = ajax.core._body.call(null, xhrio);
    var data = cognitect.transit.read.call(null, reader, text);
    if (cljs.core.truth_(raw)) {
      return data;
    } else {
      return cljs.core.js__GT_clj.call(null, data);
    }
  };
  ajax$core$transit_read = function(reader, raw, xhrio) {
    switch(arguments.length) {
      case 1:
        return ajax$core$transit_read__1.call(this, reader);
      case 2:
        return ajax$core$transit_read__2.call(this, reader, raw);
      case 3:
        return ajax$core$transit_read__3.call(this, reader, raw, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$transit_read.cljs$core$IFn$_invoke$arity$1 = ajax$core$transit_read__1;
  ajax$core$transit_read.cljs$core$IFn$_invoke$arity$2 = ajax$core$transit_read__2;
  ajax$core$transit_read.cljs$core$IFn$_invoke$arity$3 = ajax$core$transit_read__3;
  return ajax$core$transit_read;
}();
ajax.core.transit_response_format = function() {
  var ajax$core$transit_response_format = null;
  var ajax$core$transit_response_format__0 = function() {
    return ajax$core$transit_response_format.call(null, cljs.core.PersistentArrayMap.EMPTY);
  };
  var ajax$core$transit_response_format__1 = function(p__12026) {
    var map__12028 = p__12026;
    var map__12028__$1 = cljs.core.seq_QMARK_.call(null, map__12028) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12028) : map__12028;
    var opts = map__12028__$1;
    var raw = cljs.core.get.call(null, map__12028__$1, new cljs.core.Keyword(null, "raw", "raw", 1604651272));
    var reader = cljs.core.get.call(null, map__12028__$1, new cljs.core.Keyword(null, "reader", "reader", 169660853));
    var type = cljs.core.get.call(null, map__12028__$1, new cljs.core.Keyword(null, "type", "type", 1174270348));
    var reader__$1 = function() {
      var or__4109__auto__ = reader;
      if (cljs.core.truth_(or__4109__auto__)) {
        return or__4109__auto__;
      } else {
        return cognitect.transit.reader.call(null, function() {
          var or__4109__auto____$1 = type;
          if (cljs.core.truth_(or__4109__auto____$1)) {
            return or__4109__auto____$1;
          } else {
            return new cljs.core.Keyword(null, "json", "json", 1279968570);
          }
        }(), opts);
      }
    }();
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.transit_read.call(null, reader__$1, raw), new cljs.core.Keyword(null, "description", "description", -1428560544), "Transit", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/transit+json"], null);
  };
  ajax$core$transit_response_format = function(p__12026) {
    switch(arguments.length) {
      case 0:
        return ajax$core$transit_response_format__0.call(this);
      case 1:
        return ajax$core$transit_response_format__1.call(this, p__12026);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$transit_response_format.cljs$core$IFn$_invoke$arity$0 = ajax$core$transit_response_format__0;
  ajax$core$transit_response_format.cljs$core$IFn$_invoke$arity$1 = ajax$core$transit_response_format__1;
  return ajax$core$transit_response_format;
}();
ajax.core.params_to_str = function ajax$core$params_to_str(params) {
  if (cljs.core.truth_(params)) {
    return goog.Uri.QueryData.createFromMap(new goog.structs.Map(cljs.core.clj__GT_js.call(null, params))).toString();
  } else {
    return null;
  }
};
ajax.core.url_request_format = function ajax$core$url_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), ajax.core.params_to_str, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/x-www-form-urlencoded"], null);
};
ajax.core.raw_response_format = function() {
  var ajax$core$raw_response_format = null;
  var ajax$core$raw_response_format__0 = function() {
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core._body, new cljs.core.Keyword(null, "description", "description", -1428560544), "raw text", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "*/*"], null);
  };
  var ajax$core$raw_response_format__1 = function(opts) {
    return ajax$core$raw_response_format.call(null);
  };
  ajax$core$raw_response_format = function(opts) {
    switch(arguments.length) {
      case 0:
        return ajax$core$raw_response_format__0.call(this);
      case 1:
        return ajax$core$raw_response_format__1.call(this, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$raw_response_format.cljs$core$IFn$_invoke$arity$0 = ajax$core$raw_response_format__0;
  ajax$core$raw_response_format.cljs$core$IFn$_invoke$arity$1 = ajax$core$raw_response_format__1;
  return ajax$core$raw_response_format;
}();
ajax.core.write_json = function ajax$core$write_json(data) {
  return(new goog.json.Serializer).serialize(cljs.core.clj__GT_js.call(null, data));
};
ajax.core.json_request_format = function ajax$core$json_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), ajax.core.write_json, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/json"], null);
};
ajax.core.json_read = function() {
  var ajax$core$json_read = null;
  var ajax$core$json_read__1 = function(prefix) {
    return function(raw, keywords_QMARK_, xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var text__$1 = cljs.core.truth_(function() {
        var and__4097__auto__ = prefix;
        if (cljs.core.truth_(and__4097__auto__)) {
          return cljs.core._EQ_.call(null, 0, text.indexOf(prefix));
        } else {
          return and__4097__auto__;
        }
      }()) ? text.substring(prefix.length()) : text;
      var json = goog.json.parse(text__$1);
      if (cljs.core.truth_(raw)) {
        return json;
      } else {
        return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
      }
    };
  };
  var ajax$core$json_read__2 = function(prefix, raw) {
    return function(keywords_QMARK_, xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var text__$1 = cljs.core.truth_(function() {
        var and__4097__auto__ = prefix;
        if (cljs.core.truth_(and__4097__auto__)) {
          return cljs.core._EQ_.call(null, 0, text.indexOf(prefix));
        } else {
          return and__4097__auto__;
        }
      }()) ? text.substring(prefix.length()) : text;
      var json = goog.json.parse(text__$1);
      if (cljs.core.truth_(raw)) {
        return json;
      } else {
        return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
      }
    };
  };
  var ajax$core$json_read__3 = function(prefix, raw, keywords_QMARK_) {
    return function(xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var text__$1 = cljs.core.truth_(function() {
        var and__4097__auto__ = prefix;
        if (cljs.core.truth_(and__4097__auto__)) {
          return cljs.core._EQ_.call(null, 0, text.indexOf(prefix));
        } else {
          return and__4097__auto__;
        }
      }()) ? text.substring(prefix.length()) : text;
      var json = goog.json.parse(text__$1);
      if (cljs.core.truth_(raw)) {
        return json;
      } else {
        return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
      }
    };
  };
  var ajax$core$json_read__4 = function(prefix, raw, keywords_QMARK_, xhrio) {
    var text = ajax.core._body.call(null, xhrio);
    var text__$1 = cljs.core.truth_(function() {
      var and__4097__auto__ = prefix;
      if (cljs.core.truth_(and__4097__auto__)) {
        return cljs.core._EQ_.call(null, 0, text.indexOf(prefix));
      } else {
        return and__4097__auto__;
      }
    }()) ? text.substring(prefix.length()) : text;
    var json = goog.json.parse(text__$1);
    if (cljs.core.truth_(raw)) {
      return json;
    } else {
      return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
    }
  };
  ajax$core$json_read = function(prefix, raw, keywords_QMARK_, xhrio) {
    switch(arguments.length) {
      case 1:
        return ajax$core$json_read__1.call(this, prefix);
      case 2:
        return ajax$core$json_read__2.call(this, prefix, raw);
      case 3:
        return ajax$core$json_read__3.call(this, prefix, raw, keywords_QMARK_);
      case 4:
        return ajax$core$json_read__4.call(this, prefix, raw, keywords_QMARK_, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$json_read.cljs$core$IFn$_invoke$arity$1 = ajax$core$json_read__1;
  ajax$core$json_read.cljs$core$IFn$_invoke$arity$2 = ajax$core$json_read__2;
  ajax$core$json_read.cljs$core$IFn$_invoke$arity$3 = ajax$core$json_read__3;
  ajax$core$json_read.cljs$core$IFn$_invoke$arity$4 = ajax$core$json_read__4;
  return ajax$core$json_read;
}();
ajax.core.json_response_format = function() {
  var ajax$core$json_response_format = null;
  var ajax$core$json_response_format__0 = function() {
    return ajax$core$json_response_format.call(null, cljs.core.PersistentArrayMap.EMPTY);
  };
  var ajax$core$json_response_format__1 = function(p__12029) {
    var map__12031 = p__12029;
    var map__12031__$1 = cljs.core.seq_QMARK_.call(null, map__12031) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12031) : map__12031;
    var raw = cljs.core.get.call(null, map__12031__$1, new cljs.core.Keyword(null, "raw", "raw", 1604651272));
    var keywords_QMARK_ = cljs.core.get.call(null, map__12031__$1, new cljs.core.Keyword(null, "keywords?", "keywords?", 764949733));
    var prefix = cljs.core.get.call(null, map__12031__$1, new cljs.core.Keyword(null, "prefix", "prefix", -265908465));
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.json_read.call(null, prefix, raw, keywords_QMARK_), new cljs.core.Keyword(null, "description", "description", -1428560544), [cljs.core.str("JSON"), cljs.core.str(cljs.core.truth_(prefix) ? [cljs.core.str(" prefix '"), cljs.core.str(prefix), cljs.core.str("'")].join("") : null), cljs.core.str(cljs.core.truth_(keywords_QMARK_) ? " keywordize" : null)].join(""), new cljs.core.Keyword(null, 
    "content-type", "content-type", -508222634), "application/json"], null);
  };
  ajax$core$json_response_format = function(p__12029) {
    switch(arguments.length) {
      case 0:
        return ajax$core$json_response_format__0.call(this);
      case 1:
        return ajax$core$json_response_format__1.call(this, p__12029);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$json_response_format.cljs$core$IFn$_invoke$arity$0 = ajax$core$json_response_format__0;
  ajax$core$json_response_format.cljs$core$IFn$_invoke$arity$1 = ajax$core$json_response_format__1;
  return ajax$core$json_response_format;
}();
ajax.core.default_formats = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [ajax.core.json_response_format, ajax.core.edn_response_format, ajax.core.transit_response_format, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["text/plain", ajax.core.raw_response_format], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["text/html", ajax.core.raw_response_format], null), ajax.core.raw_response_format], 
null);
ajax.core.get_format = function() {
  var ajax$core$get_format = null;
  var ajax$core$get_format__1 = function(opts) {
    return function(format_entry) {
      if (cljs.core.vector_QMARK_.call(null, format_entry)) {
        return ajax$core$get_format.call(null, opts, cljs.core.second.call(null, format_entry));
      } else {
        if (cljs.core.map_QMARK_.call(null, format_entry)) {
          return format_entry;
        } else {
          return format_entry.call(null, opts);
        }
      }
    };
  };
  var ajax$core$get_format__2 = function(opts, format_entry) {
    if (cljs.core.vector_QMARK_.call(null, format_entry)) {
      return ajax$core$get_format.call(null, opts, cljs.core.second.call(null, format_entry));
    } else {
      if (cljs.core.map_QMARK_.call(null, format_entry)) {
        return format_entry;
      } else {
        return format_entry.call(null, opts);
      }
    }
  };
  ajax$core$get_format = function(opts, format_entry) {
    switch(arguments.length) {
      case 1:
        return ajax$core$get_format__1.call(this, opts);
      case 2:
        return ajax$core$get_format__2.call(this, opts, format_entry);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$get_format.cljs$core$IFn$_invoke$arity$1 = ajax$core$get_format__1;
  ajax$core$get_format.cljs$core$IFn$_invoke$arity$2 = ajax$core$get_format__2;
  return ajax$core$get_format;
}();
ajax.core.accept_entry = function() {
  var ajax$core$accept_entry = null;
  var ajax$core$accept_entry__1 = function(opts) {
    return function(format_entry) {
      var or__4109__auto__ = cljs.core.vector_QMARK_.call(null, format_entry) ? cljs.core.first.call(null, format_entry) : (new cljs.core.Keyword(null, "content-type", "content-type", -508222634)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_format.call(null, opts, format_entry));
      if (cljs.core.truth_(or__4109__auto__)) {
        return or__4109__auto__;
      } else {
        return "*/*";
      }
    };
  };
  var ajax$core$accept_entry__2 = function(opts, format_entry) {
    var or__4109__auto__ = cljs.core.vector_QMARK_.call(null, format_entry) ? cljs.core.first.call(null, format_entry) : (new cljs.core.Keyword(null, "content-type", "content-type", -508222634)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_format.call(null, opts, format_entry));
    if (cljs.core.truth_(or__4109__auto__)) {
      return or__4109__auto__;
    } else {
      return "*/*";
    }
  };
  ajax$core$accept_entry = function(opts, format_entry) {
    switch(arguments.length) {
      case 1:
        return ajax$core$accept_entry__1.call(this, opts);
      case 2:
        return ajax$core$accept_entry__2.call(this, opts, format_entry);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$accept_entry.cljs$core$IFn$_invoke$arity$1 = ajax$core$accept_entry__1;
  ajax$core$accept_entry.cljs$core$IFn$_invoke$arity$2 = ajax$core$accept_entry__2;
  return ajax$core$accept_entry;
}();
ajax.core.detect_content_type = function() {
  var ajax$core$detect_content_type = null;
  var ajax$core$detect_content_type__1 = function(content_type) {
    return function(opts, format_entry) {
      var accept = ajax.core.accept_entry.call(null, opts, format_entry);
      return cljs.core._EQ_.call(null, accept, "*/*") || content_type.indexOf(accept) >= 0;
    };
  };
  var ajax$core$detect_content_type__2 = function(content_type, opts) {
    return function(format_entry) {
      var accept = ajax.core.accept_entry.call(null, opts, format_entry);
      return cljs.core._EQ_.call(null, accept, "*/*") || content_type.indexOf(accept) >= 0;
    };
  };
  var ajax$core$detect_content_type__3 = function(content_type, opts, format_entry) {
    var accept = ajax.core.accept_entry.call(null, opts, format_entry);
    return cljs.core._EQ_.call(null, accept, "*/*") || content_type.indexOf(accept) >= 0;
  };
  ajax$core$detect_content_type = function(content_type, opts, format_entry) {
    switch(arguments.length) {
      case 1:
        return ajax$core$detect_content_type__1.call(this, content_type);
      case 2:
        return ajax$core$detect_content_type__2.call(this, content_type, opts);
      case 3:
        return ajax$core$detect_content_type__3.call(this, content_type, opts, format_entry);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$detect_content_type.cljs$core$IFn$_invoke$arity$1 = ajax$core$detect_content_type__1;
  ajax$core$detect_content_type.cljs$core$IFn$_invoke$arity$2 = ajax$core$detect_content_type__2;
  ajax$core$detect_content_type.cljs$core$IFn$_invoke$arity$3 = ajax$core$detect_content_type__3;
  return ajax$core$detect_content_type;
}();
ajax.core.get_default_format = function ajax$core$get_default_format(xhrio, p__12032) {
  var map__12034 = p__12032;
  var map__12034__$1 = cljs.core.seq_QMARK_.call(null, map__12034) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12034) : map__12034;
  var opts = map__12034__$1;
  var response_format = cljs.core.get.call(null, map__12034__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  var f = ajax.core.detect_content_type.call(null, function() {
    var or__4109__auto__ = ajax.core._get_response_header.call(null, xhrio, "Content-Type");
    if (cljs.core.truth_(or__4109__auto__)) {
      return or__4109__auto__;
    } else {
      return "";
    }
  }(), opts);
  return ajax.core.get_format.call(null, opts, cljs.core.first.call(null, cljs.core.filter.call(null, f, response_format)));
};
ajax.core.detect_response_format_read = function() {
  var ajax$core$detect_response_format_read = null;
  var ajax$core$detect_response_format_read__1 = function(opts) {
    return function(xhrio) {
      return(new cljs.core.Keyword(null, "read", "read", 1140058661)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_default_format.call(null, xhrio, opts)).call(null, xhrio);
    };
  };
  var ajax$core$detect_response_format_read__2 = function(opts, xhrio) {
    return(new cljs.core.Keyword(null, "read", "read", 1140058661)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_default_format.call(null, xhrio, opts)).call(null, xhrio);
  };
  ajax$core$detect_response_format_read = function(opts, xhrio) {
    switch(arguments.length) {
      case 1:
        return ajax$core$detect_response_format_read__1.call(this, opts);
      case 2:
        return ajax$core$detect_response_format_read__2.call(this, opts, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$detect_response_format_read.cljs$core$IFn$_invoke$arity$1 = ajax$core$detect_response_format_read__1;
  ajax$core$detect_response_format_read.cljs$core$IFn$_invoke$arity$2 = ajax$core$detect_response_format_read__2;
  return ajax$core$detect_response_format_read;
}();
ajax.core.accept_header = function ajax$core$accept_header(p__12035) {
  var map__12037 = p__12035;
  var map__12037__$1 = cljs.core.seq_QMARK_.call(null, map__12037) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12037) : map__12037;
  var opts = map__12037__$1;
  var response_format = cljs.core.get.call(null, map__12037__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  if (cljs.core.vector_QMARK_.call(null, response_format)) {
    return clojure.string.join.call(null, ", ", cljs.core.map.call(null, ajax.core.accept_entry.call(null, opts), response_format));
  } else {
    return ajax.core.accept_entry.call(null, opts, response_format);
  }
};
ajax.core.detect_response_format = function() {
  var ajax$core$detect_response_format = null;
  var ajax$core$detect_response_format__0 = function() {
    return ajax$core$detect_response_format.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "response-format", "response-format", 1664465322), ajax.core.default_formats], null));
  };
  var ajax$core$detect_response_format__1 = function(opts) {
    var accept = ajax.core.accept_header.call(null, opts);
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.detect_response_format_read.call(null, opts), new cljs.core.Keyword(null, "format", "format", -1306924766), [cljs.core.str("(from "), cljs.core.str(accept), cljs.core.str(")")].join(""), new cljs.core.Keyword(null, "content-type", "content-type", -508222634), accept], null);
  };
  ajax$core$detect_response_format = function(opts) {
    switch(arguments.length) {
      case 0:
        return ajax$core$detect_response_format__0.call(this);
      case 1:
        return ajax$core$detect_response_format__1.call(this, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$detect_response_format.cljs$core$IFn$_invoke$arity$0 = ajax$core$detect_response_format__0;
  ajax$core$detect_response_format.cljs$core$IFn$_invoke$arity$1 = ajax$core$detect_response_format__1;
  return ajax$core$detect_response_format;
}();
ajax.core.get_response_format = function ajax$core$get_response_format(p__12038) {
  var map__12040 = p__12038;
  var map__12040__$1 = cljs.core.seq_QMARK_.call(null, map__12040) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12040) : map__12040;
  var opts = map__12040__$1;
  var response_format = cljs.core.get.call(null, map__12040__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  if (cljs.core.vector_QMARK_.call(null, response_format)) {
    return ajax.core.detect_response_format.call(null, opts);
  } else {
    if (cljs.core.map_QMARK_.call(null, response_format)) {
      return response_format;
    } else {
      if (cljs.core.ifn_QMARK_.call(null, response_format)) {
        return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), response_format, new cljs.core.Keyword(null, "description", "description", -1428560544), "custom", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "*/*"], null);
      } else {
        throw new Error([cljs.core.str("unrecognized response format: "), cljs.core.str(response_format)].join(""));
      }
    }
  }
};
ajax.core.exception_response = function ajax$core$exception_response(e, status, p__12041, xhrio) {
  var map__12043 = p__12041;
  var map__12043__$1 = cljs.core.seq_QMARK_.call(null, map__12043) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12043) : map__12043;
  var description = cljs.core.get.call(null, map__12043__$1, new cljs.core.Keyword(null, "description", "description", -1428560544));
  var response = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", -1997798413), status, new cljs.core.Keyword(null, "failure", "failure", 720415879), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "response", "response", -1068424192), null], null);
  var status_text = [cljs.core.str(e.message), cljs.core.str("  Format should have been "), cljs.core.str(description)].join("");
  var parse_error = cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), status_text, new cljs.core.Keyword(null, "failure", "failure", 720415879), new cljs.core.Keyword(null, "parse", "parse", -1162164619), new cljs.core.Keyword(null, "original-text", "original-text", 744448452), ajax.core._body.call(null, xhrio));
  if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
    return parse_error;
  } else {
    return cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), ajax.core._status_text.call(null, xhrio), new cljs.core.Keyword(null, "parse-error", "parse-error", 255902478), parse_error);
  }
};
ajax.core.fail = function() {
  var ajax$core$fail__delegate = function(status, status_text, failure, params) {
    var response = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", -1997798413), status, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), status_text, new cljs.core.Keyword(null, "failure", "failure", 720415879), failure], null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, cljs.core.reduce.call(null, cljs.core.conj, response, cljs.core.map.call(null, cljs.core.vec, cljs.core.partition.call(null, 2, params)))], null);
  };
  var ajax$core$fail = function(status, status_text, failure, var_args) {
    var params = null;
    if (arguments.length > 3) {
      var G__12044__i = 0, G__12044__a = new Array(arguments.length - 3);
      while (G__12044__i < G__12044__a.length) {
        G__12044__a[G__12044__i] = arguments[G__12044__i + 3];
        ++G__12044__i;
      }
      params = new cljs.core.IndexedSeq(G__12044__a, 0);
    }
    return ajax$core$fail__delegate.call(this, status, status_text, failure, params);
  };
  ajax$core$fail.cljs$lang$maxFixedArity = 3;
  ajax$core$fail.cljs$lang$applyTo = function(arglist__12045) {
    var status = cljs.core.first(arglist__12045);
    arglist__12045 = cljs.core.next(arglist__12045);
    var status_text = cljs.core.first(arglist__12045);
    arglist__12045 = cljs.core.next(arglist__12045);
    var failure = cljs.core.first(arglist__12045);
    var params = cljs.core.rest(arglist__12045);
    return ajax$core$fail__delegate(status, status_text, failure, params);
  };
  ajax$core$fail.cljs$core$IFn$_invoke$arity$variadic = ajax$core$fail__delegate;
  return ajax$core$fail;
}();
ajax.core.interpret_response = function ajax$core$interpret_response(p__12046, xhrio) {
  var map__12050 = p__12046;
  var map__12050__$1 = cljs.core.seq_QMARK_.call(null, map__12050) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12050) : map__12050;
  var format = map__12050__$1;
  var read = cljs.core.get.call(null, map__12050__$1, new cljs.core.Keyword(null, "read", "read", 1140058661));
  try {
    var status = ajax.core._status.call(null, xhrio);
    var fail = cljs.core.partial.call(null, ajax.core.fail, status);
    if (cljs.core._EQ_.call(null, -1, status)) {
      if (cljs.core.truth_(ajax.core._was_aborted.call(null, xhrio))) {
        return fail.call(null, "Request aborted by client.", new cljs.core.Keyword(null, "aborted", "aborted", 1775972619));
      } else {
        return fail.call(null, "Request timed out.", new cljs.core.Keyword(null, "timeout", "timeout", -318625318));
      }
    } else {
      try {
        var response = read.call(null, xhrio);
        if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, response], null);
        } else {
          return fail.call(null, ajax.core._status_text.call(null, xhrio), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "response", "response", -1068424192), response);
        }
      } catch (e12052) {
        if (e12052 instanceof Object) {
          var e = e12052;
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, ajax.core.exception_response.call(null, e, status, format, xhrio)], null);
        } else {
          throw e12052;
        }
      }
    }
  } catch (e12051) {
    if (e12051 instanceof Object) {
      var e = e12051;
      return ajax.core.fail.call(null, 0, e.message, new cljs.core.Keyword(null, "exception", "exception", -335277064), new cljs.core.Keyword(null, "exception", "exception", -335277064), e);
    } else {
      throw e12051;
    }
  }
};
ajax.core.no_format = function ajax$core$no_format(xhrio) {
  throw new Error("No response format was supplied.");
};
ajax.core.uri_with_params = function ajax$core$uri_with_params(uri, params) {
  if (cljs.core.truth_(params)) {
    return[cljs.core.str(uri), cljs.core.str("?"), cljs.core.str(ajax.core.params_to_str.call(null, params))].join("");
  } else {
    return uri;
  }
};
ajax.core.get_request_format = function ajax$core$get_request_format(format) {
  if (cljs.core.map_QMARK_.call(null, format)) {
    return format;
  } else {
    if (cljs.core.ifn_QMARK_.call(null, format)) {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), format, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "text/plain"], null);
    } else {
      return null;
    }
  }
};
ajax.core.normalize_method = function ajax$core$normalize_method(method) {
  if (method instanceof cljs.core.Keyword) {
    return clojure.string.upper_case.call(null, cljs.core.name.call(null, method));
  } else {
    return method;
  }
};
ajax.core.process_inputs = function ajax$core$process_inputs(p__12053, p__12054) {
  var map__12058 = p__12053;
  var map__12058__$1 = cljs.core.seq_QMARK_.call(null, map__12058) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12058) : map__12058;
  var headers = cljs.core.get.call(null, map__12058__$1, new cljs.core.Keyword(null, "headers", "headers", -835030129));
  var params = cljs.core.get.call(null, map__12058__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
  var format = cljs.core.get.call(null, map__12058__$1, new cljs.core.Keyword(null, "format", "format", -1306924766));
  var method = cljs.core.get.call(null, map__12058__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var uri = cljs.core.get.call(null, map__12058__$1, new cljs.core.Keyword(null, "uri", "uri", -774711847));
  var map__12059 = p__12054;
  var map__12059__$1 = cljs.core.seq_QMARK_.call(null, map__12059) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12059) : map__12059;
  var content_type = cljs.core.get.call(null, map__12059__$1, new cljs.core.Keyword(null, "content-type", "content-type", -508222634));
  var headers__$1 = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, ["Accept", content_type], null), function() {
    var or__4109__auto__ = headers;
    if (cljs.core.truth_(or__4109__auto__)) {
      return or__4109__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }());
  if (cljs.core._EQ_.call(null, ajax.core.normalize_method.call(null, method), "GET")) {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ajax.core.uri_with_params.call(null, uri, params), null, headers__$1], null);
  } else {
    var map__12060 = ajax.core.get_request_format.call(null, format);
    var map__12060__$1 = cljs.core.seq_QMARK_.call(null, map__12060) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12060) : map__12060;
    var content_type__$1 = cljs.core.get.call(null, map__12060__$1, new cljs.core.Keyword(null, "content-type", "content-type", -508222634));
    var write = cljs.core.get.call(null, map__12060__$1, new cljs.core.Keyword(null, "write", "write", -1857649168));
    var body = !(write == null) ? write.call(null, params) : ajax.core.submittable_QMARK_.call(null, params) ? params : function() {
      throw new Error([cljs.core.str("unrecognized request format: "), cljs.core.str(format)].join(""));
    }();
    var content_type__$2 = cljs.core.truth_(content_type__$1) ? new cljs.core.PersistentArrayMap(null, 1, ["Content-Type", content_type__$1], null) : null;
    var headers__$2 = cljs.core.merge.call(null, headers__$1, content_type__$2);
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [uri, body, headers__$2], null);
  }
};
ajax.core.js_handler = function() {
  var ajax$core$js_handler = null;
  var ajax$core$js_handler__1 = function(response_format) {
    return function(handler, xhrio) {
      var response = ajax.core.interpret_response.call(null, response_format, xhrio);
      return handler.call(null, response);
    };
  };
  var ajax$core$js_handler__2 = function(response_format, handler) {
    return function(xhrio) {
      var response = ajax.core.interpret_response.call(null, response_format, xhrio);
      return handler.call(null, response);
    };
  };
  var ajax$core$js_handler__3 = function(response_format, handler, xhrio) {
    var response = ajax.core.interpret_response.call(null, response_format, xhrio);
    return handler.call(null, response);
  };
  ajax$core$js_handler = function(response_format, handler, xhrio) {
    switch(arguments.length) {
      case 1:
        return ajax$core$js_handler__1.call(this, response_format);
      case 2:
        return ajax$core$js_handler__2.call(this, response_format, handler);
      case 3:
        return ajax$core$js_handler__3.call(this, response_format, handler, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$js_handler.cljs$core$IFn$_invoke$arity$1 = ajax$core$js_handler__1;
  ajax$core$js_handler.cljs$core$IFn$_invoke$arity$2 = ajax$core$js_handler__2;
  ajax$core$js_handler.cljs$core$IFn$_invoke$arity$3 = ajax$core$js_handler__3;
  return ajax$core$js_handler;
}();
ajax.core.base_handler = function ajax$core$base_handler(response_format, p__12061) {
  var map__12063 = p__12061;
  var map__12063__$1 = cljs.core.seq_QMARK_.call(null, map__12063) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12063) : map__12063;
  var handler = cljs.core.get.call(null, map__12063__$1, new cljs.core.Keyword(null, "handler", "handler", -195596612));
  if (cljs.core.truth_(handler)) {
    return ajax.core.js_handler.call(null, response_format, handler);
  } else {
    throw new Error("No ajax handler provided.");
  }
};
ajax.core.ajax_request = function ajax$core$ajax_request(p__12064) {
  var map__12067 = p__12064;
  var map__12067__$1 = cljs.core.seq_QMARK_.call(null, map__12067) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12067) : map__12067;
  var opts = map__12067__$1;
  var api = cljs.core.get.call(null, map__12067__$1, new cljs.core.Keyword(null, "api", "api", -899839580));
  var method = cljs.core.get.call(null, map__12067__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var response_format = ajax.core.get_response_format.call(null, opts);
  var method__$1 = ajax.core.normalize_method.call(null, method);
  var vec__12068 = ajax.core.process_inputs.call(null, opts, response_format);
  var uri = cljs.core.nth.call(null, vec__12068, 0, null);
  var body = cljs.core.nth.call(null, vec__12068, 1, null);
  var headers = cljs.core.nth.call(null, vec__12068, 2, null);
  var handler = ajax.core.base_handler.call(null, response_format, opts);
  var api__$1 = function() {
    var or__4109__auto__ = api;
    if (cljs.core.truth_(or__4109__auto__)) {
      return or__4109__auto__;
    } else {
      return new goog.net.XhrIo;
    }
  }();
  return ajax.core._js_ajax_request.call(null, api__$1, uri, method__$1, body, headers, handler, opts);
};
ajax.core.keyword_request_format = function ajax$core$keyword_request_format(format, format_params) {
  if (cljs.core.map_QMARK_.call(null, format)) {
    return format;
  } else {
    if (cljs.core.fn_QMARK_.call(null, format)) {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "write", "write", -1857649168), format], null);
    } else {
      if (format == null) {
        return ajax.core.transit_request_format.call(null, format_params);
      } else {
        var G__12070 = format instanceof cljs.core.Keyword ? format.fqn : null;
        switch(G__12070) {
          case "url":
            return ajax.core.url_request_format.call(null);
            break;
          case "raw":
            return ajax.core.url_request_format.call(null);
            break;
          case "edn":
            return ajax.core.edn_request_format.call(null);
            break;
          case "json":
            return ajax.core.json_request_format.call(null);
            break;
          case "transit":
            return ajax.core.transit_request_format.call(null, format_params);
            break;
          default:
            return null;
        }
      }
    }
  }
};
ajax.core.keyword_response_format_2 = function ajax$core$keyword_response_format_2(format, format_params) {
  if (cljs.core.vector_QMARK_.call(null, format)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, format), ajax$core$keyword_response_format_2.call(null, cljs.core.second.call(null, format), format_params)], null);
  } else {
    if (cljs.core.map_QMARK_.call(null, format)) {
      return format;
    } else {
      if (cljs.core.fn_QMARK_.call(null, format)) {
        return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1140058661), format, new cljs.core.Keyword(null, "description", "description", -1428560544), "custom"], null);
      } else {
        if (format == null) {
          return ajax.core.detect_response_format.call(null);
        } else {
          var G__12073 = format instanceof cljs.core.Keyword ? format.fqn : null;
          switch(G__12073) {
            case "detect":
              return ajax.core.detect_response_format.call(null);
              break;
            case "raw":
              return ajax.core.raw_response_format.call(null);
              break;
            case "edn":
              return ajax.core.edn_response_format.call(null);
              break;
            case "json":
              return ajax.core.json_response_format.call(null, format_params);
              break;
            case "transit":
              return ajax.core.transit_response_format.call(null, format_params);
              break;
            default:
              return null;
          }
        }
      }
    }
  }
};
ajax.core.keyword_response_format = function ajax$core$keyword_response_format(format, format_params) {
  if (cljs.core.vector_QMARK_.call(null, format)) {
    return cljs.core.apply.call(null, cljs.core.vector, cljs.core.map.call(null, function(p1__12075_SHARP_) {
      return ajax.core.keyword_response_format_2.call(null, p1__12075_SHARP_, format_params);
    }, format));
  } else {
    return ajax.core.keyword_response_format_2.call(null, format, format_params);
  }
};
ajax.core.transform_handler = function() {
  var ajax$core$transform_handler = null;
  var ajax$core$transform_handler__1 = function(p__12078) {
    var map__12086 = p__12078;
    var map__12086__$1 = cljs.core.seq_QMARK_.call(null, map__12086) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12086) : map__12086;
    var finally$ = cljs.core.get.call(null, map__12086__$1, new cljs.core.Keyword(null, "finally", "finally", 1589088705));
    var error_handler = cljs.core.get.call(null, map__12086__$1, new cljs.core.Keyword(null, "error-handler", "error-handler", -484945776));
    var handler = cljs.core.get.call(null, map__12086__$1, new cljs.core.Keyword(null, "handler", "handler", -195596612));
    return function(map__12086, map__12086__$1, finally$, error_handler, handler) {
      return function(p__12087) {
        var vec__12088 = p__12087;
        var ok = cljs.core.nth.call(null, vec__12088, 0, null);
        var result = cljs.core.nth.call(null, vec__12088, 1, null);
        var temp__4124__auto___12089 = cljs.core.truth_(ok) ? handler : error_handler;
        if (cljs.core.truth_(temp__4124__auto___12089)) {
          var h_12090 = temp__4124__auto___12089;
          h_12090.call(null, result);
        } else {
        }
        if (cljs.core.fn_QMARK_.call(null, finally$)) {
          return finally$.call(null);
        } else {
          return null;
        }
      };
    }(map__12086, map__12086__$1, finally$, error_handler, handler);
  };
  var ajax$core$transform_handler__2 = function(p__12076, p__12077) {
    var map__12084 = p__12076;
    var map__12084__$1 = cljs.core.seq_QMARK_.call(null, map__12084) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12084) : map__12084;
    var finally$ = cljs.core.get.call(null, map__12084__$1, new cljs.core.Keyword(null, "finally", "finally", 1589088705));
    var error_handler = cljs.core.get.call(null, map__12084__$1, new cljs.core.Keyword(null, "error-handler", "error-handler", -484945776));
    var handler = cljs.core.get.call(null, map__12084__$1, new cljs.core.Keyword(null, "handler", "handler", -195596612));
    var vec__12085 = p__12077;
    var ok = cljs.core.nth.call(null, vec__12085, 0, null);
    var result = cljs.core.nth.call(null, vec__12085, 1, null);
    var temp__4124__auto___12091 = cljs.core.truth_(ok) ? handler : error_handler;
    if (cljs.core.truth_(temp__4124__auto___12091)) {
      var h_12092 = temp__4124__auto___12091;
      h_12092.call(null, result);
    } else {
    }
    if (cljs.core.fn_QMARK_.call(null, finally$)) {
      return finally$.call(null);
    } else {
      return null;
    }
  };
  ajax$core$transform_handler = function(p__12076, p__12077) {
    switch(arguments.length) {
      case 1:
        return ajax$core$transform_handler__1.call(this, p__12076);
      case 2:
        return ajax$core$transform_handler__2.call(this, p__12076, p__12077);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$transform_handler.cljs$core$IFn$_invoke$arity$1 = ajax$core$transform_handler__1;
  ajax$core$transform_handler.cljs$core$IFn$_invoke$arity$2 = ajax$core$transform_handler__2;
  return ajax$core$transform_handler;
}();
ajax.core.transform_opts = function ajax$core$transform_opts(p__12093) {
  var map__12095 = p__12093;
  var map__12095__$1 = cljs.core.seq_QMARK_.call(null, map__12095) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12095) : map__12095;
  var opts = map__12095__$1;
  var params = cljs.core.get.call(null, map__12095__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
  var response_format = cljs.core.get.call(null, map__12095__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  var format = cljs.core.get.call(null, map__12095__$1, new cljs.core.Keyword(null, "format", "format", -1306924766));
  var method = cljs.core.get.call(null, map__12095__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var needs_format = !(ajax.core.submittable_QMARK_.call(null, params) || cljs.core._EQ_.call(null, method, "GET"));
  var rf = cljs.core.truth_(function() {
    var or__4109__auto__ = format;
    if (cljs.core.truth_(or__4109__auto__)) {
      return or__4109__auto__;
    } else {
      return needs_format;
    }
  }()) ? ajax.core.keyword_request_format.call(null, format, opts) : null;
  return cljs.core.assoc.call(null, opts, new cljs.core.Keyword(null, "handler", "handler", -195596612), ajax.core.transform_handler.call(null, opts), new cljs.core.Keyword(null, "format", "format", -1306924766), rf, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322), ajax.core.keyword_response_format.call(null, response_format, opts));
};
ajax.core.easy_ajax_request = function ajax$core$easy_ajax_request(uri, method, opts) {
  return ajax.core.ajax_request.call(null, ajax.core.transform_opts.call(null, cljs.core.assoc.call(null, opts, new cljs.core.Keyword(null, "uri", "uri", -774711847), uri, new cljs.core.Keyword(null, "method", "method", 55703592), method)));
};
ajax.core.GET = function() {
  var ajax$core$GET__delegate = function(uri, opts) {
    var f__11025__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "GET", f__11025__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__11025__auto__);
  };
  var ajax$core$GET = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__12096__i = 0, G__12096__a = new Array(arguments.length - 1);
      while (G__12096__i < G__12096__a.length) {
        G__12096__a[G__12096__i] = arguments[G__12096__i + 1];
        ++G__12096__i;
      }
      opts = new cljs.core.IndexedSeq(G__12096__a, 0);
    }
    return ajax$core$GET__delegate.call(this, uri, opts);
  };
  ajax$core$GET.cljs$lang$maxFixedArity = 1;
  ajax$core$GET.cljs$lang$applyTo = function(arglist__12097) {
    var uri = cljs.core.first(arglist__12097);
    var opts = cljs.core.rest(arglist__12097);
    return ajax$core$GET__delegate(uri, opts);
  };
  ajax$core$GET.cljs$core$IFn$_invoke$arity$variadic = ajax$core$GET__delegate;
  return ajax$core$GET;
}();
ajax.core.HEAD = function() {
  var ajax$core$HEAD__delegate = function(uri, opts) {
    var f__11025__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "HEAD", f__11025__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__11025__auto__);
  };
  var ajax$core$HEAD = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__12098__i = 0, G__12098__a = new Array(arguments.length - 1);
      while (G__12098__i < G__12098__a.length) {
        G__12098__a[G__12098__i] = arguments[G__12098__i + 1];
        ++G__12098__i;
      }
      opts = new cljs.core.IndexedSeq(G__12098__a, 0);
    }
    return ajax$core$HEAD__delegate.call(this, uri, opts);
  };
  ajax$core$HEAD.cljs$lang$maxFixedArity = 1;
  ajax$core$HEAD.cljs$lang$applyTo = function(arglist__12099) {
    var uri = cljs.core.first(arglist__12099);
    var opts = cljs.core.rest(arglist__12099);
    return ajax$core$HEAD__delegate(uri, opts);
  };
  ajax$core$HEAD.cljs$core$IFn$_invoke$arity$variadic = ajax$core$HEAD__delegate;
  return ajax$core$HEAD;
}();
ajax.core.POST = function() {
  var ajax$core$POST__delegate = function(uri, opts) {
    var f__11025__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "POST", f__11025__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__11025__auto__);
  };
  var ajax$core$POST = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__12100__i = 0, G__12100__a = new Array(arguments.length - 1);
      while (G__12100__i < G__12100__a.length) {
        G__12100__a[G__12100__i] = arguments[G__12100__i + 1];
        ++G__12100__i;
      }
      opts = new cljs.core.IndexedSeq(G__12100__a, 0);
    }
    return ajax$core$POST__delegate.call(this, uri, opts);
  };
  ajax$core$POST.cljs$lang$maxFixedArity = 1;
  ajax$core$POST.cljs$lang$applyTo = function(arglist__12101) {
    var uri = cljs.core.first(arglist__12101);
    var opts = cljs.core.rest(arglist__12101);
    return ajax$core$POST__delegate(uri, opts);
  };
  ajax$core$POST.cljs$core$IFn$_invoke$arity$variadic = ajax$core$POST__delegate;
  return ajax$core$POST;
}();
ajax.core.PUT = function() {
  var ajax$core$PUT__delegate = function(uri, opts) {
    var f__11025__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "PUT", f__11025__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__11025__auto__);
  };
  var ajax$core$PUT = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__12102__i = 0, G__12102__a = new Array(arguments.length - 1);
      while (G__12102__i < G__12102__a.length) {
        G__12102__a[G__12102__i] = arguments[G__12102__i + 1];
        ++G__12102__i;
      }
      opts = new cljs.core.IndexedSeq(G__12102__a, 0);
    }
    return ajax$core$PUT__delegate.call(this, uri, opts);
  };
  ajax$core$PUT.cljs$lang$maxFixedArity = 1;
  ajax$core$PUT.cljs$lang$applyTo = function(arglist__12103) {
    var uri = cljs.core.first(arglist__12103);
    var opts = cljs.core.rest(arglist__12103);
    return ajax$core$PUT__delegate(uri, opts);
  };
  ajax$core$PUT.cljs$core$IFn$_invoke$arity$variadic = ajax$core$PUT__delegate;
  return ajax$core$PUT;
}();
ajax.core.DELETE = function() {
  var ajax$core$DELETE__delegate = function(uri, opts) {
    var f__11025__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "DELETE", f__11025__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__11025__auto__);
  };
  var ajax$core$DELETE = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__12104__i = 0, G__12104__a = new Array(arguments.length - 1);
      while (G__12104__i < G__12104__a.length) {
        G__12104__a[G__12104__i] = arguments[G__12104__i + 1];
        ++G__12104__i;
      }
      opts = new cljs.core.IndexedSeq(G__12104__a, 0);
    }
    return ajax$core$DELETE__delegate.call(this, uri, opts);
  };
  ajax$core$DELETE.cljs$lang$maxFixedArity = 1;
  ajax$core$DELETE.cljs$lang$applyTo = function(arglist__12105) {
    var uri = cljs.core.first(arglist__12105);
    var opts = cljs.core.rest(arglist__12105);
    return ajax$core$DELETE__delegate(uri, opts);
  };
  ajax$core$DELETE.cljs$core$IFn$_invoke$arity$variadic = ajax$core$DELETE__delegate;
  return ajax$core$DELETE;
}();
ajax.core.OPTIONS = function() {
  var ajax$core$OPTIONS__delegate = function(uri, opts) {
    var f__11025__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "OPTIONS", f__11025__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__11025__auto__);
  };
  var ajax$core$OPTIONS = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__12106__i = 0, G__12106__a = new Array(arguments.length - 1);
      while (G__12106__i < G__12106__a.length) {
        G__12106__a[G__12106__i] = arguments[G__12106__i + 1];
        ++G__12106__i;
      }
      opts = new cljs.core.IndexedSeq(G__12106__a, 0);
    }
    return ajax$core$OPTIONS__delegate.call(this, uri, opts);
  };
  ajax$core$OPTIONS.cljs$lang$maxFixedArity = 1;
  ajax$core$OPTIONS.cljs$lang$applyTo = function(arglist__12107) {
    var uri = cljs.core.first(arglist__12107);
    var opts = cljs.core.rest(arglist__12107);
    return ajax$core$OPTIONS__delegate(uri, opts);
  };
  ajax$core$OPTIONS.cljs$core$IFn$_invoke$arity$variadic = ajax$core$OPTIONS__delegate;
  return ajax$core$OPTIONS;
}();
ajax.core.TRACE = function() {
  var ajax$core$TRACE__delegate = function(uri, opts) {
    var f__11025__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "TRACE", f__11025__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__11025__auto__);
  };
  var ajax$core$TRACE = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__12108__i = 0, G__12108__a = new Array(arguments.length - 1);
      while (G__12108__i < G__12108__a.length) {
        G__12108__a[G__12108__i] = arguments[G__12108__i + 1];
        ++G__12108__i;
      }
      opts = new cljs.core.IndexedSeq(G__12108__a, 0);
    }
    return ajax$core$TRACE__delegate.call(this, uri, opts);
  };
  ajax$core$TRACE.cljs$lang$maxFixedArity = 1;
  ajax$core$TRACE.cljs$lang$applyTo = function(arglist__12109) {
    var uri = cljs.core.first(arglist__12109);
    var opts = cljs.core.rest(arglist__12109);
    return ajax$core$TRACE__delegate(uri, opts);
  };
  ajax$core$TRACE.cljs$core$IFn$_invoke$arity$variadic = ajax$core$TRACE__delegate;
  return ajax$core$TRACE;
}();
goog.provide("centipair.core.utilities.ajax");
goog.require("cljs.core");
goog.require("centipair.core.components.input");
goog.require("centipair.core.components.notifier");
goog.require("centipair.core.utilities.dom");
goog.require("ajax.core");
centipair.core.utilities.ajax.error_handler = function centipair$core$utilities$ajax$error_handler(response) {
  var status = (new cljs.core.Keyword(null, "status", "status", -1997798413)).cljs$core$IFn$_invoke$arity$1(response);
  var G__11800 = status;
  switch(G__11800) {
    case 403:
      return centipair.core.components.notifier.notify.call(null, 403);
      break;
    case 404:
      return centipair.core.components.notifier.notify.call(null, 404);
      break;
    case 405:
      return centipair.core.components.notifier.notify.call(null, 405);
      break;
    case 500:
      return centipair.core.components.notifier.notify.call(null, 500);
      break;
    case 422:
      return centipair.core.components.notifier.notify.call(null, 422, "The submitted data is not valid");
      break;
    default:
      throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(status)].join(""));;
  }
};
centipair.core.utilities.ajax.success_handler = function centipair$core$utilities$ajax$success_handler(function_handler, response) {
  centipair.core.components.notifier.notify.call(null, 200);
  return function_handler.call(null, response);
};
centipair.core.utilities.ajax.post = function centipair$core$utilities$ajax$post(url, params, function_handler) {
  centipair.core.components.notifier.notify.call(null, 102, "Loading");
  return ajax.core.POST.call(null, url, new cljs.core.Keyword(null, "params", "params", 710516235), params, new cljs.core.Keyword(null, "handler", "handler", -195596612), cljs.core.partial.call(null, centipair.core.utilities.ajax.success_handler, function_handler), new cljs.core.Keyword(null, "error-handler", "error-handler", -484945776), centipair.core.utilities.ajax.error_handler, new cljs.core.Keyword(null, "format", "format", -1306924766), ajax.core.json_request_format.call(null), new cljs.core.Keyword(null, 
  "headers", "headers", -835030129), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "X-CSRF-Token", "X-CSRF-Token", 1562992453), centipair.core.utilities.dom.get_value.call(null, "__anti-forgery-token")], null), new cljs.core.Keyword(null, "response-format", "response-format", 1664465322), ajax.core.json_response_format.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywords?", "keywords?", 764949733), true], null)));
};
centipair.core.utilities.ajax.get_json = function centipair$core$utilities$ajax$get_json(url, params, function_handler) {
  centipair.core.components.notifier.notify.call(null, 102, "Loading");
  return ajax.core.GET.call(null, url, new cljs.core.Keyword(null, "params", "params", 710516235), params, new cljs.core.Keyword(null, "handler", "handler", -195596612), cljs.core.partial.call(null, centipair.core.utilities.ajax.success_handler, function_handler), new cljs.core.Keyword(null, "error-handler", "error-handler", -484945776), centipair.core.utilities.ajax.error_handler, new cljs.core.Keyword(null, "format", "format", -1306924766), ajax.core.json_request_format.call(null), new cljs.core.Keyword(null, 
  "response-format", "response-format", 1664465322), ajax.core.json_response_format.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywords?", "keywords?", 764949733), true], null)));
};
centipair.core.utilities.ajax.delete$ = function centipair$core$utilities$ajax$delete(url, function_handler) {
  centipair.core.components.notifier.notify.call(null, 102, "Deleting");
  return ajax.core.DELETE.call(null, url, new cljs.core.Keyword(null, "handler", "handler", -195596612), cljs.core.partial.call(null, centipair.core.utilities.ajax.success_handler, function_handler), new cljs.core.Keyword(null, "headers", "headers", -835030129), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "X-CSRF-Token", "X-CSRF-Token", 1562992453), centipair.core.utilities.dom.get_value.call(null, "__anti-forgery-token")], null), new cljs.core.Keyword(null, "error-handler", 
  "error-handler", -484945776), centipair.core.utilities.ajax.error_handler);
};
centipair.core.utilities.ajax.set_value_type = function centipair$core$utilities$ajax$set_value_type(field) {
  var G__11803 = (new cljs.core.Keyword(null, "value-type", "value-type", 576005757)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field));
  if (cljs.core._EQ_.call(null, "float", G__11803)) {
    return parseFloat((new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)));
  } else {
    if (cljs.core._EQ_.call(null, "integer", G__11803)) {
      return parseInt((new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)));
    } else {
      if (cljs.core._EQ_.call(null, "string", G__11803)) {
        return(new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field));
      } else {
        if (cljs.core._EQ_.call(null, null, G__11803)) {
          return(new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field));
        } else {
          return(new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field));
        }
      }
    }
  }
};
centipair.core.utilities.ajax.set_select_value_type = function centipair$core$utilities$ajax$set_select_value_type(field) {
  var fetched_value = centipair.core.utilities.dom.get_value.call(null, (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field)));
  var G__11805 = (new cljs.core.Keyword(null, "value-type", "value-type", 576005757)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, field));
  if (cljs.core._EQ_.call(null, "float", G__11805)) {
    return parseFloat(fetched_value);
  } else {
    if (cljs.core._EQ_.call(null, "integer", G__11805)) {
      return parseInt(fetched_value);
    } else {
      if (cljs.core._EQ_.call(null, "string", G__11805)) {
        return fetched_value;
      } else {
        if (cljs.core._EQ_.call(null, null, G__11805)) {
          return fetched_value;
        } else {
          return fetched_value;
        }
      }
    }
  }
};
centipair.core.utilities.ajax.text_to_key = function centipair$core$utilities$ajax$text_to_key(previous, each) {
  return cljs.core.assoc.call(null, previous, cljs.core.keyword.call(null, (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, each))), centipair.core.utilities.ajax.set_value_type.call(null, each));
};
centipair.core.utilities.ajax.check_to_key = function centipair$core$utilities$ajax$check_to_key(previous, each) {
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "checked", "checked", -50955819)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, each)), "checked")) {
    return cljs.core.assoc.call(null, previous, cljs.core.keyword.call(null, (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, each))), true);
  } else {
    return cljs.core.assoc.call(null, previous, cljs.core.keyword.call(null, (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, each))), false);
  }
};
centipair.core.utilities.ajax.image_spec_to_key = function centipair$core$utilities$ajax$image_spec_to_key(previous, each) {
  return cljs.core.assoc.call(null, previous, cljs.core.keyword.call(null, (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "width", "width", -384071477)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, each)))), parseInt((new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "width", "width", -384071477)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  each)))), cljs.core.keyword.call(null, (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "height", "height", 1025178622)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, each)))), parseInt((new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "height", "height", 1025178622)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, each)))), cljs.core.keyword.call(null, 
  (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "crop", "crop", 793731643)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, each)))), cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "checked", "checked", -50955819)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "crop", "crop", 793731643)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, each))), "checked"));
};
centipair.core.utilities.ajax.select_to_key = function centipair$core$utilities$ajax$select_to_key(previous, each) {
  return cljs.core.assoc.call(null, previous, cljs.core.keyword.call(null, (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, each))), centipair.core.utilities.ajax.set_select_value_type.call(null, each));
};
centipair.core.utilities.ajax.to_key = function centipair$core$utilities$ajax$to_key(previous, each) {
  var G__11807 = (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, each));
  switch(G__11807) {
    case "text":
      return centipair.core.utilities.ajax.text_to_key.call(null, previous, each);
      break;
    case "checkbox":
      return centipair.core.utilities.ajax.check_to_key.call(null, previous, each);
      break;
    case "image-spec":
      return centipair.core.utilities.ajax.image_spec_to_key.call(null, previous, each);
      break;
    case "hidden":
      return centipair.core.utilities.ajax.text_to_key.call(null, previous, each);
      break;
    case "select":
      return centipair.core.utilities.ajax.select_to_key.call(null, previous, each);
      break;
    default:
      return cljs.core.assoc.call(null, previous, cljs.core.keyword.call(null, (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, each))), centipair.core.utilities.ajax.set_value_type.call(null, each));
  }
};
centipair.core.utilities.ajax.handle_form_error = function centipair$core$utilities$ajax$handle_form_error(form_state, form, response) {
  centipair.core.components.notifier.notify.call(null, 422, "The submitted data is not valid");
  var combined = cljs.core.conj.call(null, form, form_state);
  var seq__11813 = cljs.core.seq.call(null, combined);
  var chunk__11814 = null;
  var count__11815 = 0;
  var i__11816 = 0;
  while (true) {
    if (i__11816 < count__11815) {
      var each = cljs.core._nth.call(null, chunk__11814, i__11816);
      centipair.core.components.input.append_error.call(null, (new cljs.core.Keyword(null, "errors", "errors", -908790718)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "response", "response", -1068424192)).cljs$core$IFn$_invoke$arity$1(response)), each);
      var G__11817 = seq__11813;
      var G__11818 = chunk__11814;
      var G__11819 = count__11815;
      var G__11820 = i__11816 + 1;
      seq__11813 = G__11817;
      chunk__11814 = G__11818;
      count__11815 = G__11819;
      i__11816 = G__11820;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__11813);
      if (temp__4126__auto__) {
        var seq__11813__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11813__$1)) {
          var c__4894__auto__ = cljs.core.chunk_first.call(null, seq__11813__$1);
          var G__11821 = cljs.core.chunk_rest.call(null, seq__11813__$1);
          var G__11822 = c__4894__auto__;
          var G__11823 = cljs.core.count.call(null, c__4894__auto__);
          var G__11824 = 0;
          seq__11813 = G__11821;
          chunk__11814 = G__11822;
          count__11815 = G__11823;
          i__11816 = G__11824;
          continue;
        } else {
          var each = cljs.core.first.call(null, seq__11813__$1);
          centipair.core.components.input.append_error.call(null, (new cljs.core.Keyword(null, "errors", "errors", -908790718)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "response", "response", -1068424192)).cljs$core$IFn$_invoke$arity$1(response)), each);
          var G__11825 = cljs.core.next.call(null, seq__11813__$1);
          var G__11826 = null;
          var G__11827 = 0;
          var G__11828 = 0;
          seq__11813 = G__11825;
          chunk__11814 = G__11826;
          count__11815 = G__11827;
          i__11816 = G__11828;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
centipair.core.utilities.ajax.form_error_handler = function centipair$core$utilities$ajax$form_error_handler(form_state, form, response) {
  var status = (new cljs.core.Keyword(null, "status", "status", -1997798413)).cljs$core$IFn$_invoke$arity$1(response);
  var G__11830 = status;
  switch(G__11830) {
    case 403:
      return centipair.core.components.notifier.notify.call(null, 403);
      break;
    case 404:
      return centipair.core.components.notifier.notify.call(null, 404);
      break;
    case 405:
      return centipair.core.components.notifier.notify.call(null, 405);
      break;
    case 500:
      return centipair.core.components.notifier.notify.call(null, 500);
      break;
    case 422:
      return centipair.core.utilities.ajax.handle_form_error.call(null, form_state, form, response);
      break;
    default:
      throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(status)].join(""));;
  }
};
centipair.core.utilities.ajax.form_success_handler = function centipair$core$utilities$ajax$form_success_handler() {
  return null;
};
centipair.core.utilities.ajax.form_post = function centipair$core$utilities$ajax$form_post(form_state, url, form, function_handler) {
  centipair.core.components.notifier.notify.call(null, 102, "Loading");
  return ajax.core.POST.call(null, url, new cljs.core.Keyword(null, "params", "params", 710516235), cljs.core.reduce.call(null, centipair.core.utilities.ajax.to_key, cljs.core.PersistentArrayMap.EMPTY, form), new cljs.core.Keyword(null, "handler", "handler", -195596612), cljs.core.partial.call(null, centipair.core.utilities.ajax.success_handler, function_handler), new cljs.core.Keyword(null, "error-handler", "error-handler", -484945776), cljs.core.partial.call(null, centipair.core.utilities.ajax.form_error_handler, 
  form_state, form), new cljs.core.Keyword(null, "headers", "headers", -835030129), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "X-CSRF-Token", "X-CSRF-Token", 1562992453), centipair.core.utilities.dom.get_value.call(null, "__anti-forgery-token")], null), new cljs.core.Keyword(null, "response-format", "response-format", 1664465322), ajax.core.json_response_format.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywords?", "keywords?", 
  764949733), true], null)));
};
centipair.core.utilities.ajax.data_saved_notifier = function centipair$core$utilities$ajax$data_saved_notifier(response) {
  return centipair.core.components.notifier.notify.call(null, 102, "Data saved");
};
goog.provide("centipair.core.ui");
goog.require("cljs.core");
goog.require("reagent.core");
centipair.core.ui.render = function centipair$core$ui$render(elements, root_id) {
  return reagent.core.render.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [elements], null), document.getElementById(root_id));
};
centipair.core.ui.cleared_element = function centipair$core$ui$cleared_element() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991)], null);
};
centipair.core.ui.clear = function centipair$core$ui$clear(root_id) {
  return reagent.core.render.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [centipair.core.ui.cleared_element], null), document.getElementById(root_id));
};
centipair.core.ui.render_page_message = function centipair$core$ui$render_page_message(message) {
  return message;
};
centipair.core.ui.define_page = function centipair$core$ui$define_page(page, elements) {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", -1388402092), "page-container"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h3", "h3", 2067611163), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", -1388402092), 
  "page-title"], null), (new cljs.core.Keyword(null, "title", "title", 636505583)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, page))], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", -1388402092), "page-message"], null), centipair.core.ui.render_page_message.call(null, (new cljs.core.Keyword(null, "message", 
  "message", -406056002)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, page)))], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", -1388402092), "action-bar"], null), (new cljs.core.Keyword(null, "action-bar", "action-bar", 1747757453)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, page)) == null ? 
  "" : (new cljs.core.Keyword(null, "action-bar", "action-bar", 1747757453)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, page)).call(null)], null), elements.call(null)], null);
};
centipair.core.ui.render_page = function centipair$core$ui$render_page(page, elements) {
  return centipair.core.ui.render.call(null, cljs.core.partial.call(null, centipair.core.ui.define_page, page, elements), "content");
};
goog.provide("centipair.core.user.forms");
goog.require("cljs.core");
goog.require("centipair.core.components.input");
goog.require("reagent.core");
goog.require("centipair.core.utilities.validators");
goog.require("centipair.core.utilities.dom");
goog.require("centipair.core.utilities.ajax");
goog.require("centipair.core.ui");
goog.require("centipair.core.components.notifier");
centipair.core.user.forms.registration_form_state = reagent.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "title", "title", 636505583), "Sign Up", new cljs.core.Keyword(null, "action", "action", -811238024), "/register-submit", new cljs.core.Keyword(null, "id", "id", -1388402092), "registration-form"], null));
centipair.core.user.forms.email = reagent.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "id", "id", -1388402092), "email", new cljs.core.Keyword(null, "type", "type", 1174270348), "email", new cljs.core.Keyword(null, "label", "label", 1718410804), "Email", new cljs.core.Keyword(null, "validator", "validator", -1966190681), centipair.core.utilities.validators.email_required], null));
centipair.core.user.forms.username = reagent.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "id", "id", -1388402092), "username", new cljs.core.Keyword(null, "type", "type", 1174270348), "text", new cljs.core.Keyword(null, "label", "label", 1718410804), "Username", new cljs.core.Keyword(null, "validator", "validator", -1966190681), centipair.core.utilities.validators.required], null));
centipair.core.user.forms.password = reagent.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "id", "id", -1388402092), "password", new cljs.core.Keyword(null, "type", "type", 1174270348), "password", new cljs.core.Keyword(null, "label", "label", 1718410804), "Password", new cljs.core.Keyword(null, "validator", "validator", -1966190681), centipair.core.utilities.validators.required], null));
centipair.core.user.forms.accept_box_terms = reagent.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "id", "id", -1388402092), "box-terms", new cljs.core.Keyword(null, "type", "type", 1174270348), "checkbox", new cljs.core.Keyword(null, "label", "label", 1718410804), "Terms \x26 Conditions", new cljs.core.Keyword(null, "validator", "validator", -1966190681), centipair.core.utilities.validators.agree_terms, new cljs.core.Keyword(null, "description", "description", 
-1428560544), "I've read and accept terms \x26 conditions"], null));
centipair.core.user.forms.password_required_match = function centipair$core$user$forms$password_required_match(field) {
  if (cljs.core.truth_(centipair.core.utilities.validators.has_value_QMARK_.call(null, (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(field)))) {
    if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(field), (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, centipair.core.user.forms.password)))) {
      return centipair.core.utilities.validators.validation_success.call(null);
    } else {
      return centipair.core.utilities.validators.validation_error.call(null, "Passwords does not match");
    }
  } else {
    return centipair.core.utilities.validators.validation_error.call(null, centipair.core.utilities.validators.required_field_error);
  }
};
centipair.core.user.forms.confirm_password = reagent.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "id", "id", -1388402092), "confirm-password", new cljs.core.Keyword(null, "type", "type", 1174270348), "password", new cljs.core.Keyword(null, "label", "label", 1718410804), "Confirm Password", new cljs.core.Keyword(null, "validator", "validator", -1966190681), centipair.core.user.forms.password_required_match], null));
centipair.core.user.forms.register_submit = function centipair$core$user$forms$register_submit() {
  return centipair.core.utilities.ajax.form_post.call(null, centipair.core.user.forms.registration_form_state, "/api/register", new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [centipair.core.user.forms.username, centipair.core.user.forms.email, centipair.core.user.forms.password, centipair.core.user.forms.confirm_password], null), function(response) {
    return console.log("yay!!!");
  });
};
centipair.core.user.forms.register_submit_button = reagent.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Submit", new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), centipair.core.user.forms.register_submit, new cljs.core.Keyword(null, "id", "id", -1388402092), "register-submit-button"], null));
centipair.core.user.forms.registration_form = function centipair$core$user$forms$registration_form() {
  return centipair.core.components.input.form_aligned.call(null, centipair.core.user.forms.registration_form_state, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [centipair.core.user.forms.username, centipair.core.user.forms.email, centipair.core.user.forms.password, centipair.core.user.forms.confirm_password, centipair.core.user.forms.accept_box_terms], null), centipair.core.user.forms.register_submit_button);
};
centipair.core.user.forms.render_register_form = function centipair$core$user$forms$render_register_form() {
  return centipair.core.ui.render.call(null, centipair.core.user.forms.registration_form, "register-form");
};
centipair.core.user.forms.login_form_state = reagent.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "title", "title", 636505583), "Login", new cljs.core.Keyword(null, "action", "action", -811238024), "/login-submit", new cljs.core.Keyword(null, "id", "id", -1388402092), "login-form"], null));
centipair.core.user.forms.login_submit = function centipair$core$user$forms$login_submit() {
  return centipair.core.utilities.ajax.form_post.call(null, centipair.core.user.forms.login_form_state, "/api/login", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [centipair.core.user.forms.username, centipair.core.user.forms.password], null), function(response) {
    return console.log(cljs.core.clj__GT_js.call(null, response));
  });
};
centipair.core.user.forms.login_submit_button = reagent.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Submit", new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), centipair.core.user.forms.login_submit, new cljs.core.Keyword(null, "id", "id", -1388402092), "login-submit-button"], null));
centipair.core.user.forms.login_form = function centipair$core$user$forms$login_form() {
  return centipair.core.components.input.form_aligned.call(null, centipair.core.user.forms.login_form_state, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [centipair.core.user.forms.username, centipair.core.user.forms.password], null), centipair.core.user.forms.login_submit_button);
};
centipair.core.user.forms.render_login_form = function centipair$core$user$forms$render_login_form() {
  return centipair.core.ui.render.call(null, centipair.core.user.forms.login_form, "login-form");
};
centipair.core.user.forms.forgot_password_subheading = reagent.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "id", "id", -1388402092), "forgot-password-subheading", new cljs.core.Keyword(null, "label", "label", 1718410804), "Enter your email to reset password", new cljs.core.Keyword(null, "type", "type", 1174270348), "subheading"], null));
centipair.core.user.forms.forgot_password_form_state = reagent.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "title", "title", 636505583), "Forgot password", new cljs.core.Keyword(null, "action", "action", -811238024), "/login-submit", new cljs.core.Keyword(null, "id", "id", -1388402092), "forgot-password-form"], null));
centipair.core.user.forms.forgot_password_success = function centipair$core$user$forms$forgot_password_success() {
  return centipair.core.components.notifier.message.call(null, "Please check your email for instructions on resetting password", "success");
};
centipair.core.user.forms.render_forgot_password_success = function centipair$core$user$forms$render_forgot_password_success() {
  return centipair.core.ui.render.call(null, centipair.core.user.forms.forgot_password_success, "forgot-password-form");
};
centipair.core.user.forms.forgot_password_submit = function centipair$core$user$forms$forgot_password_submit() {
  return centipair.core.utilities.ajax.form_post.call(null, centipair.core.user.forms.forgot_password_form_state, "/forgot-password-submit", new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [centipair.core.user.forms.email], null), function(response) {
    return centipair.core.user.forms.render_forgot_password_success.call(null);
  });
};
centipair.core.user.forms.forgot_password_button = reagent.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Submit", new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), centipair.core.user.forms.forgot_password_submit, new cljs.core.Keyword(null, "id", "id", -1388402092), "forgot-password-button"], null));
centipair.core.user.forms.forgot_password_form = function centipair$core$user$forms$forgot_password_form() {
  return centipair.core.components.input.form_aligned.call(null, centipair.core.user.forms.forgot_password_form_state, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [centipair.core.user.forms.forgot_password_subheading, centipair.core.user.forms.email], null), centipair.core.user.forms.forgot_password_button);
};
centipair.core.user.forms.render_forgot_password_form = function centipair$core$user$forms$render_forgot_password_form() {
  return centipair.core.ui.render.call(null, centipair.core.user.forms.forgot_password_form, "forgot-password-form");
};
centipair.core.user.forms.password_reset_key = reagent.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "id", "id", -1388402092), "password-reset-key", new cljs.core.Keyword(null, "type", "type", 1174270348), "text", new cljs.core.Keyword(null, "value", "value", 305978217), ""], null));
centipair.core.user.forms.reset_password_form_state = reagent.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", -1388402092), "reset-password-form", new cljs.core.Keyword(null, "title", "title", 636505583), "Reset password"], null));
centipair.core.user.forms.reset_password_submit = function centipair$core$user$forms$reset_password_submit() {
  cljs.core.swap_BANG_.call(null, centipair.core.user.forms.password_reset_key, cljs.core.assoc, new cljs.core.Keyword(null, "value", "value", 305978217), centipair.core.utilities.dom.get_value.call(null, "password-reset-key"));
  return centipair.core.utilities.ajax.form_post.call(null, centipair.core.user.forms.reset_password_form_state, "/reset-password-submit", new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [centipair.core.user.forms.password, centipair.core.user.forms.confirm_password, centipair.core.user.forms.password_reset_key], null), function(response) {
    return console.log(cljs.core.clj__GT_js.call(null, response));
  });
};
centipair.core.user.forms.reset_password_button = reagent.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "id", "id", -1388402092), "reset-password-button", new cljs.core.Keyword(null, "type", "type", 1174270348), "button", new cljs.core.Keyword(null, "label", "label", 1718410804), "Submit", new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), centipair.core.user.forms.reset_password_submit], null));
centipair.core.user.forms.reset_password_form = function centipair$core$user$forms$reset_password_form() {
  return centipair.core.components.input.form_aligned.call(null, centipair.core.user.forms.reset_password_form_state, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [centipair.core.user.forms.password, centipair.core.user.forms.confirm_password], null), centipair.core.user.forms.reset_password_button);
};
centipair.core.user.forms.render_reset_password_form = function centipair$core$user$forms$render_reset_password_form() {
  return centipair.core.ui.render.call(null, centipair.core.user.forms.reset_password_form, "login-form");
};
goog.provide("goog.dom.tags");
goog.require("goog.object");
goog.dom.tags.VOID_TAGS_ = goog.object.createSet(("area,base,br,col,command," + "embed,hr,img,input,keygen,link,meta,param,source,track,wbr").split(","));
goog.dom.tags.isVoidTag = function(tagName) {
  return goog.dom.tags.VOID_TAGS_[tagName] === true;
};
goog.provide("goog.string.TypedString");
goog.string.TypedString = function() {
};
goog.string.TypedString.prototype.implementsGoogStringTypedString;
goog.string.TypedString.prototype.getTypedStringValue;
goog.provide("goog.string.Const");
goog.require("goog.asserts");
goog.require("goog.string.TypedString");
goog.string.Const = function() {
  this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = "";
  this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ = goog.string.Const.TYPE_MARKER_;
};
goog.string.Const.prototype.implementsGoogStringTypedString = true;
goog.string.Const.prototype.getTypedStringValue = function() {
  return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
};
goog.string.Const.prototype.toString = function() {
  return "Const{" + this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ + "}";
};
goog.string.Const.unwrap = function(stringConst) {
  if (stringConst instanceof goog.string.Const && stringConst.constructor === goog.string.Const && stringConst.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ === goog.string.Const.TYPE_MARKER_) {
    return stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
  } else {
    goog.asserts.fail("expected object of type Const, got '" + stringConst + "'");
    return "type_error:Const";
  }
};
goog.string.Const.from = function(s) {
  return goog.string.Const.create__googStringSecurityPrivate_(s);
};
goog.string.Const.TYPE_MARKER_ = {};
goog.string.Const.create__googStringSecurityPrivate_ = function(s) {
  var stringConst = new goog.string.Const;
  stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = s;
  return stringConst;
};
goog.provide("goog.html.SafeStyle");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeStyle = function() {
  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = "";
  this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyle.prototype.implementsGoogStringTypedString = true;
goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyle.fromConstant = function(style) {
  var styleString = goog.string.Const.unwrap(style);
  if (styleString.length === 0) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(styleString);
  goog.asserts.assert(goog.string.endsWith(styleString, ";"), "Last character of style string is not ';': " + styleString);
  goog.asserts.assert(goog.string.contains(styleString, ":"), "Style string must contain at least one ':', to " + 'specify a "name: value" pair: ' + styleString);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(styleString);
};
goog.html.SafeStyle.checkStyle_ = function(style) {
  goog.asserts.assert(!/[<>]/.test(style), "Forbidden characters in style string: " + style);
};
goog.html.SafeStyle.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeStyle.prototype.toString = function() {
    return "SafeStyle{" + this.privateDoNotAccessOrElseSafeStyleWrappedValue_ + "}";
  };
}
goog.html.SafeStyle.unwrap = function(safeStyle) {
  if (safeStyle instanceof goog.html.SafeStyle && safeStyle.constructor === goog.html.SafeStyle && safeStyle.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeStyle, got '" + safeStyle + "'");
    return "type_error:SafeStyle";
  }
};
goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse = function(style) {
  var safeStyle = new goog.html.SafeStyle;
  safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_ = style;
  return safeStyle;
};
goog.html.SafeStyle.EMPTY = goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse("");
goog.html.SafeStyle.INNOCUOUS_STRING = "zClosurez";
goog.html.SafeStyle.PropertyMap;
goog.html.SafeStyle.create = function(map) {
  var style = "";
  for (var name in map) {
    if (!/^[-_a-zA-Z0-9]+$/.test(name)) {
      throw Error("Name allows only [-_a-zA-Z0-9], got: " + name);
    }
    var value = map[name];
    if (value == null) {
      continue;
    }
    if (value instanceof goog.string.Const) {
      value = goog.string.Const.unwrap(value);
      goog.asserts.assert(!/[{;}]/.test(value), "Value does not allow [{;}].");
    } else {
      if (!goog.html.SafeStyle.VALUE_RE_.test(value)) {
        goog.asserts.fail("String value allows only [-.%_!# a-zA-Z0-9], got: " + value);
        value = goog.html.SafeStyle.INNOCUOUS_STRING;
      }
    }
    style += name + ":" + value + ";";
  }
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(style);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.html.SafeStyle.VALUE_RE_ = /^[-.%_!# a-zA-Z0-9]+$/;
goog.html.SafeStyle.concat = function(var_args) {
  var style = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      style += goog.html.SafeStyle.unwrap(argument);
    }
  };
  goog.array.forEach(arguments, addArgument);
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.provide("goog.i18n.bidi");
goog.provide("goog.i18n.bidi.Dir");
goog.provide("goog.i18n.bidi.DirectionalString");
goog.provide("goog.i18n.bidi.Format");
goog.define("goog.i18n.bidi.FORCE_RTL", false);
goog.i18n.bidi.IS_RTL = goog.i18n.bidi.FORCE_RTL || (goog.LOCALE.substring(0, 2).toLowerCase() == "ar" || goog.LOCALE.substring(0, 2).toLowerCase() == "fa" || goog.LOCALE.substring(0, 2).toLowerCase() == "he" || goog.LOCALE.substring(0, 2).toLowerCase() == "iw" || goog.LOCALE.substring(0, 2).toLowerCase() == "ps" || goog.LOCALE.substring(0, 2).toLowerCase() == "sd" || goog.LOCALE.substring(0, 2).toLowerCase() == "ug" || goog.LOCALE.substring(0, 2).toLowerCase() == "ur" || goog.LOCALE.substring(0, 
2).toLowerCase() == "yi") && (goog.LOCALE.length == 2 || goog.LOCALE.substring(2, 3) == "-" || goog.LOCALE.substring(2, 3) == "_") || goog.LOCALE.length >= 3 && goog.LOCALE.substring(0, 3).toLowerCase() == "ckb" && (goog.LOCALE.length == 3 || goog.LOCALE.substring(3, 4) == "-" || goog.LOCALE.substring(3, 4) == "_");
goog.i18n.bidi.Format = {LRE:"\u202a", RLE:"\u202b", PDF:"\u202c", LRM:"\u200e", RLM:"\u200f"};
goog.i18n.bidi.Dir = {LTR:1, RTL:-1, NEUTRAL:0, UNKNOWN:0};
goog.i18n.bidi.RIGHT = "right";
goog.i18n.bidi.LEFT = "left";
goog.i18n.bidi.I18N_RIGHT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.LEFT : goog.i18n.bidi.RIGHT;
goog.i18n.bidi.I18N_LEFT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
goog.i18n.bidi.toDir = function(givenDir, opt_noNeutral) {
  if (typeof givenDir == "number") {
    return givenDir > 0 ? goog.i18n.bidi.Dir.LTR : givenDir < 0 ? goog.i18n.bidi.Dir.RTL : opt_noNeutral ? null : goog.i18n.bidi.Dir.NEUTRAL;
  } else {
    if (givenDir == null) {
      return null;
    } else {
      return givenDir ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
    }
  }
};
goog.i18n.bidi.ltrChars_ = "A-Za-z\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u0300-\u0590\u0800-\u1fff" + "\u200e\u2c00-\ufb1c\ufe00-\ufe6f\ufefd-\uffff";
goog.i18n.bidi.rtlChars_ = "\u0591-\u07ff\u200f\ufb1d-\ufdff\ufe70-\ufefc";
goog.i18n.bidi.htmlSkipReg_ = /<[^>]*>|&[^;]+;/g;
goog.i18n.bidi.stripHtmlIfNeeded_ = function(str, opt_isStripNeeded) {
  return opt_isStripNeeded ? str.replace(goog.i18n.bidi.htmlSkipReg_, "") : str;
};
goog.i18n.bidi.rtlCharReg_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.ltrCharReg_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.hasAnyRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.hasRtlChar = goog.i18n.bidi.hasAnyRtl;
goog.i18n.bidi.hasAnyLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.ltrRe_ = new RegExp("^[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlRe_ = new RegExp("^[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.isRtlChar = function(str) {
  return goog.i18n.bidi.rtlRe_.test(str);
};
goog.i18n.bidi.isLtrChar = function(str) {
  return goog.i18n.bidi.ltrRe_.test(str);
};
goog.i18n.bidi.isNeutralChar = function(str) {
  return!goog.i18n.bidi.isLtrChar(str) && !goog.i18n.bidi.isRtlChar(str);
};
goog.i18n.bidi.ltrDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.rtlChars_ + "]*[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.ltrChars_ + "]*[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.startsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlText = goog.i18n.bidi.startsWithRtl;
goog.i18n.bidi.startsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrText = goog.i18n.bidi.startsWithLtr;
goog.i18n.bidi.isRequiredLtrRe_ = /^http:\/\/.*/;
goog.i18n.bidi.isNeutralText = function(str, opt_isHtml) {
  str = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml);
  return goog.i18n.bidi.isRequiredLtrRe_.test(str) || !goog.i18n.bidi.hasAnyLtr(str) && !goog.i18n.bidi.hasAnyRtl(str);
};
goog.i18n.bidi.ltrExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "][^" + goog.i18n.bidi.rtlChars_ + "]*$");
goog.i18n.bidi.rtlExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "][^" + goog.i18n.bidi.ltrChars_ + "]*$");
goog.i18n.bidi.endsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrExitText = goog.i18n.bidi.endsWithLtr;
goog.i18n.bidi.endsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlExitText = goog.i18n.bidi.endsWithRtl;
goog.i18n.bidi.rtlLocalesRe_ = new RegExp("^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|" + ".*[-_](Arab|Hebr|Thaa|Nkoo|Tfng))" + "(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)", "i");
goog.i18n.bidi.isRtlLanguage = function(lang) {
  return goog.i18n.bidi.rtlLocalesRe_.test(lang);
};
goog.i18n.bidi.bracketGuardHtmlRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(&lt;.*?(&gt;)+)/g;
goog.i18n.bidi.bracketGuardTextRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g;
goog.i18n.bidi.guardBracketInHtml = function(s, opt_isRtlContext) {
  var useRtl = opt_isRtlContext === undefined ? goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext;
  if (useRtl) {
    return s.replace(goog.i18n.bidi.bracketGuardHtmlRe_, "\x3cspan dir\x3drtl\x3e$\x26\x3c/span\x3e");
  }
  return s.replace(goog.i18n.bidi.bracketGuardHtmlRe_, "\x3cspan dir\x3dltr\x3e$\x26\x3c/span\x3e");
};
goog.i18n.bidi.guardBracketInText = function(s, opt_isRtlContext) {
  var useRtl = opt_isRtlContext === undefined ? goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext;
  var mark = useRtl ? goog.i18n.bidi.Format.RLM : goog.i18n.bidi.Format.LRM;
  return s.replace(goog.i18n.bidi.bracketGuardTextRe_, mark + "$\x26" + mark);
};
goog.i18n.bidi.enforceRtlInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3drtl");
  }
  return "\n\x3cspan dir\x3drtl\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceRtlInText = function(text) {
  return goog.i18n.bidi.Format.RLE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.enforceLtrInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3dltr");
  }
  return "\n\x3cspan dir\x3dltr\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceLtrInText = function(text) {
  return goog.i18n.bidi.Format.LRE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.dimensionsRe_ = /:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g;
goog.i18n.bidi.leftRe_ = /left/gi;
goog.i18n.bidi.rightRe_ = /right/gi;
goog.i18n.bidi.tempRe_ = /%%%%/g;
goog.i18n.bidi.mirrorCSS = function(cssStr) {
  return cssStr.replace(goog.i18n.bidi.dimensionsRe_, ":$1 $4 $3 $2").replace(goog.i18n.bidi.leftRe_, "%%%%").replace(goog.i18n.bidi.rightRe_, goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_, goog.i18n.bidi.RIGHT);
};
goog.i18n.bidi.doubleQuoteSubstituteRe_ = /([\u0591-\u05f2])"/g;
goog.i18n.bidi.singleQuoteSubstituteRe_ = /([\u0591-\u05f2])'/g;
goog.i18n.bidi.normalizeHebrewQuote = function(str) {
  return str.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_, "$1\u05f4").replace(goog.i18n.bidi.singleQuoteSubstituteRe_, "$1\u05f3");
};
goog.i18n.bidi.wordSeparatorRe_ = /\s+/;
goog.i18n.bidi.hasNumeralsRe_ = /\d/;
goog.i18n.bidi.rtlDetectionThreshold_ = .4;
goog.i18n.bidi.estimateDirection = function(str, opt_isHtml) {
  var rtlCount = 0;
  var totalCount = 0;
  var hasWeaklyLtr = false;
  var tokens = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml).split(goog.i18n.bidi.wordSeparatorRe_);
  for (var i = 0;i < tokens.length;i++) {
    var token = tokens[i];
    if (goog.i18n.bidi.startsWithRtl(token)) {
      rtlCount++;
      totalCount++;
    } else {
      if (goog.i18n.bidi.isRequiredLtrRe_.test(token)) {
        hasWeaklyLtr = true;
      } else {
        if (goog.i18n.bidi.hasAnyLtr(token)) {
          totalCount++;
        } else {
          if (goog.i18n.bidi.hasNumeralsRe_.test(token)) {
            hasWeaklyLtr = true;
          }
        }
      }
    }
  }
  return totalCount == 0 ? hasWeaklyLtr ? goog.i18n.bidi.Dir.LTR : goog.i18n.bidi.Dir.NEUTRAL : rtlCount / totalCount > goog.i18n.bidi.rtlDetectionThreshold_ ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
};
goog.i18n.bidi.detectRtlDirectionality = function(str, opt_isHtml) {
  return goog.i18n.bidi.estimateDirection(str, opt_isHtml) == goog.i18n.bidi.Dir.RTL;
};
goog.i18n.bidi.setElementDirAndAlign = function(element, dir) {
  if (element) {
    dir = goog.i18n.bidi.toDir(dir);
    if (dir) {
      element.style.textAlign = dir == goog.i18n.bidi.Dir.RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
      element.dir = dir == goog.i18n.bidi.Dir.RTL ? "rtl" : "ltr";
    }
  }
};
goog.i18n.bidi.DirectionalString = function() {
};
goog.i18n.bidi.DirectionalString.prototype.implementsGoogI18nBidiDirectionalString;
goog.i18n.bidi.DirectionalString.prototype.getDirection;
goog.provide("goog.html.SafeUrl");
goog.require("goog.asserts");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeUrl = function() {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
  this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeUrl.INNOCUOUS_STRING = "about:invalid#zClosurez";
goog.html.SafeUrl.prototype.implementsGoogStringTypedString = true;
goog.html.SafeUrl.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeUrl.prototype.getDirection = function() {
  return goog.i18n.bidi.Dir.LTR;
};
if (goog.DEBUG) {
  goog.html.SafeUrl.prototype.toString = function() {
    return "SafeUrl{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
  };
}
goog.html.SafeUrl.unwrap = function(safeUrl) {
  if (safeUrl instanceof goog.html.SafeUrl && safeUrl.constructor === goog.html.SafeUrl && safeUrl.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeUrl, got '" + safeUrl + "'");
    return "type_error:SafeUrl";
  }
};
goog.html.SafeUrl.fromConstant = function(url) {
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));
};
goog.html.SAFE_URL_PATTERN_ = /^(?:(?:https?|mailto):|[^&:/?#]*(?:[/?#]|$))/i;
goog.html.SafeUrl.sanitize = function(url) {
  if (url instanceof goog.html.SafeUrl) {
    return url;
  } else {
    if (url.implementsGoogStringTypedString) {
      url = url.getTypedStringValue();
    } else {
      url = String(url);
    }
  }
  if (!goog.html.SAFE_URL_PATTERN_.test(url)) {
    url = goog.html.SafeUrl.INNOCUOUS_STRING;
  } else {
    url = goog.html.SafeUrl.normalize_(url);
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.SafeUrl.normalize_ = function(url) {
  try {
    var normalized = encodeURI(url);
  } catch (e) {
    return goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return normalized.replace(goog.html.SafeUrl.NORMALIZE_MATCHER_, function(match) {
    return goog.html.SafeUrl.NORMALIZE_REPLACER_MAP_[match];
  });
};
goog.html.SafeUrl.NORMALIZE_MATCHER_ = /[()']|%5B|%5D|%25/g;
goog.html.SafeUrl.NORMALIZE_REPLACER_MAP_ = {"'":"%27", "(":"%28", ")":"%29", "%5B":"[", "%5D":"]", "%25":"%"};
goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse = function(url) {
  var safeUrl = new goog.html.SafeUrl;
  safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = url;
  return safeUrl;
};
goog.provide("goog.html.SafeHtml");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.tags");
goog.require("goog.html.SafeStyle");
goog.require("goog.html.SafeUrl");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeHtml = function() {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
  this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
  this.dir_ = null;
};
goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeHtml.prototype.getDirection = function() {
  return this.dir_;
};
goog.html.SafeHtml.prototype.implementsGoogStringTypedString = true;
goog.html.SafeHtml.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeHtml.prototype.toString = function() {
    return "SafeHtml{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
  };
}
goog.html.SafeHtml.unwrap = function(safeHtml) {
  if (safeHtml instanceof goog.html.SafeHtml && safeHtml.constructor === goog.html.SafeHtml && safeHtml.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeHtml.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeHtml, got '" + safeHtml + "'");
    return "type_error:SafeHtml";
  }
};
goog.html.SafeHtml.TextOrHtml_;
goog.html.SafeHtml.htmlEscape = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var dir = null;
  if (textOrHtml.implementsGoogI18nBidiDirectionalString) {
    dir = textOrHtml.getDirection();
  }
  var textAsString;
  if (textOrHtml.implementsGoogStringTypedString) {
    textAsString = textOrHtml.getTypedStringValue();
  } else {
    textAsString = String(textOrHtml);
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.htmlEscape(textAsString), dir);
};
goog.html.SafeHtml.htmlEscapePreservingNewlines = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.newLineToBr(goog.html.SafeHtml.unwrap(html)), html.getDirection());
};
goog.html.SafeHtml.from = goog.html.SafeHtml.htmlEscape;
goog.html.SafeHtml.VALID_NAMES_IN_TAG_ = /^[a-zA-Z0-9-]+$/;
goog.html.SafeHtml.URL_ATTRIBUTES_ = goog.object.createSet("action", "cite", "data", "formaction", "href", "manifest", "poster", "src");
goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_ = goog.object.createSet("link", "script", "style");
goog.html.SafeHtml.AttributeValue_;
goog.html.SafeHtml.create = function(tagName, opt_attributes, opt_content) {
  if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(tagName)) {
    throw Error("Invalid tag name \x3c" + tagName + "\x3e.");
  }
  if (tagName.toLowerCase() in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_) {
    throw Error("Tag name \x3c" + tagName + "\x3e is not allowed for SafeHtml.");
  }
  var dir = null;
  var result = "\x3c" + tagName;
  if (opt_attributes) {
    for (var name in opt_attributes) {
      if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(name)) {
        throw Error('Invalid attribute name "' + name + '".');
      }
      var value = opt_attributes[name];
      if (value == null) {
        continue;
      }
      if (value instanceof goog.string.Const) {
        value = goog.string.Const.unwrap(value);
      } else {
        if (name.toLowerCase() == "style") {
          value = goog.html.SafeHtml.getStyleValue_(value);
        } else {
          if (/^on/i.test(name)) {
            throw Error('Attribute "' + name + '" requires goog.string.Const value, "' + value + '" given.');
          } else {
            if (value instanceof goog.html.SafeUrl) {
              value = goog.html.SafeUrl.unwrap(value);
            } else {
              if (name.toLowerCase() in goog.html.SafeHtml.URL_ATTRIBUTES_) {
                throw Error('Attribute "' + name + '" requires goog.string.Const or goog.html.SafeUrl value, "' + value + '" given.');
              }
            }
          }
        }
      }
      goog.asserts.assert(goog.isString(value) || goog.isNumber(value), "String or number value expected, got " + typeof value + " with value: " + value);
      result += " " + name + '\x3d"' + goog.string.htmlEscape(String(value)) + '"';
    }
  }
  var content = opt_content;
  if (!goog.isDef(content)) {
    content = [];
  } else {
    if (!goog.isArray(content)) {
      content = [content];
    }
  }
  if (goog.dom.tags.isVoidTag(tagName.toLowerCase())) {
    goog.asserts.assert(!content.length, "Void tag \x3c" + tagName + "\x3e does not allow content.");
    result += "\x3e";
  } else {
    var html = goog.html.SafeHtml.concat(content);
    result += "\x3e" + goog.html.SafeHtml.unwrap(html) + "\x3c/" + tagName + "\x3e";
    dir = html.getDirection();
  }
  var dirAttribute = opt_attributes && opt_attributes["dir"];
  if (dirAttribute) {
    if (/^(ltr|rtl|auto)$/i.test(dirAttribute)) {
      dir = goog.i18n.bidi.Dir.NEUTRAL;
    } else {
      dir = null;
    }
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(result, dir);
};
goog.html.SafeHtml.getStyleValue_ = function(value) {
  if (!goog.isObject(value)) {
    throw Error('The "style" attribute requires goog.html.SafeStyle or map ' + "of style properties, " + typeof value + " given: " + value);
  }
  if (!(value instanceof goog.html.SafeStyle)) {
    value = goog.html.SafeStyle.create(value);
  }
  return goog.html.SafeStyle.unwrap(value);
};
goog.html.SafeHtml.createWithDir = function(dir, tagName, opt_attributes, opt_content) {
  var html = goog.html.SafeHtml.create(tagName, opt_attributes, opt_content);
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.concat = function(var_args) {
  var dir = goog.i18n.bidi.Dir.NEUTRAL;
  var content = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      var html = goog.html.SafeHtml.htmlEscape(argument);
      content += goog.html.SafeHtml.unwrap(html);
      var htmlDir = html.getDirection();
      if (dir == goog.i18n.bidi.Dir.NEUTRAL) {
        dir = htmlDir;
      } else {
        if (htmlDir != goog.i18n.bidi.Dir.NEUTRAL && dir != htmlDir) {
          dir = null;
        }
      }
    }
  };
  goog.array.forEach(arguments, addArgument);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content, dir);
};
goog.html.SafeHtml.concatWithDir = function(dir, var_args) {
  var html = goog.html.SafeHtml.concat(goog.array.slice(arguments, 1));
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse = function(html, dir) {
  var safeHtml = new goog.html.SafeHtml;
  safeHtml.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = html;
  safeHtml.dir_ = dir;
  return safeHtml;
};
goog.html.SafeHtml.EMPTY = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("", goog.i18n.bidi.Dir.NEUTRAL);
goog.provide("goog.dom.safe");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeUrl");
goog.dom.safe.setInnerHtml = function(elem, html) {
  elem.innerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.setOuterHtml = function(elem, html) {
  elem.outerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.documentWrite = function(doc, html) {
  doc.write(goog.html.SafeHtml.unwrap(html));
};
goog.dom.safe.setAnchorHref = function(anchor, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  anchor.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setLocationHref = function(loc, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  loc.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.provide("goog.Thenable");
goog.Thenable = function() {
};
goog.Thenable.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
};
goog.Thenable.IMPLEMENTED_BY_PROP = "$goog_Thenable";
goog.Thenable.addImplementation = function(ctor) {
  goog.exportProperty(ctor.prototype, "then", ctor.prototype.then);
  if (COMPILED) {
    ctor.prototype[goog.Thenable.IMPLEMENTED_BY_PROP] = true;
  } else {
    ctor.prototype.$goog_Thenable = true;
  }
};
goog.Thenable.isImplementedBy = function(object) {
  if (!object) {
    return false;
  }
  try {
    if (COMPILED) {
      return!!object[goog.Thenable.IMPLEMENTED_BY_PROP];
    }
    return!!object.$goog_Thenable;
  } catch (e) {
    return false;
  }
};
goog.provide("goog.testing.watchers");
goog.testing.watchers.resetWatchers_ = [];
goog.testing.watchers.signalClockReset = function() {
  var watchers = goog.testing.watchers.resetWatchers_;
  for (var i = 0;i < watchers.length;i++) {
    goog.testing.watchers.resetWatchers_[i]();
  }
};
goog.testing.watchers.watchClockReset = function(fn) {
  goog.testing.watchers.resetWatchers_.push(fn);
};
goog.provide("goog.async.run");
goog.require("goog.async.nextTick");
goog.require("goog.async.throwException");
goog.require("goog.testing.watchers");
goog.async.run = function(callback, opt_context) {
  if (!goog.async.run.schedule_) {
    goog.async.run.initializeRunner_();
  }
  if (!goog.async.run.workQueueScheduled_) {
    goog.async.run.schedule_();
    goog.async.run.workQueueScheduled_ = true;
  }
  goog.async.run.workQueue_.push(new goog.async.run.WorkItem_(callback, opt_context));
};
goog.async.run.initializeRunner_ = function() {
  if (goog.global.Promise && goog.global.Promise.resolve) {
    var promise = goog.global.Promise.resolve();
    goog.async.run.schedule_ = function() {
      promise.then(goog.async.run.processWorkQueue);
    };
  } else {
    goog.async.run.schedule_ = function() {
      goog.async.nextTick(goog.async.run.processWorkQueue);
    };
  }
};
goog.async.run.forceNextTick = function() {
  goog.async.run.schedule_ = function() {
    goog.async.nextTick(goog.async.run.processWorkQueue);
  };
};
goog.async.run.schedule_;
goog.async.run.workQueueScheduled_ = false;
goog.async.run.workQueue_ = [];
if (goog.DEBUG) {
  goog.async.run.resetQueue_ = function() {
    goog.async.run.workQueueScheduled_ = false;
    goog.async.run.workQueue_ = [];
  };
  goog.testing.watchers.watchClockReset(goog.async.run.resetQueue_);
}
goog.async.run.processWorkQueue = function() {
  while (goog.async.run.workQueue_.length) {
    var workItems = goog.async.run.workQueue_;
    goog.async.run.workQueue_ = [];
    for (var i = 0;i < workItems.length;i++) {
      var workItem = workItems[i];
      try {
        workItem.fn.call(workItem.scope);
      } catch (e) {
        goog.async.throwException(e);
      }
    }
  }
  goog.async.run.workQueueScheduled_ = false;
};
goog.async.run.WorkItem_ = function(fn, scope) {
  this.fn = fn;
  this.scope = scope;
};
goog.provide("goog.promise.Resolver");
goog.promise.Resolver = function() {
};
goog.promise.Resolver.prototype.promise;
goog.promise.Resolver.prototype.resolve;
goog.promise.Resolver.prototype.reject;
goog.provide("goog.Promise");
goog.require("goog.Thenable");
goog.require("goog.asserts");
goog.require("goog.async.run");
goog.require("goog.async.throwException");
goog.require("goog.debug.Error");
goog.require("goog.promise.Resolver");
goog.Promise = function(resolver, opt_context) {
  this.state_ = goog.Promise.State_.PENDING;
  this.result_ = undefined;
  this.parent_ = null;
  this.callbackEntries_ = null;
  this.executing_ = false;
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    this.unhandledRejectionId_ = 0;
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      this.hadUnhandledRejection_ = false;
    }
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.stack_ = [];
    this.addStackTrace_(new Error("created"));
    this.currentStep_ = 0;
  }
  try {
    var self = this;
    resolver.call(opt_context, function(value) {
      self.resolve_(goog.Promise.State_.FULFILLED, value);
    }, function(reason) {
      self.resolve_(goog.Promise.State_.REJECTED, reason);
    });
  } catch (e) {
    this.resolve_(goog.Promise.State_.REJECTED, e);
  }
};
goog.define("goog.Promise.LONG_STACK_TRACES", false);
goog.define("goog.Promise.UNHANDLED_REJECTION_DELAY", 0);
goog.Promise.State_ = {PENDING:0, BLOCKED:1, FULFILLED:2, REJECTED:3};
goog.Promise.CallbackEntry_;
goog.Promise.resolve = function(opt_value) {
  return new goog.Promise(function(resolve, reject) {
    resolve(opt_value);
  });
};
goog.Promise.reject = function(opt_reason) {
  return new goog.Promise(function(resolve, reject) {
    reject(opt_reason);
  });
};
goog.Promise.race = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    if (!promises.length) {
      resolve(undefined);
    }
    for (var i = 0, promise;promise = promises[i];i++) {
      promise.then(resolve, reject);
    }
  });
};
goog.Promise.all = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toFulfill = promises.length;
    var values = [];
    if (!toFulfill) {
      resolve(values);
      return;
    }
    var onFulfill = function(index, value) {
      toFulfill--;
      values[index] = value;
      if (toFulfill == 0) {
        resolve(values);
      }
    };
    var onReject = function(reason) {
      reject(reason);
    };
    for (var i = 0, promise;promise = promises[i];i++) {
      promise.then(goog.partial(onFulfill, i), onReject);
    }
  });
};
goog.Promise.firstFulfilled = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toReject = promises.length;
    var reasons = [];
    if (!toReject) {
      resolve(undefined);
      return;
    }
    var onFulfill = function(value) {
      resolve(value);
    };
    var onReject = function(index, reason) {
      toReject--;
      reasons[index] = reason;
      if (toReject == 0) {
        reject(reasons);
      }
    };
    for (var i = 0, promise;promise = promises[i];i++) {
      promise.then(onFulfill, goog.partial(onReject, i));
    }
  });
};
goog.Promise.withResolver = function() {
  var resolve, reject;
  var promise = new goog.Promise(function(rs, rj) {
    resolve = rs;
    reject = rj;
  });
  return new goog.Promise.Resolver_(promise, resolve, reject);
};
goog.Promise.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
  if (opt_onFulfilled != null) {
    goog.asserts.assertFunction(opt_onFulfilled, "opt_onFulfilled should be a function.");
  }
  if (opt_onRejected != null) {
    goog.asserts.assertFunction(opt_onRejected, "opt_onRejected should be a function. Did you pass opt_context " + "as the second argument instead of the third?");
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("then"));
  }
  return this.addChildPromise_(goog.isFunction(opt_onFulfilled) ? opt_onFulfilled : null, goog.isFunction(opt_onRejected) ? opt_onRejected : null, opt_context);
};
goog.Thenable.addImplementation(goog.Promise);
goog.Promise.prototype.thenAlways = function(onResolved, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("thenAlways"));
  }
  var callback = function() {
    try {
      onResolved.call(opt_context);
    } catch (err) {
      goog.Promise.handleRejection_.call(null, err);
    }
  };
  this.addCallbackEntry_({child:null, onRejected:callback, onFulfilled:callback});
  return this;
};
goog.Promise.prototype.thenCatch = function(onRejected, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("thenCatch"));
  }
  return this.addChildPromise_(null, onRejected, opt_context);
};
goog.Promise.prototype.cancel = function(opt_message) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    goog.async.run(function() {
      var err = new goog.Promise.CancellationError(opt_message);
      this.cancelInternal_(err);
    }, this);
  }
};
goog.Promise.prototype.cancelInternal_ = function(err) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    if (this.parent_) {
      this.parent_.cancelChild_(this, err);
    } else {
      this.resolve_(goog.Promise.State_.REJECTED, err);
    }
  }
};
goog.Promise.prototype.cancelChild_ = function(childPromise, err) {
  if (!this.callbackEntries_) {
    return;
  }
  var childCount = 0;
  var childIndex = -1;
  for (var i = 0, entry;entry = this.callbackEntries_[i];i++) {
    var child = entry.child;
    if (child) {
      childCount++;
      if (child == childPromise) {
        childIndex = i;
      }
      if (childIndex >= 0 && childCount > 1) {
        break;
      }
    }
  }
  if (childIndex >= 0) {
    if (this.state_ == goog.Promise.State_.PENDING && childCount == 1) {
      this.cancelInternal_(err);
    } else {
      var callbackEntry = this.callbackEntries_.splice(childIndex, 1)[0];
      this.executeCallback_(callbackEntry, goog.Promise.State_.REJECTED, err);
    }
  }
};
goog.Promise.prototype.addCallbackEntry_ = function(callbackEntry) {
  if ((!this.callbackEntries_ || !this.callbackEntries_.length) && (this.state_ == goog.Promise.State_.FULFILLED || this.state_ == goog.Promise.State_.REJECTED)) {
    this.scheduleCallbacks_();
  }
  if (!this.callbackEntries_) {
    this.callbackEntries_ = [];
  }
  this.callbackEntries_.push(callbackEntry);
};
goog.Promise.prototype.addChildPromise_ = function(onFulfilled, onRejected, opt_context) {
  var callbackEntry = {child:null, onFulfilled:null, onRejected:null};
  callbackEntry.child = new goog.Promise(function(resolve, reject) {
    callbackEntry.onFulfilled = onFulfilled ? function(value) {
      try {
        var result = onFulfilled.call(opt_context, value);
        resolve(result);
      } catch (err) {
        reject(err);
      }
    } : resolve;
    callbackEntry.onRejected = onRejected ? function(reason) {
      try {
        var result = onRejected.call(opt_context, reason);
        if (!goog.isDef(result) && reason instanceof goog.Promise.CancellationError) {
          reject(reason);
        } else {
          resolve(result);
        }
      } catch (err) {
        reject(err);
      }
    } : reject;
  });
  callbackEntry.child.parent_ = this;
  this.addCallbackEntry_((callbackEntry));
  return callbackEntry.child;
};
goog.Promise.prototype.unblockAndFulfill_ = function(value) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.FULFILLED, value);
};
goog.Promise.prototype.unblockAndReject_ = function(reason) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.REJECTED, reason);
};
goog.Promise.prototype.resolve_ = function(state, x) {
  if (this.state_ != goog.Promise.State_.PENDING) {
    return;
  }
  if (this == x) {
    state = goog.Promise.State_.REJECTED;
    x = new TypeError("Promise cannot resolve to itself");
  } else {
    if (goog.Thenable.isImplementedBy(x)) {
      x = (x);
      this.state_ = goog.Promise.State_.BLOCKED;
      x.then(this.unblockAndFulfill_, this.unblockAndReject_, this);
      return;
    } else {
      if (goog.isObject(x)) {
        try {
          var then = x["then"];
          if (goog.isFunction(then)) {
            this.tryThen_(x, then);
            return;
          }
        } catch (e) {
          state = goog.Promise.State_.REJECTED;
          x = e;
        }
      }
    }
  }
  this.result_ = x;
  this.state_ = state;
  this.scheduleCallbacks_();
  if (state == goog.Promise.State_.REJECTED && !(x instanceof goog.Promise.CancellationError)) {
    goog.Promise.addUnhandledRejection_(this, x);
  }
};
goog.Promise.prototype.tryThen_ = function(thenable, then) {
  this.state_ = goog.Promise.State_.BLOCKED;
  var promise = this;
  var called = false;
  var resolve = function(value) {
    if (!called) {
      called = true;
      promise.unblockAndFulfill_(value);
    }
  };
  var reject = function(reason) {
    if (!called) {
      called = true;
      promise.unblockAndReject_(reason);
    }
  };
  try {
    then.call(thenable, resolve, reject);
  } catch (e) {
    reject(e);
  }
};
goog.Promise.prototype.scheduleCallbacks_ = function() {
  if (!this.executing_) {
    this.executing_ = true;
    goog.async.run(this.executeCallbacks_, this);
  }
};
goog.Promise.prototype.executeCallbacks_ = function() {
  while (this.callbackEntries_ && this.callbackEntries_.length) {
    var entries = this.callbackEntries_;
    this.callbackEntries_ = [];
    for (var i = 0;i < entries.length;i++) {
      if (goog.Promise.LONG_STACK_TRACES) {
        this.currentStep_++;
      }
      this.executeCallback_(entries[i], this.state_, this.result_);
    }
  }
  this.executing_ = false;
};
goog.Promise.prototype.executeCallback_ = function(callbackEntry, state, result) {
  if (state == goog.Promise.State_.FULFILLED) {
    callbackEntry.onFulfilled(result);
  } else {
    this.removeUnhandledRejection_();
    callbackEntry.onRejected(result);
  }
};
goog.Promise.prototype.addStackTrace_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && goog.isString(err.stack)) {
    var trace = err.stack.split("\n", 4)[3];
    var message = err.message;
    message += Array(11 - message.length).join(" ");
    this.stack_.push(message + trace);
  }
};
goog.Promise.prototype.appendLongStack_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && err && goog.isString(err.stack) && this.stack_.length) {
    var longTrace = ["Promise trace:"];
    for (var promise = this;promise;promise = promise.parent_) {
      for (var i = this.currentStep_;i >= 0;i--) {
        longTrace.push(promise.stack_[i]);
      }
      longTrace.push("Value: " + "[" + (promise.state_ == goog.Promise.State_.REJECTED ? "REJECTED" : "FULFILLED") + "] " + "\x3c" + String(promise.result_) + "\x3e");
    }
    err.stack += "\n\n" + longTrace.join("\n");
  }
};
goog.Promise.prototype.removeUnhandledRejection_ = function() {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    for (var p = this;p && p.unhandledRejectionId_;p = p.parent_) {
      goog.global.clearTimeout(p.unhandledRejectionId_);
      p.unhandledRejectionId_ = 0;
    }
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      for (var p = this;p && p.hadUnhandledRejection_;p = p.parent_) {
        p.hadUnhandledRejection_ = false;
      }
    }
  }
};
goog.Promise.addUnhandledRejection_ = function(promise, reason) {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    promise.unhandledRejectionId_ = goog.global.setTimeout(function() {
      promise.appendLongStack_(reason);
      goog.Promise.handleRejection_.call(null, reason);
    }, goog.Promise.UNHANDLED_REJECTION_DELAY);
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      promise.hadUnhandledRejection_ = true;
      goog.async.run(function() {
        if (promise.hadUnhandledRejection_) {
          promise.appendLongStack_(reason);
          goog.Promise.handleRejection_.call(null, reason);
        }
      });
    }
  }
};
goog.Promise.handleRejection_ = goog.async.throwException;
goog.Promise.setUnhandledRejectionHandler = function(handler) {
  goog.Promise.handleRejection_ = handler;
};
goog.Promise.CancellationError = function(opt_message) {
  goog.Promise.CancellationError.base(this, "constructor", opt_message);
};
goog.inherits(goog.Promise.CancellationError, goog.debug.Error);
goog.Promise.CancellationError.prototype.name = "cancel";
goog.Promise.Resolver_ = function(promise, resolve, reject) {
  this.promise = promise;
  this.resolve = resolve;
  this.reject = reject;
};
/*
 Portions of this code are from MochiKit, received by
 The Closure Authors under the MIT license. All other code is Copyright
 2005-2009 The Closure Authors. All Rights Reserved.
*/
goog.provide("goog.async.Deferred");
goog.provide("goog.async.Deferred.AlreadyCalledError");
goog.provide("goog.async.Deferred.CanceledError");
goog.require("goog.Promise");
goog.require("goog.Thenable");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug.Error");
goog.async.Deferred = function(opt_onCancelFunction, opt_defaultScope) {
  this.sequence_ = [];
  this.onCancelFunction_ = opt_onCancelFunction;
  this.defaultScope_ = opt_defaultScope || null;
  this.fired_ = false;
  this.hadError_ = false;
  this.result_ = undefined;
  this.blocked_ = false;
  this.blocking_ = false;
  this.silentlyCanceled_ = false;
  this.unhandledErrorId_ = 0;
  this.parent_ = null;
  this.branches_ = 0;
  if (goog.async.Deferred.LONG_STACK_TRACES) {
    this.constructorStack_ = null;
    if (Error.captureStackTrace) {
      var target = {stack:""};
      Error.captureStackTrace(target, goog.async.Deferred);
      if (typeof target.stack == "string") {
        this.constructorStack_ = target.stack.replace(/^[^\n]*\n/, "");
      }
    }
  }
};
goog.define("goog.async.Deferred.STRICT_ERRORS", false);
goog.define("goog.async.Deferred.LONG_STACK_TRACES", false);
goog.async.Deferred.prototype.cancel = function(opt_deepCancel) {
  if (!this.hasFired()) {
    if (this.parent_) {
      var parent = this.parent_;
      delete this.parent_;
      if (opt_deepCancel) {
        parent.cancel(opt_deepCancel);
      } else {
        parent.branchCancel_();
      }
    }
    if (this.onCancelFunction_) {
      this.onCancelFunction_.call(this.defaultScope_, this);
    } else {
      this.silentlyCanceled_ = true;
    }
    if (!this.hasFired()) {
      this.errback(new goog.async.Deferred.CanceledError(this));
    }
  } else {
    if (this.result_ instanceof goog.async.Deferred) {
      this.result_.cancel();
    }
  }
};
goog.async.Deferred.prototype.branchCancel_ = function() {
  this.branches_--;
  if (this.branches_ <= 0) {
    this.cancel();
  }
};
goog.async.Deferred.prototype.continue_ = function(isSuccess, res) {
  this.blocked_ = false;
  this.updateResult_(isSuccess, res);
};
goog.async.Deferred.prototype.updateResult_ = function(isSuccess, res) {
  this.fired_ = true;
  this.result_ = res;
  this.hadError_ = !isSuccess;
  this.fire_();
};
goog.async.Deferred.prototype.check_ = function() {
  if (this.hasFired()) {
    if (!this.silentlyCanceled_) {
      throw new goog.async.Deferred.AlreadyCalledError(this);
    }
    this.silentlyCanceled_ = false;
  }
};
goog.async.Deferred.prototype.callback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.updateResult_(true, opt_result);
};
goog.async.Deferred.prototype.errback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.makeStackTraceLong_(opt_result);
  this.updateResult_(false, opt_result);
};
goog.async.Deferred.prototype.makeStackTraceLong_ = function(error) {
  if (!goog.async.Deferred.LONG_STACK_TRACES) {
    return;
  }
  if (this.constructorStack_ && goog.isObject(error) && error.stack && /^[^\n]+(\n   [^\n]+)+/.test(error.stack)) {
    error.stack = error.stack + "\nDEFERRED OPERATION:\n" + this.constructorStack_;
  }
};
goog.async.Deferred.prototype.assertNotDeferred_ = function(obj) {
  goog.asserts.assert(!(obj instanceof goog.async.Deferred), "An execution sequence may not be initiated with a blocking Deferred.");
};
goog.async.Deferred.prototype.addCallback = function(cb, opt_scope) {
  return this.addCallbacks(cb, null, opt_scope);
};
goog.async.Deferred.prototype.addErrback = function(eb, opt_scope) {
  return this.addCallbacks(null, eb, opt_scope);
};
goog.async.Deferred.prototype.addBoth = function(f, opt_scope) {
  return this.addCallbacks(f, f, opt_scope);
};
goog.async.Deferred.prototype.addCallbacks = function(cb, eb, opt_scope) {
  goog.asserts.assert(!this.blocking_, "Blocking Deferreds can not be re-used");
  this.sequence_.push([cb, eb, opt_scope]);
  if (this.hasFired()) {
    this.fire_();
  }
  return this;
};
goog.async.Deferred.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
  var resolve, reject;
  var promise = new goog.Promise(function(res, rej) {
    resolve = res;
    reject = rej;
  });
  this.addCallbacks(resolve, function(reason) {
    if (reason instanceof goog.async.Deferred.CanceledError) {
      promise.cancel();
    } else {
      reject(reason);
    }
  });
  return promise.then(opt_onFulfilled, opt_onRejected, opt_context);
};
goog.Thenable.addImplementation(goog.async.Deferred);
goog.async.Deferred.prototype.chainDeferred = function(otherDeferred) {
  this.addCallbacks(otherDeferred.callback, otherDeferred.errback, otherDeferred);
  return this;
};
goog.async.Deferred.prototype.awaitDeferred = function(otherDeferred) {
  if (!(otherDeferred instanceof goog.async.Deferred)) {
    return this.addCallback(function() {
      return otherDeferred;
    });
  }
  return this.addCallback(goog.bind(otherDeferred.branch, otherDeferred));
};
goog.async.Deferred.prototype.branch = function(opt_propagateCancel) {
  var d = new goog.async.Deferred;
  this.chainDeferred(d);
  if (opt_propagateCancel) {
    d.parent_ = this;
    this.branches_++;
  }
  return d;
};
goog.async.Deferred.prototype.hasFired = function() {
  return this.fired_;
};
goog.async.Deferred.prototype.isError = function(res) {
  return res instanceof Error;
};
goog.async.Deferred.prototype.hasErrback_ = function() {
  return goog.array.some(this.sequence_, function(sequenceRow) {
    return goog.isFunction(sequenceRow[1]);
  });
};
goog.async.Deferred.prototype.fire_ = function() {
  if (this.unhandledErrorId_ && this.hasFired() && this.hasErrback_()) {
    goog.async.Deferred.unscheduleError_(this.unhandledErrorId_);
    this.unhandledErrorId_ = 0;
  }
  if (this.parent_) {
    this.parent_.branches_--;
    delete this.parent_;
  }
  var res = this.result_;
  var unhandledException = false;
  var isNewlyBlocked = false;
  while (this.sequence_.length && !this.blocked_) {
    var sequenceEntry = this.sequence_.shift();
    var callback = sequenceEntry[0];
    var errback = sequenceEntry[1];
    var scope = sequenceEntry[2];
    var f = this.hadError_ ? errback : callback;
    if (f) {
      try {
        var ret = f.call(scope || this.defaultScope_, res);
        if (goog.isDef(ret)) {
          this.hadError_ = this.hadError_ && (ret == res || this.isError(ret));
          this.result_ = res = ret;
        }
        if (goog.Thenable.isImplementedBy(res)) {
          isNewlyBlocked = true;
          this.blocked_ = true;
        }
      } catch (ex) {
        res = ex;
        this.hadError_ = true;
        this.makeStackTraceLong_(res);
        if (!this.hasErrback_()) {
          unhandledException = true;
        }
      }
    }
  }
  this.result_ = res;
  if (isNewlyBlocked) {
    var onCallback = goog.bind(this.continue_, this, true);
    var onErrback = goog.bind(this.continue_, this, false);
    if (res instanceof goog.async.Deferred) {
      res.addCallbacks(onCallback, onErrback);
      res.blocking_ = true;
    } else {
      res.then(onCallback, onErrback);
    }
  } else {
    if (goog.async.Deferred.STRICT_ERRORS && this.isError(res) && !(res instanceof goog.async.Deferred.CanceledError)) {
      this.hadError_ = true;
      unhandledException = true;
    }
  }
  if (unhandledException) {
    this.unhandledErrorId_ = goog.async.Deferred.scheduleError_(res);
  }
};
goog.async.Deferred.succeed = function(opt_result) {
  var d = new goog.async.Deferred;
  d.callback(opt_result);
  return d;
};
goog.async.Deferred.fromPromise = function(promise) {
  var d = new goog.async.Deferred;
  d.callback();
  d.addCallback(function() {
    return promise;
  });
  return d;
};
goog.async.Deferred.fail = function(res) {
  var d = new goog.async.Deferred;
  d.errback(res);
  return d;
};
goog.async.Deferred.canceled = function() {
  var d = new goog.async.Deferred;
  d.cancel();
  return d;
};
goog.async.Deferred.when = function(value, callback, opt_scope) {
  if (value instanceof goog.async.Deferred) {
    return value.branch(true).addCallback(callback, opt_scope);
  } else {
    return goog.async.Deferred.succeed(value).addCallback(callback, opt_scope);
  }
};
goog.async.Deferred.AlreadyCalledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.AlreadyCalledError, goog.debug.Error);
goog.async.Deferred.AlreadyCalledError.prototype.message = "Deferred has already fired";
goog.async.Deferred.AlreadyCalledError.prototype.name = "AlreadyCalledError";
goog.async.Deferred.CanceledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.CanceledError, goog.debug.Error);
goog.async.Deferred.CanceledError.prototype.message = "Deferred was canceled";
goog.async.Deferred.CanceledError.prototype.name = "CanceledError";
goog.async.Deferred.Error_ = function(error) {
  this.id_ = goog.global.setTimeout(goog.bind(this.throwError, this), 0);
  this.error_ = error;
};
goog.async.Deferred.Error_.prototype.throwError = function() {
  goog.asserts.assert(goog.async.Deferred.errorMap_[this.id_], "Cannot throw an error that is not scheduled.");
  delete goog.async.Deferred.errorMap_[this.id_];
  throw this.error_;
};
goog.async.Deferred.Error_.prototype.resetTimer = function() {
  goog.global.clearTimeout(this.id_);
};
goog.async.Deferred.errorMap_ = {};
goog.async.Deferred.scheduleError_ = function(error) {
  var deferredError = new goog.async.Deferred.Error_(error);
  goog.async.Deferred.errorMap_[deferredError.id_] = deferredError;
  return deferredError.id_;
};
goog.async.Deferred.unscheduleError_ = function(id) {
  var error = goog.async.Deferred.errorMap_[id];
  if (error) {
    error.resetTimer();
    delete goog.async.Deferred.errorMap_[id];
  }
};
goog.async.Deferred.assertNoErrors = function() {
  var map = goog.async.Deferred.errorMap_;
  for (var key in map) {
    var error = map[key];
    error.resetTimer();
    error.throwError();
  }
};
goog.provide("goog.net.xpc.DirectTransport");
goog.require("goog.Timer");
goog.require("goog.async.Deferred");
goog.require("goog.events.EventHandler");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.object");
goog.scope(function() {
  var CfgFields = goog.net.xpc.CfgFields;
  var CrossPageChannelRole = goog.net.xpc.CrossPageChannelRole;
  var Deferred = goog.async.Deferred;
  var EventHandler = goog.events.EventHandler;
  var Timer = goog.Timer;
  var Transport = goog.net.xpc.Transport;
  goog.net.xpc.DirectTransport = function(channel, opt_domHelper) {
    goog.net.xpc.DirectTransport.base(this, "constructor", opt_domHelper);
    this.channel_ = channel;
    this.eventHandler_ = new EventHandler(this);
    this.registerDisposable(this.eventHandler_);
    this.maybeAttemptToConnectTimer_ = new Timer(DirectTransport.CONNECTION_ATTEMPT_INTERVAL_MS_, this.getWindow());
    this.registerDisposable(this.maybeAttemptToConnectTimer_);
    this.setupAckReceived_ = new Deferred;
    this.setupAckSent_ = new Deferred;
    this.connected_ = new Deferred;
    this.endpointId_ = goog.net.xpc.getRandomString(10);
    this.peerEndpointId_ = null;
    this.asyncSendsMap_ = {};
    this.originalChannelName_ = this.channel_.name;
    this.channel_.updateChannelNameAndCatalog(DirectTransport.getRoledChannelName_(this.channel_.name, this.channel_.getRole()));
    this.initialized_ = false;
    this.connected_.awaitDeferred(this.setupAckReceived_);
    this.connected_.awaitDeferred(this.setupAckSent_);
    this.connected_.addCallback(this.notifyConnected_, this);
    this.connected_.callback(true);
    this.eventHandler_.listen(this.maybeAttemptToConnectTimer_, Timer.TICK, this.maybeAttemptToConnect_);
    goog.log.info(goog.net.xpc.logger, "DirectTransport created. role\x3d" + this.channel_.getRole());
  };
  goog.inherits(goog.net.xpc.DirectTransport, Transport);
  var DirectTransport = goog.net.xpc.DirectTransport;
  DirectTransport.CONNECTION_ATTEMPT_INTERVAL_MS_ = 100;
  DirectTransport.CONNECTION_DELAY_INTERVAL_MS_ = 0;
  DirectTransport.isSupported = function(peerWindow) {
    try {
      return window.document.domain == peerWindow.document.domain;
    } catch (e) {
      return false;
    }
  };
  DirectTransport.activeCount_ = {};
  DirectTransport.GLOBAL_TRANPORT_PATH_ = "crosswindowmessaging.channel";
  DirectTransport.MESSAGE_DELIMITER_ = ",";
  DirectTransport.initialize_ = function(listenWindow) {
    var uid = goog.getUid(listenWindow);
    var value = DirectTransport.activeCount_[uid] || 0;
    if (value == 0) {
      var globalProxy = goog.getObjectByName(DirectTransport.GLOBAL_TRANPORT_PATH_, listenWindow);
      if (globalProxy == null) {
        goog.exportSymbol(DirectTransport.GLOBAL_TRANPORT_PATH_, DirectTransport.messageReceivedHandler_, listenWindow);
      }
    }
    DirectTransport.activeCount_[uid]++;
  };
  DirectTransport.getRoledChannelName_ = function(channelName, role) {
    return channelName + "_" + role;
  };
  DirectTransport.messageReceivedHandler_ = function(literal) {
    var msg = DirectTransport.Message_.fromLiteral(literal);
    var channelName = msg.channelName;
    var service = msg.service;
    var payload = msg.payload;
    goog.log.fine(goog.net.xpc.logger, "messageReceived: channel\x3d" + channelName + ", service\x3d" + service + ", payload\x3d" + payload);
    var channel = goog.net.xpc.channels[channelName];
    if (channel) {
      channel.xpcDeliver(service, payload);
      return true;
    }
    var transportMessageType = DirectTransport.parseTransportPayload_(payload)[0];
    for (var staleChannelName in goog.net.xpc.channels) {
      var staleChannel = goog.net.xpc.channels[staleChannelName];
      if (staleChannel.getRole() == CrossPageChannelRole.INNER && !staleChannel.isConnected() && service == goog.net.xpc.TRANSPORT_SERVICE_ && transportMessageType == goog.net.xpc.SETUP) {
        staleChannel.updateChannelNameAndCatalog(channelName);
        staleChannel.xpcDeliver(service, payload);
        return true;
      }
    }
    goog.log.info(goog.net.xpc.logger, "channel name mismatch; message ignored.");
    return false;
  };
  DirectTransport.prototype.transportType = goog.net.xpc.TransportTypes.DIRECT;
  DirectTransport.prototype.transportServiceHandler = function(payload) {
    var transportParts = DirectTransport.parseTransportPayload_(payload);
    var transportMessageType = transportParts[0];
    var peerEndpointId = transportParts[1];
    switch(transportMessageType) {
      case goog.net.xpc.SETUP_ACK_:
        if (!this.setupAckReceived_.hasFired()) {
          this.setupAckReceived_.callback(true);
        }
        break;
      case goog.net.xpc.SETUP:
        this.sendSetupAckMessage_();
        if (this.peerEndpointId_ != null && this.peerEndpointId_ != peerEndpointId) {
          goog.log.info(goog.net.xpc.logger, "Sending SETUP and changing peer ID to: " + peerEndpointId);
          this.sendSetupMessage_();
        }
        this.peerEndpointId_ = peerEndpointId;
        break;
    }
  };
  DirectTransport.prototype.sendSetupMessage_ = function() {
    var payload = goog.net.xpc.SETUP;
    payload += DirectTransport.MESSAGE_DELIMITER_;
    payload += this.endpointId_;
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, payload);
  };
  DirectTransport.prototype.sendSetupAckMessage_ = function() {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    if (!this.setupAckSent_.hasFired()) {
      this.setupAckSent_.callback(true);
    }
  };
  DirectTransport.prototype.connect = function() {
    var win = this.getWindow();
    if (win) {
      DirectTransport.initialize_(win);
      this.initialized_ = true;
      this.maybeAttemptToConnect_();
    } else {
      goog.log.fine(goog.net.xpc.logger, "connect(): no window to initialize.");
    }
  };
  DirectTransport.prototype.maybeAttemptToConnect_ = function() {
    var outerRole = this.channel_.getRole() == CrossPageChannelRole.OUTER;
    if (this.channel_.isConnected()) {
      this.maybeAttemptToConnectTimer_.stop();
      return;
    }
    this.maybeAttemptToConnectTimer_.start();
    this.sendSetupMessage_();
  };
  DirectTransport.prototype.send = function(service, payload) {
    if (!this.channel_.getPeerWindowObject()) {
      goog.log.fine(goog.net.xpc.logger, "send(): window not ready");
      return;
    }
    var channelName = DirectTransport.getRoledChannelName_(this.originalChannelName_, this.getPeerRole_());
    var message = new DirectTransport.Message_(channelName, service, payload);
    if (this.channel_.getConfig()[CfgFields.DIRECT_TRANSPORT_SYNC_MODE]) {
      this.executeScheduledSend_(message);
    } else {
      this.asyncSendsMap_[goog.getUid(message)] = Timer.callOnce(goog.bind(this.executeScheduledSend_, this, message), 0);
    }
  };
  DirectTransport.prototype.executeScheduledSend_ = function(message) {
    var messageId = goog.getUid(message);
    if (this.asyncSendsMap_[messageId]) {
      delete this.asyncSendsMap_[messageId];
    }
    try {
      var peerProxy = goog.getObjectByName(DirectTransport.GLOBAL_TRANPORT_PATH_, this.channel_.getPeerWindowObject());
    } catch (error) {
      goog.log.warning(goog.net.xpc.logger, "Can't access other window, ignoring.", error);
      return;
    }
    if (goog.isNull(peerProxy)) {
      goog.log.warning(goog.net.xpc.logger, "Peer window had no global function.");
      return;
    }
    try {
      peerProxy(message.toLiteral());
      goog.log.info(goog.net.xpc.logger, "send(): channelName\x3d" + message.channelName + " service\x3d" + message.service + " payload\x3d" + message.payload);
    } catch (error) {
      goog.log.warning(goog.net.xpc.logger, "Error performing call, ignoring.", error);
    }
  };
  DirectTransport.prototype.getPeerRole_ = function() {
    var role = this.channel_.getRole();
    return role == goog.net.xpc.CrossPageChannelRole.OUTER ? goog.net.xpc.CrossPageChannelRole.INNER : goog.net.xpc.CrossPageChannelRole.OUTER;
  };
  DirectTransport.prototype.notifyConnected_ = function() {
    this.channel_.notifyConnected(this.channel_.getConfig()[CfgFields.DIRECT_TRANSPORT_SYNC_MODE] ? DirectTransport.CONNECTION_DELAY_INTERVAL_MS_ : 0);
  };
  DirectTransport.prototype.disposeInternal = function() {
    if (this.initialized_) {
      var listenWindow = this.getWindow();
      var uid = goog.getUid(listenWindow);
      var value = --DirectTransport.activeCount_[uid];
      if (value == 1) {
        goog.exportSymbol(DirectTransport.GLOBAL_TRANPORT_PATH_, null, listenWindow);
      }
    }
    if (this.asyncSendsMap_) {
      goog.object.forEach(this.asyncSendsMap_, function(timerId) {
        Timer.clear(timerId);
      });
      this.asyncSendsMap_ = null;
    }
    if (this.setupAckReceived_) {
      this.setupAckReceived_.cancel();
      delete this.setupAckReceived_;
    }
    if (this.setupAckSent_) {
      this.setupAckSent_.cancel();
      delete this.setupAckSent_;
    }
    if (this.connected_) {
      this.connected_.cancel();
      delete this.connected_;
    }
    DirectTransport.base(this, "disposeInternal");
  };
  DirectTransport.parseTransportPayload_ = function(payload) {
    var transportParts = (payload.split(DirectTransport.MESSAGE_DELIMITER_));
    transportParts[1] = transportParts[1] || null;
    return transportParts;
  };
  DirectTransport.Message_ = function(channelName, service, payload) {
    this.channelName = channelName;
    this.service = service;
    this.payload = payload;
  };
  DirectTransport.Message_.prototype.toLiteral = function() {
    return{"channelName":this.channelName, "service":this.service, "payload":this.payload};
  };
  DirectTransport.Message_.fromLiteral = function(literal) {
    return new DirectTransport.Message_(literal["channelName"], literal["service"], literal["payload"]);
  };
});
goog.provide("goog.Delay");
goog.provide("goog.async.Delay");
goog.require("goog.Disposable");
goog.require("goog.Timer");
goog.async.Delay = function(listener, opt_interval, opt_handler) {
  goog.Disposable.call(this);
  this.listener_ = listener;
  this.interval_ = opt_interval || 0;
  this.handler_ = opt_handler;
  this.callback_ = goog.bind(this.doAction_, this);
};
goog.inherits(goog.async.Delay, goog.Disposable);
goog.Delay = goog.async.Delay;
goog.async.Delay.prototype.id_ = 0;
goog.async.Delay.prototype.disposeInternal = function() {
  goog.async.Delay.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.listener_;
  delete this.handler_;
};
goog.async.Delay.prototype.start = function(opt_interval) {
  this.stop();
  this.id_ = goog.Timer.callOnce(this.callback_, goog.isDef(opt_interval) ? opt_interval : this.interval_);
};
goog.async.Delay.prototype.stop = function() {
  if (this.isActive()) {
    goog.Timer.clear(this.id_);
  }
  this.id_ = 0;
};
goog.async.Delay.prototype.fire = function() {
  this.stop();
  this.doAction_();
};
goog.async.Delay.prototype.fireIfActive = function() {
  if (this.isActive()) {
    this.fire();
  }
};
goog.async.Delay.prototype.isActive = function() {
  return this.id_ != 0;
};
goog.async.Delay.prototype.doAction_ = function() {
  this.id_ = 0;
  if (this.listener_) {
    this.listener_.call(this.handler_);
  }
};
goog.provide("goog.messaging.MessageChannel");
goog.messaging.MessageChannel = function() {
};
goog.messaging.MessageChannel.prototype.connect = function(opt_connectCb) {
};
goog.messaging.MessageChannel.prototype.isConnected = function() {
};
goog.messaging.MessageChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
};
goog.messaging.MessageChannel.prototype.registerDefaultService = function(callback) {
};
goog.messaging.MessageChannel.prototype.send = function(serviceName, payload) {
};
goog.provide("goog.messaging.AbstractChannel");
goog.require("goog.Disposable");
goog.require("goog.debug");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.messaging.MessageChannel");
goog.messaging.AbstractChannel = function() {
  goog.messaging.AbstractChannel.base(this, "constructor");
  this.services_ = {};
};
goog.inherits(goog.messaging.AbstractChannel, goog.Disposable);
goog.messaging.AbstractChannel.prototype.defaultService_;
goog.messaging.AbstractChannel.prototype.logger = goog.log.getLogger("goog.messaging.AbstractChannel");
goog.messaging.AbstractChannel.prototype.connect = function(opt_connectCb) {
  if (opt_connectCb) {
    opt_connectCb();
  }
};
goog.messaging.AbstractChannel.prototype.isConnected = function() {
  return true;
};
goog.messaging.AbstractChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
  this.services_[serviceName] = {callback:callback, objectPayload:!!opt_objectPayload};
};
goog.messaging.AbstractChannel.prototype.registerDefaultService = function(callback) {
  this.defaultService_ = callback;
};
goog.messaging.AbstractChannel.prototype.send = goog.abstractMethod;
goog.messaging.AbstractChannel.prototype.deliver = function(serviceName, payload) {
  var service = this.getService(serviceName, payload);
  if (!service) {
    return;
  }
  var decodedPayload = this.decodePayload(serviceName, payload, service.objectPayload);
  if (goog.isDefAndNotNull(decodedPayload)) {
    service.callback(decodedPayload);
  }
};
goog.messaging.AbstractChannel.prototype.getService = function(serviceName, payload) {
  var service = this.services_[serviceName];
  if (service) {
    return service;
  } else {
    if (this.defaultService_) {
      var callback = goog.partial(this.defaultService_, serviceName);
      var objectPayload = goog.isObject(payload);
      return{callback:callback, objectPayload:objectPayload};
    }
  }
  goog.log.warning(this.logger, 'Unknown service name "' + serviceName + '"');
  return null;
};
goog.messaging.AbstractChannel.prototype.decodePayload = function(serviceName, payload, objectPayload) {
  if (objectPayload && goog.isString(payload)) {
    try {
      return goog.json.parse(payload);
    } catch (err) {
      goog.log.warning(this.logger, "Expected JSON payload for " + serviceName + ', was "' + payload + '"');
      return null;
    }
  } else {
    if (!objectPayload && !goog.isString(payload)) {
      return goog.json.serialize(payload);
    }
  }
  return payload;
};
goog.messaging.AbstractChannel.prototype.disposeInternal = function() {
  goog.messaging.AbstractChannel.base(this, "disposeInternal");
  delete this.logger;
  delete this.services_;
  delete this.defaultService_;
};
goog.provide("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.net.xpc.FrameElementMethodTransport = function(channel, opt_domHelper) {
  goog.net.xpc.FrameElementMethodTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.queue_ = [];
  this.deliverQueuedCb_ = goog.bind(this.deliverQueued_, this);
};
goog.inherits(goog.net.xpc.FrameElementMethodTransport, goog.net.xpc.Transport);
goog.net.xpc.FrameElementMethodTransport.prototype.transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;
goog.net.xpc.FrameElementMethodTransport.prototype.recursive_ = false;
goog.net.xpc.FrameElementMethodTransport.prototype.timer_ = 0;
goog.net.xpc.FrameElementMethodTransport.outgoing_ = null;
goog.net.xpc.FrameElementMethodTransport.prototype.connect = function() {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.iframeElm_ = this.channel_.getIframeElement();
    this.iframeElm_["XPC_toOuter"] = goog.bind(this.incoming_, this);
  } else {
    this.attemptSetup_();
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.attemptSetup_ = function() {
  var retry = true;
  try {
    if (!this.iframeElm_) {
      this.iframeElm_ = this.getWindow().frameElement;
    }
    if (this.iframeElm_ && this.iframeElm_["XPC_toOuter"]) {
      this.outgoing_ = this.iframeElm_["XPC_toOuter"];
      this.iframeElm_["XPC_toOuter"]["XPC_toInner"] = goog.bind(this.incoming_, this);
      retry = false;
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
      this.channel_.notifyConnected();
    }
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting setup: " + e);
  }
  if (retry) {
    if (!this.attemptSetupCb_) {
      this.attemptSetupCb_ = goog.bind(this.attemptSetup_, this);
    }
    this.getWindow().setTimeout(this.attemptSetupCb_, 100);
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.transportServiceHandler = function(payload) {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER && !this.channel_.isConnected() && payload == goog.net.xpc.SETUP_ACK_) {
    this.outgoing_ = this.iframeElm_["XPC_toOuter"]["XPC_toInner"];
    this.channel_.notifyConnected();
  } else {
    throw Error("Got unexpected transport message.");
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.incoming_ = function(serviceName, payload) {
  if (!this.recursive_ && this.queue_.length == 0) {
    this.channel_.xpcDeliver(serviceName, payload);
  } else {
    this.queue_.push({serviceName:serviceName, payload:payload});
    if (this.queue_.length == 1) {
      this.timer_ = this.getWindow().setTimeout(this.deliverQueuedCb_, 1);
    }
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.deliverQueued_ = function() {
  while (this.queue_.length) {
    var msg = this.queue_.shift();
    this.channel_.xpcDeliver(msg.serviceName, msg.payload);
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.send = function(service, payload) {
  this.recursive_ = true;
  this.outgoing_(service, payload);
  this.recursive_ = false;
};
goog.net.xpc.FrameElementMethodTransport.prototype.disposeInternal = function() {
  goog.net.xpc.FrameElementMethodTransport.superClass_.disposeInternal.call(this);
  this.outgoing_ = null;
  this.iframeElm_ = null;
};
goog.provide("goog.net.xpc.IframeRelayTransport");
goog.require("goog.dom");
goog.require("goog.dom.safe");
goog.require("goog.events");
goog.require("goog.html.SafeHtml");
goog.require("goog.log");
goog.require("goog.log.Level");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.userAgent");
goog.net.xpc.IframeRelayTransport = function(channel, opt_domHelper) {
  goog.net.xpc.IframeRelayTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.peerRelayUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.PEER_RELAY_URI];
  this.peerIframeId_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.IFRAME_ID];
  if (goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.startCleanupTimer_();
  }
};
goog.inherits(goog.net.xpc.IframeRelayTransport, goog.net.xpc.Transport);
if (goog.userAgent.WEBKIT) {
  goog.net.xpc.IframeRelayTransport.iframeRefs_ = [];
  goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_ = 1E3;
  goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_ = 3E3;
  goog.net.xpc.IframeRelayTransport.cleanupTimer_ = 0;
  goog.net.xpc.IframeRelayTransport.startCleanupTimer_ = function() {
    if (!goog.net.xpc.IframeRelayTransport.cleanupTimer_) {
      goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(function() {
        goog.net.xpc.IframeRelayTransport.cleanup_();
      }, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_);
    }
  };
  goog.net.xpc.IframeRelayTransport.cleanup_ = function(opt_maxAge) {
    var now = goog.now();
    var maxAge = opt_maxAge || goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_;
    while (goog.net.xpc.IframeRelayTransport.iframeRefs_.length && now - goog.net.xpc.IframeRelayTransport.iframeRefs_[0].timestamp >= maxAge) {
      var ifr = goog.net.xpc.IframeRelayTransport.iframeRefs_.shift().iframeElement;
      goog.dom.removeNode(ifr);
      goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "iframe removed");
    }
    goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(goog.net.xpc.IframeRelayTransport.cleanupCb_, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_);
  };
  goog.net.xpc.IframeRelayTransport.cleanupCb_ = function() {
    goog.net.xpc.IframeRelayTransport.cleanup_();
  };
}
goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_ = 1800;
goog.net.xpc.IframeRelayTransport.FragmentInfo;
goog.net.xpc.IframeRelayTransport.fragmentMap_ = {};
goog.net.xpc.IframeRelayTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;
goog.net.xpc.IframeRelayTransport.prototype.connect = function() {
  if (!this.getWindow()["xpcRelay"]) {
    this.getWindow()["xpcRelay"] = goog.net.xpc.IframeRelayTransport.receiveMessage_;
  }
  this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);
};
goog.net.xpc.IframeRelayTransport.receiveMessage_ = function(channelName, frame) {
  var pos = frame.indexOf(":");
  var header = frame.substr(0, pos);
  var payload = frame.substr(pos + 1);
  if (!goog.userAgent.IE || (pos = header.indexOf("|")) == -1) {
    var service = header
  } else {
    var service = header.substr(0, pos);
    var fragmentIdStr = header.substr(pos + 1);
    pos = fragmentIdStr.indexOf("+");
    var messageIdStr = fragmentIdStr.substr(0, pos);
    var fragmentNum = parseInt(fragmentIdStr.substr(pos + 1), 10);
    var fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr];
    if (!fragmentInfo) {
      fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr] = {fragments:[], received:0, expected:0};
    }
    if (goog.string.contains(fragmentIdStr, "++")) {
      fragmentInfo.expected = fragmentNum + 1;
    }
    fragmentInfo.fragments[fragmentNum] = payload;
    fragmentInfo.received++;
    if (fragmentInfo.received != fragmentInfo.expected) {
      return;
    }
    payload = fragmentInfo.fragments.join("");
    delete goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr];
  }
  goog.net.xpc.channels[channelName].xpcDeliver(service, decodeURIComponent(payload));
};
goog.net.xpc.IframeRelayTransport.prototype.transportServiceHandler = function(payload) {
  if (payload == goog.net.xpc.SETUP) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    this.channel_.notifyConnected();
  } else {
    if (payload == goog.net.xpc.SETUP_ACK_) {
      this.channel_.notifyConnected();
    }
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send = function(service, payload) {
  var encodedPayload = encodeURIComponent(payload);
  var encodedLen = encodedPayload.length;
  var maxSize = goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_;
  if (goog.userAgent.IE && encodedLen > maxSize) {
    var messageIdStr = goog.string.getRandomString();
    for (var startIndex = 0, fragmentNum = 0;startIndex < encodedLen;fragmentNum++) {
      var payloadFragment = encodedPayload.substr(startIndex, maxSize);
      startIndex += maxSize;
      var fragmentIdStr = messageIdStr + (startIndex >= encodedLen ? "++" : "+") + fragmentNum;
      this.send_(service, payloadFragment, fragmentIdStr);
    }
  } else {
    this.send_(service, encodedPayload);
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send_ = function(service, encodedPayload, opt_fragmentIdStr) {
  if (goog.userAgent.IE) {
    var div = this.getWindow().document.createElement("div");
    goog.dom.safe.setInnerHtml(div, goog.html.SafeHtml.create("iframe", {"onload":goog.string.Const.from("this.xpcOnload()")}));
    var ifr = div.childNodes[0];
    div = null;
    ifr["xpcOnload"] = goog.net.xpc.IframeRelayTransport.iframeLoadHandler_;
  } else {
    var ifr = this.getWindow().document.createElement("iframe");
    if (goog.userAgent.WEBKIT) {
      goog.net.xpc.IframeRelayTransport.iframeRefs_.push({timestamp:goog.now(), iframeElement:ifr});
    } else {
      goog.events.listen(ifr, "load", goog.net.xpc.IframeRelayTransport.iframeLoadHandler_);
    }
  }
  var style = ifr.style;
  style.visibility = "hidden";
  style.width = ifr.style.height = "0px";
  style.position = "absolute";
  var url = this.peerRelayUri_;
  url += "#" + this.channel_.name;
  if (this.peerIframeId_) {
    url += "," + this.peerIframeId_;
  }
  url += "|" + service;
  if (opt_fragmentIdStr) {
    url += "|" + opt_fragmentIdStr;
  }
  url += ":" + encodedPayload;
  ifr.src = url;
  this.getWindow().document.body.appendChild(ifr);
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "msg sent: " + url);
};
goog.net.xpc.IframeRelayTransport.iframeLoadHandler_ = function() {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "iframe-load");
  goog.dom.removeNode(this);
  this.xpcOnload = null;
};
goog.net.xpc.IframeRelayTransport.prototype.disposeInternal = function() {
  goog.net.xpc.IframeRelayTransport.base(this, "disposeInternal");
  if (goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.cleanup_(0);
  }
};
goog.provide("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.Timer");
goog.require("goog.asserts");
goog.require("goog.async.Deferred");
goog.require("goog.events");
goog.require("goog.events.EventHandler");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.net.xpc.NativeMessagingTransport = function(channel, peerHostname, opt_domHelper, opt_oneSidedHandshake, opt_protocolVersion) {
  goog.net.xpc.NativeMessagingTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.protocolVersion_ = opt_protocolVersion || 2;
  goog.asserts.assert(this.protocolVersion_ >= 1);
  goog.asserts.assert(this.protocolVersion_ <= 2);
  this.peerHostname_ = peerHostname || "*";
  this.eventHandler_ = new goog.events.EventHandler(this);
  this.maybeAttemptToConnectTimer_ = new goog.Timer(100, this.getWindow());
  this.oneSidedHandshake_ = !!opt_oneSidedHandshake;
  this.setupAckReceived_ = new goog.async.Deferred;
  this.setupAckSent_ = new goog.async.Deferred;
  this.connected_ = new goog.async.Deferred;
  this.endpointId_ = goog.net.xpc.getRandomString(10);
  this.peerEndpointId_ = null;
  if (this.oneSidedHandshake_) {
    if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER) {
      this.connected_.awaitDeferred(this.setupAckReceived_);
    } else {
      this.connected_.awaitDeferred(this.setupAckSent_);
    }
  } else {
    this.connected_.awaitDeferred(this.setupAckReceived_);
    if (this.protocolVersion_ == 2) {
      this.connected_.awaitDeferred(this.setupAckSent_);
    }
  }
  this.connected_.addCallback(this.notifyConnected_, this);
  this.connected_.callback(true);
  this.eventHandler_.listen(this.maybeAttemptToConnectTimer_, goog.Timer.TICK, this.maybeAttemptToConnect_);
  goog.log.info(goog.net.xpc.logger, "NativeMessagingTransport created.  " + "protocolVersion\x3d" + this.protocolVersion_ + ", oneSidedHandshake\x3d" + this.oneSidedHandshake_ + ", role\x3d" + this.channel_.getRole());
};
goog.inherits(goog.net.xpc.NativeMessagingTransport, goog.net.xpc.Transport);
goog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ = 200;
goog.net.xpc.NativeMessagingTransport.prototype.peerProtocolVersion_ = null;
goog.net.xpc.NativeMessagingTransport.prototype.initialized_ = false;
goog.net.xpc.NativeMessagingTransport.prototype.transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;
goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_ = ",";
goog.net.xpc.NativeMessagingTransport.activeCount_ = {};
goog.net.xpc.NativeMessagingTransport.sendTimerId_ = 0;
goog.net.xpc.NativeMessagingTransport.prototype.couldPeerVersionBe_ = function(version) {
  return this.peerProtocolVersion_ == null || this.peerProtocolVersion_ == version;
};
goog.net.xpc.NativeMessagingTransport.initialize_ = function(listenWindow) {
  var uid = goog.getUid(listenWindow);
  var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
  if (!goog.isNumber(value)) {
    value = 0;
  }
  if (value == 0) {
    goog.events.listen(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport);
  }
  goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value + 1;
};
goog.net.xpc.NativeMessagingTransport.messageReceived_ = function(msgEvt) {
  var data = msgEvt.getBrowserEvent().data;
  if (!goog.isString(data)) {
    return false;
  }
  var headDelim = data.indexOf("|");
  var serviceDelim = data.indexOf(":");
  if (headDelim == -1 || serviceDelim == -1) {
    return false;
  }
  var channelName = data.substring(0, headDelim);
  var service = data.substring(headDelim + 1, serviceDelim);
  var payload = data.substring(serviceDelim + 1);
  goog.log.fine(goog.net.xpc.logger, "messageReceived: channel\x3d" + channelName + ", service\x3d" + service + ", payload\x3d" + payload);
  var channel = goog.net.xpc.channels[channelName];
  if (channel) {
    channel.xpcDeliver(service, payload, msgEvt.getBrowserEvent().origin);
    return true;
  }
  var transportMessageType = goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload)[0];
  for (var staleChannelName in goog.net.xpc.channels) {
    var staleChannel = goog.net.xpc.channels[staleChannelName];
    if (staleChannel.getRole() == goog.net.xpc.CrossPageChannelRole.INNER && !staleChannel.isConnected() && service == goog.net.xpc.TRANSPORT_SERVICE_ && (transportMessageType == goog.net.xpc.SETUP || transportMessageType == goog.net.xpc.SETUP_NTPV2)) {
      staleChannel.updateChannelNameAndCatalog(channelName);
      staleChannel.xpcDeliver(service, payload);
      return true;
    }
  }
  goog.log.info(goog.net.xpc.logger, 'channel name mismatch; message ignored"');
  return false;
};
goog.net.xpc.NativeMessagingTransport.prototype.transportServiceHandler = function(payload) {
  var transportParts = goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload);
  var transportMessageType = transportParts[0];
  var peerEndpointId = transportParts[1];
  switch(transportMessageType) {
    case goog.net.xpc.SETUP_ACK_:
      this.setPeerProtocolVersion_(1);
      if (!this.setupAckReceived_.hasFired()) {
        this.setupAckReceived_.callback(true);
      }
      break;
    case goog.net.xpc.SETUP_ACK_NTPV2:
      if (this.protocolVersion_ == 2) {
        this.setPeerProtocolVersion_(2);
        if (!this.setupAckReceived_.hasFired()) {
          this.setupAckReceived_.callback(true);
        }
      }
      break;
    case goog.net.xpc.SETUP:
      this.setPeerProtocolVersion_(1);
      this.sendSetupAckMessage_(1);
      break;
    case goog.net.xpc.SETUP_NTPV2:
      if (this.protocolVersion_ == 2) {
        var prevPeerProtocolVersion = this.peerProtocolVersion_;
        this.setPeerProtocolVersion_(2);
        this.sendSetupAckMessage_(2);
        if ((prevPeerProtocolVersion == 1 || this.peerEndpointId_ != null) && this.peerEndpointId_ != peerEndpointId) {
          goog.log.info(goog.net.xpc.logger, "Sending SETUP and changing peer ID to: " + peerEndpointId);
          this.sendSetupMessage_();
        }
        this.peerEndpointId_ = peerEndpointId;
      }
      break;
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.sendSetupMessage_ = function() {
  goog.asserts.assert(!(this.protocolVersion_ == 1 && this.peerProtocolVersion_ == 2));
  if (this.protocolVersion_ == 2 && this.couldPeerVersionBe_(2)) {
    var payload = goog.net.xpc.SETUP_NTPV2;
    payload += goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_;
    payload += this.endpointId_;
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, payload);
  }
  if (this.couldPeerVersionBe_(1)) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.sendSetupAckMessage_ = function(protocolVersion) {
  goog.asserts.assert(this.protocolVersion_ != 1 || protocolVersion != 2, "Shouldn't try to send a v2 setup ack in v1 mode.");
  if (this.protocolVersion_ == 2 && this.couldPeerVersionBe_(2) && protocolVersion == 2) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_NTPV2);
  } else {
    if (this.couldPeerVersionBe_(1) && protocolVersion == 1) {
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    } else {
      return;
    }
  }
  if (!this.setupAckSent_.hasFired()) {
    this.setupAckSent_.callback(true);
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.setPeerProtocolVersion_ = function(version) {
  if (version > this.peerProtocolVersion_) {
    this.peerProtocolVersion_ = version;
  }
  if (this.peerProtocolVersion_ == 1) {
    if (!this.setupAckSent_.hasFired() && !this.oneSidedHandshake_) {
      this.setupAckSent_.callback(true);
    }
    this.peerEndpointId_ = null;
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.connect = function() {
  goog.net.xpc.NativeMessagingTransport.initialize_(this.getWindow());
  this.initialized_ = true;
  this.maybeAttemptToConnect_();
};
goog.net.xpc.NativeMessagingTransport.prototype.maybeAttemptToConnect_ = function() {
  var outerFrame = this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER;
  if (this.oneSidedHandshake_ && outerFrame || this.channel_.isConnected() || this.isDisposed()) {
    this.maybeAttemptToConnectTimer_.stop();
    return;
  }
  this.maybeAttemptToConnectTimer_.start();
  this.sendSetupMessage_();
};
goog.net.xpc.NativeMessagingTransport.prototype.send = function(service, payload) {
  var win = this.channel_.getPeerWindowObject();
  if (!win) {
    goog.log.fine(goog.net.xpc.logger, "send(): window not ready");
    return;
  }
  this.send = function(service, payload) {
    var transport = this;
    var channelName = this.channel_.name;
    var sendFunctor = function() {
      transport.sendTimerId_ = 0;
      try {
        var obj = win.postMessage ? win : win.document;
        if (!obj.postMessage) {
          goog.log.warning(goog.net.xpc.logger, "Peer window had no postMessage function.");
          return;
        }
        obj.postMessage(channelName + "|" + service + ":" + payload, transport.peerHostname_);
        goog.log.fine(goog.net.xpc.logger, "send(): service\x3d" + service + " payload\x3d" + payload + " to hostname\x3d" + transport.peerHostname_);
      } catch (error) {
        goog.log.warning(goog.net.xpc.logger, "Error performing postMessage, ignoring.", error);
      }
    };
    this.sendTimerId_ = goog.Timer.callOnce(sendFunctor, 0);
  };
  this.send(service, payload);
};
goog.net.xpc.NativeMessagingTransport.prototype.notifyConnected_ = function() {
  var delay = this.protocolVersion_ == 1 || this.peerProtocolVersion_ == 1 ? goog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ : undefined;
  this.channel_.notifyConnected(delay);
};
goog.net.xpc.NativeMessagingTransport.prototype.disposeInternal = function() {
  if (this.initialized_) {
    var listenWindow = this.getWindow();
    var uid = goog.getUid(listenWindow);
    var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
    goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value - 1;
    if (value == 1) {
      goog.events.unlisten(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport);
    }
  }
  if (this.sendTimerId_) {
    goog.Timer.clear(this.sendTimerId_);
    this.sendTimerId_ = 0;
  }
  goog.dispose(this.eventHandler_);
  delete this.eventHandler_;
  goog.dispose(this.maybeAttemptToConnectTimer_);
  delete this.maybeAttemptToConnectTimer_;
  this.setupAckReceived_.cancel();
  delete this.setupAckReceived_;
  this.setupAckSent_.cancel();
  delete this.setupAckSent_;
  this.connected_.cancel();
  delete this.connected_;
  delete this.send;
  goog.net.xpc.NativeMessagingTransport.base(this, "disposeInternal");
};
goog.net.xpc.NativeMessagingTransport.parseTransportPayload_ = function(payload) {
  var transportParts = (payload.split(goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_));
  transportParts[1] = transportParts[1] || null;
  return transportParts;
};
goog.provide("goog.net.xpc.NixTransport");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.reflect");
goog.net.xpc.NixTransport = function(channel, opt_domHelper) {
  goog.net.xpc.NixTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.authToken_ = channel[goog.net.xpc.CfgFields.AUTH_TOKEN] || "";
  this.remoteAuthToken_ = channel[goog.net.xpc.CfgFields.REMOTE_AUTH_TOKEN] || "";
  goog.net.xpc.NixTransport.conductGlobalSetup_(this.getWindow());
  this[goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE] = this.handleMessage_;
  this[goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL] = this.createChannel_;
};
goog.inherits(goog.net.xpc.NixTransport, goog.net.xpc.Transport);
goog.net.xpc.NixTransport.NIX_WRAPPER = "GCXPC____NIXVBS_wrapper";
goog.net.xpc.NixTransport.NIX_GET_WRAPPER = "GCXPC____NIXVBS_get_wrapper";
goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE = "GCXPC____NIXJS_handle_message";
goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL = "GCXPC____NIXJS_create_channel";
goog.net.xpc.NixTransport.NIX_ID_FIELD = "GCXPC____NIXVBS_container";
goog.net.xpc.NixTransport.isNixSupported = function() {
  var isSupported = false;
  try {
    var oldOpener = window.opener;
    window.opener = ({});
    isSupported = goog.reflect.canAccessProperty(window, "opener");
    window.opener = oldOpener;
  } catch (e) {
  }
  return isSupported;
};
goog.net.xpc.NixTransport.conductGlobalSetup_ = function(listenWindow) {
  if (listenWindow["nix_setup_complete"]) {
    return;
  }
  var vbscript = "Class " + goog.net.xpc.NixTransport.NIX_WRAPPER + "\n " + "Private m_Transport\n" + "Private m_Auth\n" + "Public Sub SetTransport(transport)\n" + "If isEmpty(m_Transport) Then\n" + "Set m_Transport \x3d transport\n" + "End If\n" + "End Sub\n" + "Public Sub SetAuth(auth)\n" + "If isEmpty(m_Auth) Then\n" + "m_Auth \x3d auth\n" + "End If\n" + "End Sub\n" + "Public Function GetAuthToken()\n " + "GetAuthToken \x3d m_Auth\n" + "End Function\n" + "Public Sub SendMessage(service, payload)\n " + 
  "Call m_Transport." + goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE + "(service, payload)\n" + "End Sub\n" + "Public Sub CreateChannel(channel)\n " + "Call m_Transport." + goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL + "(channel)\n" + "End Sub\n" + "Public Sub " + goog.net.xpc.NixTransport.NIX_ID_FIELD + "()\n " + "End Sub\n" + "End Class\n " + "Function " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + "(transport, auth)\n" + "Dim wrap\n" + "Set wrap \x3d New " + goog.net.xpc.NixTransport.NIX_WRAPPER + 
  "\n" + "wrap.SetTransport transport\n" + "wrap.SetAuth auth\n" + "Set " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + " \x3d wrap\n" + "End Function";
  try {
    listenWindow.execScript(vbscript, "vbscript");
    listenWindow["nix_setup_complete"] = true;
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting global setup: " + e);
  }
};
goog.net.xpc.NixTransport.prototype.transportType = goog.net.xpc.TransportTypes.NIX;
goog.net.xpc.NixTransport.prototype.localSetupCompleted_ = false;
goog.net.xpc.NixTransport.prototype.nixChannel_ = null;
goog.net.xpc.NixTransport.prototype.connect = function() {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.attemptOuterSetup_();
  } else {
    this.attemptInnerSetup_();
  }
};
goog.net.xpc.NixTransport.prototype.attemptOuterSetup_ = function() {
  if (this.localSetupCompleted_) {
    return;
  }
  var innerFrame = this.channel_.getIframeElement();
  try {
    var theWindow = this.getWindow();
    var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];
    innerFrame.contentWindow.opener = getWrapper(this, this.authToken_);
    this.localSetupCompleted_ = true;
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting setup: " + e);
  }
  if (!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptOuterSetup_, this), 100);
  }
};
goog.net.xpc.NixTransport.prototype.attemptInnerSetup_ = function() {
  if (this.localSetupCompleted_) {
    return;
  }
  try {
    var opener = this.getWindow().opener;
    if (opener && goog.net.xpc.NixTransport.NIX_ID_FIELD in opener) {
      this.nixChannel_ = opener;
      var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
      if (remoteAuthToken != this.remoteAuthToken_) {
        goog.log.error(goog.net.xpc.logger, "Invalid auth token from other party");
        return;
      }
      var theWindow = this.getWindow();
      var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];
      this.nixChannel_["CreateChannel"](getWrapper(this, this.authToken_));
      this.localSetupCompleted_ = true;
      this.channel_.notifyConnected();
    }
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting setup: " + e);
    return;
  }
  if (!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptInnerSetup_, this), 100);
  }
};
goog.net.xpc.NixTransport.prototype.createChannel_ = function(channel) {
  if (typeof channel != "unknown" || !(goog.net.xpc.NixTransport.NIX_ID_FIELD in channel)) {
    goog.log.error(goog.net.xpc.logger, "Invalid NIX channel given to createChannel_");
  }
  this.nixChannel_ = channel;
  var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
  if (remoteAuthToken != this.remoteAuthToken_) {
    goog.log.error(goog.net.xpc.logger, "Invalid auth token from other party");
    return;
  }
  this.channel_.notifyConnected();
};
goog.net.xpc.NixTransport.prototype.handleMessage_ = function(serviceName, payload) {
  var deliveryHandler = function() {
    this.channel_.xpcDeliver(serviceName, payload);
  };
  this.getWindow().setTimeout(goog.bind(deliveryHandler, this), 1);
};
goog.net.xpc.NixTransport.prototype.send = function(service, payload) {
  if (typeof this.nixChannel_ !== "unknown") {
    goog.log.error(goog.net.xpc.logger, "NIX channel not connected");
  }
  this.nixChannel_["SendMessage"](service, payload);
};
goog.net.xpc.NixTransport.prototype.disposeInternal = function() {
  goog.net.xpc.NixTransport.base(this, "disposeInternal");
  this.nixChannel_ = null;
};
goog.provide("goog.net.xpc.CrossPageChannel");
goog.require("goog.Uri");
goog.require("goog.async.Deferred");
goog.require("goog.async.Delay");
goog.require("goog.dispose");
goog.require("goog.dom");
goog.require("goog.events");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventType");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.messaging.AbstractChannel");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.ChannelStates");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.DirectTransport");
goog.require("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.net.xpc.IframePollingTransport");
goog.require("goog.net.xpc.IframeRelayTransport");
goog.require("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.net.xpc.NixTransport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.net.xpc.UriCfgFields");
goog.require("goog.string");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.net.xpc.CrossPageChannel = function(cfg, opt_domHelper) {
  goog.net.xpc.CrossPageChannel.base(this, "constructor");
  for (var i = 0, uriField;uriField = goog.net.xpc.UriCfgFields[i];i++) {
    if (uriField in cfg && !/^https?:\/\//.test(cfg[uriField])) {
      throw Error("URI " + cfg[uriField] + " is invalid for field " + uriField);
    }
  }
  this.cfg_ = cfg;
  this.name = this.cfg_[goog.net.xpc.CfgFields.CHANNEL_NAME] || goog.net.xpc.getRandomString(10);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
  this.deferredDeliveries_ = [];
  this.peerLoadHandler_ = new goog.events.EventHandler(this);
  cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] || goog.uri.utils.getHost(this.domHelper_.getWindow().location.href) + "/robots.txt";
  cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] || goog.uri.utils.getHost(cfg[goog.net.xpc.CfgFields.PEER_URI] || "") + "/robots.txt";
  goog.net.xpc.channels[this.name] = this;
  if (!goog.events.getListener(window, goog.events.EventType.UNLOAD, goog.net.xpc.CrossPageChannel.disposeAll_)) {
    goog.events.listenOnce(window, goog.events.EventType.UNLOAD, goog.net.xpc.CrossPageChannel.disposeAll_);
  }
  goog.log.info(goog.net.xpc.logger, "CrossPageChannel created: " + this.name);
};
goog.inherits(goog.net.xpc.CrossPageChannel, goog.messaging.AbstractChannel);
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_ = new RegExp("^%*" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_ = new RegExp("^%+" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.prototype.connectionDelay_ = null;
goog.net.xpc.CrossPageChannel.prototype.peerWindowDeferred_ = null;
goog.net.xpc.CrossPageChannel.prototype.transport_ = null;
goog.net.xpc.CrossPageChannel.prototype.state_ = goog.net.xpc.ChannelStates.NOT_CONNECTED;
goog.net.xpc.CrossPageChannel.prototype.isConnected = function() {
  return this.state_ == goog.net.xpc.ChannelStates.CONNECTED;
};
goog.net.xpc.CrossPageChannel.prototype.peerWindowObject_ = null;
goog.net.xpc.CrossPageChannel.prototype.iframeElement_ = null;
goog.net.xpc.CrossPageChannel.prototype.getConfig = function() {
  return this.cfg_;
};
goog.net.xpc.CrossPageChannel.prototype.getIframeElement = function() {
  return this.iframeElement_;
};
goog.net.xpc.CrossPageChannel.prototype.setPeerWindowObject = function(peerWindowObject) {
  this.peerWindowObject_ = peerWindowObject;
};
goog.net.xpc.CrossPageChannel.prototype.getPeerWindowObject = function() {
  return this.peerWindowObject_;
};
goog.net.xpc.CrossPageChannel.prototype.isPeerAvailable = function() {
  try {
    return!!this.peerWindowObject_ && !Boolean(this.peerWindowObject_.closed);
  } catch (e) {
    return false;
  }
};
goog.net.xpc.CrossPageChannel.prototype.determineTransportType_ = function() {
  var transportType;
  if (goog.isFunction(document.postMessage) || goog.isFunction(window.postMessage) || goog.userAgent.IE && window.postMessage) {
    transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;
  } else {
    if (goog.userAgent.GECKO) {
      transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;
    } else {
      if (goog.userAgent.IE && this.cfg_[goog.net.xpc.CfgFields.PEER_RELAY_URI]) {
        transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;
      } else {
        if (goog.userAgent.IE && goog.net.xpc.NixTransport.isNixSupported()) {
          transportType = goog.net.xpc.TransportTypes.NIX;
        } else {
          transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING;
        }
      }
    }
  }
  return transportType;
};
goog.net.xpc.CrossPageChannel.prototype.createTransport_ = function() {
  if (this.transport_) {
    return;
  }
  var CfgFields = goog.net.xpc.CfgFields;
  if (!this.cfg_[CfgFields.TRANSPORT]) {
    this.cfg_[CfgFields.TRANSPORT] = this.determineTransportType_();
  }
  switch(this.cfg_[CfgFields.TRANSPORT]) {
    case goog.net.xpc.TransportTypes.NATIVE_MESSAGING:
      var protocolVersion = this.cfg_[CfgFields.NATIVE_TRANSPORT_PROTOCOL_VERSION] || 2;
      this.transport_ = new goog.net.xpc.NativeMessagingTransport(this, this.cfg_[CfgFields.PEER_HOSTNAME], this.domHelper_, !!this.cfg_[CfgFields.ONE_SIDED_HANDSHAKE], protocolVersion);
      break;
    case goog.net.xpc.TransportTypes.NIX:
      this.transport_ = new goog.net.xpc.NixTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD:
      this.transport_ = new goog.net.xpc.FrameElementMethodTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_RELAY:
      this.transport_ = new goog.net.xpc.IframeRelayTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_POLLING:
      this.transport_ = new goog.net.xpc.IframePollingTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.DIRECT:
      if (this.peerWindowObject_ && goog.net.xpc.DirectTransport.isSupported((this.peerWindowObject_))) {
        this.transport_ = new goog.net.xpc.DirectTransport(this, this.domHelper_);
      } else {
        goog.log.info(goog.net.xpc.logger, "DirectTransport not supported for this window, peer window in" + " different security context or not set yet.");
      }
      break;
  }
  if (this.transport_) {
    goog.log.info(goog.net.xpc.logger, "Transport created: " + this.transport_.getName());
  } else {
    throw Error("CrossPageChannel: No suitable transport found!");
  }
};
goog.net.xpc.CrossPageChannel.prototype.getTransportType = function() {
  return this.transport_.getType();
};
goog.net.xpc.CrossPageChannel.prototype.getTransportName = function() {
  return this.transport_.getName();
};
goog.net.xpc.CrossPageChannel.prototype.getPeerConfiguration = function() {
  var peerCfg = {};
  peerCfg[goog.net.xpc.CfgFields.CHANNEL_NAME] = this.name;
  peerCfg[goog.net.xpc.CfgFields.TRANSPORT] = this.cfg_[goog.net.xpc.CfgFields.TRANSPORT];
  peerCfg[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE] = this.cfg_[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE];
  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_RELAY_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI];
  }
  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI];
  }
  if (this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI];
  }
  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];
  if (role) {
    peerCfg[goog.net.xpc.CfgFields.ROLE] = role == goog.net.xpc.CrossPageChannelRole.INNER ? goog.net.xpc.CrossPageChannelRole.OUTER : goog.net.xpc.CrossPageChannelRole.INNER;
  }
  return peerCfg;
};
goog.net.xpc.CrossPageChannel.prototype.createPeerIframe = function(parentElm, opt_configureIframeCb, opt_addCfgParam) {
  goog.log.info(goog.net.xpc.logger, "createPeerIframe()");
  var iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID];
  if (!iframeId) {
    iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID] = "xpcpeer" + goog.net.xpc.getRandomString(4);
  }
  var iframeElm = goog.dom.getDomHelper(parentElm).createElement("IFRAME");
  iframeElm.id = iframeElm.name = iframeId;
  if (opt_configureIframeCb) {
    opt_configureIframeCb(iframeElm);
  } else {
    iframeElm.style.width = iframeElm.style.height = "100%";
  }
  this.cleanUpIncompleteConnection_();
  this.peerWindowDeferred_ = new goog.async.Deferred(undefined, this);
  var peerUri = this.getPeerUri(opt_addCfgParam);
  this.peerLoadHandler_.listenOnceWithScope(iframeElm, "load", this.peerWindowDeferred_.callback, false, this.peerWindowDeferred_);
  if (goog.userAgent.GECKO || goog.userAgent.WEBKIT) {
    window.setTimeout(goog.bind(function() {
      parentElm.appendChild(iframeElm);
      iframeElm.src = peerUri.toString();
      goog.log.info(goog.net.xpc.logger, "peer iframe created (" + iframeId + ")");
    }, this), 1);
  } else {
    iframeElm.src = peerUri.toString();
    parentElm.appendChild(iframeElm);
    goog.log.info(goog.net.xpc.logger, "peer iframe created (" + iframeId + ")");
  }
  return(iframeElm);
};
goog.net.xpc.CrossPageChannel.prototype.cleanUpIncompleteConnection_ = function() {
  if (this.peerWindowDeferred_) {
    this.peerWindowDeferred_.cancel();
    this.peerWindowDeferred_ = null;
  }
  this.deferredDeliveries_.length = 0;
  this.peerLoadHandler_.removeAll();
};
goog.net.xpc.CrossPageChannel.prototype.getPeerUri = function(opt_addCfgParam) {
  var peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI];
  if (goog.isString(peerUri)) {
    peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI] = new goog.Uri(peerUri);
  }
  if (opt_addCfgParam !== false) {
    peerUri.setParameterValue("xpc", goog.json.serialize(this.getPeerConfiguration()));
  }
  return peerUri;
};
goog.net.xpc.CrossPageChannel.prototype.connect = function(opt_connectCb) {
  this.connectCb_ = opt_connectCb || goog.nullFunction;
  if (this.peerWindowDeferred_) {
    this.peerWindowDeferred_.addCallback(this.continueConnection_);
  } else {
    this.continueConnection_();
  }
};
goog.net.xpc.CrossPageChannel.prototype.continueConnection_ = function() {
  goog.log.info(goog.net.xpc.logger, "continueConnection_()");
  this.peerWindowDeferred_ = null;
  if (this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]) {
    this.iframeElement_ = this.domHelper_.getElement(this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]);
  }
  if (this.iframeElement_) {
    var winObj = this.iframeElement_.contentWindow;
    if (!winObj) {
      winObj = window.frames[this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]];
    }
    this.setPeerWindowObject(winObj);
  }
  if (!this.peerWindowObject_) {
    if (window == window.top) {
      throw Error("CrossPageChannel: Can't connect, peer window-object not set.");
    } else {
      this.setPeerWindowObject(window.parent);
    }
  }
  this.createTransport_();
  this.transport_.connect();
  while (this.deferredDeliveries_.length > 0) {
    this.deferredDeliveries_.shift()();
  }
};
goog.net.xpc.CrossPageChannel.prototype.close = function() {
  this.cleanUpIncompleteConnection_();
  this.state_ = goog.net.xpc.ChannelStates.CLOSED;
  goog.dispose(this.transport_);
  this.transport_ = null;
  this.connectCb_ = null;
  goog.dispose(this.connectionDelay_);
  this.connectionDelay_ = null;
  goog.log.info(goog.net.xpc.logger, 'Channel "' + this.name + '" closed');
};
goog.net.xpc.CrossPageChannel.prototype.notifyConnected = function(opt_delay) {
  if (this.isConnected() || this.connectionDelay_ && this.connectionDelay_.isActive()) {
    return;
  }
  this.state_ = goog.net.xpc.ChannelStates.CONNECTED;
  goog.log.info(goog.net.xpc.logger, 'Channel "' + this.name + '" connected');
  goog.dispose(this.connectionDelay_);
  if (goog.isDef(opt_delay)) {
    this.connectionDelay_ = new goog.async.Delay(this.connectCb_, opt_delay);
    this.connectionDelay_.start();
  } else {
    this.connectionDelay_ = null;
    this.connectCb_();
  }
};
goog.net.xpc.CrossPageChannel.prototype.notifyConnected_ = goog.net.xpc.CrossPageChannel.prototype.notifyConnected;
goog.net.xpc.CrossPageChannel.prototype.notifyTransportError = function() {
  goog.log.info(goog.net.xpc.logger, "Transport Error");
  this.close();
};
goog.net.xpc.CrossPageChannel.prototype.send = function(serviceName, payload) {
  if (!this.isConnected()) {
    goog.log.error(goog.net.xpc.logger, "Can't send. Channel not connected.");
    return;
  }
  if (!this.isPeerAvailable()) {
    goog.log.error(goog.net.xpc.logger, "Peer has disappeared.");
    this.close();
    return;
  }
  if (goog.isObject(payload)) {
    payload = goog.json.serialize(payload);
  }
  this.transport_.send(this.escapeServiceName_(serviceName), payload);
};
goog.net.xpc.CrossPageChannel.prototype.xpcDeliver = function(serviceName, payload, opt_origin) {
  if (this.peerWindowDeferred_) {
    this.deferredDeliveries_.push(goog.bind(this.xpcDeliver, this, serviceName, payload, opt_origin));
    return;
  }
  if (!this.isMessageOriginAcceptable_(opt_origin)) {
    goog.log.warning(goog.net.xpc.logger, 'Message received from unapproved origin "' + opt_origin + '" - rejected.');
    return;
  }
  if (this.isDisposed()) {
    goog.log.warning(goog.net.xpc.logger, "CrossPageChannel::xpcDeliver(): Disposed.");
  } else {
    if (!serviceName || serviceName == goog.net.xpc.TRANSPORT_SERVICE_) {
      this.transport_.transportServiceHandler(payload);
    } else {
      if (this.isConnected()) {
        this.deliver(this.unescapeServiceName_(serviceName), payload);
      } else {
        goog.log.info(goog.net.xpc.logger, "CrossPageChannel::xpcDeliver(): Not connected.");
      }
    }
  }
};
goog.net.xpc.CrossPageChannel.prototype.escapeServiceName_ = function(name) {
  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_.test(name)) {
    name = "%" + name;
  }
  return name.replace(/[%:|]/g, encodeURIComponent);
};
goog.net.xpc.CrossPageChannel.prototype.unescapeServiceName_ = function(name) {
  name = name.replace(/%[0-9a-f]{2}/gi, decodeURIComponent);
  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_.test(name)) {
    return name.substring(1);
  } else {
    return name;
  }
};
goog.net.xpc.CrossPageChannel.prototype.getRole = function() {
  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];
  if (goog.isNumber(role)) {
    return role;
  } else {
    return window.parent == this.peerWindowObject_ ? goog.net.xpc.CrossPageChannelRole.INNER : goog.net.xpc.CrossPageChannelRole.OUTER;
  }
};
goog.net.xpc.CrossPageChannel.prototype.updateChannelNameAndCatalog = function(name) {
  goog.log.fine(goog.net.xpc.logger, "changing channel name to " + name);
  delete goog.net.xpc.channels[this.name];
  this.name = name;
  goog.net.xpc.channels[name] = this;
};
goog.net.xpc.CrossPageChannel.prototype.isMessageOriginAcceptable_ = function(opt_origin) {
  var peerHostname = this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME];
  return goog.string.isEmptySafe(opt_origin) || goog.string.isEmptySafe(peerHostname) || opt_origin == this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME];
};
goog.net.xpc.CrossPageChannel.prototype.disposeInternal = function() {
  this.close();
  this.peerWindowObject_ = null;
  this.iframeElement_ = null;
  delete goog.net.xpc.channels[this.name];
  goog.dispose(this.peerLoadHandler_);
  delete this.peerLoadHandler_;
  goog.net.xpc.CrossPageChannel.base(this, "disposeInternal");
};
goog.net.xpc.CrossPageChannel.disposeAll_ = function() {
  for (var name in goog.net.xpc.channels) {
    goog.dispose(goog.net.xpc.channels[name]);
  }
};
goog.provide("centipair.core.utilities.currency");
goog.require("cljs.core");
centipair.core.utilities.currency.supported_currency_list = cljs.core.PersistentVector.fromArray([new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "AED", new cljs.core.Keyword(null, "label", "label", 1718410804), "United ArabEmirates Dirham"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "AFN", new cljs.core.Keyword(null, "label", "label", 1718410804), "Afghan Afghani*"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "value", "value", 305978217), "ALL", new cljs.core.Keyword(null, "label", "label", 1718410804), "Albanian Lek"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "AMD", new cljs.core.Keyword(null, "label", "label", 1718410804), "Armenian Dram"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "ANG", new cljs.core.Keyword(null, "label", "label", 1718410804), 
"Netherlands Antillean Gulden"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "AOA", new cljs.core.Keyword(null, "label", "label", 1718410804), "Angolan Kwanza*"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "ARS", new cljs.core.Keyword(null, "label", "label", 1718410804), "Argentine Peso*"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", 
"value", 305978217), "AUD", new cljs.core.Keyword(null, "label", "label", 1718410804), "Australian Dollar"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "AWG", new cljs.core.Keyword(null, "label", "label", 1718410804), "Aruban Florin"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "AZN", new cljs.core.Keyword(null, "label", "label", 1718410804), "Azerbaijani Manat"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "BAM", new cljs.core.Keyword(null, "label", "label", 1718410804), "Bosnia \x26 Herzegovina Convertible Mark"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "BBD", new cljs.core.Keyword(null, "label", "label", 1718410804), "Barbadian Dollar"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 
305978217), "BDT", new cljs.core.Keyword(null, "label", "label", 1718410804), "Bangladeshi Taka"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "BGN", new cljs.core.Keyword(null, "label", "label", 1718410804), "Bulgarian Lev"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "BIF", new cljs.core.Keyword(null, "label", "label", 1718410804), "Burundian Franc"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "value", "value", 305978217), "BMD", new cljs.core.Keyword(null, "label", "label", 1718410804), "Bermudian Dollar"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "BND", new cljs.core.Keyword(null, "label", "label", 1718410804), "Brunei Dollar"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "BOB", new cljs.core.Keyword(null, "label", "label", 
1718410804), "Bolivian Boliviano*"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "BRL", new cljs.core.Keyword(null, "label", "label", 1718410804), "Brazilian Real*"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "BSD", new cljs.core.Keyword(null, "label", "label", 1718410804), "Bahamian Dollar"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"value", "value", 305978217), "BWP", new cljs.core.Keyword(null, "label", "label", 1718410804), "Botswana Pula"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "BZD", new cljs.core.Keyword(null, "label", "label", 1718410804), "Belize Dollar"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "CAD", new cljs.core.Keyword(null, "label", "label", 1718410804), "Canadian Dollar"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "CDF", new cljs.core.Keyword(null, "label", "label", 1718410804), "Congolese Franc"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "CHF", new cljs.core.Keyword(null, "label", "label", 1718410804), "Swiss Franc"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "CLP", new cljs.core.Keyword(null, 
"label", "label", 1718410804), "Chilean Peso*"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "CNY", new cljs.core.Keyword(null, "label", "label", 1718410804), "Chinese Renminbi Yuan"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "COP", new cljs.core.Keyword(null, "label", "label", 1718410804), "Colombian Peso*"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"value", "value", 305978217), "CRC", new cljs.core.Keyword(null, "label", "label", 1718410804), "CostaRican Col\u00f3n*"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "CVE", new cljs.core.Keyword(null, "label", "label", 1718410804), "CapeVerdean Escudo*"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "CZK", new cljs.core.Keyword(null, "label", "label", 1718410804), "Czech Koruna*"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "DJF", new cljs.core.Keyword(null, "label", "label", 1718410804), "Djiboutian Franc*"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "DKK", new cljs.core.Keyword(null, "label", "label", 1718410804), "Danish Krone"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "DOP", 
new cljs.core.Keyword(null, "label", "label", 1718410804), "Dominican Peso"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "DZD", new cljs.core.Keyword(null, "label", "label", 1718410804), "Algerian Dinar"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "EEK", new cljs.core.Keyword(null, "label", "label", 1718410804), "Estonian Kroon*"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "value", "value", 305978217), "EGP", new cljs.core.Keyword(null, "label", "label", 1718410804), "Egyptian Pound"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "ETB", new cljs.core.Keyword(null, "label", "label", 1718410804), "Ethiopian Birr"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "EUR", new cljs.core.Keyword(null, "label", "label", 
1718410804), "Euro"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "FJD", new cljs.core.Keyword(null, "label", "label", 1718410804), "Fijian Dollar"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "FKP", new cljs.core.Keyword(null, "label", "label", 1718410804), "Falkland Islands Pound*"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", 
"value", 305978217), "GBP", new cljs.core.Keyword(null, "label", "label", 1718410804), "British Pound"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "GEL", new cljs.core.Keyword(null, "label", "label", 1718410804), "Georgian Lari"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "GIP", new cljs.core.Keyword(null, "label", "label", 1718410804), "Gibraltar Pound"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "value", "value", 305978217), "GMD", new cljs.core.Keyword(null, "label", "label", 1718410804), "Gambian Dalasi"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "GNF", new cljs.core.Keyword(null, "label", "label", 1718410804), "Guinean Franc*"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "GTQ", new cljs.core.Keyword(null, "label", "label", 
1718410804), "Guatemalan Quetzal*"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "GYD", new cljs.core.Keyword(null, "label", "label", 1718410804), "Guyanese Dollar"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "HKD", new cljs.core.Keyword(null, "label", "label", 1718410804), "Hong Kong Dollar"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"value", "value", 305978217), "HNL", new cljs.core.Keyword(null, "label", "label", 1718410804), "Honduran Lempira*"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "HRK", new cljs.core.Keyword(null, "label", "label", 1718410804), "Croatian Kuna"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "HTG", new cljs.core.Keyword(null, "label", "label", 1718410804), "Haitian Gourde"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "HUF", new cljs.core.Keyword(null, "label", "label", 1718410804), "Hungarian Forint*"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "IDR", new cljs.core.Keyword(null, "label", "label", 1718410804), "Indonesian Rupiah"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "ILS", 
new cljs.core.Keyword(null, "label", "label", 1718410804), "Israeli New Sheqel"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "INR", new cljs.core.Keyword(null, "label", "label", 1718410804), "Indian Rupee*"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "ISK", new cljs.core.Keyword(null, "label", "label", 1718410804), "Icelandic Kr\u00f3na"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "value", "value", 305978217), "JMD", new cljs.core.Keyword(null, "label", "label", 1718410804), "Jamaican Dollar"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "JPY", new cljs.core.Keyword(null, "label", "label", 1718410804), "Japanese Yen"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "KES", new cljs.core.Keyword(null, "label", "label", 1718410804), 
"Kenyan Shilling"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "KGS", new cljs.core.Keyword(null, "label", "label", 1718410804), "Kyrgyzstani Som"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "KHR", new cljs.core.Keyword(null, "label", "label", 1718410804), "Cambodian Riel"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 
305978217), "KMF", new cljs.core.Keyword(null, "label", "label", 1718410804), "Comorian Franc"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "KRW", new cljs.core.Keyword(null, "label", "label", 1718410804), "South Korean Won"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "KYD", new cljs.core.Keyword(null, "label", "label", 1718410804), "Cayman Islands Dollar"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "value", "value", 305978217), "KZT", new cljs.core.Keyword(null, "label", "label", 1718410804), "Kazakhstani Tenge"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "LAK", new cljs.core.Keyword(null, "label", "label", 1718410804), "LaoKip*"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "LBP", new cljs.core.Keyword(null, "label", "label", 1718410804), 
"Lebanese Pound"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "LKR", new cljs.core.Keyword(null, "label", "label", 1718410804), "SriLankan Rupee"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "LRD", new cljs.core.Keyword(null, "label", "label", 1718410804), "Liberian Dollar"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 
305978217), "LSL", new cljs.core.Keyword(null, "label", "label", 1718410804), "Lesotho Loti"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "LTL", new cljs.core.Keyword(null, "label", "label", 1718410804), "Lithuanian Litas"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "LVL", new cljs.core.Keyword(null, "label", "label", 1718410804), "Latvian Lats"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "value", "value", 305978217), "MAD", new cljs.core.Keyword(null, "label", "label", 1718410804), "Moroccan Dirham"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "MDL", new cljs.core.Keyword(null, "label", "label", 1718410804), "Moldovan Leu"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "MGA", new cljs.core.Keyword(null, "label", "label", 1718410804), 
"Malagasy Ariary"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "MKD", new cljs.core.Keyword(null, "label", "label", 1718410804), "Macedonian Denar"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "MNT", new cljs.core.Keyword(null, "label", "label", 1718410804), "Mongolian T\u00f6gr\u00f6g"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", 
"value", 305978217), "MOP", new cljs.core.Keyword(null, "label", "label", 1718410804), "Macanese Pataca"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "MRO", new cljs.core.Keyword(null, "label", "label", 1718410804), "Mauritanian Ouguiya"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "MUR", new cljs.core.Keyword(null, "label", "label", 1718410804), "Mauritian Rupee*"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "MVR", new cljs.core.Keyword(null, "label", "label", 1718410804), "Maldivian Rufiyaa"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "MWK", new cljs.core.Keyword(null, "label", "label", 1718410804), "Malawian Kwacha"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "MXN", new cljs.core.Keyword(null, 
"label", "label", 1718410804), "Mexican Peso*"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "MYR", new cljs.core.Keyword(null, "label", "label", 1718410804), "Malaysian Ringgit"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "MZN", new cljs.core.Keyword(null, "label", "label", 1718410804), "Mozambican Metical"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"value", "value", 305978217), "NAD", new cljs.core.Keyword(null, "label", "label", 1718410804), "Namibian Dollar"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "NGN", new cljs.core.Keyword(null, "label", "label", 1718410804), "Nigerian Naira"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "NIO", new cljs.core.Keyword(null, "label", "label", 1718410804), "Nicaraguan C\u00f3rdoba*"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "NOK", new cljs.core.Keyword(null, "label", "label", 1718410804), "Norwegian Krone"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "NPR", new cljs.core.Keyword(null, "label", "label", 1718410804), "Nepalese Rupee"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "NZD", 
new cljs.core.Keyword(null, "label", "label", 1718410804), "NewZealand Dollar"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "PAB", new cljs.core.Keyword(null, "label", "label", 1718410804), "Panamanian Balboa*"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "PEN", new cljs.core.Keyword(null, "label", "label", 1718410804), "Peruvian NuevoSol*"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "value", "value", 305978217), "PGK", new cljs.core.Keyword(null, "label", "label", 1718410804), "Papua New Guinean Kina"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "PHP", new cljs.core.Keyword(null, "label", "label", 1718410804), "Philippine Peso"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "PKR", new cljs.core.Keyword(null, "label", 
"label", 1718410804), "Pakistani Rupee"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "PLN", new cljs.core.Keyword(null, "label", "label", 1718410804), "Polish Z\u0142oty"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "PYG", new cljs.core.Keyword(null, "label", "label", 1718410804), "Paraguayan Guaran\u00ed*"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"value", "value", 305978217), "QAR", new cljs.core.Keyword(null, "label", "label", 1718410804), "Qatari Riyal"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "RON", new cljs.core.Keyword(null, "label", "label", 1718410804), "Romanian Leu"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "RSD", new cljs.core.Keyword(null, "label", "label", 1718410804), "Serbian Dinar"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "RUB", new cljs.core.Keyword(null, "label", "label", 1718410804), "Russian Ruble"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "RWF", new cljs.core.Keyword(null, "label", "label", 1718410804), "Rwandan Franc"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "SAR", new cljs.core.Keyword(null, 
"label", "label", 1718410804), "Saudi Riyal"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "SBD", new cljs.core.Keyword(null, "label", "label", 1718410804), "Solomon Islands Dollar"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "SCR", new cljs.core.Keyword(null, "label", "label", 1718410804), "Seychellois Rupee"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"value", "value", 305978217), "SEK", new cljs.core.Keyword(null, "label", "label", 1718410804), "Swedish Krona"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "SGD", new cljs.core.Keyword(null, "label", "label", 1718410804), "Singapore Dollar"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "SHP", new cljs.core.Keyword(null, "label", "label", 1718410804), "Saint Helenian Pound*"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "SLL", new cljs.core.Keyword(null, "label", "label", 1718410804), "Sierra Leonean Leone"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "SOS", new cljs.core.Keyword(null, "label", "label", 1718410804), "Somali Shilling"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), 
"SRD", new cljs.core.Keyword(null, "label", "label", 1718410804), "Surinamese Dollar*"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "STD", new cljs.core.Keyword(null, "label", "label", 1718410804), "S\u00e3o Tom\u00e9and Pr\u00edncipe Dobra"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "SVC", new cljs.core.Keyword(null, "label", "label", 1718410804), "Salvadoran Col\u00f3n*"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "SZL", new cljs.core.Keyword(null, "label", "label", 1718410804), "SwaziLilangeni"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "THB", new cljs.core.Keyword(null, "label", "label", 1718410804), "Thai Baht"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "TJS", new cljs.core.Keyword(null, 
"label", "label", 1718410804), "Tajikistani Somoni"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "TOP", new cljs.core.Keyword(null, "label", "label", 1718410804), "Tongan Pa\u02bbanga"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "TRY", new cljs.core.Keyword(null, "label", "label", 1718410804), "Turkish Lira"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"value", "value", 305978217), "TTD", new cljs.core.Keyword(null, "label", "label", 1718410804), "Trinidadand Tobago Dollar"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "TWD", new cljs.core.Keyword(null, "label", "label", 1718410804), "NewTaiwan Dollar"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "TZS", new cljs.core.Keyword(null, "label", "label", 1718410804), "Tanzanian Shilling"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "UAH", new cljs.core.Keyword(null, "label", "label", 1718410804), "Ukrainian Hryvnia"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "UGX", new cljs.core.Keyword(null, "label", "label", 1718410804), "Ugandan Shilling"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "USD", 
new cljs.core.Keyword(null, "label", "label", 1718410804), "United States Dollar"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "UYU", new cljs.core.Keyword(null, "label", "label", 1718410804), "Uruguayan Peso*"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "UZS", new cljs.core.Keyword(null, "label", "label", 1718410804), "Uzbekistani Som"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "value", "value", 305978217), "VND", new cljs.core.Keyword(null, "label", "label", 1718410804), "Vietnamese \u0110\u1ed3ng"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "VUV", new cljs.core.Keyword(null, "label", "label", 1718410804), "Vanuatu Vatu"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "WST", new cljs.core.Keyword(null, "label", 
"label", 1718410804), "Samoan Tala"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "XAF", new cljs.core.Keyword(null, "label", "label", 1718410804), "Central African Cfa Franc"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "XCD", new cljs.core.Keyword(null, "label", "label", 1718410804), "East Caribbean Dollar"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"value", "value", 305978217), "XOF", new cljs.core.Keyword(null, "label", "label", 1718410804), "West AfricanCfa Franc*"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "XPF", new cljs.core.Keyword(null, "label", "label", 1718410804), "Cfp Franc*"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "YER", new cljs.core.Keyword(null, "label", "label", 1718410804), "Yemeni Rial"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "ZAR", new cljs.core.Keyword(null, "label", "label", 1718410804), "South African Rand"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "value", "value", 305978217), "ZMW", new cljs.core.Keyword(null, "label", "label", 1718410804), "Zambian Kwacha"], null)], true);
goog.provide("goog.net.WebSocket");
goog.provide("goog.net.WebSocket.ErrorEvent");
goog.provide("goog.net.WebSocket.EventType");
goog.provide("goog.net.WebSocket.MessageEvent");
goog.require("goog.Timer");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.EventTarget");
goog.require("goog.log");
goog.net.WebSocket = function(opt_autoReconnect, opt_getNextReconnect) {
  goog.net.WebSocket.base(this, "constructor");
  this.autoReconnect_ = goog.isDef(opt_autoReconnect) ? opt_autoReconnect : true;
  this.getNextReconnect_ = opt_getNextReconnect || goog.net.WebSocket.EXPONENTIAL_BACKOFF_;
  this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);
};
goog.inherits(goog.net.WebSocket, goog.events.EventTarget);
goog.net.WebSocket.prototype.webSocket_ = null;
goog.net.WebSocket.prototype.url_ = null;
goog.net.WebSocket.prototype.protocol_ = undefined;
goog.net.WebSocket.prototype.closeExpected_ = false;
goog.net.WebSocket.prototype.reconnectAttempt_ = 0;
goog.net.WebSocket.prototype.logger_ = goog.log.getLogger("goog.net.WebSocket");
goog.net.WebSocket.EventType = {CLOSED:goog.events.getUniqueId("closed"), ERROR:goog.events.getUniqueId("error"), MESSAGE:goog.events.getUniqueId("message"), OPENED:goog.events.getUniqueId("opened")};
goog.net.WebSocket.ReadyState_ = {CONNECTING:0, OPEN:1, CLOSING:2, CLOSED:3};
goog.net.WebSocket.EXPONENTIAL_BACKOFF_CEILING_ = 60 * 1E3;
goog.net.WebSocket.EXPONENTIAL_BACKOFF_ = function(attempt) {
  var time = Math.pow(2, attempt) * 1E3;
  return Math.min(time, goog.net.WebSocket.EXPONENTIAL_BACKOFF_CEILING_);
};
goog.net.WebSocket.protectEntryPoints = function(errorHandler) {
  goog.net.WebSocket.prototype.onOpen_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onOpen_);
  goog.net.WebSocket.prototype.onClose_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onClose_);
  goog.net.WebSocket.prototype.onMessage_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onMessage_);
  goog.net.WebSocket.prototype.onError_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onError_);
};
goog.net.WebSocket.prototype.open = function(url, opt_protocol) {
  goog.asserts.assert(goog.global["WebSocket"], "This browser does not support WebSocket");
  goog.asserts.assert(!this.isOpen(), "The WebSocket is already open");
  this.clearReconnectTimer_();
  this.url_ = url;
  this.protocol_ = opt_protocol;
  if (this.protocol_) {
    goog.log.info(this.logger_, "Opening the WebSocket on " + this.url_ + " with protocol " + this.protocol_);
    this.webSocket_ = new WebSocket(this.url_, this.protocol_);
  } else {
    goog.log.info(this.logger_, "Opening the WebSocket on " + this.url_);
    this.webSocket_ = new WebSocket(this.url_);
  }
  this.webSocket_.onopen = goog.bind(this.onOpen_, this);
  this.webSocket_.onclose = goog.bind(this.onClose_, this);
  this.webSocket_.onmessage = goog.bind(this.onMessage_, this);
  this.webSocket_.onerror = goog.bind(this.onError_, this);
};
goog.net.WebSocket.prototype.close = function() {
  this.clearReconnectTimer_();
  if (this.webSocket_) {
    goog.log.info(this.logger_, "Closing the WebSocket.");
    this.closeExpected_ = true;
    this.webSocket_.close();
    this.webSocket_ = null;
  }
};
goog.net.WebSocket.prototype.send = function(message) {
  goog.asserts.assert(this.isOpen(), "Cannot send without an open socket");
  this.webSocket_.send(message);
};
goog.net.WebSocket.prototype.isOpen = function() {
  return!!this.webSocket_ && this.webSocket_.readyState == goog.net.WebSocket.ReadyState_.OPEN;
};
goog.net.WebSocket.prototype.onOpen_ = function() {
  goog.log.info(this.logger_, "WebSocket opened on " + this.url_);
  this.dispatchEvent(goog.net.WebSocket.EventType.OPENED);
  this.reconnectAttempt_ = 0;
  this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);
};
goog.net.WebSocket.prototype.onClose_ = function(event) {
  goog.log.info(this.logger_, "The WebSocket on " + this.url_ + " closed.");
  this.dispatchEvent(goog.net.WebSocket.EventType.CLOSED);
  this.webSocket_ = null;
  if (this.closeExpected_) {
    goog.log.info(this.logger_, "The WebSocket closed normally.");
    this.url_ = null;
    this.protocol_ = undefined;
  } else {
    goog.log.error(this.logger_, "The WebSocket disconnected unexpectedly: " + event.data);
    if (this.autoReconnect_) {
      var seconds = Math.floor(this.nextReconnect_ / 1E3);
      goog.log.info(this.logger_, "Seconds until next reconnect attempt: " + seconds);
      this.reconnectTimer_ = goog.Timer.callOnce(goog.bind(this.open, this, this.url_, this.protocol_), this.nextReconnect_, this);
      this.reconnectAttempt_++;
      this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);
    }
  }
  this.closeExpected_ = false;
};
goog.net.WebSocket.prototype.onMessage_ = function(event) {
  var message = event.data;
  this.dispatchEvent(new goog.net.WebSocket.MessageEvent(message));
};
goog.net.WebSocket.prototype.onError_ = function(event) {
  var data = (event.data);
  goog.log.error(this.logger_, "An error occurred: " + data);
  this.dispatchEvent(new goog.net.WebSocket.ErrorEvent(data));
};
goog.net.WebSocket.prototype.clearReconnectTimer_ = function() {
  if (goog.isDefAndNotNull(this.reconnectTimer_)) {
    goog.Timer.clear(this.reconnectTimer_);
  }
  this.reconnectTimer_ = null;
};
goog.net.WebSocket.prototype.disposeInternal = function() {
  goog.net.WebSocket.base(this, "disposeInternal");
  this.close();
};
goog.net.WebSocket.MessageEvent = function(message) {
  goog.net.WebSocket.MessageEvent.base(this, "constructor", goog.net.WebSocket.EventType.MESSAGE);
  this.message = message;
};
goog.inherits(goog.net.WebSocket.MessageEvent, goog.events.Event);
goog.net.WebSocket.ErrorEvent = function(data) {
  goog.net.WebSocket.ErrorEvent.base(this, "constructor", goog.net.WebSocket.EventType.ERROR);
  this.data = data;
};
goog.inherits(goog.net.WebSocket.ErrorEvent, goog.events.Event);
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.WebSocket.prototype.onOpen_ = transformer(goog.net.WebSocket.prototype.onOpen_);
  goog.net.WebSocket.prototype.onClose_ = transformer(goog.net.WebSocket.prototype.onClose_);
  goog.net.WebSocket.prototype.onMessage_ = transformer(goog.net.WebSocket.prototype.onMessage_);
  goog.net.WebSocket.prototype.onError_ = transformer(goog.net.WebSocket.prototype.onError_);
});
goog.provide("centipair.registry");
goog.require("cljs.core");
goog.require("centipair.core.user.forms");
centipair.registry.function_registry = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "render-register-form", "render-register-form", 1217709642), centipair.core.user.forms.render_register_form, new cljs.core.Keyword(null, "render-login-form", "render-login-form", -1006930927), centipair.core.user.forms.render_login_form, new cljs.core.Keyword(null, "render-forgot-password-form", "render-forgot-password-form", -1710214401), centipair.core.user.forms.render_forgot_password_form, 
new cljs.core.Keyword(null, "render-reset-password-form", "render-reset-password-form", -1937140671), centipair.core.user.forms.render_reset_password_form], null);
centipair.registry.load_function = function centipair$registry$load_function(name) {
  return cljs.core.keyword.call(null, name).call(null, centipair.registry.function_registry).call(null);
};
goog.exportSymbol("centipair.registry.load_function", centipair.registry.load_function);
goog.provide("centipair.core.utilities.countries");
goog.require("cljs.core");
centipair.core.utilities.countries.supported_country_list = new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Australia", new cljs.core.Keyword(null, "value", "value", 305978217), "AU"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Canada", new cljs.core.Keyword(null, "value", "value", 305978217), 
"CA"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Ireland", new cljs.core.Keyword(null, "value", "value", 305978217), "IE"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "United Kingdom", new cljs.core.Keyword(null, "value", "value", 305978217), "GB"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "United States", 
new cljs.core.Keyword(null, "value", "value", 305978217), "US"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Belgium", new cljs.core.Keyword(null, "value", "value", 305978217), "BE"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Finland", new cljs.core.Keyword(null, "value", "value", 305978217), "FI"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"label", "label", 1718410804), "France", new cljs.core.Keyword(null, "value", "value", 305978217), "FR"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Germany", new cljs.core.Keyword(null, "value", "value", 305978217), "DE"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Luxembourg", new cljs.core.Keyword(null, "value", "value", 305978217), "LU"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Netherlands", new cljs.core.Keyword(null, "value", "value", 305978217), "NL"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Spain", new cljs.core.Keyword(null, "value", "value", 305978217), "ES"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Denmark", new cljs.core.Keyword(null, "value", "value", 305978217), 
"DK"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Norway", new cljs.core.Keyword(null, "value", "value", 305978217), "NO"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Sweden", new cljs.core.Keyword(null, "value", "value", 305978217), "SE"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Austria", new cljs.core.Keyword(null, 
"value", "value", 305978217), "AT"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Italy", new cljs.core.Keyword(null, "value", "value", 305978217), "IT"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Switzerland", new cljs.core.Keyword(null, "value", "value", 305978217), "CH"], null)], null);
centipair.core.utilities.countries.country_list = cljs.core.PersistentVector.fromArray([new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Afghanistan", new cljs.core.Keyword(null, "value", "value", 305978217), "AF"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Aland Islands", new cljs.core.Keyword(null, "value", "value", 305978217), "AX"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Albania", new cljs.core.Keyword(null, "value", "value", 305978217), "AL"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Algeria", new cljs.core.Keyword(null, "value", "value", 305978217), "DZ"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "American Samoa", new cljs.core.Keyword(null, "value", "value", 305978217), 
"AS"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "AndorrA", new cljs.core.Keyword(null, "value", "value", 305978217), "AD"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Angola", new cljs.core.Keyword(null, "value", "value", 305978217), "AO"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Anguilla", new cljs.core.Keyword(null, 
"value", "value", 305978217), "AI"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Antarctica", new cljs.core.Keyword(null, "value", "value", 305978217), "AQ"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Antigua and Barbuda", new cljs.core.Keyword(null, "value", "value", 305978217), "AG"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", 
"label", 1718410804), "Argentina", new cljs.core.Keyword(null, "value", "value", 305978217), "AR"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Armenia", new cljs.core.Keyword(null, "value", "value", 305978217), "AM"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Aruba", new cljs.core.Keyword(null, "value", "value", 305978217), "AW"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Australia", new cljs.core.Keyword(null, "value", "value", 305978217), "AU"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Austria", new cljs.core.Keyword(null, "value", "value", 305978217), "AT"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Azerbaijan", new cljs.core.Keyword(null, "value", "value", 305978217), 
"AZ"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Bahamas", new cljs.core.Keyword(null, "value", "value", 305978217), "BS"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Bahrain", new cljs.core.Keyword(null, "value", "value", 305978217), "BH"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Bangladesh", new cljs.core.Keyword(null, 
"value", "value", 305978217), "BD"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Barbados", new cljs.core.Keyword(null, "value", "value", 305978217), "BB"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Belarus", new cljs.core.Keyword(null, "value", "value", 305978217), "BY"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 
1718410804), "Belgium", new cljs.core.Keyword(null, "value", "value", 305978217), "BE"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Belize", new cljs.core.Keyword(null, "value", "value", 305978217), "BZ"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Benin", new cljs.core.Keyword(null, "value", "value", 305978217), "BJ"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Bermuda", new cljs.core.Keyword(null, "value", "value", 305978217), "BM"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Bhutan", new cljs.core.Keyword(null, "value", "value", 305978217), "BT"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Bolivia", new cljs.core.Keyword(null, "value", "value", 305978217), 
"BO"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Bosnia and Herzegovina", new cljs.core.Keyword(null, "value", "value", 305978217), "BA"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Botswana", new cljs.core.Keyword(null, "value", "value", 305978217), "BW"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), 
"Bouvet Island", new cljs.core.Keyword(null, "value", "value", 305978217), "BV"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Brazil", new cljs.core.Keyword(null, "value", "value", 305978217), "BR"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "British Indian Ocean Territory", new cljs.core.Keyword(null, "value", "value", 305978217), "IO"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Brunei Darussalam", new cljs.core.Keyword(null, "value", "value", 305978217), "BN"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Bulgaria", new cljs.core.Keyword(null, "value", "value", 305978217), "BG"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Burkina Faso", new cljs.core.Keyword(null, "value", "value", 
305978217), "BF"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Burundi", new cljs.core.Keyword(null, "value", "value", 305978217), "BI"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Cambodia", new cljs.core.Keyword(null, "value", "value", 305978217), "KH"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Cameroon", 
new cljs.core.Keyword(null, "value", "value", 305978217), "CM"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Canada", new cljs.core.Keyword(null, "value", "value", 305978217), "CA"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Cape Verde", new cljs.core.Keyword(null, "value", "value", 305978217), "CV"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"label", "label", 1718410804), "Cayman Islands", new cljs.core.Keyword(null, "value", "value", 305978217), "KY"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Central African Republic", new cljs.core.Keyword(null, "value", "value", 305978217), "CF"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Chad", new cljs.core.Keyword(null, "value", "value", 305978217), "TD"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Chile", new cljs.core.Keyword(null, "value", "value", 305978217), "CL"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "China", new cljs.core.Keyword(null, "value", "value", 305978217), "CN"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Christmas Island", new cljs.core.Keyword(null, 
"value", "value", 305978217), "CX"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Cocos (Keeling) Islands", new cljs.core.Keyword(null, "value", "value", 305978217), "CC"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Colombia", new cljs.core.Keyword(null, "value", "value", 305978217), "CO"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"label", "label", 1718410804), "Comoros", new cljs.core.Keyword(null, "value", "value", 305978217), "KM"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Congo", new cljs.core.Keyword(null, "value", "value", 305978217), "CG"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Congo,The Democratic Republic of the", new cljs.core.Keyword(null, "value", "value", 305978217), "CD"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Cook Islands", new cljs.core.Keyword(null, "value", "value", 305978217), "CK"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Costa Rica", new cljs.core.Keyword(null, "value", "value", 305978217), "CR"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), 'Cote D"Ivoire', 
new cljs.core.Keyword(null, "value", "value", 305978217), "CI"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Croatia", new cljs.core.Keyword(null, "value", "value", 305978217), "HR"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Cuba", new cljs.core.Keyword(null, "value", "value", 305978217), "CU"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"label", "label", 1718410804), "Cyprus", new cljs.core.Keyword(null, "value", "value", 305978217), "CY"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Czech Republic", new cljs.core.Keyword(null, "value", "value", 305978217), "CZ"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Denmark", new cljs.core.Keyword(null, "value", "value", 305978217), "DK"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Djibouti", new cljs.core.Keyword(null, "value", "value", 305978217), "DJ"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Dominica", new cljs.core.Keyword(null, "value", "value", 305978217), "DM"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Dominican Republic", new cljs.core.Keyword(null, "value", "value", 
305978217), "DO"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Ecuador", new cljs.core.Keyword(null, "value", "value", 305978217), "EC"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Egypt", new cljs.core.Keyword(null, "value", "value", 305978217), "EG"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "El Salvador", 
new cljs.core.Keyword(null, "value", "value", 305978217), "SV"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Equatorial Guinea", new cljs.core.Keyword(null, "value", "value", 305978217), "GQ"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Eritrea", new cljs.core.Keyword(null, "value", "value", 305978217), "ER"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"label", "label", 1718410804), "Estonia", new cljs.core.Keyword(null, "value", "value", 305978217), "EE"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Ethiopia", new cljs.core.Keyword(null, "value", "value", 305978217), "ET"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Falkland Islands (Malvinas)", new cljs.core.Keyword(null, "value", "value", 305978217), "FK"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Faroe Islands", new cljs.core.Keyword(null, "value", "value", 305978217), "FO"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Fiji", new cljs.core.Keyword(null, "value", "value", 305978217), "FJ"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Finland", new cljs.core.Keyword(null, 
"value", "value", 305978217), "FI"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "France", new cljs.core.Keyword(null, "value", "value", 305978217), "FR"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "French Guiana", new cljs.core.Keyword(null, "value", "value", 305978217), "GF"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 
1718410804), "French Polynesia", new cljs.core.Keyword(null, "value", "value", 305978217), "PF"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "French Southern Territories", new cljs.core.Keyword(null, "value", "value", 305978217), "TF"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Gabon", new cljs.core.Keyword(null, "value", "value", 305978217), "GA"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Gambia", new cljs.core.Keyword(null, "value", "value", 305978217), "GM"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Georgia", new cljs.core.Keyword(null, "value", "value", 305978217), "GE"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Germany", new cljs.core.Keyword(null, "value", "value", 305978217), 
"DE"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Ghana", new cljs.core.Keyword(null, "value", "value", 305978217), "GH"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Gibraltar", new cljs.core.Keyword(null, "value", "value", 305978217), "GI"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Greece", new cljs.core.Keyword(null, 
"value", "value", 305978217), "GR"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Greenland", new cljs.core.Keyword(null, "value", "value", 305978217), "GL"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Grenada", new cljs.core.Keyword(null, "value", "value", 305978217), "GD"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 
1718410804), "Guadeloupe", new cljs.core.Keyword(null, "value", "value", 305978217), "GP"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Guam", new cljs.core.Keyword(null, "value", "value", 305978217), "GU"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Guatemala", new cljs.core.Keyword(null, "value", "value", 305978217), "GT"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Guernsey", new cljs.core.Keyword(null, "value", "value", 305978217), "GG"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Guinea", new cljs.core.Keyword(null, "value", "value", 305978217), "GN"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Guinea-Bissau", new cljs.core.Keyword(null, "value", "value", 305978217), 
"GW"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Guyana", new cljs.core.Keyword(null, "value", "value", 305978217), "GY"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Haiti", new cljs.core.Keyword(null, "value", "value", 305978217), "HT"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Heard Island and Mcdonald Islands", 
new cljs.core.Keyword(null, "value", "value", 305978217), "HM"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Holy See (Vatican City State)", new cljs.core.Keyword(null, "value", "value", 305978217), "VA"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Honduras", new cljs.core.Keyword(null, "value", "value", 305978217), "HN"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Hong Kong", new cljs.core.Keyword(null, "value", "value", 305978217), "HK"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Hungary", new cljs.core.Keyword(null, "value", "value", 305978217), "HU"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Iceland", new cljs.core.Keyword(null, "value", "value", 305978217), 
"IS"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "India", new cljs.core.Keyword(null, "value", "value", 305978217), "IN"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Indonesia", new cljs.core.Keyword(null, "value", "value", 305978217), "ID"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Iran,Islamic Republic Of", 
new cljs.core.Keyword(null, "value", "value", 305978217), "IR"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Iraq", new cljs.core.Keyword(null, "value", "value", 305978217), "IQ"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Ireland", new cljs.core.Keyword(null, "value", "value", 305978217), "IE"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"label", "label", 1718410804), "Isle of Man", new cljs.core.Keyword(null, "value", "value", 305978217), "IM"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Israel", new cljs.core.Keyword(null, "value", "value", 305978217), "IL"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Italy", new cljs.core.Keyword(null, "value", "value", 305978217), "IT"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Jamaica", new cljs.core.Keyword(null, "value", "value", 305978217), "JM"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Japan", new cljs.core.Keyword(null, "value", "value", 305978217), "JP"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Jersey", new cljs.core.Keyword(null, "value", "value", 305978217), "JE"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Jordan", new cljs.core.Keyword(null, "value", "value", 305978217), "JO"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Kazakhstan", new cljs.core.Keyword(null, "value", "value", 305978217), "KZ"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Kenya", new cljs.core.Keyword(null, 
"value", "value", 305978217), "KE"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Kiribati", new cljs.core.Keyword(null, "value", "value", 305978217), "KI"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), 'Korea,Democratic People"S Republic of', new cljs.core.Keyword(null, "value", "value", 305978217), "KP"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"label", "label", 1718410804), "Korea,Republic of", new cljs.core.Keyword(null, "value", "value", 305978217), "KR"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Kuwait", new cljs.core.Keyword(null, "value", "value", 305978217), "KW"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Kyrgyzstan", new cljs.core.Keyword(null, "value", "value", 305978217), "KG"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "label", "label", 1718410804), 'Lao People"S Democratic Republic', new cljs.core.Keyword(null, "value", "value", 305978217), "LA"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Latvia", new cljs.core.Keyword(null, "value", "value", 305978217), "LV"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Lebanon", new cljs.core.Keyword(null, "value", 
"value", 305978217), "LB"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Lesotho", new cljs.core.Keyword(null, "value", "value", 305978217), "LS"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Liberia", new cljs.core.Keyword(null, "value", "value", 305978217), "LR"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), 
"Libyan Arab Jamahiriya", new cljs.core.Keyword(null, "value", "value", 305978217), "LY"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Liechtenstein", new cljs.core.Keyword(null, "value", "value", 305978217), "LI"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Lithuania", new cljs.core.Keyword(null, "value", "value", 305978217), "LT"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Luxembourg", new cljs.core.Keyword(null, "value", "value", 305978217), "LU"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Macao", new cljs.core.Keyword(null, "value", "value", 305978217), "MO"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Macedonia,The Former Yugoslav Republic of", new cljs.core.Keyword(null, 
"value", "value", 305978217), "MK"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Madagascar", new cljs.core.Keyword(null, "value", "value", 305978217), "MG"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Malawi", new cljs.core.Keyword(null, "value", "value", 305978217), "MW"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 
1718410804), "Malaysia", new cljs.core.Keyword(null, "value", "value", 305978217), "MY"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Maldives", new cljs.core.Keyword(null, "value", "value", 305978217), "MV"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Mali", new cljs.core.Keyword(null, "value", "value", 305978217), "ML"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Malta", new cljs.core.Keyword(null, "value", "value", 305978217), "MT"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Marshall Islands", new cljs.core.Keyword(null, "value", "value", 305978217), "MH"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Martinique", new cljs.core.Keyword(null, "value", "value", 305978217), 
"MQ"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Mauritania", new cljs.core.Keyword(null, "value", "value", 305978217), "MR"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Mauritius", new cljs.core.Keyword(null, "value", "value", 305978217), "MU"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Mayotte", 
new cljs.core.Keyword(null, "value", "value", 305978217), "YT"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Mexico", new cljs.core.Keyword(null, "value", "value", 305978217), "MX"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Micronesia,Federated States of", new cljs.core.Keyword(null, "value", "value", 305978217), "FM"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Moldova,Republic of", new cljs.core.Keyword(null, "value", "value", 305978217), "MD"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Monaco", new cljs.core.Keyword(null, "value", "value", 305978217), "MC"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Mongolia", new cljs.core.Keyword(null, "value", "value", 
305978217), "MN"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Montserrat", new cljs.core.Keyword(null, "value", "value", 305978217), "MS"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Morocco", new cljs.core.Keyword(null, "value", "value", 305978217), "MA"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), 
"Mozambique", new cljs.core.Keyword(null, "value", "value", 305978217), "MZ"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Myanmar", new cljs.core.Keyword(null, "value", "value", 305978217), "MM"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Namibia", new cljs.core.Keyword(null, "value", "value", 305978217), "NA"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"label", "label", 1718410804), "Nauru", new cljs.core.Keyword(null, "value", "value", 305978217), "NR"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Nepal", new cljs.core.Keyword(null, "value", "value", 305978217), "NP"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Netherlands", new cljs.core.Keyword(null, "value", "value", 305978217), "NL"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Netherlands Antilles", new cljs.core.Keyword(null, "value", "value", 305978217), "AN"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "New Caledonia", new cljs.core.Keyword(null, "value", "value", 305978217), "NC"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "New Zealand", new cljs.core.Keyword(null, "value", 
"value", 305978217), "NZ"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Nicaragua", new cljs.core.Keyword(null, "value", "value", 305978217), "NI"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Niger", new cljs.core.Keyword(null, "value", "value", 305978217), "NE"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), 
"Nigeria", new cljs.core.Keyword(null, "value", "value", 305978217), "NG"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Niue", new cljs.core.Keyword(null, "value", "value", 305978217), "NU"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Norfolk Island", new cljs.core.Keyword(null, "value", "value", 305978217), "NF"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"label", "label", 1718410804), "Northern Mariana Islands", new cljs.core.Keyword(null, "value", "value", 305978217), "MP"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Norway", new cljs.core.Keyword(null, "value", "value", 305978217), "NO"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Oman", new cljs.core.Keyword(null, "value", "value", 305978217), "OM"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Pakistan", new cljs.core.Keyword(null, "value", "value", 305978217), "PK"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Palau", new cljs.core.Keyword(null, "value", "value", 305978217), "PW"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Palestinian Territory,Occupied", new cljs.core.Keyword(null, "value", 
"value", 305978217), "PS"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Panama", new cljs.core.Keyword(null, "value", "value", 305978217), "PA"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Papua New Guinea", new cljs.core.Keyword(null, "value", "value", 305978217), "PG"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 
1718410804), "Paraguay", new cljs.core.Keyword(null, "value", "value", 305978217), "PY"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Peru", new cljs.core.Keyword(null, "value", "value", 305978217), "PE"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Philippines", new cljs.core.Keyword(null, "value", "value", 305978217), "PH"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Pitcairn", new cljs.core.Keyword(null, "value", "value", 305978217), "PN"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Poland", new cljs.core.Keyword(null, "value", "value", 305978217), "PL"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Portugal", new cljs.core.Keyword(null, "value", "value", 305978217), 
"PT"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Puerto Rico", new cljs.core.Keyword(null, "value", "value", 305978217), "PR"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Qatar", new cljs.core.Keyword(null, "value", "value", 305978217), "QA"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Reunion", new cljs.core.Keyword(null, 
"value", "value", 305978217), "RE"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Romania", new cljs.core.Keyword(null, "value", "value", 305978217), "RO"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Russian Federation", new cljs.core.Keyword(null, "value", "value", 305978217), "RU"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", 
"label", 1718410804), "RWANDA", new cljs.core.Keyword(null, "value", "value", 305978217), "RW"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Saint Helena", new cljs.core.Keyword(null, "value", "value", 305978217), "SH"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Saint Kitts and Nevis", new cljs.core.Keyword(null, "value", "value", 305978217), "KN"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Saint Lucia", new cljs.core.Keyword(null, "value", "value", 305978217), "LC"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Saint Pierre and Miquelon", new cljs.core.Keyword(null, "value", "value", 305978217), "PM"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Saint Vincent and the Grenadines", new cljs.core.Keyword(null, 
"value", "value", 305978217), "VC"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Samoa", new cljs.core.Keyword(null, "value", "value", 305978217), "WS"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "San Marino", new cljs.core.Keyword(null, "value", "value", 305978217), "SM"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 
1718410804), "Sao Tome and Principe", new cljs.core.Keyword(null, "value", "value", 305978217), "ST"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Saudi Arabia", new cljs.core.Keyword(null, "value", "value", 305978217), "SA"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Senegal", new cljs.core.Keyword(null, "value", "value", 305978217), "SN"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Serbia and Montenegro", new cljs.core.Keyword(null, "value", "value", 305978217), "CS"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Seychelles", new cljs.core.Keyword(null, "value", "value", 305978217), "SC"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Sierra Leone", new cljs.core.Keyword(null, "value", 
"value", 305978217), "SL"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Singapore", new cljs.core.Keyword(null, "value", "value", 305978217), "SG"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Slovakia", new cljs.core.Keyword(null, "value", "value", 305978217), "SK"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), 
"Slovenia", new cljs.core.Keyword(null, "value", "value", 305978217), "SI"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Solomon Islands", new cljs.core.Keyword(null, "value", "value", 305978217), "SB"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Somalia", new cljs.core.Keyword(null, "value", "value", 305978217), "SO"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "South Africa", new cljs.core.Keyword(null, "value", "value", 305978217), "ZA"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "South Georgia and the South Sandwich Islands", new cljs.core.Keyword(null, "value", "value", 305978217), "GS"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Spain", new cljs.core.Keyword(null, 
"value", "value", 305978217), "ES"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Sri Lanka", new cljs.core.Keyword(null, "value", "value", 305978217), "LK"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Sudan", new cljs.core.Keyword(null, "value", "value", 305978217), "SD"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 
1718410804), "Suriname", new cljs.core.Keyword(null, "value", "value", 305978217), "SR"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Svalbard and Jan Mayen", new cljs.core.Keyword(null, "value", "value", 305978217), "SJ"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Swaziland", new cljs.core.Keyword(null, "value", "value", 305978217), "SZ"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Sweden", new cljs.core.Keyword(null, "value", "value", 305978217), "SE"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Switzerland", new cljs.core.Keyword(null, "value", "value", 305978217), "CH"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Syrian Arab Republic", new cljs.core.Keyword(null, "value", "value", 
305978217), "SY"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Taiwan,Province of China", new cljs.core.Keyword(null, "value", "value", 305978217), "TW"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Tajikistan", new cljs.core.Keyword(null, "value", "value", 305978217), "TJ"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 
1718410804), "Tanzania,United Republic of", new cljs.core.Keyword(null, "value", "value", 305978217), "TZ"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Thailand", new cljs.core.Keyword(null, "value", "value", 305978217), "TH"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Timor-Leste", new cljs.core.Keyword(null, "value", "value", 305978217), "TL"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Togo", new cljs.core.Keyword(null, "value", "value", 305978217), "TG"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Tokelau", new cljs.core.Keyword(null, "value", "value", 305978217), "TK"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Tonga", new cljs.core.Keyword(null, "value", "value", 305978217), "TO"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Trinidad and Tobago", new cljs.core.Keyword(null, "value", "value", 305978217), "TT"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Tunisia", new cljs.core.Keyword(null, "value", "value", 305978217), "TN"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Turkey", 
new cljs.core.Keyword(null, "value", "value", 305978217), "TR"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Turkmenistan", new cljs.core.Keyword(null, "value", "value", 305978217), "TM"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Turks and Caicos Islands", new cljs.core.Keyword(null, "value", "value", 305978217), "TC"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Tuvalu", new cljs.core.Keyword(null, "value", "value", 305978217), "TV"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Uganda", new cljs.core.Keyword(null, "value", "value", 305978217), "UG"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Ukraine", new cljs.core.Keyword(null, "value", "value", 305978217), "UA"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "United Arab Emirates", new cljs.core.Keyword(null, "value", "value", 305978217), "AE"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "United Kingdom", new cljs.core.Keyword(null, "value", "value", 305978217), "GB"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "United States", 
new cljs.core.Keyword(null, "value", "value", 305978217), "US"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "United States Minor Outlying Islands", new cljs.core.Keyword(null, "value", "value", 305978217), "UM"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Uruguay", new cljs.core.Keyword(null, "value", "value", 305978217), "UY"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Uzbekistan", new cljs.core.Keyword(null, "value", "value", 305978217), "UZ"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Vanuatu", new cljs.core.Keyword(null, "value", "value", 305978217), "VU"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Venezuela", new cljs.core.Keyword(null, "value", "value", 305978217), 
"VE"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Viet Nam", new cljs.core.Keyword(null, "value", "value", 305978217), "VN"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Virgin Islands,British", new cljs.core.Keyword(null, "value", "value", 305978217), "VG"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), 
"Virgin Islands,U.S.", new cljs.core.Keyword(null, "value", "value", 305978217), "VI"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Wallis and Futuna", new cljs.core.Keyword(null, "value", "value", 305978217), "WF"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Western Sahara", new cljs.core.Keyword(null, "value", "value", 305978217), "EH"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Yemen", new cljs.core.Keyword(null, "value", "value", 305978217), "YE"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Zambia", new cljs.core.Keyword(null, "value", "value", 305978217), "ZM"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1718410804), "Zimbabwe", new cljs.core.Keyword(null, "value", "value", 305978217), "ZW"], 
null)], true);
goog.provide("centipair.init");
goog.require("cljs.core");
goog.require("centipair.core.components.notifier");
centipair.init.init_app = function centipair$init$init_app() {
  return centipair.core.components.notifier.render_notifier_component.call(null);
};
goog.exportSymbol("centipair.init.init_app", centipair.init.init_app);
goog.provide("centipair.core.components.tabs");
goog.require("cljs.core");
centipair.core.components.tabs.nav_tab = function centipair$core$components$tabs$nav_tab(tab) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "role", "role", -736691072), "presentation", new cljs.core.Keyword(null, "class", "class", -2030961996), cljs.core.truth_((new cljs.core.Keyword(null, "active", "active", 1895962068)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, tab))) ? "active" : "", new cljs.core.Keyword(null, 
  "key", "key", -1516042587), [cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, tab))), cljs.core.str("-list")].join("")], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "href", "href", -793805698), [cljs.core.str("#"), cljs.core.str((new cljs.core.Keyword(null, 
  "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, tab)))].join(""), new cljs.core.Keyword(null, "aria-controls", "aria-controls", -1872379154), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, tab)), new cljs.core.Keyword(null, "role", "role", -736691072), "tab", new cljs.core.Keyword(null, "data-toggle", "data-toggle", 436966687), "tab", new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str((new cljs.core.Keyword(null, 
  "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, tab))), cljs.core.str("-link")].join("")], null), (new cljs.core.Keyword(null, "label", "label", 1718410804)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, tab))], null)], null);
};
centipair.core.components.tabs.tab_panel = function centipair$core$components$tabs$tab_panel(tab) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "role", "role", -736691072), "tabpanel", new cljs.core.Keyword(null, "class", "class", -2030961996), [cljs.core.str("tab-pane"), cljs.core.str(cljs.core.truth_((new cljs.core.Keyword(null, "active", "active", 1895962068)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, tab))) ? 
  " active" : "")].join(""), new cljs.core.Keyword(null, "id", "id", -1388402092), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, tab)), new cljs.core.Keyword(null, "key", "key", -1516042587), [cljs.core.str((new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, tab))), cljs.core.str("-panel")].join("")], null), (new cljs.core.Keyword(null, "content", "content", 15833224)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  tab)).call(null)], null);
};
centipair.core.components.tabs.render_tabs = function centipair$core$components$tabs$render_tabs(tab_data) {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "role", "role", -736691072), "tab-panel", new cljs.core.Keyword(null, "key", "key", -1516042587), "tab-panel-div"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ul", "ul", -1349521403), new cljs.core.PersistentArrayMap(null, 
  3, [new cljs.core.Keyword(null, "class", "class", -2030961996), "nav nav-tabs", new cljs.core.Keyword(null, "role", "role", -736691072), "tablist", new cljs.core.Keyword(null, "key", "key", -1516042587), "tab-list"], null), cljs.core.doall.call(null, cljs.core.map.call(null, centipair.core.components.tabs.nav_tab, tab_data))], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 
  2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "tab-content", new cljs.core.Keyword(null, "key", "key", -1516042587), "tab-content"], null), cljs.core.doall.call(null, cljs.core.map.call(null, centipair.core.components.tabs.tab_panel, tab_data))], null)], null);
};
goog.provide("clojure.browser.event");
goog.require("cljs.core");
goog.require("goog.events.EventType");
goog.require("goog.events.EventTarget");
goog.require("goog.events");
clojure.browser.event.IEventType = function() {
  var obj22212 = {};
  return obj22212;
}();
clojure.browser.event.event_types = function clojure$browser$event$event_types(this$) {
  if (function() {
    var and__4097__auto__ = this$;
    if (and__4097__auto__) {
      return this$.clojure$browser$event$IEventType$event_types$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return this$.clojure$browser$event$IEventType$event_types$arity$1(this$);
  } else {
    var x__4745__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4109__auto__ = clojure.browser.event.event_types[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = clojure.browser.event.event_types["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEventType.event-types", this$);
        }
      }
    }().call(null, this$);
  }
};
goog.events.EventTarget.prototype.clojure$browser$event$IEventType$ = true;
goog.events.EventTarget.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
    return function(p__22213) {
      var vec__22214 = p__22213;
      var k = cljs.core.nth.call(null, vec__22214, 0, null);
      var v = cljs.core.nth.call(null, vec__22214, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
    };
  }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))));
};
if (typeof Element !== "undefined") {
  Element.prototype.clojure$browser$event$IEventType$ = true;
  Element.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
    var this$__$1 = this;
    return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
      return function(p__22215) {
        var vec__22216 = p__22215;
        var k = cljs.core.nth.call(null, vec__22216, 0, null);
        var v = cljs.core.nth.call(null, vec__22216, 1, null);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
      };
    }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))));
  };
} else {
}
clojure.browser.event.listen = function() {
  var clojure$browser$event$listen = null;
  var clojure$browser$event$listen__3 = function(src, type, fn) {
    return clojure$browser$event$listen.call(null, src, type, fn, false);
  };
  var clojure$browser$event$listen__4 = function(src, type, fn, capture_QMARK_) {
    return goog.events.listen(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
  };
  clojure$browser$event$listen = function(src, type, fn, capture_QMARK_) {
    switch(arguments.length) {
      case 3:
        return clojure$browser$event$listen__3.call(this, src, type, fn);
      case 4:
        return clojure$browser$event$listen__4.call(this, src, type, fn, capture_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clojure$browser$event$listen.cljs$core$IFn$_invoke$arity$3 = clojure$browser$event$listen__3;
  clojure$browser$event$listen.cljs$core$IFn$_invoke$arity$4 = clojure$browser$event$listen__4;
  return clojure$browser$event$listen;
}();
clojure.browser.event.listen_once = function() {
  var clojure$browser$event$listen_once = null;
  var clojure$browser$event$listen_once__3 = function(src, type, fn) {
    return clojure$browser$event$listen_once.call(null, src, type, fn, false);
  };
  var clojure$browser$event$listen_once__4 = function(src, type, fn, capture_QMARK_) {
    return goog.events.listenOnce(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
  };
  clojure$browser$event$listen_once = function(src, type, fn, capture_QMARK_) {
    switch(arguments.length) {
      case 3:
        return clojure$browser$event$listen_once__3.call(this, src, type, fn);
      case 4:
        return clojure$browser$event$listen_once__4.call(this, src, type, fn, capture_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clojure$browser$event$listen_once.cljs$core$IFn$_invoke$arity$3 = clojure$browser$event$listen_once__3;
  clojure$browser$event$listen_once.cljs$core$IFn$_invoke$arity$4 = clojure$browser$event$listen_once__4;
  return clojure$browser$event$listen_once;
}();
clojure.browser.event.unlisten = function() {
  var clojure$browser$event$unlisten = null;
  var clojure$browser$event$unlisten__3 = function(src, type, fn) {
    return clojure$browser$event$unlisten.call(null, src, type, fn, false);
  };
  var clojure$browser$event$unlisten__4 = function(src, type, fn, capture_QMARK_) {
    return goog.events.unlisten(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
  };
  clojure$browser$event$unlisten = function(src, type, fn, capture_QMARK_) {
    switch(arguments.length) {
      case 3:
        return clojure$browser$event$unlisten__3.call(this, src, type, fn);
      case 4:
        return clojure$browser$event$unlisten__4.call(this, src, type, fn, capture_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clojure$browser$event$unlisten.cljs$core$IFn$_invoke$arity$3 = clojure$browser$event$unlisten__3;
  clojure$browser$event$unlisten.cljs$core$IFn$_invoke$arity$4 = clojure$browser$event$unlisten__4;
  return clojure$browser$event$unlisten;
}();
clojure.browser.event.unlisten_by_key = function clojure$browser$event$unlisten_by_key(key) {
  return goog.events.unlistenByKey(key);
};
clojure.browser.event.dispatch_event = function clojure$browser$event$dispatch_event(src, event) {
  return goog.events.dispatchEvent(src, event);
};
clojure.browser.event.expose = function clojure$browser$event$expose(e) {
  return goog.events.expose(e);
};
clojure.browser.event.fire_listeners = function clojure$browser$event$fire_listeners(obj, type, capture, event) {
  return null;
};
clojure.browser.event.total_listener_count = function clojure$browser$event$total_listener_count() {
  return goog.events.getTotalListenerCount();
};
clojure.browser.event.get_listener = function clojure$browser$event$get_listener(src, type, listener, opt_capt, opt_handler) {
  return null;
};
clojure.browser.event.all_listeners = function clojure$browser$event$all_listeners(obj, type, capture) {
  return null;
};
clojure.browser.event.unique_event_id = function clojure$browser$event$unique_event_id(event_type) {
  return null;
};
clojure.browser.event.has_listener = function clojure$browser$event$has_listener(obj, opt_type, opt_capture) {
  return null;
};
clojure.browser.event.remove_all = function clojure$browser$event$remove_all(opt_obj, opt_type, opt_capt) {
  return null;
};
goog.provide("clojure.browser.net");
goog.require("cljs.core");
goog.require("goog.Uri");
goog.require("goog.net.WebSocket");
goog.require("goog.net.EventType");
goog.require("goog.json");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.XhrIo");
goog.require("clojure.browser.event");
goog.require("goog.net.xpc.CrossPageChannel");
clojure.browser.net._STAR_timeout_STAR_ = 1E4;
clojure.browser.net.event_types = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__22278) {
  var vec__22279 = p__22278;
  var k = cljs.core.nth.call(null, vec__22279, 0, null);
  var v = cljs.core.nth.call(null, vec__22279, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
}, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))));
clojure.browser.net.IConnection = function() {
  var obj22281 = {};
  return obj22281;
}();
clojure.browser.net.connect = function() {
  var clojure$browser$net$connect = null;
  var clojure$browser$net$connect__1 = function(this$) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$1;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$1(this$);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = clojure.browser.net.connect[goog.typeOf(x__4745__auto__)];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = clojure.browser.net.connect["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var clojure$browser$net$connect__2 = function(this$, opt1) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$2;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$2(this$, opt1);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = clojure.browser.net.connect[goog.typeOf(x__4745__auto__)];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = clojure.browser.net.connect["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$, opt1);
    }
  };
  var clojure$browser$net$connect__3 = function(this$, opt1, opt2) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$3;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$3(this$, opt1, opt2);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = clojure.browser.net.connect[goog.typeOf(x__4745__auto__)];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = clojure.browser.net.connect["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$, opt1, opt2);
    }
  };
  var clojure$browser$net$connect__4 = function(this$, opt1, opt2, opt3) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$4;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$4(this$, opt1, opt2, opt3);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = clojure.browser.net.connect[goog.typeOf(x__4745__auto__)];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = clojure.browser.net.connect["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$, opt1, opt2, opt3);
    }
  };
  clojure$browser$net$connect = function(this$, opt1, opt2, opt3) {
    switch(arguments.length) {
      case 1:
        return clojure$browser$net$connect__1.call(this, this$);
      case 2:
        return clojure$browser$net$connect__2.call(this, this$, opt1);
      case 3:
        return clojure$browser$net$connect__3.call(this, this$, opt1, opt2);
      case 4:
        return clojure$browser$net$connect__4.call(this, this$, opt1, opt2, opt3);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clojure$browser$net$connect.cljs$core$IFn$_invoke$arity$1 = clojure$browser$net$connect__1;
  clojure$browser$net$connect.cljs$core$IFn$_invoke$arity$2 = clojure$browser$net$connect__2;
  clojure$browser$net$connect.cljs$core$IFn$_invoke$arity$3 = clojure$browser$net$connect__3;
  clojure$browser$net$connect.cljs$core$IFn$_invoke$arity$4 = clojure$browser$net$connect__4;
  return clojure$browser$net$connect;
}();
clojure.browser.net.transmit = function() {
  var clojure$browser$net$transmit = null;
  var clojure$browser$net$transmit__2 = function(this$, opt) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$2;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$2(this$, opt);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4745__auto__)];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt);
    }
  };
  var clojure$browser$net$transmit__3 = function(this$, opt, opt2) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$3;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$3(this$, opt, opt2);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4745__auto__)];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2);
    }
  };
  var clojure$browser$net$transmit__4 = function(this$, opt, opt2, opt3) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$4;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$4(this$, opt, opt2, opt3);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4745__auto__)];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2, opt3);
    }
  };
  var clojure$browser$net$transmit__5 = function(this$, opt, opt2, opt3, opt4) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$5;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$5(this$, opt, opt2, opt3, opt4);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4745__auto__)];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2, opt3, opt4);
    }
  };
  var clojure$browser$net$transmit__6 = function(this$, opt, opt2, opt3, opt4, opt5) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$6;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$6(this$, opt, opt2, opt3, opt4, opt5);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4745__auto__)];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2, opt3, opt4, opt5);
    }
  };
  clojure$browser$net$transmit = function(this$, opt, opt2, opt3, opt4, opt5) {
    switch(arguments.length) {
      case 2:
        return clojure$browser$net$transmit__2.call(this, this$, opt);
      case 3:
        return clojure$browser$net$transmit__3.call(this, this$, opt, opt2);
      case 4:
        return clojure$browser$net$transmit__4.call(this, this$, opt, opt2, opt3);
      case 5:
        return clojure$browser$net$transmit__5.call(this, this$, opt, opt2, opt3, opt4);
      case 6:
        return clojure$browser$net$transmit__6.call(this, this$, opt, opt2, opt3, opt4, opt5);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clojure$browser$net$transmit.cljs$core$IFn$_invoke$arity$2 = clojure$browser$net$transmit__2;
  clojure$browser$net$transmit.cljs$core$IFn$_invoke$arity$3 = clojure$browser$net$transmit__3;
  clojure$browser$net$transmit.cljs$core$IFn$_invoke$arity$4 = clojure$browser$net$transmit__4;
  clojure$browser$net$transmit.cljs$core$IFn$_invoke$arity$5 = clojure$browser$net$transmit__5;
  clojure$browser$net$transmit.cljs$core$IFn$_invoke$arity$6 = clojure$browser$net$transmit__6;
  return clojure$browser$net$transmit;
}();
clojure.browser.net.close = function clojure$browser$net$close(this$) {
  if (function() {
    var and__4097__auto__ = this$;
    if (and__4097__auto__) {
      return this$.clojure$browser$net$IConnection$close$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return this$.clojure$browser$net$IConnection$close$arity$1(this$);
  } else {
    var x__4745__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4109__auto__ = clojure.browser.net.close[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = clojure.browser.net.close["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IConnection.close", this$);
        }
      }
    }().call(null, this$);
  }
};
goog.net.XhrIo.prototype.clojure$browser$event$IEventType$ = true;
goog.net.XhrIo.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
    return function(p__22282) {
      var vec__22283 = p__22282;
      var k = cljs.core.nth.call(null, vec__22283, 0, null);
      var v = cljs.core.nth.call(null, vec__22283, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
    };
  }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))));
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$ = true;
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$2 = function(this$, uri) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, "GET", null, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, uri, method) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, null, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$4 = function(this$, uri, method, content) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, content, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$5 = function(this$, uri, method, content, headers) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, content, headers, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$6 = function(this$, uri, method, content, headers, timeout) {
  var this$__$1 = this;
  this$__$1.setTimeoutInterval(timeout);
  return this$__$1.send(uri, method, content, headers);
};
clojure.browser.net.xpc_config_fields = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__22284) {
  var vec__22285 = p__22284;
  var k = cljs.core.nth.call(null, vec__22285, 0, null);
  var v = cljs.core.nth.call(null, vec__22285, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
}, cljs.core.js__GT_clj.call(null, goog.net.xpc.CfgFields)));
clojure.browser.net.xhr_connection = function clojure$browser$net$xhr_connection() {
  return new goog.net.XhrIo;
};
clojure.browser.net.ICrossPageChannel = function() {
  var obj22287 = {};
  return obj22287;
}();
clojure.browser.net.register_service = function() {
  var clojure$browser$net$register_service = null;
  var clojure$browser$net$register_service__3 = function(this$, service_name, fn) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3(this$, service_name, fn);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = clojure.browser.net.register_service[goog.typeOf(x__4745__auto__)];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = clojure.browser.net.register_service["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
          }
        }
      }().call(null, this$, service_name, fn);
    }
  };
  var clojure$browser$net$register_service__4 = function(this$, service_name, fn, encode_json_QMARK_) {
    if (function() {
      var and__4097__auto__ = this$;
      if (and__4097__auto__) {
        return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4;
      } else {
        return and__4097__auto__;
      }
    }()) {
      return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4(this$, service_name, fn, encode_json_QMARK_);
    } else {
      var x__4745__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4109__auto__ = clojure.browser.net.register_service[goog.typeOf(x__4745__auto__)];
        if (or__4109__auto__) {
          return or__4109__auto__;
        } else {
          var or__4109__auto____$1 = clojure.browser.net.register_service["_"];
          if (or__4109__auto____$1) {
            return or__4109__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
          }
        }
      }().call(null, this$, service_name, fn, encode_json_QMARK_);
    }
  };
  clojure$browser$net$register_service = function(this$, service_name, fn, encode_json_QMARK_) {
    switch(arguments.length) {
      case 3:
        return clojure$browser$net$register_service__3.call(this, this$, service_name, fn);
      case 4:
        return clojure$browser$net$register_service__4.call(this, this$, service_name, fn, encode_json_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clojure$browser$net$register_service.cljs$core$IFn$_invoke$arity$3 = clojure$browser$net$register_service__3;
  clojure$browser$net$register_service.cljs$core$IFn$_invoke$arity$4 = clojure$browser$net$register_service__4;
  return clojure$browser$net$register_service;
}();
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$ = true;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$1 = function(this$) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, null);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$2 = function(this$, on_connect_fn) {
  var this$__$1 = this;
  return this$__$1.connect(on_connect_fn);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$3 = function(this$, on_connect_fn, config_iframe_fn) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, on_connect_fn, config_iframe_fn, document.body);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$4 = function(this$, on_connect_fn, config_iframe_fn, iframe_parent) {
  var this$__$1 = this;
  this$__$1.createPeerIframe(iframe_parent, config_iframe_fn);
  return this$__$1.connect(on_connect_fn);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, service_name, payload) {
  var this$__$1 = this;
  return this$__$1.send(cljs.core.name.call(null, service_name), payload);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$close$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.close();
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$ = true;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$3 = function(this$, service_name, fn) {
  var this$__$1 = this;
  return clojure.browser.net.register_service.call(null, this$__$1, service_name, fn, false);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$4 = function(this$, service_name, fn, encode_json_QMARK_) {
  var this$__$1 = this;
  return this$__$1.registerService(cljs.core.name.call(null, service_name), fn, encode_json_QMARK_);
};
clojure.browser.net.xpc_connection = function() {
  var clojure$browser$net$xpc_connection = null;
  var clojure$browser$net$xpc_connection__0 = function() {
    var temp__4126__auto__ = (new goog.Uri(window.location.href)).getParameterValue("xpc");
    if (cljs.core.truth_(temp__4126__auto__)) {
      var config = temp__4126__auto__;
      return new goog.net.xpc.CrossPageChannel(goog.json.parse(config));
    } else {
      return null;
    }
  };
  var clojure$browser$net$xpc_connection__1 = function(config) {
    return new goog.net.xpc.CrossPageChannel(cljs.core.reduce.call(null, function(sum, p__22293) {
      var vec__22294 = p__22293;
      var k = cljs.core.nth.call(null, vec__22294, 0, null);
      var v = cljs.core.nth.call(null, vec__22294, 1, null);
      var temp__4124__auto__ = cljs.core.get.call(null, clojure.browser.net.xpc_config_fields, k);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var field = temp__4124__auto__;
        var G__22295 = sum;
        G__22295[field] = v;
        return G__22295;
      } else {
        return sum;
      }
    }, function() {
      var obj22297 = {};
      return obj22297;
    }(), config));
  };
  clojure$browser$net$xpc_connection = function(config) {
    switch(arguments.length) {
      case 0:
        return clojure$browser$net$xpc_connection__0.call(this);
      case 1:
        return clojure$browser$net$xpc_connection__1.call(this, config);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clojure$browser$net$xpc_connection.cljs$core$IFn$_invoke$arity$0 = clojure$browser$net$xpc_connection__0;
  clojure$browser$net$xpc_connection.cljs$core$IFn$_invoke$arity$1 = clojure$browser$net$xpc_connection__1;
  return clojure$browser$net$xpc_connection;
}();
clojure.browser.net.IWebSocket = function() {
  var obj22299 = {};
  return obj22299;
}();
clojure.browser.net.open_QMARK_ = function clojure$browser$net$open_QMARK_(this$) {
  if (function() {
    var and__4097__auto__ = this$;
    if (and__4097__auto__) {
      return this$.clojure$browser$net$IWebSocket$open_QMARK_$arity$1;
    } else {
      return and__4097__auto__;
    }
  }()) {
    return this$.clojure$browser$net$IWebSocket$open_QMARK_$arity$1(this$);
  } else {
    var x__4745__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4109__auto__ = clojure.browser.net.open_QMARK_[goog.typeOf(x__4745__auto__)];
      if (or__4109__auto__) {
        return or__4109__auto__;
      } else {
        var or__4109__auto____$1 = clojure.browser.net.open_QMARK_["_"];
        if (or__4109__auto____$1) {
          return or__4109__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWebSocket.open?", this$);
        }
      }
    }().call(null, this$);
  }
};
goog.net.WebSocket.prototype.clojure$browser$event$IEventType$ = true;
goog.net.WebSocket.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
    return function(p__22300) {
      var vec__22301 = p__22300;
      var k = cljs.core.nth.call(null, vec__22301, 0, null);
      var v = cljs.core.nth.call(null, vec__22301, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
    };
  }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.WebSocket.EventType))));
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$ = true;
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$connect$arity$2 = function(this$, url) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, url, null);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$connect$arity$3 = function(this$, url, protocol) {
  var this$__$1 = this;
  return this$__$1.open(url, protocol);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$transmit$arity$2 = function(this$, message) {
  var this$__$1 = this;
  return this$__$1.send(message);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$close$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.close(cljs.core.List.EMPTY);
};
goog.net.WebSocket.prototype.clojure$browser$net$IWebSocket$ = true;
goog.net.WebSocket.prototype.clojure$browser$net$IWebSocket$open_QMARK_$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.isOpen(cljs.core.List.EMPTY);
};
clojure.browser.net.websocket_connection = function() {
  var clojure$browser$net$websocket_connection = null;
  var clojure$browser$net$websocket_connection__0 = function() {
    return clojure$browser$net$websocket_connection.call(null, null, null);
  };
  var clojure$browser$net$websocket_connection__1 = function(auto_reconnect_QMARK_) {
    return clojure$browser$net$websocket_connection.call(null, auto_reconnect_QMARK_, null);
  };
  var clojure$browser$net$websocket_connection__2 = function(auto_reconnect_QMARK_, next_reconnect_fn) {
    return new goog.net.WebSocket(auto_reconnect_QMARK_, next_reconnect_fn);
  };
  clojure$browser$net$websocket_connection = function(auto_reconnect_QMARK_, next_reconnect_fn) {
    switch(arguments.length) {
      case 0:
        return clojure$browser$net$websocket_connection__0.call(this);
      case 1:
        return clojure$browser$net$websocket_connection__1.call(this, auto_reconnect_QMARK_);
      case 2:
        return clojure$browser$net$websocket_connection__2.call(this, auto_reconnect_QMARK_, next_reconnect_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clojure$browser$net$websocket_connection.cljs$core$IFn$_invoke$arity$0 = clojure$browser$net$websocket_connection__0;
  clojure$browser$net$websocket_connection.cljs$core$IFn$_invoke$arity$1 = clojure$browser$net$websocket_connection__1;
  clojure$browser$net$websocket_connection.cljs$core$IFn$_invoke$arity$2 = clojure$browser$net$websocket_connection__2;
  return clojure$browser$net$websocket_connection;
}();
goog.provide("cljs.repl");
goog.require("cljs.core");
cljs.repl.print_doc = function cljs$repl$print_doc(m) {
  cljs.core.println.call(null, "-------------------------");
  cljs.core.println.call(null, [cljs.core.str(function() {
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(m);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var ns = temp__4126__auto__;
      return[cljs.core.str(ns), cljs.core.str("/")].join("");
    } else {
      return null;
    }
  }()), cljs.core.str((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(m))].join(""));
  if (cljs.core.truth_((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(m))) {
    cljs.core.println.call(null, "Protocol");
  } else {
  }
  if (cljs.core.truth_((new cljs.core.Keyword(null, "forms", "forms", 2045992350)).cljs$core$IFn$_invoke$arity$1(m))) {
    var seq__22231_22243 = cljs.core.seq.call(null, (new cljs.core.Keyword(null, "forms", "forms", 2045992350)).cljs$core$IFn$_invoke$arity$1(m));
    var chunk__22232_22244 = null;
    var count__22233_22245 = 0;
    var i__22234_22246 = 0;
    while (true) {
      if (i__22234_22246 < count__22233_22245) {
        var f_22247 = cljs.core._nth.call(null, chunk__22232_22244, i__22234_22246);
        cljs.core.println.call(null, "  ", f_22247);
        var G__22248 = seq__22231_22243;
        var G__22249 = chunk__22232_22244;
        var G__22250 = count__22233_22245;
        var G__22251 = i__22234_22246 + 1;
        seq__22231_22243 = G__22248;
        chunk__22232_22244 = G__22249;
        count__22233_22245 = G__22250;
        i__22234_22246 = G__22251;
        continue;
      } else {
        var temp__4126__auto___22252 = cljs.core.seq.call(null, seq__22231_22243);
        if (temp__4126__auto___22252) {
          var seq__22231_22253__$1 = temp__4126__auto___22252;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22231_22253__$1)) {
            var c__4894__auto___22254 = cljs.core.chunk_first.call(null, seq__22231_22253__$1);
            var G__22255 = cljs.core.chunk_rest.call(null, seq__22231_22253__$1);
            var G__22256 = c__4894__auto___22254;
            var G__22257 = cljs.core.count.call(null, c__4894__auto___22254);
            var G__22258 = 0;
            seq__22231_22243 = G__22255;
            chunk__22232_22244 = G__22256;
            count__22233_22245 = G__22257;
            i__22234_22246 = G__22258;
            continue;
          } else {
            var f_22259 = cljs.core.first.call(null, seq__22231_22253__$1);
            cljs.core.println.call(null, "  ", f_22259);
            var G__22260 = cljs.core.next.call(null, seq__22231_22253__$1);
            var G__22261 = null;
            var G__22262 = 0;
            var G__22263 = 0;
            seq__22231_22243 = G__22260;
            chunk__22232_22244 = G__22261;
            count__22233_22245 = G__22262;
            i__22234_22246 = G__22263;
            continue;
          }
        } else {
        }
      }
      break;
    }
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "arglists", "arglists", 1661989754)).cljs$core$IFn$_invoke$arity$1(m))) {
      if (cljs.core.truth_(function() {
        var or__4109__auto__ = (new cljs.core.Keyword(null, "macro", "macro", -867863404)).cljs$core$IFn$_invoke$arity$1(m);
        if (cljs.core.truth_(or__4109__auto__)) {
          return or__4109__auto__;
        } else {
          return(new cljs.core.Keyword(null, "repl-special-function", "repl-special-function", 1262603725)).cljs$core$IFn$_invoke$arity$1(m);
        }
      }())) {
        cljs.core.prn.call(null, (new cljs.core.Keyword(null, "arglists", "arglists", 1661989754)).cljs$core$IFn$_invoke$arity$1(m));
      } else {
        cljs.core.prn.call(null, cljs.core.second.call(null, (new cljs.core.Keyword(null, "arglists", "arglists", 1661989754)).cljs$core$IFn$_invoke$arity$1(m)));
      }
    } else {
    }
  }
  if (cljs.core.truth_((new cljs.core.Keyword(null, "special-form", "special-form", -1326536374)).cljs$core$IFn$_invoke$arity$1(m))) {
    cljs.core.println.call(null, "Special Form");
    cljs.core.println.call(null, " ", (new cljs.core.Keyword(null, "doc", "doc", 1913296891)).cljs$core$IFn$_invoke$arity$1(m));
    if (cljs.core.contains_QMARK_.call(null, m, new cljs.core.Keyword(null, "url", "url", 276297046))) {
      if (cljs.core.truth_((new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(m))) {
        return cljs.core.println.call(null, [cljs.core.str("\n  Please see http://clojure.org/"), cljs.core.str((new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(m))].join(""));
      } else {
        return null;
      }
    } else {
      return cljs.core.println.call(null, [cljs.core.str("\n  Please see http://clojure.org/special_forms#"), cljs.core.str((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(m))].join(""));
    }
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "macro", "macro", -867863404)).cljs$core$IFn$_invoke$arity$1(m))) {
      cljs.core.println.call(null, "Macro");
    } else {
    }
    if (cljs.core.truth_((new cljs.core.Keyword(null, "repl-special-function", "repl-special-function", 1262603725)).cljs$core$IFn$_invoke$arity$1(m))) {
      cljs.core.println.call(null, "REPL Special Function");
    } else {
    }
    cljs.core.println.call(null, " ", (new cljs.core.Keyword(null, "doc", "doc", 1913296891)).cljs$core$IFn$_invoke$arity$1(m));
    if (cljs.core.truth_((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(m))) {
      var seq__22235 = cljs.core.seq.call(null, (new cljs.core.Keyword(null, "methods", "methods", 453930866)).cljs$core$IFn$_invoke$arity$1(m));
      var chunk__22236 = null;
      var count__22237 = 0;
      var i__22238 = 0;
      while (true) {
        if (i__22238 < count__22237) {
          var vec__22239 = cljs.core._nth.call(null, chunk__22236, i__22238);
          var name = cljs.core.nth.call(null, vec__22239, 0, null);
          var map__22240 = cljs.core.nth.call(null, vec__22239, 1, null);
          var map__22240__$1 = cljs.core.seq_QMARK_.call(null, map__22240) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22240) : map__22240;
          var arglists = cljs.core.get.call(null, map__22240__$1, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754));
          var doc = cljs.core.get.call(null, map__22240__$1, new cljs.core.Keyword(null, "doc", "doc", 1913296891));
          cljs.core.println.call(null);
          cljs.core.println.call(null, " ", name);
          cljs.core.println.call(null, " ", arglists);
          if (cljs.core.truth_(doc)) {
            cljs.core.println.call(null, " ", doc);
          } else {
          }
          var G__22264 = seq__22235;
          var G__22265 = chunk__22236;
          var G__22266 = count__22237;
          var G__22267 = i__22238 + 1;
          seq__22235 = G__22264;
          chunk__22236 = G__22265;
          count__22237 = G__22266;
          i__22238 = G__22267;
          continue;
        } else {
          var temp__4126__auto__ = cljs.core.seq.call(null, seq__22235);
          if (temp__4126__auto__) {
            var seq__22235__$1 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__22235__$1)) {
              var c__4894__auto__ = cljs.core.chunk_first.call(null, seq__22235__$1);
              var G__22268 = cljs.core.chunk_rest.call(null, seq__22235__$1);
              var G__22269 = c__4894__auto__;
              var G__22270 = cljs.core.count.call(null, c__4894__auto__);
              var G__22271 = 0;
              seq__22235 = G__22268;
              chunk__22236 = G__22269;
              count__22237 = G__22270;
              i__22238 = G__22271;
              continue;
            } else {
              var vec__22241 = cljs.core.first.call(null, seq__22235__$1);
              var name = cljs.core.nth.call(null, vec__22241, 0, null);
              var map__22242 = cljs.core.nth.call(null, vec__22241, 1, null);
              var map__22242__$1 = cljs.core.seq_QMARK_.call(null, map__22242) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22242) : map__22242;
              var arglists = cljs.core.get.call(null, map__22242__$1, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754));
              var doc = cljs.core.get.call(null, map__22242__$1, new cljs.core.Keyword(null, "doc", "doc", 1913296891));
              cljs.core.println.call(null);
              cljs.core.println.call(null, " ", name);
              cljs.core.println.call(null, " ", arglists);
              if (cljs.core.truth_(doc)) {
                cljs.core.println.call(null, " ", doc);
              } else {
              }
              var G__22272 = cljs.core.next.call(null, seq__22235__$1);
              var G__22273 = null;
              var G__22274 = 0;
              var G__22275 = 0;
              seq__22235 = G__22272;
              chunk__22236 = G__22273;
              count__22237 = G__22274;
              i__22238 = G__22275;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    } else {
      return null;
    }
  }
};
goog.provide("clojure.browser.repl");
goog.require("cljs.core");
goog.require("cljs.repl");
goog.require("clojure.browser.event");
goog.require("clojure.browser.net");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.dom");
clojure.browser.repl.xpc_connection = cljs.core.atom.call(null, null);
clojure.browser.repl.repl_print = function clojure$browser$repl$repl_print(data) {
  var temp__4124__auto__ = cljs.core.deref.call(null, clojure.browser.repl.xpc_connection);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var conn = temp__4124__auto__;
    return clojure.browser.net.transmit.call(null, conn, new cljs.core.Keyword(null, "print", "print", 1299562414), cljs.core.pr_str.call(null, data));
  } else {
    return null;
  }
};
clojure.browser.repl.get_ua_product = function clojure$browser$repl$get_ua_product() {
  if (cljs.core.truth_(goog.labs.userAgent.browser.isSafari())) {
    return new cljs.core.Keyword(null, "safari", "safari", 497115653);
  } else {
    if (cljs.core.truth_(goog.labs.userAgent.browser.isChrome())) {
      return new cljs.core.Keyword(null, "chrome", "chrome", 1718738387);
    } else {
      if (cljs.core.truth_(goog.labs.userAgent.browser.isFirefox())) {
        return new cljs.core.Keyword(null, "firefox", "firefox", 1283768880);
      } else {
        if (cljs.core.truth_(goog.labs.userAgent.browser.isIE())) {
          return new cljs.core.Keyword(null, "ie", "ie", 2038473780);
        } else {
          return null;
        }
      }
    }
  }
};
clojure.browser.repl.evaluate_javascript = function clojure$browser$repl$evaluate_javascript(conn, block) {
  var result = function() {
    try {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "success", "success", 1890645906), new cljs.core.Keyword(null, "value", "value", 305978217), [cljs.core.str(eval(block))].join("")], null);
    } catch (e22201) {
      var e = e22201;
      return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "exception", "exception", -335277064), new cljs.core.Keyword(null, "ua-product", "ua-product", 938384227), clojure.browser.repl.get_ua_product.call(null), new cljs.core.Keyword(null, "value", "value", 305978217), [cljs.core.str(e)].join(""), new cljs.core.Keyword(null, "stacktrace", "stacktrace", -95588394), cljs.core.truth_(e.hasOwnProperty("stack")) ? 
      e.stack : "No stacktrace available."], null);
    }
  }();
  return cljs.core.pr_str.call(null, result);
};
clojure.browser.repl.send_result = function clojure$browser$repl$send_result(connection, url, data) {
  return clojure.browser.net.transmit.call(null, connection, url, "POST", data, null, 0);
};
clojure.browser.repl.send_print = function() {
  var clojure$browser$repl$send_print = null;
  var clojure$browser$repl$send_print__2 = function(url, data) {
    return clojure$browser$repl$send_print.call(null, url, data, 0);
  };
  var clojure$browser$repl$send_print__3 = function(url, data, n) {
    var conn = clojure.browser.net.xhr_connection.call(null);
    clojure.browser.event.listen.call(null, conn, new cljs.core.Keyword(null, "error", "error", -978969032), function(conn) {
      return function(_) {
        if (n < 10) {
          return clojure$browser$repl$send_print.call(null, url, data, n + 1);
        } else {
          return console.log([cljs.core.str("Could not send "), cljs.core.str(data), cljs.core.str(" after "), cljs.core.str(n), cljs.core.str(" attempts.")].join(""));
        }
      };
    }(conn));
    return clojure.browser.net.transmit.call(null, conn, url, "POST", data, null, 0);
  };
  clojure$browser$repl$send_print = function(url, data, n) {
    switch(arguments.length) {
      case 2:
        return clojure$browser$repl$send_print__2.call(this, url, data);
      case 3:
        return clojure$browser$repl$send_print__3.call(this, url, data, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clojure$browser$repl$send_print.cljs$core$IFn$_invoke$arity$2 = clojure$browser$repl$send_print__2;
  clojure$browser$repl$send_print.cljs$core$IFn$_invoke$arity$3 = clojure$browser$repl$send_print__3;
  return clojure$browser$repl$send_print;
}();
clojure.browser.repl.order = cljs.core.atom.call(null, 0);
clojure.browser.repl.wrap_message = function clojure$browser$repl$wrap_message(t, data) {
  return cljs.core.pr_str.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), t, new cljs.core.Keyword(null, "content", "content", 15833224), data, new cljs.core.Keyword(null, "order", "order", -1254677256), cljs.core.swap_BANG_.call(null, clojure.browser.repl.order, cljs.core.inc)], null));
};
clojure.browser.repl.start_evaluator = function clojure$browser$repl$start_evaluator(url) {
  var temp__4124__auto__ = clojure.browser.net.xpc_connection.call(null);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var repl_connection = temp__4124__auto__;
    var connection = clojure.browser.net.xhr_connection.call(null);
    clojure.browser.event.listen.call(null, connection, new cljs.core.Keyword(null, "success", "success", 1890645906), function(connection, repl_connection, temp__4124__auto__) {
      return function(e) {
        return clojure.browser.net.transmit.call(null, repl_connection, new cljs.core.Keyword(null, "evaluate-javascript", "evaluate-javascript", -315749780), e.currentTarget.getResponseText(cljs.core.List.EMPTY));
      };
    }(connection, repl_connection, temp__4124__auto__));
    clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "send-result", "send-result", 35388249), function(connection, repl_connection, temp__4124__auto__) {
      return function(data) {
        return clojure.browser.repl.send_result.call(null, connection, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "result", "result", 1415092211), data));
      };
    }(connection, repl_connection, temp__4124__auto__));
    clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "print", "print", 1299562414), function(connection, repl_connection, temp__4124__auto__) {
      return function(data) {
        return clojure.browser.repl.send_print.call(null, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "print", "print", 1299562414), data));
      };
    }(connection, repl_connection, temp__4124__auto__));
    clojure.browser.net.connect.call(null, repl_connection, cljs.core.constantly.call(null, null));
    return setTimeout(function(connection, repl_connection, temp__4124__auto__) {
      return function() {
        return clojure.browser.repl.send_result.call(null, connection, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "ready", "ready", 1086465795), "ready"));
      };
    }(connection, repl_connection, temp__4124__auto__), 50);
  } else {
    return alert("No 'xpc' param provided to child iframe.");
  }
};
clojure.browser.repl.load_queue = null;
clojure.browser.repl.bootstrap = function clojure$browser$repl$bootstrap() {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    goog.require__ = goog.require;
    goog.isProvided_ = function(name) {
      return false;
    };
    goog.writeScriptTag__ = function(src, opt_sourceText) {
      var loaded = cljs.core.atom.call(null, false);
      var onload = function(loaded) {
        return function() {
          if (cljs.core.truth_(function() {
            var and__4097__auto__ = clojure.browser.repl.load_queue;
            if (cljs.core.truth_(and__4097__auto__)) {
              return cljs.core.deref.call(null, loaded) === false;
            } else {
              return and__4097__auto__;
            }
          }())) {
            cljs.core.swap_BANG_.call(null, loaded, cljs.core.not);
            if (clojure.browser.repl.load_queue.length === 0) {
              return clojure.browser.repl.load_queue = null;
            } else {
              return goog.writeScriptTag__.apply(null, clojure.browser.repl.load_queue.shift());
            }
          } else {
            return null;
          }
        };
      }(loaded);
      return document.body.appendChild(function() {
        var script = document.createElement("script");
        var script__$1 = function() {
          var G__22205 = script;
          G__22205["type"] = "text/javascript";
          G__22205["onload"] = onload;
          G__22205["onreadystatechange"] = onload;
          return G__22205;
        }();
        var script__$2 = opt_sourceText == null ? function() {
          var G__22206 = script__$1;
          G__22206["src"] = src;
          return G__22206;
        }() : function() {
          var G__22207 = script__$1;
          goog.dom.setTextContext(G__22207, opt_sourceText);
          return G__22207;
        }();
        return script__$2;
      }());
    };
    goog.writeScriptTag_ = function(src, opt_sourceText) {
      if (cljs.core.truth_(clojure.browser.repl.load_queue)) {
        return clojure.browser.repl.load_queue.push([src, opt_sourceText]);
      } else {
        clojure.browser.repl.load_queue = [];
        return goog.writeScriptTag__(src, opt_sourceText);
      }
    };
    return goog.require = function(src, reload) {
      if (cljs.core._EQ_.call(null, reload, "reload-all")) {
        goog.cljsReloadAll_ = true;
      } else {
      }
      var reload_QMARK_ = function() {
        var or__4109__auto__ = reload;
        if (cljs.core.truth_(or__4109__auto__)) {
          return or__4109__auto__;
        } else {
          return goog.cljsReloadAll__;
        }
      }();
      if (cljs.core.truth_(reload_QMARK_)) {
        var path_22208 = goog.dependencies_.nameToPath[src];
        delete goog.dependencies_.visited[path_22208];
        delete goog.dependencies_.written[[cljs.core.str(goog.basePath), cljs.core.str(path_22208)].join("")];
      } else {
      }
      var ret = goog.require__(src);
      if (cljs.core._EQ_.call(null, reload, "reload-all")) {
        goog.cljsReloadAll_ = false;
      } else {
      }
      return ret;
    };
  }
};
clojure.browser.repl.connect = function clojure$browser$repl$connect(repl_server_url) {
  var repl_connection = clojure.browser.net.xpc_connection.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "peer_uri", "peer_uri", 910305997), repl_server_url], null));
  cljs.core.swap_BANG_.call(null, clojure.browser.repl.xpc_connection, cljs.core.constantly.call(null, repl_connection));
  clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "evaluate-javascript", "evaluate-javascript", -315749780), function(repl_connection) {
    return function(js) {
      return clojure.browser.net.transmit.call(null, repl_connection, new cljs.core.Keyword(null, "send-result", "send-result", 35388249), clojure.browser.repl.evaluate_javascript.call(null, repl_connection, js));
    };
  }(repl_connection));
  clojure.browser.net.connect.call(null, repl_connection, cljs.core.constantly.call(null, null), function(repl_connection) {
    return function(iframe) {
      return iframe.style.display = "none";
    };
  }(repl_connection));
  clojure.browser.repl.bootstrap.call(null);
  return repl_connection;
};
goog.provide("centipair.connect");
goog.require("cljs.core");
goog.require("clojure.browser.repl");
clojure.browser.repl.connect.call(null, "http://localhost:9000/repl");
goog.provide("centipair.core.components.table");
goog.require("cljs.core");
centipair.core.components.table.per_page = 50;
centipair.core.components.table.search_list_bar = function centipair$core$components$table$search_list_bar(table_data) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "action-bar"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "form", "form", -1624062471), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 
  -2030961996), "form-horizontal"], null), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "form-group"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "class", "class", -2030961996), "col-sm-4"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), "search", new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083), "Search list", new cljs.core.Keyword(null, "class", "class", -2030961996), "form-control"], null)], null)], null), new cljs.core.PersistentVector(null, 
  3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "col-sm-1"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "btn btn-default"], null), "Search"], 
  null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "col-sm-1"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "href", "href", -793805698), 
  [cljs.core.str("#/"), cljs.core.str((new cljs.core.Keyword(null, "entity", "entity", -450970276)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "create", "create", -1301499256)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, table_data)))), cljs.core.str("/create")].join(""), new cljs.core.Keyword(null, "class", "class", -2030961996), "btn btn-primary"], null), "Create"], null)], null)], null)], null)], null);
};
centipair.core.components.table.page_numbers = function centipair$core$components$table$page_numbers(total) {
  if (centipair.core.components.table.per_page > total) {
    return 1;
  } else {
    if (cljs.core.mod.call(null, total, centipair.core.components.table.per_page) > 0) {
      return 1 + cljs.core.quot.call(null, total, centipair.core.components.table.per_page);
    } else {
      return cljs.core.quot.call(null, total, centipair.core.components.table.per_page);
    }
  }
};
centipair.core.components.table.page_button = function centipair$core$components$table$page_button(table_data, page_count) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), cljs.core._EQ_.call(null, page_count, (new cljs.core.Keyword(null, "page", "page", 849072397)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, table_data))) ? "active" : ""], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "a", "a", -2123407586), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), [cljs.core.str("#"), cljs.core.str((new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, table_data))), cljs.core.str("/"), cljs.core.str([cljs.core.str(page_count)].join(""))].join("")], null), [cljs.core.str(page_count)].join("")], null)], null);
};
centipair.core.components.table.previous_button_disabled_QMARK_ = function centipair$core$components$table$previous_button_disabled_QMARK_(table_data) {
  return(new cljs.core.Keyword(null, "page", "page", 849072397)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, table_data)) <= 0;
};
centipair.core.components.table.previous_button = function centipair$core$components$table$previous_button(table_data) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), centipair.core.components.table.previous_button_disabled_QMARK_.call(null, table_data) ? "disabled" : ""], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "href", "href", -793805698), centipair.core.components.table.previous_button_disabled_QMARK_.call(null, table_data) ? [cljs.core.str("#"), cljs.core.str((new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, table_data))), cljs.core.str("/"), cljs.core.str([cljs.core.str((new cljs.core.Keyword(null, "page", "page", 849072397)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, table_data)))].join(""))].join("") : 
  [cljs.core.str("#"), cljs.core.str((new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, table_data))), cljs.core.str("/"), cljs.core.str([cljs.core.str((new cljs.core.Keyword(null, "page", "page", 849072397)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, table_data)) - 1)].join(""))].join("")], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 
  1394872991), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "aria-hidden", "aria-hidden", 399337029), "true"], null), "\x3c\x3c"], null)], null)], null);
};
centipair.core.components.table.next_button_disabled_QMARK_ = function centipair$core$components$table$next_button_disabled_QMARK_(table_data) {
  return(new cljs.core.Keyword(null, "page", "page", 849072397)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, table_data)) >= centipair.core.components.table.page_numbers.call(null, (new cljs.core.Keyword(null, "total", "total", 1916810418)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, table_data))) - 1;
};
centipair.core.components.table.next_button = function centipair$core$components$table$next_button(table_data) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), centipair.core.components.table.next_button_disabled_QMARK_.call(null, table_data) ? "disabled" : ""], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "href", "href", -793805698), centipair.core.components.table.next_button_disabled_QMARK_.call(null, table_data) ? [cljs.core.str("#"), cljs.core.str((new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, table_data))), cljs.core.str("/"), cljs.core.str([cljs.core.str((new cljs.core.Keyword(null, "page", "page", 849072397)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, table_data)))].join(""))].join("") : 
  [cljs.core.str("#"), cljs.core.str((new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, table_data))), cljs.core.str("/"), cljs.core.str([cljs.core.str((new cljs.core.Keyword(null, "page", "page", 849072397)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, table_data)) + 1)].join(""))].join("")], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 
  1394872991), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "aria-hidden", "aria-hidden", 399337029), "true"], null), "\x3e\x3e"], null)], null)], null);
};
centipair.core.components.table.data_table_pagination = function centipair$core$components$table$data_table_pagination(table_data) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "nav", "nav", 719540477), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ul", "ul", -1349521403), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "pagination"], null), centipair.core.components.table.previous_button.call(null, table_data), cljs.core.doall.call(null, 
  cljs.core.map.call(null, cljs.core.partial.call(null, centipair.core.components.table.page_button, table_data), cljs.core.range.call(null, centipair.core.components.table.page_numbers.call(null, (new cljs.core.Keyword(null, "total", "total", 1916810418)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, table_data)))))), centipair.core.components.table.next_button.call(null, table_data)], null)], null);
};
centipair.core.components.table.data_table = function centipair$core$components$table$data_table(table_data) {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), centipair.core.components.table.search_list_bar.call(null, table_data), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "table", "table", -564943036), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "table"], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "thead", "thead", -291875296), (new cljs.core.Keyword(null, "headers", "headers", -835030129)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, table_data))], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "tbody", "tbody", -80678300), (new cljs.core.Keyword(null, "rows", "rows", 850049680)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  table_data))], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), centipair.core.components.table.data_table_pagination.call(null, table_data)], null)], null);
};
centipair.core.components.table.generate_table_rows = function centipair$core$components$table$generate_table_rows(data_list, data_container, ui_function) {
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "page", "page", 849072397)).cljs$core$IFn$_invoke$arity$1(data_list), (new cljs.core.Keyword(null, "page", "page", 849072397)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, data_container)))) {
    var table_rows = cljs.core.doall.call(null, cljs.core.map.call(null, ui_function, (new cljs.core.Keyword(null, "result", "result", 1415092211)).cljs$core$IFn$_invoke$arity$1(data_list)));
    return cljs.core.swap_BANG_.call(null, data_container, cljs.core.assoc, new cljs.core.Keyword(null, "rows", "rows", 850049680), table_rows, new cljs.core.Keyword(null, "total", "total", 1916810418), (new cljs.core.Keyword(null, "total", "total", 1916810418)).cljs$core$IFn$_invoke$arity$1(data_list));
  } else {
    return null;
  }
};
